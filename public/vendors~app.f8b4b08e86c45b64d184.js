(window.webpackJsonp=window.webpackJsonp||[]).push([[2],[function(e,t,n){"use strict";e.exports=n(133)},function(e,t,n){"use strict";(function(e){var r=n(68),o=n.n(r),i=n(127),a=n.n(i),u=n(0),l=n.n(u),c=n(128),s=n(31),f=n(69),d=(n(18),n(131)),p=n(132),h=function(e,t){for(var n=[e[0]],r=0,o=t.length;r<o;r+=1)n.push(t[r],e[r+1]);return n},v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},m=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},y=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),g=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},b=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},w=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n},x=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},_=function(e){return"object"===(void 0===e?"undefined":v(e))&&e.constructor===Object},k=Object.freeze([]),E=Object.freeze({});function S(e){return"function"==typeof e}function C(e){return e.displayName||e.name||"Component"}function T(e){return e&&"string"==typeof e.styledComponentId}var j=void 0!==e&&(e.env.REACT_APP_SC_ATTR||e.env.SC_ATTR)||"data-styled",O="undefined"!=typeof window&&"HTMLElement"in window,F="boolean"==typeof SC_DISABLE_SPEEDY&&SC_DISABLE_SPEEDY||void 0!==e&&(e.env.REACT_APP_SC_DISABLE_SPEEDY||e.env.SC_DISABLE_SPEEDY)||!1;var P=function(e){function t(n){m(this,t);for(var r=arguments.length,o=Array(r>1?r-1:0),i=1;i<r;i++)o[i-1]=arguments[i];var a=x(this,e.call(this,"An error occurred. See https://github.com/styled-components/styled-components/blob/master/packages/styled-components/src/utils/errors.md#"+n+" for more information."+(o.length>0?" Additional arguments: "+o.join(", "):"")));return x(a)}return b(t,e),t}(Error),A=/^[^\S\n]*?\/\* sc-component-id:\s*(\S+)\s+\*\//gm,R=function(e){var t=""+(e||""),n=[];return t.replace(A,(function(e,t,r){return n.push({componentId:t,matchIndex:r}),e})),n.map((function(e,r){var o=e.componentId,i=e.matchIndex,a=n[r+1];return{componentId:o,cssFromDOM:a?t.slice(i,a.matchIndex):t.slice(i)}}))},N=/^\s*\/\/.*$/gm,M=new o.a({global:!1,cascade:!0,keyframe:!1,prefix:!1,compress:!1,semicolon:!0}),D=new o.a({global:!1,cascade:!0,keyframe:!1,prefix:!0,compress:!1,semicolon:!1}),I=[],z=function(e){if(-2===e){var t=I;return I=[],t}},U=a()((function(e){I.push(e)})),L=void 0,$=void 0,V=void 0,B=function(e,t,n){return t>0&&-1!==n.slice(0,t).indexOf($)&&n.slice(t-$.length,t)!==$?"."+L:e};D.use([function(e,t,n){2===e&&n.length&&n[0].lastIndexOf($)>0&&(n[0]=n[0].replace(V,B))},U,z]),M.use([U,z]);var W=function(e){return M("",e)};function H(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"&",o=e.join("").replace(N,""),i=t&&n?n+" "+t+" { "+o+" }":o;return L=r,$=t,V=new RegExp("\\"+$+"\\b","g"),D(n||!t?"":t,i)}var q=function(){return n.nc},Q=function(e,t,n){n&&((e[t]||(e[t]=Object.create(null)))[n]=!0)},Y=function(e,t){e[t]=Object.create(null)},K=function(e){return function(t,n){return void 0!==e[t]&&e[t][n]}},G=function(e){var t="";for(var n in e)t+=Object.keys(e[n]).join(" ")+" ";return t.trim()},X=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets.length,n=0;n<t;n+=1){var r=document.styleSheets[n];if(r.ownerNode===e)return r}throw new P(10)},Z=function(e,t,n){if(!t)return!1;var r=e.cssRules.length;try{e.insertRule(t,n<=r?n:r)}catch(e){return!1}return!0},J=function(e){return"\n/* sc-component-id: "+e+" */\n"},ee=function(e,t){for(var n=0,r=0;r<=t;r+=1)n+=e[r];return n},te=function(e,t){return function(n){var r=q();return"<style "+[r&&'nonce="'+r+'"',j+'="'+G(t)+'"','data-styled-version="4.3.2"',n].filter(Boolean).join(" ")+">"+e()+"</style>"}},ne=function(e,t){return function(){var n,r=((n={})[j]=G(t),n["data-styled-version"]="4.3.2",n),o=q();return o&&(r.nonce=o),l.a.createElement("style",g({},r,{dangerouslySetInnerHTML:{__html:e()}}))}},re=function(e){return function(){return Object.keys(e)}},oe=function(e){return document.createTextNode(J(e))},ie=function e(t,n){var r=void 0===t?Object.create(null):t,o=void 0===n?Object.create(null):n,i=function(e){var t=o[e];return void 0!==t?t:o[e]=[""]},a=function(){var e="";for(var t in o){var n=o[t][0];n&&(e+=J(t)+n)}return e};return{clone:function(){var t=function(e){var t=Object.create(null);for(var n in e)t[n]=g({},e[n]);return t}(r),n=Object.create(null);for(var i in o)n[i]=[o[i][0]];return e(t,n)},css:a,getIds:re(o),hasNameForId:K(r),insertMarker:i,insertRules:function(e,t,n){i(e)[0]+=t.join(" "),Q(r,e,n)},removeRules:function(e){var t=o[e];void 0!==t&&(t[0]="",Y(r,e))},sealed:!1,styleTag:null,toElement:ne(a,r),toHTML:te(a,r)}},ae=function(e,t,n,r,o){if(O&&!n){var i=function(e,t,n){var r=document.createElement("style");r.setAttribute(j,""),r.setAttribute("data-styled-version","4.3.2");var o=q();if(o&&r.setAttribute("nonce",o),r.appendChild(document.createTextNode("")),e&&!t)e.appendChild(r);else{if(!t||!e||!t.parentNode)throw new P(6);t.parentNode.insertBefore(r,n?t:t.nextSibling)}return r}(e,t,r);return F?function(e,t){var n=Object.create(null),r=Object.create(null),o=void 0!==t,i=!1,a=function(t){var o=r[t];return void 0!==o?o:(r[t]=oe(t),e.appendChild(r[t]),n[t]=Object.create(null),r[t])},u=function(){var e="";for(var t in r)e+=r[t].data;return e};return{clone:function(){throw new P(5)},css:u,getIds:re(r),hasNameForId:K(n),insertMarker:a,insertRules:function(e,r,u){for(var l=a(e),c=[],s=r.length,f=0;f<s;f+=1){var d=r[f],p=o;if(p&&-1!==d.indexOf("@import"))c.push(d);else{p=!1;var h=f===s-1?"":" ";l.appendData(""+d+h)}}Q(n,e,u),o&&c.length>0&&(i=!0,t().insertRules(e+"-import",c))},removeRules:function(a){var u=r[a];if(void 0!==u){var l=oe(a);e.replaceChild(l,u),r[a]=l,Y(n,a),o&&i&&t().removeRules(a+"-import")}},sealed:!1,styleTag:e,toElement:ne(u,n),toHTML:te(u,n)}}(i,o):function(e,t){var n=Object.create(null),r=Object.create(null),o=[],i=void 0!==t,a=!1,u=function(e){var t=r[e];return void 0!==t?t:(r[e]=o.length,o.push(0),Y(n,e),r[e])},l=function(){var t=X(e).cssRules,n="";for(var i in r){n+=J(i);for(var a=r[i],u=ee(o,a),l=u-o[a];l<u;l+=1){var c=t[l];void 0!==c&&(n+=c.cssText)}}return n};return{clone:function(){throw new P(5)},css:l,getIds:re(r),hasNameForId:K(n),insertMarker:u,insertRules:function(r,l,c){for(var s=u(r),f=X(e),d=ee(o,s),p=0,h=[],v=l.length,m=0;m<v;m+=1){var y=l[m],g=i;g&&-1!==y.indexOf("@import")?h.push(y):Z(f,y,d+p)&&(g=!1,p+=1)}i&&h.length>0&&(a=!0,t().insertRules(r+"-import",h)),o[s]+=p,Q(n,r,c)},removeRules:function(u){var l=r[u];if(void 0!==l){var c=o[l];!function(e,t,n){for(var r=t-n,o=t;o>r;o-=1)e.deleteRule(o)}(X(e),ee(o,l)-1,c),o[l]=0,Y(n,u),i&&a&&t().removeRules(u+"-import")}},sealed:!1,styleTag:e,toElement:ne(l,n),toHTML:te(l,n)}}(i,o)}return ie()},ue=/\s+/,le=void 0;le=O?F?40:1e3:-1;var ce=0,se=void 0,fe=function(){function e(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:O?document.head:null,r=arguments.length>1&&void 0!==arguments[1]&&arguments[1];m(this,e),this.getImportRuleTag=function(){var e=t.importRuleTag;if(void 0!==e)return e;var n=t.tags[0];return t.importRuleTag=ae(t.target,n?n.styleTag:null,t.forceServer,!0)},ce+=1,this.id=ce,this.forceServer=r,this.target=r?null:n,this.tagMap={},this.deferred={},this.rehydratedNames={},this.ignoreRehydratedNames={},this.tags=[],this.capacity=1,this.clones=[]}return e.prototype.rehydrate=function(){if(!O||this.forceServer)return this;var e=[],t=[],n=!1,r=document.querySelectorAll("style["+j+'][data-styled-version="4.3.2"]'),o=r.length;if(!o)return this;for(var i=0;i<o;i+=1){var a=r[i];n||(n=!!a.getAttribute("data-styled-streamed"));for(var u,l=(a.getAttribute(j)||"").trim().split(ue),c=l.length,s=0;s<c;s+=1)u=l[s],this.rehydratedNames[u]=!0;t.push.apply(t,R(a.textContent)),e.push(a)}var f=t.length;if(!f)return this;var d=this.makeTag(null);!function(e,t,n){for(var r=0,o=n.length;r<o;r+=1){var i=n[r],a=i.componentId,u=i.cssFromDOM,l=W(u);e.insertRules(a,l)}for(var c=0,s=t.length;c<s;c+=1){var f=t[c];f.parentNode&&f.parentNode.removeChild(f)}}(d,e,t),this.capacity=Math.max(1,le-f),this.tags.push(d);for(var p=0;p<f;p+=1)this.tagMap[t[p].componentId]=d;return this},e.reset=function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];se=new e(void 0,t).rehydrate()},e.prototype.clone=function(){var t=new e(this.target,this.forceServer);return this.clones.push(t),t.tags=this.tags.map((function(e){for(var n=e.getIds(),r=e.clone(),o=0;o<n.length;o+=1)t.tagMap[n[o]]=r;return r})),t.rehydratedNames=g({},this.rehydratedNames),t.deferred=g({},this.deferred),t},e.prototype.sealAllTags=function(){this.capacity=1,this.tags.forEach((function(e){e.sealed=!0}))},e.prototype.makeTag=function(e){var t=e?e.styleTag:null;return ae(this.target,t,this.forceServer,!1,this.getImportRuleTag)},e.prototype.getTagForId=function(e){var t=this.tagMap[e];if(void 0!==t&&!t.sealed)return t;var n=this.tags[this.tags.length-1];return this.capacity-=1,0===this.capacity&&(this.capacity=le,n=this.makeTag(n),this.tags.push(n)),this.tagMap[e]=n},e.prototype.hasId=function(e){return void 0!==this.tagMap[e]},e.prototype.hasNameForId=function(e,t){if(void 0===this.ignoreRehydratedNames[e]&&this.rehydratedNames[t])return!0;var n=this.tagMap[e];return void 0!==n&&n.hasNameForId(e,t)},e.prototype.deferredInject=function(e,t){if(void 0===this.tagMap[e]){for(var n=this.clones,r=0;r<n.length;r+=1)n[r].deferredInject(e,t);this.getTagForId(e).insertMarker(e),this.deferred[e]=t}},e.prototype.inject=function(e,t,n){for(var r=this.clones,o=0;o<r.length;o+=1)r[o].inject(e,t,n);var i=this.getTagForId(e);if(void 0!==this.deferred[e]){var a=this.deferred[e].concat(t);i.insertRules(e,a,n),this.deferred[e]=void 0}else i.insertRules(e,t,n)},e.prototype.remove=function(e){var t=this.tagMap[e];if(void 0!==t){for(var n=this.clones,r=0;r<n.length;r+=1)n[r].remove(e);t.removeRules(e),this.ignoreRehydratedNames[e]=!0,this.deferred[e]=void 0}},e.prototype.toHTML=function(){return this.tags.map((function(e){return e.toHTML()})).join("")},e.prototype.toReactElements=function(){var e=this.id;return this.tags.map((function(t,n){var r="sc-"+e+"-"+n;return Object(u.cloneElement)(t.toElement(),{key:r})}))},y(e,null,[{key:"master",get:function(){return se||(se=(new e).rehydrate())}},{key:"instance",get:function(){return e.master}}]),e}(),de=function(){function e(t,n){var r=this;m(this,e),this.inject=function(e){e.hasNameForId(r.id,r.name)||e.inject(r.id,r.rules,r.name)},this.toString=function(){throw new P(12,String(r.name))},this.name=t,this.rules=n,this.id="sc-keyframes-"+t}return e.prototype.getName=function(){return this.name},e}(),pe=/([A-Z])/g,he=/^ms-/;function ve(e){return e.replace(pe,"-$1").toLowerCase().replace(he,"-ms-")}var me=function(e){return null==e||!1===e||""===e},ye=function e(t,n){var r=[];return Object.keys(t).forEach((function(n){if(!me(t[n])){if(_(t[n]))return r.push.apply(r,e(t[n],n)),r;if(S(t[n]))return r.push(ve(n)+":",t[n],";"),r;r.push(ve(n)+": "+(o=n,null==(i=t[n])||"boolean"==typeof i||""===i?"":"number"!=typeof i||0===i||o in c.a?String(i).trim():i+"px")+";")}var o,i;return r})),n?[n+" {"].concat(r,["}"]):r};function ge(e,t,n){if(Array.isArray(e)){for(var r,o=[],i=0,a=e.length;i<a;i+=1)null!==(r=ge(e[i],t,n))&&(Array.isArray(r)?o.push.apply(o,r):o.push(r));return o}return me(e)?null:T(e)?"."+e.styledComponentId:S(e)?"function"!=typeof(u=e)||u.prototype&&u.prototype.isReactComponent||!t?e:ge(e(t),t,n):e instanceof de?n?(e.inject(n),e.getName()):e:_(e)?ye(e):e.toString();var u}function be(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return S(e)||_(e)?ge(h(k,[e].concat(n))):ge(h(e,n))}function we(e){for(var t,n=0|e.length,r=0|n,o=0;n>=4;)t=1540483477*(65535&(t=255&e.charCodeAt(o)|(255&e.charCodeAt(++o))<<8|(255&e.charCodeAt(++o))<<16|(255&e.charCodeAt(++o))<<24))+((1540483477*(t>>>16)&65535)<<16),r=1540483477*(65535&r)+((1540483477*(r>>>16)&65535)<<16)^(t=1540483477*(65535&(t^=t>>>24))+((1540483477*(t>>>16)&65535)<<16)),n-=4,++o;switch(n){case 3:r^=(255&e.charCodeAt(o+2))<<16;case 2:r^=(255&e.charCodeAt(o+1))<<8;case 1:r=1540483477*(65535&(r^=255&e.charCodeAt(o)))+((1540483477*(r>>>16)&65535)<<16)}return((r=1540483477*(65535&(r^=r>>>13))+((1540483477*(r>>>16)&65535)<<16))^r>>>15)>>>0}var xe=52,_e=function(e){return String.fromCharCode(e+(e>25?39:97))};function ke(e){var t="",n=void 0;for(n=e;n>xe;n=Math.floor(n/xe))t=_e(n%xe)+t;return _e(n%xe)+t}function Ee(e,t){for(var n=0;n<e.length;n+=1){var r=e[n];if(Array.isArray(r)&&!Ee(r,t))return!1;if(S(r)&&!T(r))return!1}return!t.some((function(e){return S(e)||function(e){for(var t in e)if(S(e[t]))return!0;return!1}(e)}))}var Se,Ce=!1,Te=function(e){return ke(we(e))},je=function(){function e(t,n,r){m(this,e),this.rules=t,this.isStatic=!Ce&&Ee(t,n),this.componentId=r,fe.master.hasId(r)||fe.master.deferredInject(r,[])}return e.prototype.generateAndInjectStyles=function(e,t){var n=this.isStatic,r=this.componentId,o=this.lastClassName;if(O&&n&&"string"==typeof o&&t.hasNameForId(r,o))return o;var i=ge(this.rules,e,t),a=Te(this.componentId+i.join(""));return t.hasNameForId(r,a)||t.inject(this.componentId,H(i,"."+a,void 0,r),a),this.lastClassName=a,a},e.generateName=function(e){return Te(e)},e}(),Oe=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:E,r=!!n&&e.theme===n.theme,o=e.theme&&!r?e.theme:t||n.theme;return o},Fe=/[[\].#*$><+~=|^:(),"'`-]+/g,Pe=/(^-|-$)/g;function Ae(e){return e.replace(Fe,"-").replace(Pe,"")}function Re(e){return"string"==typeof e&&!0}var Ne={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDerivedStateFromProps:!0,propTypes:!0,type:!0},Me={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},De=((Se={})[s.ForwardRef]={$$typeof:!0,render:!0},Se),Ie=Object.defineProperty,ze=Object.getOwnPropertyNames,Ue=Object.getOwnPropertySymbols,Le=void 0===Ue?function(){return[]}:Ue,$e=Object.getOwnPropertyDescriptor,Ve=Object.getPrototypeOf,Be=Object.prototype,We=Array.prototype;function He(e,t,n){if("string"!=typeof t){var r=Ve(t);r&&r!==Be&&He(e,r,n);for(var o=We.concat(ze(t),Le(t)),i=De[e.$$typeof]||Ne,a=De[t.$$typeof]||Ne,u=o.length,l=void 0,c=void 0;u--;)if(c=o[u],!(Me[c]||n&&n[c]||a&&a[c]||i&&i[c])&&(l=$e(t,c)))try{Ie(e,c,l)}catch(e){}return e}return e}var qe=Object(u.createContext)(),Qe=qe.Consumer,Ye=(function(e){function t(n){m(this,t);var r=x(this,e.call(this,n));return r.getContext=Object(f.a)(r.getContext.bind(r)),r.renderInner=r.renderInner.bind(r),r}b(t,e),t.prototype.render=function(){return this.props.children?l.a.createElement(qe.Consumer,null,this.renderInner):null},t.prototype.renderInner=function(e){var t=this.getContext(this.props.theme,e);return l.a.createElement(qe.Provider,{value:t},l.a.Children.only(this.props.children))},t.prototype.getTheme=function(e,t){if(S(e))return e(t);if(null===e||Array.isArray(e)||"object"!==(void 0===e?"undefined":v(e)))throw new P(8);return g({},t,e)},t.prototype.getContext=function(e,t){return this.getTheme(e,t)}}(u.Component),function(){function e(){m(this,e),this.masterSheet=fe.master,this.instance=this.masterSheet.clone(),this.sealed=!1}e.prototype.seal=function(){if(!this.sealed){var e=this.masterSheet.clones.indexOf(this.instance);this.masterSheet.clones.splice(e,1),this.sealed=!0}},e.prototype.collectStyles=function(e){if(this.sealed)throw new P(2);return l.a.createElement(Ge,{sheet:this.instance},e)},e.prototype.getStyleTags=function(){return this.seal(),this.instance.toHTML()},e.prototype.getStyleElement=function(){return this.seal(),this.instance.toReactElements()},e.prototype.interleaveWithNodeStream=function(e){throw new P(3)}}(),Object(u.createContext)()),Ke=Ye.Consumer,Ge=function(e){function t(n){m(this,t);var r=x(this,e.call(this,n));return r.getContext=Object(f.a)(r.getContext),r}return b(t,e),t.prototype.getContext=function(e,t){if(e)return e;if(t)return new fe(t);throw new P(4)},t.prototype.render=function(){var e=this.props,t=e.children,n=e.sheet,r=e.target;return l.a.createElement(Ye.Provider,{value:this.getContext(n,r)},t)},t}(u.Component),Xe={};var Ze=function(e){function t(){m(this,t);var n=x(this,e.call(this));return n.attrs={},n.renderOuter=n.renderOuter.bind(n),n.renderInner=n.renderInner.bind(n),n}return b(t,e),t.prototype.render=function(){return l.a.createElement(Ke,null,this.renderOuter)},t.prototype.renderOuter=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:fe.master;return this.styleSheet=e,this.props.forwardedComponent.componentStyle.isStatic?this.renderInner():l.a.createElement(Qe,null,this.renderInner)},t.prototype.renderInner=function(e){var t=this.props.forwardedComponent,n=t.componentStyle,r=t.defaultProps,o=(t.displayName,t.foldedComponentIds),i=t.styledComponentId,a=t.target,l=void 0;l=n.isStatic?this.generateAndInjectStyles(E,this.props):this.generateAndInjectStyles(Oe(this.props,e,r)||E,this.props);var c=this.props.as||this.attrs.as||a,s=Re(c),f={},p=g({},this.attrs,this.props),h=void 0;for(h in p)"forwardedComponent"!==h&&"as"!==h&&("forwardedRef"===h?f.ref=p[h]:"forwardedAs"===h?f.as=p[h]:s&&!Object(d.a)(h)||(f[h]=p[h]));return this.props.style&&this.attrs.style&&(f.style=g({},this.attrs.style,this.props.style)),f.className=Array.prototype.concat(o,this.props.className,i,this.attrs.className,l).filter(Boolean).join(" "),Object(u.createElement)(c,f)},t.prototype.buildExecutionContext=function(e,t,n){var r=this,o=g({},t,{theme:e});return n.length?(this.attrs={},n.forEach((function(e){var t,n=e,i=!1,a=void 0,u=void 0;for(u in S(n)&&(n=n(o),i=!0),n)a=n[u],i||!S(a)||(t=a)&&t.prototype&&t.prototype.isReactComponent||T(a)||(a=a(o)),r.attrs[u]=a,o[u]=a})),o):o},t.prototype.generateAndInjectStyles=function(e,t){var n=t.forwardedComponent,r=n.attrs,o=n.componentStyle;n.warnTooManyClasses;return o.isStatic&&!r.length?o.generateAndInjectStyles(E,this.styleSheet):o.generateAndInjectStyles(this.buildExecutionContext(e,t,r),this.styleSheet)},t}(u.Component);function Je(e,t,n){var r=T(e),o=!Re(e),i=t.displayName,a=void 0===i?function(e){return Re(e)?"styled."+e:"Styled("+C(e)+")"}(e):i,u=t.componentId,c=void 0===u?function(e,t,n){var r="string"!=typeof t?"sc":Ae(t),o=(Xe[r]||0)+1;Xe[r]=o;var i=r+"-"+e.generateName(r+o);return n?n+"-"+i:i}(je,t.displayName,t.parentComponentId):u,s=t.ParentComponent,f=void 0===s?Ze:s,d=t.attrs,h=void 0===d?k:d,v=t.displayName&&t.componentId?Ae(t.displayName)+"-"+t.componentId:t.componentId||c,m=r&&e.attrs?Array.prototype.concat(e.attrs,h).filter(Boolean):h,y=new je(r?e.componentStyle.rules.concat(n):n,m,v),b=void 0,x=function(e,t){return l.a.createElement(f,g({},e,{forwardedComponent:b,forwardedRef:t}))};return x.displayName=a,(b=l.a.forwardRef(x)).displayName=a,b.attrs=m,b.componentStyle=y,b.foldedComponentIds=r?Array.prototype.concat(e.foldedComponentIds,e.styledComponentId):k,b.styledComponentId=v,b.target=r?e.target:e,b.withComponent=function(e){var r=t.componentId,o=w(t,["componentId"]),i=r&&r+"-"+(Re(e)?e:Ae(C(e)));return Je(e,g({},o,{attrs:m,componentId:i,ParentComponent:f}),n)},Object.defineProperty(b,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(t){this._foldedDefaultProps=r?Object(p.a)(e.defaultProps,t):t}}),b.toString=function(){return"."+b.styledComponentId},o&&He(b,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,styledComponentId:!0,target:!0,withComponent:!0}),b}var et=function(e){return function e(t,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:E;if(!Object(s.isValidElementType)(n))throw new P(1,String(n));var o=function(){return t(n,r,be.apply(void 0,arguments))};return o.withConfig=function(o){return e(t,n,g({},r,o))},o.attrs=function(o){return e(t,n,g({},r,{attrs:Array.prototype.concat(r.attrs,o).filter(Boolean)}))},o}(Je,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){et[e]=et(e)}));!function(){function e(t,n){m(this,e),this.rules=t,this.componentId=n,this.isStatic=Ee(t,k),fe.master.hasId(n)||fe.master.deferredInject(n,[])}e.prototype.createStyles=function(e,t){var n=H(ge(this.rules,e,t),"");t.inject(this.componentId,n)},e.prototype.removeStyles=function(e){var t=this.componentId;e.hasId(t)&&e.remove(t)},e.prototype.renderStyles=function(e,t){this.removeStyles(t),this.createStyles(e,t)}}();O&&(window.scCGSHMRCache={});t.a=et}).call(this,n(74))},function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return r}))},function(e,t){e.exports=function(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";var r=n(44),o="object"==typeof self&&self&&self.Object===Object&&self,i=r.a||o||Function("return this")();t.a=i},function(e,t,n){"use strict";var r=n(75),o=n(144),i=Object.prototype.toString;function a(e){return"[object Array]"===i.call(e)}function u(e){return null!==e&&"object"==typeof e}function l(e){return"[object Function]"===i.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),a(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===i.call(e)},isBuffer:o,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:u,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===i.call(e)},isFile:function(e){return"[object File]"===i.call(e)},isBlob:function(e){return"[object Blob]"===i.call(e)},isFunction:l,isStream:function(e){return u(e)&&l(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:c,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,o=arguments.length;r<o;r++)c(arguments[r],n);return t},deepMerge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]="object"==typeof n?e({},n):n}for(var r=0,o=arguments.length;r<o;r++)c(arguments[r],n);return t},extend:function(e,t,n){return c(t,(function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){"use strict";var r=n(0),o=n.n(r),i=n(71),a=n.n(i),u=n(18),l=n.n(u),c=n(66),s=n.n(c),f=1073741823;var d=o.a.createContext||function(e,t){var n,o,i="__create-react-context-"+s()()+"__",u=function(e){function n(){var t,n,r;return(t=e.apply(this,arguments)||this).emitter=(n=t.props.value,r=[],{on:function(e){r.push(e)},off:function(e){r=r.filter((function(t){return t!==e}))},get:function(){return n},set:function(e,t){n=e,r.forEach((function(e){return e(n,t)}))}}),t}a()(n,e);var r=n.prototype;return r.getChildContext=function(){var e;return(e={})[i]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,o=e.value;((i=r)===(a=o)?0!==i||1/i==1/a:i!=i&&a!=a)?n=0:(n="function"==typeof t?t(r,o):f,0!==(n|=0)&&this.emitter.set(e.value,n))}var i,a},r.render=function(){return this.props.children},n}(r.Component);u.childContextTypes=((n={})[i]=l.a.object.isRequired,n);var c=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}a()(n,t);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?f:t},r.componentDidMount=function(){this.context[i]&&this.context[i].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?f:e},r.componentWillUnmount=function(){this.context[i]&&this.context[i].off(this.onUpdate)},r.getValue=function(){return this.context[i]?this.context[i].get():e},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(r.Component);return c.contextTypes=((o={})[i]=l.a.object,o),{Provider:u,Consumer:c}},p=n(9),h=n(8),v=n(7),m=n(72),y=n.n(m),g=n(2),b=(n(31),n(26)),w=n(32),x=n.n(w);n.d(t,"a",(function(){return j})),n.d(t,"b",(function(){return k})),n.d(t,"c",(function(){return N})),n.d(t,"e",(function(){return T})),n.d(t,"f",(function(){return M})),n.d(t,"d",(function(){return _}));var _=function(e){var t=d();return t.displayName=e,t}("Router"),k=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}Object(p.a)(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&this.unlisten()},n.render=function(){return o.a.createElement(_.Provider,{children:this.props.children||null,value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}})},t}(o.a.Component);o.a.Component;o.a.Component;var E={},S=1e4,C=0;function T(e,t){void 0===t&&(t={}),"string"==typeof t&&(t={path:t});var n=t,r=n.path,o=n.exact,i=void 0!==o&&o,a=n.strict,u=void 0!==a&&a,l=n.sensitive,c=void 0!==l&&l;return[].concat(r).reduce((function(t,n){if(!n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=E[n]||(E[n]={});if(r[e])return r[e];var o=[],i={regexp:y()(e,o,t),keys:o};return C<S&&(r[e]=i,C++),i}(n,{end:i,strict:u,sensitive:c}),o=r.regexp,a=r.keys,l=o.exec(e);if(!l)return null;var s=l[0],f=l.slice(1),d=e===s;return i&&!d?null:{path:n,url:"/"===n&&""===s?"/":s,isExact:d,params:a.reduce((function(e,t,n){return e[t.name]=f[n],e}),{})}}),null)}var j=function(e){function t(){return e.apply(this,arguments)||this}return Object(p.a)(t,e),t.prototype.render=function(){var e=this;return o.a.createElement(_.Consumer,null,(function(t){t||Object(v.a)(!1);var n=e.props.location||t.location,r=e.props.computedMatch?e.props.computedMatch:e.props.path?T(n.pathname,e.props):t.match,i=Object(g.a)({},t,{location:n,match:r}),a=e.props,u=a.children,l=a.component,c=a.render;(Array.isArray(u)&&0===u.length&&(u=null),"function"==typeof u)&&(void 0===(u=u(i))&&(u=null));return o.a.createElement(_.Provider,{value:i},u&&!function(e){return 0===o.a.Children.count(e)}(u)?u:i.match?l?o.a.createElement(l,i):c?c(i):null:null)}))},t}(o.a.Component);function O(e){return"/"===e.charAt(0)?e:"/"+e}function F(e,t){if(!e)return t;var n=O(e);return 0!==t.pathname.indexOf(n)?t:Object(g.a)({},t,{pathname:t.pathname.substr(n.length)})}function P(e){return"string"==typeof e?e:Object(h.e)(e)}function A(e){return function(){Object(v.a)(!1)}}function R(){}o.a.Component;var N=function(e){function t(){return e.apply(this,arguments)||this}return Object(p.a)(t,e),t.prototype.render=function(){var e=this;return o.a.createElement(_.Consumer,null,(function(t){t||Object(v.a)(!1);var n,r,i=e.props.location||t.location;return o.a.Children.forEach(e.props.children,(function(e){if(null==r&&o.a.isValidElement(e)){n=e;var a=e.props.path||e.props.from;r=a?T(i.pathname,Object(g.a)({},e.props,{path:a})):t.match}})),r?o.a.cloneElement(n,{location:i,computedMatch:r}):null}))},t}(o.a.Component);function M(e){var t="withRouter("+(e.displayName||e.name)+")",n=function(t){var n=t.wrappedComponentRef,r=Object(b.a)(t,["wrappedComponentRef"]);return o.a.createElement(_.Consumer,null,(function(t){return t||Object(v.a)(!1),o.a.createElement(e,Object(g.a)({},r,t,{ref:n}))}))};return n.displayName=t,n.WrappedComponent=e,x()(n,e)}},function(e,t,n){"use strict";var r=!0,o="Invariant failed";t.a=function(e,t){if(!e)throw r?new Error(o):new Error(o+": "+(t||""))}},function(e,t,n){"use strict";var r=n(2);function o(e){return"/"===e.charAt(0)}function i(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}var a=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],a=t&&t.split("/")||[],u=e&&o(e),l=t&&o(t),c=u||l;if(e&&o(e)?a=r:r.length&&(a.pop(),a=a.concat(r)),!a.length)return"/";if(a.length){var s=a[a.length-1];n="."===s||".."===s||""===s}else n=!1;for(var f=0,d=a.length;d>=0;d--){var p=a[d];"."===p?i(a,d):".."===p?(i(a,d),f++):f&&(i(a,d),f--)}if(!c)for(;f--;f)a.unshift("..");!c||""===a[0]||a[0]&&o(a[0])||a.unshift("");var h=a.join("/");return n&&"/"!==h.substr(-1)&&(h+="/"),h};function u(e){return e.valueOf?e.valueOf():Object.prototype.valueOf.call(e)}var l=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every((function(t,r){return e(t,n[r])}));if("object"==typeof t||"object"==typeof n){var r=u(t),o=u(n);return r!==t||o!==n?e(r,o):Object.keys(Object.assign({},t,n)).every((function(r){return e(t[r],n[r])}))}return!1},c=n(7);function s(e){return"/"===e.charAt(0)?e:"/"+e}function f(e){return"/"===e.charAt(0)?e.substr(1):e}function d(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function p(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function h(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function v(e,t,n,o){var i;"string"==typeof e?(i=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(i=Object(r.a)({},e)).pathname&&(i.pathname=""),i.search?"?"!==i.search.charAt(0)&&(i.search="?"+i.search):i.search="",i.hash?"#"!==i.hash.charAt(0)&&(i.hash="#"+i.hash):i.hash="",void 0!==t&&void 0===i.state&&(i.state=t));try{i.pathname=decodeURI(i.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+i.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(i.key=n),o?i.pathname?"/"!==i.pathname.charAt(0)&&(i.pathname=a(i.pathname,o.pathname)):i.pathname=o.pathname:i.pathname||(i.pathname="/"),i}function m(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&l(e.state,t.state)}function y(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var i="function"==typeof e?e(t,n):e;"string"==typeof i?"function"==typeof r?r(i,o):o(!0):o(!1!==i)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}n.d(t,"a",(function(){return k})),n.d(t,"b",(function(){return O})),n.d(t,"d",(function(){return P})),n.d(t,"c",(function(){return v})),n.d(t,"f",(function(){return m})),n.d(t,"e",(function(){return h}));var g=!("undefined"==typeof window||!window.document||!window.document.createElement);function b(e,t){t(window.confirm(e))}var w="popstate",x="hashchange";function _(){try{return window.history.state||{}}catch(e){return{}}}function k(e){void 0===e&&(e={}),g||Object(c.a)(!1);var t,n=window.history,o=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,i=!(-1===window.navigator.userAgent.indexOf("Trident")),a=e,u=a.forceRefresh,l=void 0!==u&&u,f=a.getUserConfirmation,m=void 0===f?b:f,k=a.keyLength,E=void 0===k?6:k,S=e.basename?p(s(e.basename)):"";function C(e){var t=e||{},n=t.key,r=t.state,o=window.location,i=o.pathname+o.search+o.hash;return S&&(i=d(i,S)),v(i,r,n)}function T(){return Math.random().toString(36).substr(2,E)}var j=y();function O(e){Object(r.a)($,e),$.length=n.length,j.notifyListeners($.location,$.action)}function F(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||R(C(e.state))}function P(){R(C(_()))}var A=!1;function R(e){if(A)A=!1,O();else{j.confirmTransitionTo(e,"POP",m,(function(t){t?O({action:"POP",location:e}):function(e){var t=$.location,n=M.indexOf(t.key);-1===n&&(n=0);var r=M.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(A=!0,I(o))}(e)}))}}var N=C(_()),M=[N.key];function D(e){return S+h(e)}function I(e){n.go(e)}var z=0;function U(e){1===(z+=e)&&1===e?(window.addEventListener(w,F),i&&window.addEventListener(x,P)):0===z&&(window.removeEventListener(w,F),i&&window.removeEventListener(x,P))}var L=!1;var $={length:n.length,action:"POP",location:N,createHref:D,push:function(e,t){var r=v(e,t,T(),$.location);j.confirmTransitionTo(r,"PUSH",m,(function(e){if(e){var t=D(r),i=r.key,a=r.state;if(o)if(n.pushState({key:i,state:a},null,t),l)window.location.href=t;else{var u=M.indexOf($.location.key),c=M.slice(0,u+1);c.push(r.key),M=c,O({action:"PUSH",location:r})}else window.location.href=t}}))},replace:function(e,t){var r=v(e,t,T(),$.location);j.confirmTransitionTo(r,"REPLACE",m,(function(e){if(e){var t=D(r),i=r.key,a=r.state;if(o)if(n.replaceState({key:i,state:a},null,t),l)window.location.replace(t);else{var u=M.indexOf($.location.key);-1!==u&&(M[u]=r.key),O({action:"REPLACE",location:r})}else window.location.replace(t)}}))},go:I,goBack:function(){I(-1)},goForward:function(){I(1)},block:function(e){void 0===e&&(e=!1);var t=j.setPrompt(e);return L||(U(1),L=!0),function(){return L&&(L=!1,U(-1)),t()}},listen:function(e){var t=j.appendListener(e);return U(1),function(){U(-1),t()}}};return $}var E="hashchange",S={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+f(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:f,decodePath:s},slash:{encodePath:s,decodePath:s}};function C(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function T(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function j(e){window.location.replace(C(window.location.href)+"#"+e)}function O(e){void 0===e&&(e={}),g||Object(c.a)(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),o=n.getUserConfirmation,i=void 0===o?b:o,a=n.hashType,u=void 0===a?"slash":a,l=e.basename?p(s(e.basename)):"",f=S[u],m=f.encodePath,w=f.decodePath;function x(){var e=w(T());return l&&(e=d(e,l)),v(e)}var _=y();function k(e){Object(r.a)(L,e),L.length=t.length,_.notifyListeners(L.location,L.action)}var O=!1,F=null;function P(){var e,t,n=T(),r=m(n);if(n!==r)j(r);else{var o=x(),a=L.location;if(!O&&(t=o,(e=a).pathname===t.pathname&&e.search===t.search&&e.hash===t.hash))return;if(F===h(o))return;F=null,function(e){if(O)O=!1,k();else{_.confirmTransitionTo(e,"POP",i,(function(t){t?k({action:"POP",location:e}):function(e){var t=L.location,n=M.lastIndexOf(h(t));-1===n&&(n=0);var r=M.lastIndexOf(h(e));-1===r&&(r=0);var o=n-r;o&&(O=!0,D(o))}(e)}))}}(o)}}var A=T(),R=m(A);A!==R&&j(R);var N=x(),M=[h(N)];function D(e){t.go(e)}var I=0;function z(e){1===(I+=e)&&1===e?window.addEventListener(E,P):0===I&&window.removeEventListener(E,P)}var U=!1;var L={length:t.length,action:"POP",location:N,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=C(window.location.href)),n+"#"+m(l+h(e))},push:function(e,t){var n=v(e,void 0,void 0,L.location);_.confirmTransitionTo(n,"PUSH",i,(function(e){if(e){var t=h(n),r=m(l+t);if(T()!==r){F=t,function(e){window.location.hash=e}(r);var o=M.lastIndexOf(h(L.location)),i=M.slice(0,o+1);i.push(t),M=i,k({action:"PUSH",location:n})}else k()}}))},replace:function(e,t){var n=v(e,void 0,void 0,L.location);_.confirmTransitionTo(n,"REPLACE",i,(function(e){if(e){var t=h(n),r=m(l+t);T()!==r&&(F=t,j(r));var o=M.indexOf(h(L.location));-1!==o&&(M[o]=t),k({action:"REPLACE",location:n})}}))},go:D,goBack:function(){D(-1)},goForward:function(){D(1)},block:function(e){void 0===e&&(e=!1);var t=_.setPrompt(e);return U||(z(1),U=!0),function(){return U&&(U=!1,z(-1)),t()}},listen:function(e){var t=_.appendListener(e);return z(1),function(){z(-1),t()}}};return L}function F(e,t,n){return Math.min(Math.max(e,t),n)}function P(e){void 0===e&&(e={});var t=e,n=t.getUserConfirmation,o=t.initialEntries,i=void 0===o?["/"]:o,a=t.initialIndex,u=void 0===a?0:a,l=t.keyLength,c=void 0===l?6:l,s=y();function f(e){Object(r.a)(w,e),w.length=w.entries.length,s.notifyListeners(w.location,w.action)}function d(){return Math.random().toString(36).substr(2,c)}var p=F(u,0,i.length-1),m=i.map((function(e){return v(e,void 0,"string"==typeof e?d():e.key||d())})),g=h;function b(e){var t=F(w.index+e,0,w.entries.length-1),r=w.entries[t];s.confirmTransitionTo(r,"POP",n,(function(e){e?f({action:"POP",location:r,index:t}):f()}))}var w={length:m.length,action:"POP",location:m[p],index:p,entries:m,createHref:g,push:function(e,t){var r=v(e,t,d(),w.location);s.confirmTransitionTo(r,"PUSH",n,(function(e){if(e){var t=w.index+1,n=w.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),f({action:"PUSH",location:r,index:t,entries:n})}}))},replace:function(e,t){var r=v(e,t,d(),w.location);s.confirmTransitionTo(r,"REPLACE",n,(function(e){e&&(w.entries[w.index]=r,f({action:"REPLACE",location:r}))}))},go:b,goBack:function(){b(-1)},goForward:function(){b(1)},canGo:function(e){var t=w.index+e;return t>=0&&t<w.entries.length},block:function(e){return void 0===e&&(e=!1),s.setPrompt(e)},listen:function(e){return s.appendListener(e)}};return w}},function(e,t,n){"use strict";function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.d(t,"a",(function(){return r}))},function(e,t){var n=Array.isArray;e.exports=n},function(e,t,n){var r=n(85),o="object"==typeof self&&self&&self.Object===Object&&self,i=r||o||Function("return this")();e.exports=i},function(e,t,n){"use strict";(function(e){var r=n(44),o="object"==typeof exports&&exports&&!exports.nodeType&&exports,i=o&&"object"==typeof e&&e&&!e.nodeType&&e,a=i&&i.exports===o&&r.a.process,u=function(){try{var e=i&&i.require&&i.require("util").types;return e||a&&a.binding&&a.binding("util")}catch(e){}}();t.a=u}).call(this,n(48)(e))},function(e,t){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,t,n){"use strict";var r=n(3);t.__esModule=!0,t.default=g;var o=r(n(19)),i=r(n(20)),a=r(n(188)),u=r(n(227)),l=n(16),c=r(n(234)),s=r(n(64)),f=r(n(235)),d=r(n(17)),p=r(n(236)),h=r(n(41)),v=r(n(30)),m=n(118),y=function(){function e(){this.list=new Set,this.refs=new Map}var t=e.prototype;return t.toArray=function(){return(0,u.default)(this.list).concat((0,u.default)(this.refs.values()))},t.add=function(e){v.default.isRef(e)?this.refs.set(e.key,e):this.list.add(e)},t.delete=function(e){v.default.isRef(e)?this.refs.delete(e.key,e):this.list.delete(e)},t.has=function(e,t){if(this.list.has(e))return!0;for(var n,r=this.refs.values();!(n=r.next()).done;)if(t(n.value)===e)return!0;return!1},e}();function g(e){var t=this;if(void 0===e&&(e={}),!(this instanceof g))return new g;this._deps=[],this._conditions=[],this._options={abortEarly:!0,recursive:!0},this._exclusive=Object.create(null),this._whitelist=new y,this._blacklist=new y,this.tests=[],this.transforms=[],this.withMutation((function(){t.typeError(l.mixed.notType)})),(0,i.default)(e,"default")&&(this._defaultDefault=e.default),this._type=e.type||"mixed"}for(var b=g.prototype={__isYupSchema__:!0,constructor:g,clone:function(){var e=this;return this._mutate?this:(0,a.default)(this,(function(t){if((0,d.default)(t)&&t!==e)return t}))},label:function(e){var t=this.clone();return t._label=e,t},meta:function(e){if(0===arguments.length)return this._meta;var t=this.clone();return t._meta=(0,o.default)(t._meta||{},e),t},withMutation:function(e){var t=this._mutate;this._mutate=!0;var n=e(this);return this._mutate=t,n},concat:function(e){if(!e||e===this)return this;if(e._type!==this._type&&"mixed"!==this._type)throw new TypeError("You cannot `concat()` schema's of different types: "+this._type+" and "+e._type);var t=(0,f.default)(e.clone(),this);return(0,i.default)(e,"_default")&&(t._default=e._default),t.tests=this.tests,t._exclusive=this._exclusive,t.withMutation((function(t){e.tests.forEach((function(e){t.test(e.OPTIONS)}))})),t},isType:function(e){return!(!this._nullable||null!==e)||(!this._typeCheck||this._typeCheck(e))},resolve:function(e){var t=this;if(t._conditions.length){var n=t._conditions;(t=t.clone())._conditions=[],t=(t=n.reduce((function(t,n){return n.resolve(t,e)}),t)).resolve(e)}return t},cast:function(e,t){void 0===t&&(t={});var n=this.resolve((0,o.default)({},t,{value:e})),r=n._cast(e,t);if(void 0!==e&&!1!==t.assert&&!0!==n.isType(r)){var i=(0,h.default)(e),a=(0,h.default)(r);throw new TypeError("The value of "+(t.path||"field")+' could not be cast to a value that satisfies the schema type: "'+n._type+'". \n\nattempted value: '+i+" \n"+(a!==i?"result of cast: "+a:""))}return r},_cast:function(e){var t=this,n=void 0===e?e:this.transforms.reduce((function(n,r){return r.call(t,n,e)}),e);return void 0===n&&(0,i.default)(this,"_default")&&(n=this.default()),n},_validate:function(e,t){var n=this;void 0===t&&(t={});var r=e,i=null!=t.originalValue?t.originalValue:e,a=this._option("strict",t),u=this._option("abortEarly",t),l=t.sync,c=t.path,f=this._label;a||(r=this._cast(r,(0,o.default)({assert:!1},t)));var d={value:r,path:c,schema:this,options:t,label:f,originalValue:i,sync:l},p=[];return this._typeError&&p.push(this._typeError(d)),this._whitelistError&&p.push(this._whitelistError(d)),this._blacklistError&&p.push(this._blacklistError(d)),(0,s.default)({validations:p,endEarly:u,value:r,path:c,sync:l}).then((function(e){return(0,s.default)({path:c,sync:l,value:e,endEarly:u,validations:n.tests.map((function(e){return e(d)}))})}))},validate:function(e,t){return void 0===t&&(t={}),this.resolve((0,o.default)({},t,{value:e}))._validate(e,t)},validateSync:function(e,t){var n,r;if(void 0===t&&(t={}),this.resolve((0,o.default)({},t,{value:e}))._validate(e,(0,o.default)({},t,{sync:!0})).then((function(e){return n=e})).catch((function(e){return r=e})),r)throw r;return n},isValid:function(e,t){return this.validate(e,t).then((function(){return!0})).catch((function(e){if("ValidationError"===e.name)return!1;throw e}))},isValidSync:function(e,t){try{return this.validateSync(e,t),!0}catch(e){if("ValidationError"===e.name)return!1;throw e}},getDefault:function(e){return void 0===e&&(e={}),this.resolve(e).default()},default:function(e){if(0===arguments.length){var t=(0,i.default)(this,"_default")?this._default:this._defaultDefault;return"function"==typeof t?t.call(this):(0,a.default)(t)}var n=this.clone();return n._default=e,n},strict:function(e){void 0===e&&(e=!0);var t=this.clone();return t._options.strict=e,t},_isPresent:function(e){return null!=e},required:function(e){return void 0===e&&(e=l.mixed.required),this.test({message:e,name:"required",exclusive:!0,test:function(e){return this.schema._isPresent(e)}})},notRequired:function(){var e=this.clone();return e.tests=e.tests.filter((function(e){return"required"!==e.OPTIONS.name})),e},nullable:function(e){void 0===e&&(e=!0);var t=this.clone();return t._nullable=e,t},transform:function(e){var t=this.clone();return t.transforms.push(e),t},test:function(){var e;if(void 0===(e=1===arguments.length?"function"==typeof(arguments.length<=0?void 0:arguments[0])?{test:arguments.length<=0?void 0:arguments[0]}:arguments.length<=0?void 0:arguments[0]:2===arguments.length?{name:arguments.length<=0?void 0:arguments[0],test:arguments.length<=1?void 0:arguments[1]}:{name:arguments.length<=0?void 0:arguments[0],message:arguments.length<=1?void 0:arguments[1],test:arguments.length<=2?void 0:arguments[2]}).message&&(e.message=l.mixed.default),"function"!=typeof e.test)throw new TypeError("`test` is a required parameters");var t=this.clone(),n=(0,p.default)(e),r=e.exclusive||e.name&&!0===t._exclusive[e.name];if(e.exclusive&&!e.name)throw new TypeError("Exclusive tests must provide a unique `name` identifying the test");return t._exclusive[e.name]=!!e.exclusive,t.tests=t.tests.filter((function(t){if(t.OPTIONS.name===e.name){if(r)return!1;if(t.OPTIONS.test===n.OPTIONS.test)return!1}return!0})),t.tests.push(n),t},when:function(e,t){1===arguments.length&&(t=e,e=".");var n=this.clone(),r=[].concat(e).map((function(e){return new v.default(e)}));return r.forEach((function(e){e.isSibling&&n._deps.push(e.key)})),n._conditions.push(new c.default(r,t)),n},typeError:function(e){var t=this.clone();return t._typeError=(0,p.default)({message:e,name:"typeError",test:function(e){return!(void 0!==e&&!this.schema.isType(e))||this.createError({params:{type:this.schema._type}})}}),t},oneOf:function(e,t){void 0===t&&(t=l.mixed.oneOf);var n=this.clone();return e.forEach((function(e){n._whitelist.add(e),n._blacklist.delete(e)})),n._whitelistError=(0,p.default)({message:t,name:"oneOf",test:function(e){if(void 0===e)return!0;var t=this.schema._whitelist;return!!t.has(e,this.resolve)||this.createError({params:{values:t.toArray().join(", ")}})}}),n},notOneOf:function(e,t){void 0===t&&(t=l.mixed.notOneOf);var n=this.clone();return e.forEach((function(e){n._blacklist.add(e),n._whitelist.delete(e)})),n._blacklistError=(0,p.default)({message:t,name:"notOneOf",test:function(e){var t=this.schema._blacklist;return!t.has(e,this.resolve)||this.createError({params:{values:t.toArray().join(", ")}})}}),n},strip:function(e){void 0===e&&(e=!0);var t=this.clone();return t._strip=e,t},_option:function(e,t){return(0,i.default)(t,e)?t[e]:this._options[e]},describe:function(){var e=this.clone();return{type:e._type,meta:e._meta,label:e._label,tests:e.tests.map((function(e){return{name:e.OPTIONS.name,params:e.OPTIONS.params}})).filter((function(e,t,n){return n.findIndex((function(t){return t.name===e.name}))===t}))}}},w=["validate","validateSync"],x=function(){var e=w[_];b[e+"At"]=function(t,n,r){void 0===r&&(r={});var i=(0,m.getIn)(this,t,n,r.context),a=i.parent,u=i.parentPath;return i.schema[e](a&&a[u],(0,o.default)({},r,{parent:a,path:t}))}},_=0;_<w.length;_++)x();for(var k=["equals","is"],E=0;E<k.length;E++){b[k[E]]=b.oneOf}for(var S=["not","nope"],C=0;C<S.length;C++){b[S[C]]=b.notOneOf}b.optional=b.notRequired,e.exports=t.default},function(e,t,n){var r=n(168),o=n(171);e.exports=function(e,t){var n=o(e,t);return r(n)?n:void 0}},function(e,t,n){"use strict";var r=n(3);t.__esModule=!0,t.default=t.array=t.object=t.boolean=t.date=t.number=t.string=t.mixed=void 0;var o=r(n(41)),i={default:"${path} is invalid",required:"${path} is a required field",oneOf:"${path} must be one of the following values: ${values}",notOneOf:"${path} must not be one of the following values: ${values}",notType:function(e){var t=e.path,n=e.type,r=e.value,i=e.originalValue,a=null!=i&&i!==r,u=t+" must be a `"+n+"` type, but the final value was: `"+(0,o.default)(r,!0)+"`"+(a?" (cast from the value `"+(0,o.default)(i,!0)+"`).":".");return null===r&&(u+='\n If "null" is intended as an empty value be sure to mark the schema as `.nullable()`'),u}};t.mixed=i;var a={length:"${path} must be exactly ${length} characters",min:"${path} must be at least ${min} characters",max:"${path} must be at most ${max} characters",matches:'${path} must match the following: "${regex}"',email:"${path} must be a valid email",url:"${path} must be a valid URL",trim:"${path} must be a trimmed string",lowercase:"${path} must be a lowercase string",uppercase:"${path} must be a upper case string"};t.string=a;var u={min:"${path} must be greater than or equal to ${min}",max:"${path} must be less than or equal to ${max}",lessThan:"${path} must be less than ${less}",moreThan:"${path} must be greater than ${more}",notEqual:"${path} must be not equal to ${notEqual}",positive:"${path} must be a positive number",negative:"${path} must be a negative number",integer:"${path} must be an integer"};t.number=u;var l={min:"${path} field must be later than ${min}",max:"${path} field must be at earlier than ${max}"};t.date=l;var c={};t.boolean=c;var s={noUnknown:"${path} field cannot have keys not specified in the object shape"};t.object=s;var f={min:"${path} field must have at least ${min} items",max:"${path} field must have less than or equal to ${max} items"};t.array=f;var d={mixed:i,string:a,number:u,date:l,object:s,array:f,boolean:c};t.default=d},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;t.default=function(e){return e&&e.__isYupSchema__},e.exports=t.default},function(e,t,n){e.exports=n(139)()},function(e,t){function n(){return e.exports=n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n.apply(this,arguments)}e.exports=n},function(e,t,n){var r=n(159),o=n(83);e.exports=function(e,t){return null!=e&&o(e,t,r)}},function(e,t,n){var r=n(22),o=n(160),i=n(161),a="[object Null]",u="[object Undefined]",l=r?r.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?u:a:l&&l in Object(e)?o(e):i(e)}},function(e,t,n){var r=n(11).Symbol;e.exports=r},function(e,t){e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},function(e,t,n){var r=n(92),o=n(201),i=n(61);e.exports=function(e){return i(e)?r(e):o(e)}},function(e,t,n){"use strict";var r=n(3);t.__esModule=!0,t.default=function(e,t,n){e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),(0,o.default)(e.prototype,n)};var o=r(n(19));e.exports=t.default},function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";var r=n(3);t.__esModule=!0,t.addMethod=function(e,t,n){if(!e||!(0,v.default)(e.prototype))throw new TypeError("You must provide a yup schema constructor function");if("string"!=typeof t)throw new TypeError("A Method name must be provided");if("function"!=typeof n)throw new TypeError("Method function must be provided");e.prototype[t]=n},t.lazy=t.ref=t.boolean=void 0;var o=r(n(14));t.mixed=o.default;var i=r(n(258));t.bool=i.default;var a=r(n(259));t.string=a.default;var u=r(n(260));t.number=u.default;var l=r(n(261));t.date=l.default;var c=r(n(263));t.object=c.default;var s=r(n(283));t.array=s.default;var f=r(n(30)),d=r(n(284)),p=r(n(65));t.ValidationError=p.default;var h=r(n(118));t.reach=h.default;var v=r(n(17));t.isSchema=v.default;var m=r(n(285));t.setLocale=m.default;var y=i.default;t.boolean=y;t.ref=function(e,t){return new f.default(e,t)};t.lazy=function(e){return new d.default(e)}},function(e,t,n){var r=n(186);e.exports=function(e){return null==e?"":r(e)}},function(e,t,n){var r=n(211),o=n(53),i=n(212),a=n(213),u=n(214),l=n(21),c=n(87),s=c(r),f=c(o),d=c(i),p=c(a),h=c(u),v=l;(r&&"[object DataView]"!=v(new r(new ArrayBuffer(1)))||o&&"[object Map]"!=v(new o)||i&&"[object Promise]"!=v(i.resolve())||a&&"[object Set]"!=v(new a)||u&&"[object WeakMap]"!=v(new u))&&(v=function(e){var t=l(e),n="[object Object]"==t?e.constructor:void 0,r=n?c(n):"";if(r)switch(r){case s:return"[object DataView]";case f:return"[object Map]";case d:return"[object Promise]";case p:return"[object Set]";case h:return"[object WeakMap]"}return t}),e.exports=v},function(e,t,n){"use strict";var r=n(3);t.__esModule=!0,t.default=void 0;var o=r(n(19)),i=n(42),a={context:"$",value:"."},u=function(){function e(e,t){if(void 0===t&&(t={}),"string"!=typeof e)throw new TypeError("ref must be a string, got: "+e);if(this.key=e.trim(),""===e)throw new TypeError("ref must be a non-empty string");this.isContext=this.key[0]===a.context,this.isValue=this.key[0]===a.value,this.isSibling=!this.isContext&&!this.isValue;var n=this.isContext?a.context:this.isValue?a.value:"";this.path=this.key.slice(n.length),this.getter=this.path&&(0,i.getter)(this.path,!0),this.map=t.map}var t=e.prototype;return t.getValue=function(e){var t=this.isContext?e.context:this.isValue?e.value:e.parent;return this.getter&&(t=this.getter(t||{})),this.map&&(t=this.map(t)),t},t.cast=function(e,t){return this.getValue((0,o.default)({},t,{value:e}))},t.resolve=function(){return this},t.describe=function(){return{type:"ref",key:this.key}},t.toString=function(){return"Ref("+this.key+")"},e.isRef=function(e){return e&&e.__isYupRef},e}();t.default=u,u.prototype.__isYupRef=!0,e.exports=t.default},function(e,t,n){"use strict";e.exports=n(137)},function(e,t,n){"use strict";var r=n(31),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function l(e){return r.isMemo(e)?a:u[e.$$typeof]||o}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var c=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var a=s(n);f&&(a=a.concat(f(n)));for(var u=l(t),v=l(n),m=0;m<a.length;++m){var y=a[m];if(!(i[y]||r&&r[y]||v&&v[y]||u&&u[y])){var g=d(n,y);try{c(t,y,g)}catch(e){}}}return t}return t}},,function(e,t,n){var r=n(15)(Object,"create");e.exports=r},function(e,t,n){var r=n(176),o=n(177),i=n(178),a=n(179),u=n(180);function l(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=o,l.prototype.get=i,l.prototype.has=a,l.prototype.set=u,e.exports=l},function(e,t,n){var r=n(52);e.exports=function(e,t){for(var n=e.length;n--;)if(r(e[n][0],t))return n;return-1}},function(e,t,n){var r=n(182);e.exports=function(e,t){var n=e.__data__;return r(t)?n["string"==typeof t?"string":"hash"]:n.map}},function(e,t,n){var r=n(50),o=1/0;e.exports=function(e){if("string"==typeof e||r(e))return e;var t=e+"";return"0"==t&&1/e==-o?"-0":t}},function(e,t,n){var r=n(196);e.exports=function(e,t,n){"__proto__"==t&&r?r(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}},function(e,t,n){var r=n(91),o=n(39);e.exports=function(e,t,n,i){var a=!n;n||(n={});for(var u=-1,l=t.length;++u<l;){var c=t[u],s=i?i(n[c],e[c],c,n,e):void 0;void 0===s&&(s=e[c]),a?o(n,c,s):r(n,c,s)}return n}},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){var n=l(e,t);return null!==n?n:JSON.stringify(e,(function(e,n){var r=l(this[e],t);return null!==r?r:n}),2)};var r=Object.prototype.toString,o=Error.prototype.toString,i=RegExp.prototype.toString,a="undefined"!=typeof Symbol?Symbol.prototype.toString:function(){return""},u=/^Symbol\((.*)\)(.*)$/;function l(e,t){if(void 0===t&&(t=!1),null==e||!0===e||!1===e)return""+e;var n=typeof e;if("number"===n)return function(e){return e!=+e?"NaN":0===e&&1/e<0?"-0":""+e}(e);if("string"===n)return t?'"'+e+'"':e;if("function"===n)return"[Function "+(e.name||"anonymous")+"]";if("symbol"===n)return a.call(e).replace(u,"Symbol($1)");var l=r.call(e).slice(8,-1);return"Date"===l?isNaN(e.getTime())?""+e:e.toISOString(e):"Error"===l||e instanceof Error?"["+o.call(e)+"]":"RegExp"===l?i.call(e):null}e.exports=t.default},function(e,t,n){"use strict";function r(e){this._maxSize=e,this.clear()}r.prototype.clear=function(){this._size=0,this._values={}},r.prototype.get=function(e){return this._values[e]},r.prototype.set=function(e,t){return this._size>=this._maxSize&&this.clear(),this._values.hasOwnProperty(e)||this._size++,this._values[e]=t};var o=/[^.^\]^[]+|(?=\[\]|\.\.)/g,i=/^\d+$/,a=/^\d/,u=/[~`!#$%\^&*+=\-\[\]\\';,\/{}|\\":<>\?]/g,l=/^\s*(['"]?)(.*?)(\1)\s*$/,c=!1,s=new r(512),f=new r(512),d=new r(512);try{new Function("")}catch(e){c=!0}function p(e){return s.get(e)||s.set(e,h(e).map((function(e){return e.replace(l,"$2")})))}function h(e){return e.match(o)}function v(e,t,n){return"string"==typeof t&&(n=t,t=!1),n=n||"data",(e=e||"")&&"["!==e.charAt(0)&&(e="."+e),t?function(e,t){var n,r=t,o=h(e);return m(o,(function(e,t,o,i,a){n=i===a.length-1,r+=(e=t||o?"["+e+"]":"."+e)+(n?")":" || {})")})),new Array(o.length+1).join("(")+r}(e,n):n+e}function m(e,t,n){var r,o,i,a,u=e.length;for(o=0;o<u;o++)(r=e[o])&&(g(r)&&(r='"'+r+'"'),i=!(a=y(r))&&/^\d+$/.test(r),t.call(n,r,a,i,o,e))}function y(e){return"string"==typeof e&&e&&-1!==["'",'"'].indexOf(e.charAt(0))}function g(e){return!y(e)&&(function(e){return e.match(a)&&!e.match(i)}(e)||function(e){return u.test(e)}(e))}e.exports={Cache:r,expr:v,split:h,normalizePath:p,setter:c?function(e){var t=p(e);return function(e,n){return function(e,t,n){var r=0,o=e.length;for(;r<o-1;)t=t[e[r++]];t[e[r]]=n}(t,e,n)}}:function(e){return f.get(e)||f.set(e,new Function("data, value",v(e,"data")+" = value"))},getter:c?function(e,t){var n=p(e);return function(e){return function(e,t,n){var r=0,o=e.length;for(;r<o;){if(null==n&&t)return;n=n[e[r++]]}return n}(n,t,e)}}:function(e,t){var n=e+"_"+t;return d.get(n)||d.set(n,new Function("data","return "+v(e,t,"data")))},join:function(e){return e.reduce((function(e,t){return e+(y(t)||i.test(t)?"["+t+"]":(e?".":"")+t)}),"")},forEach:function(e,t,n){m(h(e),t,n)}}},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;t.default=function(e){return null==e},e.exports=t.default},function(e,t,n){"use strict";(function(e){var n="object"==typeof e&&e&&e.Object===Object&&e;t.a=n}).call(this,n(47))},function(e,t,n){"use strict";(function(e){var r=n(4),o=n(125),i="object"==typeof exports&&exports&&!exports.nodeType&&exports,a=i&&"object"==typeof e&&e&&!e.nodeType&&e,u=a&&a.exports===i?r.a.Buffer:void 0,l=(u?u.isBuffer:void 0)||o.a;t.a=l}).call(this,n(48)(e))},function(e,t,n){"use strict";var r=Array.isArray,o=Object.keys,i=Object.prototype.hasOwnProperty,a="undefined"!=typeof Element;e.exports=function(e,t){try{return function e(t,n){if(t===n)return!0;if(t&&n&&"object"==typeof t&&"object"==typeof n){var u,l,c,s=r(t),f=r(n);if(s&&f){if((l=t.length)!=n.length)return!1;for(u=l;0!=u--;)if(!e(t[u],n[u]))return!1;return!0}if(s!=f)return!1;var d=t instanceof Date,p=n instanceof Date;if(d!=p)return!1;if(d&&p)return t.getTime()==n.getTime();var h=t instanceof RegExp,v=n instanceof RegExp;if(h!=v)return!1;if(h&&v)return t.toString()==n.toString();var m=o(t);if((l=m.length)!==o(n).length)return!1;for(u=l;0!=u--;)if(!i.call(n,m[u]))return!1;if(a&&t instanceof Element&&n instanceof Element)return t===n;for(u=l;0!=u--;)if(!("_owner"===(c=m[u])&&t.$$typeof||e(t[c],n[c])))return!1;return!0}return t!=t&&n!=n}(e,t)}catch(e){if(e.message&&e.message.match(/stack|recursion/i)||-2146828260===e.number)return console.warn("Warning: react-fast-compare does not handle circular references.",e.name,e.message),!1;throw e}}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){var r=n(10),o=n(50),i=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,a=/^\w*$/;e.exports=function(e,t){if(r(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!o(e))||(a.test(e)||!i.test(e)||null!=t&&e in Object(t))}},function(e,t,n){var r=n(21),o=n(13),i="[object Symbol]";e.exports=function(e){return"symbol"==typeof e||o(e)&&r(e)==i}},function(e,t,n){var r=n(165),o=n(181),i=n(183),a=n(184),u=n(185);function l(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=o,l.prototype.get=i,l.prototype.has=a,l.prototype.set=u,e.exports=l},function(e,t){e.exports=function(e,t){return e===t||e!=e&&t!=t}},function(e,t,n){var r=n(15)(n(11),"Map");e.exports=r},function(e,t){var n=9007199254740991;e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=n}},function(e,t,n){var r=n(35),o=n(190),i=n(191),a=n(192),u=n(193),l=n(194);function c(e){var t=this.__data__=new r(e);this.size=t.size}c.prototype.clear=o,c.prototype.delete=i,c.prototype.get=a,c.prototype.has=u,c.prototype.set=l,e.exports=c},function(e,t,n){(function(e){var r=n(11),o=n(199),i=t&&!t.nodeType&&t,a=i&&"object"==typeof e&&e&&!e.nodeType&&e,u=a&&a.exports===i?r.Buffer:void 0,l=(u?u.isBuffer:void 0)||o;e.exports=l}).call(this,n(57)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t){e.exports=function(e){return function(t){return e(t)}}},function(e,t,n){(function(e){var r=n(85),o=t&&!t.nodeType&&t,i=o&&"object"==typeof e&&e&&!e.nodeType&&e,a=i&&i.exports===o&&r.process,u=function(){try{var e=i&&i.require&&i.require("util").types;return e||a&&a.binding&&a.binding("util")}catch(e){}}();e.exports=u}).call(this,n(57)(e))},function(e,t){var n=Object.prototype;e.exports=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||n)}},function(e,t,n){var r=n(86),o=n(54);e.exports=function(e){return null!=e&&o(e.length)&&!r(e)}},function(e,t,n){var r=n(208),o=n(97),i=Object.prototype.propertyIsEnumerable,a=Object.getOwnPropertySymbols,u=a?function(e){return null==e?[]:(e=Object(e),r(a(e),(function(t){return i.call(e,t)})))}:o;e.exports=u},function(e,t,n){var r=n(103);e.exports=function(e){var t=new e.constructor(e.byteLength);return new r(t).set(new r(e)),t}},function(e,t,n){"use strict";var r=n(3);t.__esModule=!0,t.propagateErrors=function(e,t){return e?null:function(e){return t.push(e),e.value}},t.settled=c,t.collectErrors=s,t.default=function(e){var t=e.endEarly,n=(0,o.default)(e,["endEarly"]);return t?function(e,t,n){return u(n).all(e).catch((function(e){throw"ValidationError"===e.name&&(e.value=t),e})).then((function(){return t}))}(n.validations,n.value,n.sync):s(n)};var o=r(n(108)),i=n(109),a=r(n(65)),u=function(e){return e?i.SynchronousPromise:Promise},l=function(e){return void 0===e&&(e=[]),e.inner&&e.inner.length?e.inner:[].concat(e)};function c(e,t){var n=u(t);return n.all(e.map((function(e){return n.resolve(e).then((function(e){return{fulfilled:!0,value:e}}),(function(e){return{fulfilled:!1,value:e}}))})))}function s(e){var t=e.validations,n=e.value,r=e.path,o=e.sync,i=e.errors,u=e.sort;return i=l(i),c(t,o).then((function(e){var t=e.filter((function(e){return!e.fulfilled})).reduce((function(e,t){var n=t.value;if(!a.default.isError(n))throw n;return e.concat(n)}),[]);if(u&&t.sort(u),(i=t.concat(i)).length)throw new a.default(i,n,r);return n}))}},function(e,t,n){"use strict";var r=n(3);t.__esModule=!0,t.default=u;var o=r(n(41)),i=/\$\{\s*(\w+)\s*\}/g,a=function(e){return function(t){return e.replace(i,(function(e,n){return(0,o.default)(t[n])}))}};function u(e,t,n,r){var o=this;this.name="ValidationError",this.value=t,this.path=n,this.type=r,this.errors=[],this.inner=[],e&&[].concat(e).forEach((function(e){o.errors=o.errors.concat(e.errors||e),e.inner&&(o.inner=o.inner.concat(e.inner.length?e.inner:e))})),this.message=this.errors.length>1?this.errors.length+" errors occurred":this.errors[0],Error.captureStackTrace&&Error.captureStackTrace(this,u)}u.prototype=Object.create(Error.prototype),u.prototype.constructor=u,u.isError=function(e){return e&&"ValidationError"===e.name},u.formatError=function(e,t){"string"==typeof e&&(e=a(e));var n=function(t){return t.path=t.label||t.path||"this","function"==typeof e?e(t):e};return 1===arguments.length?n:n(t)},e.exports=t.default},function(e,t,n){"use strict";(function(t){var n="__global_unique_id__";e.exports=function(){return t[n]=(t[n]||0)+1}}).call(this,n(47))},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(9),o=n(0),i=n.n(o),a=n(6),u=n(8),l=(n(18),n(2)),c=n(26),s=n(7),f=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).history=Object(u.a)(t.props),t}return Object(r.a)(t,e),t.prototype.render=function(){return i.a.createElement(a.b,{history:this.history,children:this.props.children})},t}(i.a.Component);i.a.Component;i.a.Component},function(e,t,n){e.exports=function e(t){"use strict";var n=/^\0+/g,r=/[\0\r\f]/g,o=/: */g,i=/zoo|gra/,a=/([,: ])(transform)/g,u=/,+\s*(?![^(]*[)])/g,l=/ +\s*(?![^(]*[)])/g,c=/ *[\0] */g,s=/,\r+?/g,f=/([\t\r\n ])*\f?&/g,d=/:global\(((?:[^\(\)\[\]]*|\[.*\]|\([^\(\)]*\))*)\)/g,p=/\W+/g,h=/@(k\w+)\s*(\S*)\s*/,v=/::(place)/g,m=/:(read-only)/g,y=/\s+(?=[{\];=:>])/g,g=/([[}=:>])\s+/g,b=/(\{[^{]+?);(?=\})/g,w=/\s{2,}/g,x=/([^\(])(:+) */g,_=/[svh]\w+-[tblr]{2}/,k=/\(\s*(.*)\s*\)/g,E=/([\s\S]*?);/g,S=/-self|flex-/g,C=/[^]*?(:[rp][el]a[\w-]+)[^]*/,T=/stretch|:\s*\w+\-(?:conte|avail)/,j=/([^-])(image-set\()/,O="-webkit-",F="-moz-",P="-ms-",A=59,R=125,N=123,M=40,D=41,I=91,z=93,U=10,L=13,$=9,V=64,B=32,W=38,H=45,q=95,Q=42,Y=44,K=58,G=39,X=34,Z=47,J=62,ee=43,te=126,ne=0,re=12,oe=11,ie=107,ae=109,ue=115,le=112,ce=111,se=105,fe=99,de=100,pe=112,he=1,ve=1,me=0,ye=1,ge=1,be=1,we=0,xe=0,_e=0,ke=[],Ee=[],Se=0,Ce=null,Te=-2,je=-1,Oe=0,Fe=1,Pe=2,Ae=3,Re=0,Ne=1,Me="",De="",Ie="";function ze(e,t,o,i,a){for(var u,l,s=0,f=0,d=0,p=0,y=0,g=0,b=0,w=0,_=0,E=0,S=0,C=0,T=0,j=0,q=0,we=0,Ee=0,Ce=0,Te=0,je=o.length,Le=je-1,qe="",Qe="",Ye="",Ke="",Ge="",Xe="";q<je;){if(b=o.charCodeAt(q),q===Le&&f+p+d+s!==0&&(0!==f&&(b=f===Z?U:Z),p=d=s=0,je++,Le++),f+p+d+s===0){if(q===Le&&(we>0&&(Qe=Qe.replace(r,"")),Qe.trim().length>0)){switch(b){case B:case $:case A:case L:case U:break;default:Qe+=o.charAt(q)}b=A}if(1===Ee)switch(b){case N:case R:case A:case X:case G:case M:case D:case Y:Ee=0;case $:case L:case U:case B:break;default:for(Ee=0,Te=q,y=b,q--,b=A;Te<je;)switch(o.charCodeAt(Te++)){case U:case L:case A:++q,b=y,Te=je;break;case K:we>0&&(++q,b=y);case N:Te=je}}switch(b){case N:for(y=(Qe=Qe.trim()).charCodeAt(0),S=1,Te=++q;q<je;){switch(b=o.charCodeAt(q)){case N:S++;break;case R:S--;break;case Z:switch(g=o.charCodeAt(q+1)){case Q:case Z:q=He(g,q,Le,o)}break;case I:b++;case M:b++;case X:case G:for(;q++<Le&&o.charCodeAt(q)!==b;);}if(0===S)break;q++}switch(Ye=o.substring(Te,q),y===ne&&(y=(Qe=Qe.replace(n,"").trim()).charCodeAt(0)),y){case V:switch(we>0&&(Qe=Qe.replace(r,"")),g=Qe.charCodeAt(1)){case de:case ae:case ue:case H:u=t;break;default:u=ke}if(Te=(Ye=ze(t,u,Ye,g,a+1)).length,_e>0&&0===Te&&(Te=Qe.length),Se>0&&(u=Ue(ke,Qe,Ce),l=We(Ae,Ye,u,t,ve,he,Te,g,a,i),Qe=u.join(""),void 0!==l&&0===(Te=(Ye=l.trim()).length)&&(g=0,Ye="")),Te>0)switch(g){case ue:Qe=Qe.replace(k,Be);case de:case ae:case H:Ye=Qe+"{"+Ye+"}";break;case ie:Ye=(Qe=Qe.replace(h,"$1 $2"+(Ne>0?Me:"")))+"{"+Ye+"}",Ye=1===ge||2===ge&&Ve("@"+Ye,3)?"@"+O+Ye+"@"+Ye:"@"+Ye;break;default:Ye=Qe+Ye,i===pe&&(Ke+=Ye,Ye="")}else Ye="";break;default:Ye=ze(t,Ue(t,Qe,Ce),Ye,i,a+1)}Ge+=Ye,C=0,Ee=0,j=0,we=0,Ce=0,T=0,Qe="",Ye="",b=o.charCodeAt(++q);break;case R:case A:if((Te=(Qe=(we>0?Qe.replace(r,""):Qe).trim()).length)>1)switch(0===j&&((y=Qe.charCodeAt(0))===H||y>96&&y<123)&&(Te=(Qe=Qe.replace(" ",":")).length),Se>0&&void 0!==(l=We(Fe,Qe,t,e,ve,he,Ke.length,i,a,i))&&0===(Te=(Qe=l.trim()).length)&&(Qe="\0\0"),y=Qe.charCodeAt(0),g=Qe.charCodeAt(1),y){case ne:break;case V:if(g===se||g===fe){Xe+=Qe+o.charAt(q);break}default:if(Qe.charCodeAt(Te-1)===K)break;Ke+=$e(Qe,y,g,Qe.charCodeAt(2))}C=0,Ee=0,j=0,we=0,Ce=0,Qe="",b=o.charCodeAt(++q)}}switch(b){case L:case U:if(f+p+d+s+xe===0)switch(E){case D:case G:case X:case V:case te:case J:case Q:case ee:case Z:case H:case K:case Y:case A:case N:case R:break;default:j>0&&(Ee=1)}f===Z?f=0:ye+C===0&&i!==ie&&Qe.length>0&&(we=1,Qe+="\0"),Se*Re>0&&We(Oe,Qe,t,e,ve,he,Ke.length,i,a,i),he=1,ve++;break;case A:case R:if(f+p+d+s===0){he++;break}default:switch(he++,qe=o.charAt(q),b){case $:case B:if(p+s+f===0)switch(w){case Y:case K:case $:case B:qe="";break;default:b!==B&&(qe=" ")}break;case ne:qe="\\0";break;case re:qe="\\f";break;case oe:qe="\\v";break;case W:p+f+s===0&&ye>0&&(Ce=1,we=1,qe="\f"+qe);break;case 108:if(p+f+s+me===0&&j>0)switch(q-j){case 2:w===le&&o.charCodeAt(q-3)===K&&(me=w);case 8:_===ce&&(me=_)}break;case K:p+f+s===0&&(j=q);break;case Y:f+d+p+s===0&&(we=1,qe+="\r");break;case X:case G:0===f&&(p=p===b?0:0===p?b:p);break;case I:p+f+d===0&&s++;break;case z:p+f+d===0&&s--;break;case D:p+f+s===0&&d--;break;case M:if(p+f+s===0){if(0===C)switch(2*w+3*_){case 533:break;default:S=0,C=1}d++}break;case V:f+d+p+s+j+T===0&&(T=1);break;case Q:case Z:if(p+s+d>0)break;switch(f){case 0:switch(2*b+3*o.charCodeAt(q+1)){case 235:f=Z;break;case 220:Te=q,f=Q}break;case Q:b===Z&&w===Q&&Te+2!==q&&(33===o.charCodeAt(Te+2)&&(Ke+=o.substring(Te,q+1)),qe="",f=0)}}if(0===f){if(ye+p+s+T===0&&i!==ie&&b!==A)switch(b){case Y:case te:case J:case ee:case D:case M:if(0===C){switch(w){case $:case B:case U:case L:qe+="\0";break;default:qe="\0"+qe+(b===Y?"":"\0")}we=1}else switch(b){case M:j+7===q&&108===w&&(j=0),C=++S;break;case D:0==(C=--S)&&(we=1,qe+="\0")}break;case $:case B:switch(w){case ne:case N:case R:case A:case Y:case re:case $:case B:case U:case L:break;default:0===C&&(we=1,qe+="\0")}}Qe+=qe,b!==B&&b!==$&&(E=b)}}_=w,w=b,q++}if(Te=Ke.length,_e>0&&0===Te&&0===Ge.length&&0===t[0].length==0&&(i!==ae||1===t.length&&(ye>0?De:Ie)===t[0])&&(Te=t.join(",").length+2),Te>0){if(u=0===ye&&i!==ie?function(e){for(var t,n,o=0,i=e.length,a=Array(i);o<i;++o){for(var u=e[o].split(c),l="",s=0,f=0,d=0,p=0,h=u.length;s<h;++s)if(!(0===(f=(n=u[s]).length)&&h>1)){if(d=l.charCodeAt(l.length-1),p=n.charCodeAt(0),t="",0!==s)switch(d){case Q:case te:case J:case ee:case B:case M:break;default:t=" "}switch(p){case W:n=t+De;case te:case J:case ee:case B:case D:case M:break;case I:n=t+n+De;break;case K:switch(2*n.charCodeAt(1)+3*n.charCodeAt(2)){case 530:if(be>0){n=t+n.substring(8,f-1);break}default:(s<1||u[s-1].length<1)&&(n=t+De+n)}break;case Y:t="";default:n=f>1&&n.indexOf(":")>0?t+n.replace(x,"$1"+De+"$2"):t+n+De}l+=n}a[o]=l.replace(r,"").trim()}return a}(t):t,Se>0&&void 0!==(l=We(Pe,Ke,u,e,ve,he,Te,i,a,i))&&0===(Ke=l).length)return Xe+Ke+Ge;if(Ke=u.join(",")+"{"+Ke+"}",ge*me!=0){switch(2!==ge||Ve(Ke,2)||(me=0),me){case ce:Ke=Ke.replace(m,":"+F+"$1")+Ke;break;case le:Ke=Ke.replace(v,"::"+O+"input-$1")+Ke.replace(v,"::"+F+"$1")+Ke.replace(v,":"+P+"input-$1")+Ke}me=0}}return Xe+Ke+Ge}function Ue(e,t,n){var r=t.trim().split(s),o=r,i=r.length,a=e.length;switch(a){case 0:case 1:for(var u=0,l=0===a?"":e[0]+" ";u<i;++u)o[u]=Le(l,o[u],n,a).trim();break;default:u=0;var c=0;for(o=[];u<i;++u)for(var f=0;f<a;++f)o[c++]=Le(e[f]+" ",r[u],n,a).trim()}return o}function Le(e,t,n,r){var o=t,i=o.charCodeAt(0);switch(i<33&&(i=(o=o.trim()).charCodeAt(0)),i){case W:switch(ye+r){case 0:case 1:if(0===e.trim().length)break;default:return o.replace(f,"$1"+e.trim())}break;case K:switch(o.charCodeAt(1)){case 103:if(be>0&&ye>0)return o.replace(d,"$1").replace(f,"$1"+Ie);break;default:return e.trim()+o.replace(f,"$1"+e.trim())}default:if(n*ye>0&&o.indexOf("\f")>0)return o.replace(f,(e.charCodeAt(0)===K?"":"$1")+e.trim())}return e+o}function $e(e,t,n,r){var c,s=0,f=e+";",d=2*t+3*n+4*r;if(944===d)return function(e){var t=e.length,n=e.indexOf(":",9)+1,r=e.substring(0,n).trim(),o=e.substring(n,t-1).trim();switch(e.charCodeAt(9)*Ne){case 0:break;case H:if(110!==e.charCodeAt(10))break;default:var i=o.split((o="",u)),a=0;for(n=0,t=i.length;a<t;n=0,++a){for(var c=i[a],s=c.split(l);c=s[n];){var f=c.charCodeAt(0);if(1===Ne&&(f>V&&f<90||f>96&&f<123||f===q||f===H&&c.charCodeAt(1)!==H))switch(isNaN(parseFloat(c))+(-1!==c.indexOf("("))){case 1:switch(c){case"infinite":case"alternate":case"backwards":case"running":case"normal":case"forwards":case"both":case"none":case"linear":case"ease":case"ease-in":case"ease-out":case"ease-in-out":case"paused":case"reverse":case"alternate-reverse":case"inherit":case"initial":case"unset":case"step-start":case"step-end":break;default:c+=Me}}s[n++]=c}o+=(0===a?"":",")+s.join(" ")}}return o=r+o+";",1===ge||2===ge&&Ve(o,1)?O+o+o:o}(f);if(0===ge||2===ge&&!Ve(f,1))return f;switch(d){case 1015:return 97===f.charCodeAt(10)?O+f+f:f;case 951:return 116===f.charCodeAt(3)?O+f+f:f;case 963:return 110===f.charCodeAt(5)?O+f+f:f;case 1009:if(100!==f.charCodeAt(4))break;case 969:case 942:return O+f+f;case 978:return O+f+F+f+f;case 1019:case 983:return O+f+F+f+P+f+f;case 883:return f.charCodeAt(8)===H?O+f+f:f.indexOf("image-set(",11)>0?f.replace(j,"$1"+O+"$2")+f:f;case 932:if(f.charCodeAt(4)===H)switch(f.charCodeAt(5)){case 103:return O+"box-"+f.replace("-grow","")+O+f+P+f.replace("grow","positive")+f;case 115:return O+f+P+f.replace("shrink","negative")+f;case 98:return O+f+P+f.replace("basis","preferred-size")+f}return O+f+P+f+f;case 964:return O+f+P+"flex-"+f+f;case 1023:if(99!==f.charCodeAt(8))break;return c=f.substring(f.indexOf(":",15)).replace("flex-","").replace("space-between","justify"),O+"box-pack"+c+O+f+P+"flex-pack"+c+f;case 1005:return i.test(f)?f.replace(o,":"+O)+f.replace(o,":"+F)+f:f;case 1e3:switch(s=(c=f.substring(13).trim()).indexOf("-")+1,c.charCodeAt(0)+c.charCodeAt(s)){case 226:c=f.replace(_,"tb");break;case 232:c=f.replace(_,"tb-rl");break;case 220:c=f.replace(_,"lr");break;default:return f}return O+f+P+c+f;case 1017:if(-1===f.indexOf("sticky",9))return f;case 975:switch(s=(f=e).length-10,d=(c=(33===f.charCodeAt(s)?f.substring(0,s):f).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|c.charCodeAt(7))){case 203:if(c.charCodeAt(8)<111)break;case 115:f=f.replace(c,O+c)+";"+f;break;case 207:case 102:f=f.replace(c,O+(d>102?"inline-":"")+"box")+";"+f.replace(c,O+c)+";"+f.replace(c,P+c+"box")+";"+f}return f+";";case 938:if(f.charCodeAt(5)===H)switch(f.charCodeAt(6)){case 105:return c=f.replace("-items",""),O+f+O+"box-"+c+P+"flex-"+c+f;case 115:return O+f+P+"flex-item-"+f.replace(S,"")+f;default:return O+f+P+"flex-line-pack"+f.replace("align-content","").replace(S,"")+f}break;case 973:case 989:if(f.charCodeAt(3)!==H||122===f.charCodeAt(4))break;case 931:case 953:if(!0===T.test(e))return 115===(c=e.substring(e.indexOf(":")+1)).charCodeAt(0)?$e(e.replace("stretch","fill-available"),t,n,r).replace(":fill-available",":stretch"):f.replace(c,O+c)+f.replace(c,F+c.replace("fill-",""))+f;break;case 962:if(f=O+f+(102===f.charCodeAt(5)?P+f:"")+f,n+r===211&&105===f.charCodeAt(13)&&f.indexOf("transform",10)>0)return f.substring(0,f.indexOf(";",27)+1).replace(a,"$1"+O+"$2")+f}return f}function Ve(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10),o=e.substring(n+1,e.length-1);return Ce(2!==t?r:r.replace(C,"$1"),o,t)}function Be(e,t){var n=$e(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(E," or ($1)").substring(4):"("+t+")"}function We(e,t,n,r,o,i,a,u,l,c){for(var s,f=0,d=t;f<Se;++f)switch(s=Ee[f].call(Qe,e,d,n,r,o,i,a,u,l,c)){case void 0:case!1:case!0:case null:break;default:d=s}if(d!==t)return d}function He(e,t,n,r){for(var o=t+1;o<n;++o)switch(r.charCodeAt(o)){case Z:if(e===Q&&r.charCodeAt(o-1)===Q&&t+2!==o)return o+1;break;case U:if(e===Z)return o+1}return o}function qe(e){for(var t in e){var n=e[t];switch(t){case"keyframe":Ne=0|n;break;case"global":be=0|n;break;case"cascade":ye=0|n;break;case"compress":we=0|n;break;case"semicolon":xe=0|n;break;case"preserve":_e=0|n;break;case"prefix":Ce=null,n?"function"!=typeof n?ge=1:(ge=2,Ce=n):ge=0}}return qe}function Qe(t,n){if(void 0!==this&&this.constructor===Qe)return e(t);var o=t,i=o.charCodeAt(0);i<33&&(i=(o=o.trim()).charCodeAt(0)),Ne>0&&(Me=o.replace(p,i===I?"":"-")),i=1,1===ye?Ie=o:De=o;var a,u=[Ie];Se>0&&void 0!==(a=We(je,n,u,u,ve,he,0,0,0,0))&&"string"==typeof a&&(n=a);var l=ze(ke,u,n,0,0);return Se>0&&void 0!==(a=We(Te,l,u,u,ve,he,l.length,0,0,0))&&"string"!=typeof(l=a)&&(i=0),Me="",Ie="",De="",me=0,ve=1,he=1,we*i==0?l:l.replace(r,"").replace(y,"").replace(g,"$1").replace(b,"$1").replace(w," ")}return Qe.use=function e(t){switch(t){case void 0:case null:Se=Ee.length=0;break;default:if("function"==typeof t)Ee[Se++]=t;else if("object"==typeof t)for(var n=0,r=t.length;n<r;++n)e(t[n]);else Re=0|!!t}return e},Qe.set=qe,void 0!==t&&qe(t),Qe}(null)},function(e,t,n){"use strict";function r(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}t.a=function(e,t){var n;void 0===t&&(t=r);var o,i=[],a=!1;return function(){for(var r=[],u=0;u<arguments.length;u++)r[u]=arguments[u];return a&&n===this&&t(r,i)?o:(o=e.apply(this,r),a=!0,n=this,i=r,o)}}},function(e,t,n){e.exports=n(143)},function(e,t){e.exports=function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}},function(e,t,n){var r=n(286);e.exports=p,e.exports.parse=i,e.exports.compile=function(e,t){return u(i(e,t))},e.exports.tokensToFunction=u,e.exports.tokensToRegExp=d;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,a=0,u="",s=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],d=n[1],p=n.index;if(u+=e.slice(a,p),a=p+f.length,d)u+=d[1];else{var h=e[a],v=n[2],m=n[3],y=n[4],g=n[5],b=n[6],w=n[7];u&&(r.push(u),u="");var x=null!=v&&null!=h&&h!==v,_="+"===b||"*"===b,k="?"===b||"*"===b,E=n[2]||s,S=y||g;r.push({name:m||i++,prefix:v||"",delimiter:E,optional:k,repeat:_,partial:x,asterisk:!!w,pattern:S?c(S):w?".*":"[^"+l(E)+"]+?"})}}return a<e.length&&(u+=e.substr(a)),u&&r.push(u),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function u(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,o){for(var i="",u=n||{},l=(o||{}).pretty?a:encodeURIComponent,c=0;c<e.length;c++){var s=e[c];if("string"!=typeof s){var f,d=u[s.name];if(null==d){if(s.optional){s.partial&&(i+=s.prefix);continue}throw new TypeError('Expected "'+s.name+'" to be defined')}if(r(d)){if(!s.repeat)throw new TypeError('Expected "'+s.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(s.optional)continue;throw new TypeError('Expected "'+s.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(f=l(d[p]),!t[c].test(f))throw new TypeError('Expected all "'+s.name+'" to match "'+s.pattern+'", but received `'+JSON.stringify(f)+"`");i+=(0===p?s.prefix:s.delimiter)+f}}else{if(f=s.asterisk?encodeURI(d).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):l(d),!t[c].test(f))throw new TypeError('Expected "'+s.name+'" to match "'+s.pattern+'", but received "'+f+'"');i+=s.prefix+f}}else i+=s}return i}}function l(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function c(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function s(e,t){return e.keys=t,e}function f(e){return e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,a="",u=0;u<e.length;u++){var c=e[u];if("string"==typeof c)a+=l(c);else{var d=l(c.prefix),p="(?:"+c.pattern+")";t.push(c),c.repeat&&(p+="(?:"+d+p+")*"),a+=p=c.optional?c.partial?d+"("+p+")?":"(?:"+d+"("+p+"))?":d+"("+p+")"}}var h=l(n.delimiter||"/"),v=a.slice(-h.length)===h;return o||(a=(v?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=i?"$":o&&v?"":"(?="+h+"|$)",s(new RegExp("^"+a,f(n)),t)}function p(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return s(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(p(e[o],t,n).source);return s(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return d(i(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,u,l=a(e),c=1;c<arguments.length;c++){for(var s in n=Object(arguments[c]))o.call(n,s)&&(l[s]=n[s]);if(r){u=r(n);for(var f=0;f<u.length;f++)i.call(n,u[f])&&(l[u[f]]=n[u[f]])}}return l}},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var l,c=[],s=!1,f=-1;function d(){s&&l&&(s=!1,l.length?c=l.concat(c):f=-1,c.length&&p())}function p(){if(!s){var e=u(d);s=!0;for(var t=c.length;t;){for(l=c,c=[];++f<t;)l&&l[f].run();f=-1,t=c.length}l=null,s=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function v(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new h(e,t)),1!==c.length||s||u(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=v,o.addListener=v,o.once=v,o.off=v,o.removeListener=v,o.removeAllListeners=v,o.emit=v,o.prependListener=v,o.prependOnceListener=v,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(5);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var a=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(o(t)+"="+o(e))})))})),i=a.join("&")}if(i){var u=e.indexOf("#");-1!==u&&(e=e.slice(0,u)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";(function(t){var r=n(5),o=n(149),i={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var u,l={adapter:(void 0!==t&&"[object process]"===Object.prototype.toString.call(t)?u=n(79):"undefined"!=typeof XMLHttpRequest&&(u=n(79)),u),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(a(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};l.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],(function(e){l.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){l.headers[e]=r.merge(i)})),e.exports=l}).call(this,n(74))},function(e,t,n){"use strict";var r=n(5),o=n(150),i=n(76),a=n(152),u=n(153),l=n(80);e.exports=function(e){return new Promise((function(t,c){var s=e.data,f=e.headers;r.isFormData(s)&&delete f["Content-Type"];var d=new XMLHttpRequest;if(e.auth){var p=e.auth.username||"",h=e.auth.password||"";f.Authorization="Basic "+btoa(p+":"+h)}if(d.open(e.method.toUpperCase(),i(e.url,e.params,e.paramsSerializer),!0),d.timeout=e.timeout,d.onreadystatechange=function(){if(d&&4===d.readyState&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in d?a(d.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?d.response:d.responseText,status:d.status,statusText:d.statusText,headers:n,config:e,request:d};o(t,c,r),d=null}},d.onabort=function(){d&&(c(l("Request aborted",e,"ECONNABORTED",d)),d=null)},d.onerror=function(){c(l("Network Error",e,null,d)),d=null},d.ontimeout=function(){c(l("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",d)),d=null},r.isStandardBrowserEnv()){var v=n(154),m=(e.withCredentials||u(e.url))&&e.xsrfCookieName?v.read(e.xsrfCookieName):void 0;m&&(f[e.xsrfHeaderName]=m)}if("setRequestHeader"in d&&r.forEach(f,(function(e,t){void 0===s&&"content-type"===t.toLowerCase()?delete f[t]:d.setRequestHeader(t,e)})),e.withCredentials&&(d.withCredentials=!0),e.responseType)try{d.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&d.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){d&&(d.abort(),c(e),d=null)})),void 0===s&&(s=null),d.send(s)}))}},function(e,t,n){"use strict";var r=n(151);e.exports=function(e,t,n,o,i){var a=new Error(e);return r(a,t,n,o,i)}},function(e,t,n){"use strict";var r=n(5);e.exports=function(e,t){t=t||{};var n={};return r.forEach(["url","method","params","data"],(function(e){void 0!==t[e]&&(n[e]=t[e])})),r.forEach(["headers","auth","proxy"],(function(o){r.isObject(t[o])?n[o]=r.deepMerge(e[o],t[o]):void 0!==t[o]?n[o]=t[o]:r.isObject(e[o])?n[o]=r.deepMerge(e[o]):void 0!==e[o]&&(n[o]=e[o])})),r.forEach(["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"],(function(r){void 0!==t[r]?n[r]=t[r]:void 0!==e[r]&&(n[r]=e[r])})),n}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){var r=n(84),o=n(89),i=n(10),a=n(90),u=n(54),l=n(38);e.exports=function(e,t,n){for(var c=-1,s=(t=r(t,e)).length,f=!1;++c<s;){var d=l(t[c]);if(!(f=null!=e&&n(e,d)))break;e=e[d]}return f||++c!=s?f:!!(s=null==e?0:e.length)&&u(s)&&a(d,s)&&(i(e)||o(e))}},function(e,t,n){var r=n(10),o=n(49),i=n(162),a=n(28);e.exports=function(e,t){return r(e)?e:o(e,t)?[e]:i(a(e))}},function(e,t,n){(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.exports=n}).call(this,n(47))},function(e,t,n){var r=n(21),o=n(23),i="[object AsyncFunction]",a="[object Function]",u="[object GeneratorFunction]",l="[object Proxy]";e.exports=function(e){if(!o(e))return!1;var t=r(e);return t==a||t==u||t==i||t==l}},function(e,t){var n=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return n.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length,o=Array(r);++n<r;)o[n]=t(e[n],n,e);return o}},function(e,t,n){var r=n(187),o=n(13),i=Object.prototype,a=i.hasOwnProperty,u=i.propertyIsEnumerable,l=r(function(){return arguments}())?r:function(e){return o(e)&&a.call(e,"callee")&&!u.call(e,"callee")};e.exports=l},function(e,t){var n=9007199254740991,r=/^(?:0|[1-9]\d*)$/;e.exports=function(e,t){var o=typeof e;return!!(t=null==t?n:t)&&("number"==o||"symbol"!=o&&r.test(e))&&e>-1&&e%1==0&&e<t}},function(e,t,n){var r=n(39),o=n(52),i=Object.prototype.hasOwnProperty;e.exports=function(e,t,n){var a=e[t];i.call(e,t)&&o(a,n)&&(void 0!==n||t in e)||r(e,t,n)}},function(e,t,n){var r=n(198),o=n(89),i=n(10),a=n(56),u=n(90),l=n(93),c=Object.prototype.hasOwnProperty;e.exports=function(e,t){var n=i(e),s=!n&&o(e),f=!n&&!s&&a(e),d=!n&&!s&&!f&&l(e),p=n||s||f||d,h=p?r(e.length,String):[],v=h.length;for(var m in e)!t&&!c.call(e,m)||p&&("length"==m||f&&("offset"==m||"parent"==m)||d&&("buffer"==m||"byteLength"==m||"byteOffset"==m)||u(m,v))||h.push(m);return h}},function(e,t,n){var r=n(200),o=n(58),i=n(59),a=i&&i.isTypedArray,u=a?o(a):r;e.exports=u},function(e,t){e.exports=function(e,t){return function(n){return e(t(n))}}},function(e,t,n){var r=n(92),o=n(204),i=n(61);e.exports=function(e){return i(e)?r(e,!0):o(e)}},function(e,t){e.exports=function(e,t){var n=-1,r=e.length;for(t||(t=Array(r));++n<r;)t[n]=e[n];return t}},function(e,t){e.exports=function(){return[]}},function(e,t,n){var r=n(99),o=n(100),i=n(62),a=n(97),u=Object.getOwnPropertySymbols?function(e){for(var t=[];e;)r(t,i(e)),e=o(e);return t}:a;e.exports=u},function(e,t){e.exports=function(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}},function(e,t,n){var r=n(94)(Object.getPrototypeOf,Object);e.exports=r},function(e,t,n){var r=n(102),o=n(62),i=n(24);e.exports=function(e){return r(e,i,o)}},function(e,t,n){var r=n(99),o=n(10);e.exports=function(e,t,n){var i=t(e);return o(e)?i:r(i,n(e))}},function(e,t,n){var r=n(11).Uint8Array;e.exports=r},function(e,t){e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}},function(e,t){e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}},function(e,t,n){var r=n(230),o=n(107),i=n(231);e.exports=function(e){return o(e)?i(e):r(e)}},function(e,t){var n=RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff\\ufe0e\\ufe0f]");e.exports=function(e){return n.test(e)}},function(e,t){e.exports=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}},function(e,t,n){"use strict";function r(e){return Array.prototype.slice.apply(e)}var o="pending";function i(e){this.status=o,this._continuations=[],this._parent=null,this._paused=!1,e&&e.call(this,this._continueWith.bind(this),this._failWith.bind(this))}function a(e){return e&&"function"==typeof e.then}if(i.prototype={then:function(e,t){var n=i.unresolved()._setParent(this);if(this._isRejected()){if(this._paused)return this._continuations.push({promise:n,nextFn:e,catchFn:t}),n;if(t)try{var r=t(this._error);return a(r)?(this._chainPromiseData(r,n),n):i.resolve(r)._setParent(this)}catch(e){return i.reject(e)._setParent(this)}return i.reject(this._error)._setParent(this)}return this._continuations.push({promise:n,nextFn:e,catchFn:t}),this._runResolutions(),n},catch:function(e){if(this._isResolved())return i.resolve(this._data)._setParent(this);var t=i.unresolved()._setParent(this);return this._continuations.push({promise:t,catchFn:e}),this._runRejections(),t},finally:function(e){var t=!1;function n(){if(!t)return t=!0,e()}return this.then(n).catch(n)},pause:function(){return this._paused=!0,this},resume:function(){var e=this._findFirstPaused();return e&&(e._paused=!1,e._runResolutions(),e._runRejections()),this},_findAncestry:function(){return this._continuations.reduce((function(e,t){if(t.promise){var n={promise:t.promise,children:t.promise._findAncestry()};e.push(n)}return e}),[])},_setParent:function(e){if(this._parent)throw new Error("parent already set");return this._parent=e,this},_continueWith:function(e){var t=this._findFirstPending();t&&(t._data=e,t._setResolved())},_findFirstPending:function(){return this._findFirstAncestor((function(e){return e._isPending&&e._isPending()}))},_findFirstPaused:function(){return this._findFirstAncestor((function(e){return e._paused}))},_findFirstAncestor:function(e){for(var t,n=this;n;)e(n)&&(t=n),n=n._parent;return t},_failWith:function(e){var t=this._findFirstPending();t&&(t._error=e,t._setRejected())},_takeContinuations:function(){return this._continuations.splice(0,this._continuations.length)},_runRejections:function(){if(!this._paused&&this._isRejected()){var e=this._error,t=this._takeContinuations(),n=this;t.forEach((function(t){if(t.catchFn)try{var r=t.catchFn(e);n._handleUserFunctionResult(r,t.promise)}catch(e){e.message;t.promise.reject(e)}else t.promise.reject(e)}))}},_runResolutions:function(){if(!this._paused&&this._isResolved()&&!this._isPending()){var e=this._takeContinuations();if(a(this._data))return this._handleWhenResolvedDataIsPromise(this._data);var t=this._data,n=this;e.forEach((function(e){if(e.nextFn)try{var r=e.nextFn(t);n._handleUserFunctionResult(r,e.promise)}catch(t){n._handleResolutionError(t,e)}else e.promise&&e.promise.resolve(t)}))}},_handleResolutionError:function(e,t){if(this._setRejected(),t.catchFn)try{return void t.catchFn(e)}catch(t){e=t}t.promise&&t.promise.reject(e)},_handleWhenResolvedDataIsPromise:function(e){var t=this;return e.then((function(e){t._data=e,t._runResolutions()})).catch((function(e){t._error=e,t._setRejected(),t._runRejections()}))},_handleUserFunctionResult:function(e,t){a(e)?this._chainPromiseData(e,t):t.resolve(e)},_chainPromiseData:function(e,t){e.then((function(e){t.resolve(e)})).catch((function(e){t.reject(e)}))},_setResolved:function(){this.status="resolved",this._paused||this._runResolutions()},_setRejected:function(){this.status="rejected",this._paused||this._runRejections()},_isPending:function(){return this.status===o},_isResolved:function(){return"resolved"===this.status},_isRejected:function(){return"rejected"===this.status}},i.resolve=function(e){return new i((function(t,n){a(e)?e.then((function(e){t(e)})).catch((function(e){n(e)})):t(e)}))},i.reject=function(e){return new i((function(t,n){n(e)}))},i.unresolved=function(){return new i((function(e,t){this.resolve=e,this.reject=t}))},i.all=function(){var e=r(arguments);return Array.isArray(e[0])&&(e=e[0]),e.length?new i((function(t,n){var r=[],o=0,a=!1;e.forEach((function(u,l){i.resolve(u).then((function(n){r[l]=n,(o+=1)===e.length&&t(r)})).catch((function(e){!function(e){a||(a=!0,n(e))}(e)}))}))})):i.resolve([])},Promise===i)throw new Error("Please use SynchronousPromise.installGlobally() to install globally");var u=Promise;i.installGlobally=function(e){if(Promise===i)return e;var t=function(e){if(void 0===e||e.__patched)return e;var t=e;return(e=function(){t.apply(this,r(arguments))}).__patched=!0,e}(e);return Promise=i,t},i.uninstallGlobally=function(){Promise===i&&(Promise=u)},e.exports={SynchronousPromise:i}},function(e,t,n){var r=n(39),o=n(111),i=n(112);e.exports=function(e,t){var n={};return t=i(t,3),o(e,(function(e,o,i){r(n,o,t(e,o,i))})),n}},function(e,t,n){var r=n(237),o=n(24);e.exports=function(e,t){return e&&r(e,t,o)}},function(e,t,n){var r=n(239),o=n(250),i=n(254),a=n(10),u=n(255);e.exports=function(e){return"function"==typeof e?e:null==e?i:"object"==typeof e?a(e)?o(e[0],e[1]):r(e):u(e)}},function(e,t,n){var r=n(241),o=n(13);e.exports=function e(t,n,i,a,u){return t===n||(null==t||null==n||!o(t)&&!o(n)?t!=t&&n!=n:r(t,n,i,a,e,u))}},function(e,t,n){var r=n(242),o=n(245),i=n(246),a=1,u=2;e.exports=function(e,t,n,l,c,s){var f=n&a,d=e.length,p=t.length;if(d!=p&&!(f&&p>d))return!1;var h=s.get(e);if(h&&s.get(t))return h==t;var v=-1,m=!0,y=n&u?new r:void 0;for(s.set(e,t),s.set(t,e);++v<d;){var g=e[v],b=t[v];if(l)var w=f?l(b,g,v,t,e,s):l(g,b,v,e,t,s);if(void 0!==w){if(w)continue;m=!1;break}if(y){if(!o(t,(function(e,t){if(!i(y,t)&&(g===e||c(g,e,n,l,s)))return y.push(t)}))){m=!1;break}}else if(g!==b&&!c(g,b,n,l,s)){m=!1;break}}return s.delete(e),s.delete(t),m}},function(e,t,n){var r=n(23);e.exports=function(e){return e==e&&!r(e)}},function(e,t){e.exports=function(e,t){return function(n){return null!=n&&(n[e]===t&&(void 0!==t||e in Object(n)))}}},function(e,t,n){var r=n(84),o=n(38);e.exports=function(e,t){for(var n=0,i=(t=r(t,e)).length;null!=e&&n<i;)e=e[o(t[n++])];return n&&n==i?e:void 0}},function(e,t,n){"use strict";var r=n(3);t.__esModule=!0,t.getIn=u,t.default=void 0;var o=n(42),i=r(n(20)),a=function(e){return e.substr(0,e.length-1).substr(1)};function u(e,t,n,r){var u,l,c;return r=r||n,t?((0,o.forEach)(t,(function(o,s,f){var d=s?a(o):o;if(f||(0,i.default)(e,"_subType")){var p=f?parseInt(d,10):0;if(e=e.resolve({context:r,parent:u,value:n})._subType,n){if(f&&p>=n.length)throw new Error("Yup.reach cannot resolve an array item at index: "+o+", in the path: "+t+". because there is no value at that index. ");n=n[p]}}if(!f){if(e=e.resolve({context:r,parent:u,value:n}),!(0,i.default)(e,"fields")||!(0,i.default)(e.fields,d))throw new Error("The schema does not contain the path: "+t+". (failed at: "+c+' which is a type: "'+e._type+'") ');e=e.fields[d],u=n,n=n&&n[d],l=d,c=s?"["+o+"]":"."+o}})),{schema:e,parent:u,parentPath:l}):{parent:u,parentPath:t,schema:e}}var l=function(e,t,n,r){return u(e,t,n,r).schema};t.default=l},function(e,t){function n(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return n=function(){return e},e}e.exports=function(e){if(e&&e.__esModule)return e;var t=n();if(t&&t.has(e))return t.get(e);var r={};if(null!=e){var o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var a=o?Object.getOwnPropertyDescriptor(e,i):null;a&&(a.get||a.set)?Object.defineProperty(r,i,a):r[i]=e[i]}}return r.default=e,t&&t.set(e,r),r}},function(e,t){e.exports=function(e,t){return t||(t=e.slice(0)),e.raw=t,e}},function(e,t,n){var r=n(265),o=n(266),i=n(269),a=RegExp("['’]","g");e.exports=function(e){return function(t){return r(i(o(t).replace(a,"")),e,"")}}},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return e.reduce((function(e,t){var r=n.shift();return e+(null==r?"":r)+t})).replace(/^\./,"")},e.exports=t.default},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(134)},function(e,t,n){"use strict";t.__esModule=!0;var r=i(n(0)),o=i(n(138));function i(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.createContext||o.default,e.exports=t.default},function(e,t,n){"use strict";t.a=function(){return!1}},function(e,t,n){"use strict";(function(e){var r=n(4),o="object"==typeof exports&&exports&&!exports.nodeType&&exports,i=o&&"object"==typeof e&&e&&!e.nodeType&&e,a=i&&i.exports===o?r.a.Buffer:void 0,u=a?a.allocUnsafe:void 0;t.a=function(e,t){if(t)return e.slice();var n=e.length,r=u?u(n):new e.constructor(n);return e.copy(r),r}}).call(this,n(48)(e))},function(e,t,n){e.exports=function(){"use strict";return function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,r,o,i,a,u,l,c,s,f){switch(n){case 1:if(0===s&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===c)return r+"/*|*/";break;case 3:switch(c){case 102:case 112:return e(o[0]+r),"";default:return r+(0===f?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t)}}}}()},function(e,t,n){"use strict";t.a={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1}},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(6),o=n(2),i=n(0),a=n.n(i);function u(e,t,n){return void 0===t&&(t={}),void 0===n&&(n={}),e?a.a.createElement(r.c,n,e.map((function(e,n){return a.a.createElement(r.a,{key:e.key||n,path:e.path,exact:e.exact,strict:e.strict,render:function(n){return e.render?e.render(Object(o.a)({},n,t,{route:e})):a.a.createElement(e.component,Object(o.a)({},n,t,{route:e}))}})}))):null}},function(e,t,n){"use strict";
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */var r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function o(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var i=function(){return(i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function a(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}var u=n(0),l=n(46),c=n.n(l),s=function(e){return function(e){return!!e&&"object"==typeof e}(e)&&!function(e){var t=Object.prototype.toString.call(e);return"[object RegExp]"===t||"[object Date]"===t||function(e){return e.$$typeof===f}(e)}(e)};var f="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function d(e,t){return!1!==t.clone&&t.isMergeableObject(e)?h((n=e,Array.isArray(n)?[]:{}),e,t):e;var n}function p(e,t,n){return e.concat(t).map((function(e){return d(e,n)}))}function h(e,t,n){(n=n||{}).arrayMerge=n.arrayMerge||p,n.isMergeableObject=n.isMergeableObject||s;var r=Array.isArray(t);return r===Array.isArray(e)?r?n.arrayMerge(e,t,n):function(e,t,n){var r={};return n.isMergeableObject(e)&&Object.keys(e).forEach((function(t){r[t]=d(e[t],n)})),Object.keys(t).forEach((function(o){n.isMergeableObject(t[o])&&e[o]?r[o]=h(e[o],t[o],n):r[o]=d(t[o],n)})),r}(e,t,n):d(t,n)}h.all=function(e,t){if(!Array.isArray(e))throw new Error("first argument should be an array");return e.reduce((function(e,n){return h(e,n,t)}),{})};var v=h,m=n(32),y=n.n(m),g=n(124),b=n.n(g);var w=function(){this.__data__=[],this.size=0};var x=function(e,t){return e===t||e!=e&&t!=t};var _=function(e,t){for(var n=e.length;n--;)if(x(e[n][0],t))return n;return-1},k=Array.prototype.splice;var E=function(e){var t=this.__data__,n=_(t,e);return!(n<0)&&(n==t.length-1?t.pop():k.call(t,n,1),--this.size,!0)};var S=function(e){var t=this.__data__,n=_(t,e);return n<0?void 0:t[n][1]};var C=function(e){return _(this.__data__,e)>-1};var T=function(e,t){var n=this.__data__,r=_(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this};function j(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}j.prototype.clear=w,j.prototype.delete=E,j.prototype.get=S,j.prototype.has=C,j.prototype.set=T;var O=j;var F=function(){this.__data__=new O,this.size=0};var P=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n};var A=function(e){return this.__data__.get(e)};var R=function(e){return this.__data__.has(e)},N=n(4),M=N.a.Symbol,D=Object.prototype,I=D.hasOwnProperty,z=D.toString,U=M?M.toStringTag:void 0;var L=function(e){var t=I.call(e,U),n=e[U];try{e[U]=void 0;var r=!0}catch(e){}var o=z.call(e);return r&&(t?e[U]=n:delete e[U]),o},$=Object.prototype.toString;var V=function(e){return $.call(e)},B="[object Null]",W="[object Undefined]",H=M?M.toStringTag:void 0;var q=function(e){return null==e?void 0===e?W:B:H&&H in Object(e)?L(e):V(e)};var Q=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)},Y="[object AsyncFunction]",K="[object Function]",G="[object GeneratorFunction]",X="[object Proxy]";var Z,J=function(e){if(!Q(e))return!1;var t=q(e);return t==K||t==G||t==Y||t==X},ee=N.a["__core-js_shared__"],te=(Z=/[^.]+$/.exec(ee&&ee.keys&&ee.keys.IE_PROTO||""))?"Symbol(src)_1."+Z:"";var ne=function(e){return!!te&&te in e},re=Function.prototype.toString;var oe=function(e){if(null!=e){try{return re.call(e)}catch(e){}try{return e+""}catch(e){}}return""},ie=/^\[object .+?Constructor\]$/,ae=Function.prototype,ue=Object.prototype,le=ae.toString,ce=ue.hasOwnProperty,se=RegExp("^"+le.call(ce).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");var fe=function(e){return!(!Q(e)||ne(e))&&(J(e)?se:ie).test(oe(e))};var de=function(e,t){return null==e?void 0:e[t]};var pe=function(e,t){var n=de(e,t);return fe(n)?n:void 0},he=pe(N.a,"Map"),ve=pe(Object,"create");var me=function(){this.__data__=ve?ve(null):{},this.size=0};var ye=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},ge="__lodash_hash_undefined__",be=Object.prototype.hasOwnProperty;var we=function(e){var t=this.__data__;if(ve){var n=t[e];return n===ge?void 0:n}return be.call(t,e)?t[e]:void 0},xe=Object.prototype.hasOwnProperty;var _e=function(e){var t=this.__data__;return ve?void 0!==t[e]:xe.call(t,e)},ke="__lodash_hash_undefined__";var Ee=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=ve&&void 0===t?ke:t,this};function Se(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}Se.prototype.clear=me,Se.prototype.delete=ye,Se.prototype.get=we,Se.prototype.has=_e,Se.prototype.set=Ee;var Ce=Se;var Te=function(){this.size=0,this.__data__={hash:new Ce,map:new(he||O),string:new Ce}};var je=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e};var Oe=function(e,t){var n=e.__data__;return je(t)?n["string"==typeof t?"string":"hash"]:n.map};var Fe=function(e){var t=Oe(this,e).delete(e);return this.size-=t?1:0,t};var Pe=function(e){return Oe(this,e).get(e)};var Ae=function(e){return Oe(this,e).has(e)};var Re=function(e,t){var n=Oe(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this};function Ne(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}Ne.prototype.clear=Te,Ne.prototype.delete=Fe,Ne.prototype.get=Pe,Ne.prototype.has=Ae,Ne.prototype.set=Re;var Me=Ne,De=200;var Ie=function(e,t){var n=this.__data__;if(n instanceof O){var r=n.__data__;if(!he||r.length<De-1)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new Me(r)}return n.set(e,t),this.size=n.size,this};function ze(e){var t=this.__data__=new O(e);this.size=t.size}ze.prototype.clear=F,ze.prototype.delete=P,ze.prototype.get=A,ze.prototype.has=R,ze.prototype.set=Ie;var Ue=ze;var Le=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e},$e=function(){try{var e=pe(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();var Ve=function(e,t,n){"__proto__"==t&&$e?$e(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n},Be=Object.prototype.hasOwnProperty;var We=function(e,t,n){var r=e[t];Be.call(e,t)&&x(r,n)&&(void 0!==n||t in e)||Ve(e,t,n)};var He=function(e,t,n,r){var o=!n;n||(n={});for(var i=-1,a=t.length;++i<a;){var u=t[i],l=r?r(n[u],e[u],u,n,e):void 0;void 0===l&&(l=e[u]),o?Ve(n,u,l):We(n,u,l)}return n};var qe=function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r};var Qe=function(e){return null!=e&&"object"==typeof e},Ye="[object Arguments]";var Ke=function(e){return Qe(e)&&q(e)==Ye},Ge=Object.prototype,Xe=Ge.hasOwnProperty,Ze=Ge.propertyIsEnumerable,Je=Ke(function(){return arguments}())?Ke:function(e){return Qe(e)&&Xe.call(e,"callee")&&!Ze.call(e,"callee")},et=Array.isArray,tt=n(45),nt=9007199254740991,rt=/^(?:0|[1-9]\d*)$/;var ot=function(e,t){var n=typeof e;return!!(t=null==t?nt:t)&&("number"==n||"symbol"!=n&&rt.test(e))&&e>-1&&e%1==0&&e<t},it=9007199254740991;var at=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=it},ut={};ut["[object Float32Array]"]=ut["[object Float64Array]"]=ut["[object Int8Array]"]=ut["[object Int16Array]"]=ut["[object Int32Array]"]=ut["[object Uint8Array]"]=ut["[object Uint8ClampedArray]"]=ut["[object Uint16Array]"]=ut["[object Uint32Array]"]=!0,ut["[object Arguments]"]=ut["[object Array]"]=ut["[object ArrayBuffer]"]=ut["[object Boolean]"]=ut["[object DataView]"]=ut["[object Date]"]=ut["[object Error]"]=ut["[object Function]"]=ut["[object Map]"]=ut["[object Number]"]=ut["[object Object]"]=ut["[object RegExp]"]=ut["[object Set]"]=ut["[object String]"]=ut["[object WeakMap]"]=!1;var lt=function(e){return Qe(e)&&at(e.length)&&!!ut[q(e)]};var ct=function(e){return function(t){return e(t)}},st=n(12),ft=st.a&&st.a.isTypedArray,dt=ft?ct(ft):lt,pt=Object.prototype.hasOwnProperty;var ht=function(e,t){var n=et(e),r=!n&&Je(e),o=!n&&!r&&Object(tt.a)(e),i=!n&&!r&&!o&&dt(e),a=n||r||o||i,u=a?qe(e.length,String):[],l=u.length;for(var c in e)!t&&!pt.call(e,c)||a&&("length"==c||o&&("offset"==c||"parent"==c)||i&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||ot(c,l))||u.push(c);return u},vt=Object.prototype;var mt=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||vt)};var yt=function(e,t){return function(n){return e(t(n))}},gt=yt(Object.keys,Object),bt=Object.prototype.hasOwnProperty;var wt=function(e){if(!mt(e))return gt(e);var t=[];for(var n in Object(e))bt.call(e,n)&&"constructor"!=n&&t.push(n);return t};var xt=function(e){return null!=e&&at(e.length)&&!J(e)};var _t=function(e){return xt(e)?ht(e):wt(e)};var kt=function(e,t){return e&&He(t,_t(t),e)};var Et=function(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t},St=Object.prototype.hasOwnProperty;var Ct=function(e){if(!Q(e))return Et(e);var t=mt(e),n=[];for(var r in e)("constructor"!=r||!t&&St.call(e,r))&&n.push(r);return n};var Tt=function(e){return xt(e)?ht(e,!0):Ct(e)};var jt=function(e,t){return e&&He(t,Tt(t),e)},Ot=n(126);var Ft=function(e,t){var n=-1,r=e.length;for(t||(t=Array(r));++n<r;)t[n]=e[n];return t};var Pt=function(e,t){for(var n=-1,r=null==e?0:e.length,o=0,i=[];++n<r;){var a=e[n];t(a,n,e)&&(i[o++]=a)}return i};var At=function(){return[]},Rt=Object.prototype.propertyIsEnumerable,Nt=Object.getOwnPropertySymbols,Mt=Nt?function(e){return null==e?[]:(e=Object(e),Pt(Nt(e),(function(t){return Rt.call(e,t)})))}:At;var Dt=function(e,t){return He(e,Mt(e),t)};var It=function(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e},zt=yt(Object.getPrototypeOf,Object),Ut=Object.getOwnPropertySymbols?function(e){for(var t=[];e;)It(t,Mt(e)),e=zt(e);return t}:At;var Lt=function(e,t){return He(e,Ut(e),t)};var $t=function(e,t,n){var r=t(e);return et(e)?r:It(r,n(e))};var Vt=function(e){return $t(e,_t,Mt)};var Bt=function(e){return $t(e,Tt,Ut)},Wt=pe(N.a,"DataView"),Ht=pe(N.a,"Promise"),qt=pe(N.a,"Set"),Qt=pe(N.a,"WeakMap"),Yt=oe(Wt),Kt=oe(he),Gt=oe(Ht),Xt=oe(qt),Zt=oe(Qt),Jt=q;(Wt&&"[object DataView]"!=Jt(new Wt(new ArrayBuffer(1)))||he&&"[object Map]"!=Jt(new he)||Ht&&"[object Promise]"!=Jt(Ht.resolve())||qt&&"[object Set]"!=Jt(new qt)||Qt&&"[object WeakMap]"!=Jt(new Qt))&&(Jt=function(e){var t=q(e),n="[object Object]"==t?e.constructor:void 0,r=n?oe(n):"";if(r)switch(r){case Yt:return"[object DataView]";case Kt:return"[object Map]";case Gt:return"[object Promise]";case Xt:return"[object Set]";case Zt:return"[object WeakMap]"}return t});var en=Jt,tn=Object.prototype.hasOwnProperty;var nn=function(e){var t=e.length,n=new e.constructor(t);return t&&"string"==typeof e[0]&&tn.call(e,"index")&&(n.index=e.index,n.input=e.input),n},rn=N.a.Uint8Array;var on=function(e){var t=new e.constructor(e.byteLength);return new rn(t).set(new rn(e)),t};var an=function(e,t){var n=t?on(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)},un=/\w*$/;var ln=function(e){var t=new e.constructor(e.source,un.exec(e));return t.lastIndex=e.lastIndex,t},cn=M?M.prototype:void 0,sn=cn?cn.valueOf:void 0;var fn=function(e){return sn?Object(sn.call(e)):{}};var dn=function(e,t){var n=t?on(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)},pn="[object Boolean]",hn="[object Date]",vn="[object Map]",mn="[object Number]",yn="[object RegExp]",gn="[object Set]",bn="[object String]",wn="[object Symbol]",xn="[object ArrayBuffer]",_n="[object DataView]",kn="[object Float32Array]",En="[object Float64Array]",Sn="[object Int8Array]",Cn="[object Int16Array]",Tn="[object Int32Array]",jn="[object Uint8Array]",On="[object Uint8ClampedArray]",Fn="[object Uint16Array]",Pn="[object Uint32Array]";var An=function(e,t,n){var r=e.constructor;switch(t){case xn:return on(e);case pn:case hn:return new r(+e);case _n:return an(e,n);case kn:case En:case Sn:case Cn:case Tn:case jn:case On:case Fn:case Pn:return dn(e,n);case vn:return new r;case mn:case bn:return new r(e);case yn:return ln(e);case gn:return new r;case wn:return fn(e)}},Rn=Object.create,Nn=function(){function e(){}return function(t){if(!Q(t))return{};if(Rn)return Rn(t);e.prototype=t;var n=new e;return e.prototype=void 0,n}}();var Mn=function(e){return"function"!=typeof e.constructor||mt(e)?{}:Nn(zt(e))},Dn="[object Map]";var In=function(e){return Qe(e)&&en(e)==Dn},zn=st.a&&st.a.isMap,Un=zn?ct(zn):In,Ln="[object Set]";var $n=function(e){return Qe(e)&&en(e)==Ln},Vn=st.a&&st.a.isSet,Bn=Vn?ct(Vn):$n,Wn=1,Hn=2,qn=4,Qn="[object Arguments]",Yn="[object Function]",Kn="[object GeneratorFunction]",Gn="[object Object]",Xn={};Xn[Qn]=Xn["[object Array]"]=Xn["[object ArrayBuffer]"]=Xn["[object DataView]"]=Xn["[object Boolean]"]=Xn["[object Date]"]=Xn["[object Float32Array]"]=Xn["[object Float64Array]"]=Xn["[object Int8Array]"]=Xn["[object Int16Array]"]=Xn["[object Int32Array]"]=Xn["[object Map]"]=Xn["[object Number]"]=Xn[Gn]=Xn["[object RegExp]"]=Xn["[object Set]"]=Xn["[object String]"]=Xn["[object Symbol]"]=Xn["[object Uint8Array]"]=Xn["[object Uint8ClampedArray]"]=Xn["[object Uint16Array]"]=Xn["[object Uint32Array]"]=!0,Xn["[object Error]"]=Xn[Yn]=Xn["[object WeakMap]"]=!1;var Zn=function e(t,n,r,o,i,a){var u,l=n&Wn,c=n&Hn,s=n&qn;if(r&&(u=i?r(t,o,i,a):r(t)),void 0!==u)return u;if(!Q(t))return t;var f=et(t);if(f){if(u=nn(t),!l)return Ft(t,u)}else{var d=en(t),p=d==Yn||d==Kn;if(Object(tt.a)(t))return Object(Ot.a)(t,l);if(d==Gn||d==Qn||p&&!i){if(u=c||p?{}:Mn(t),!l)return c?Lt(t,jt(u,t)):Dt(t,kt(u,t))}else{if(!Xn[d])return i?t:{};u=An(t,d,l)}}a||(a=new Ue);var h=a.get(t);if(h)return h;a.set(t,u),Bn(t)?t.forEach((function(o){u.add(e(o,n,r,o,t,a))})):Un(t)&&t.forEach((function(o,i){u.set(i,e(o,n,r,i,t,a))}));var v=s?c?Bt:Vt:c?keysIn:_t,m=f?void 0:v(t);return Le(m||t,(function(o,i){m&&(o=t[i=o]),We(u,i,e(o,n,r,i,t,a))})),u},Jn=4;var er=function(e){return Zn(e,Jn)};var tr=function(e,t){for(var n=-1,r=null==e?0:e.length,o=Array(r);++n<r;)o[n]=t(e[n],n,e);return o},nr="[object Symbol]";var rr=function(e){return"symbol"==typeof e||Qe(e)&&q(e)==nr},or="Expected a function";function ir(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError(or);var n=function(){var r=arguments,o=t?t.apply(this,r):r[0],i=n.cache;if(i.has(o))return i.get(o);var a=e.apply(this,r);return n.cache=i.set(o,a)||i,a};return n.cache=new(ir.Cache||Me),n}ir.Cache=Me;var ar=ir,ur=500;var lr=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,cr=/\\(\\)?/g,sr=function(e){var t=ar(e,(function(e){return n.size===ur&&n.clear(),e})),n=t.cache;return t}((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(lr,(function(e,n,r,o){t.push(r?o.replace(cr,"$1"):n||e)})),t})),fr=1/0;var dr=function(e){if("string"==typeof e||rr(e))return e;var t=e+"";return"0"==t&&1/e==-fr?"-0":t},pr=1/0,hr=M?M.prototype:void 0,vr=hr?hr.toString:void 0;var mr=function e(t){if("string"==typeof t)return t;if(et(t))return tr(t,e)+"";if(rr(t))return vr?vr.call(t):"";var n=t+"";return"0"==n&&1/t==-pr?"-0":n};var yr=function(e){return null==e?"":mr(e)};var gr=function(e){return et(e)?tr(e,dr):rr(e)?[e]:Ft(sr(yr(e)))},br=1,wr=4;var xr,_r=function(e){return Zn(e,br|wr)};n.d(t,"a",(function(){return Ir}));var kr=(xr=b()({})).Provider,Er=xr.Consumer;function Sr(e){var t=function(t){return Object(u.createElement)(Er,null,(function(n){return Object(u.createElement)(e,i({},t,{formik:n}))}))},n=e.displayName||e.name||e.constructor&&e.constructor.name||"Component";return t.WrappedComponent=e,t.displayName="FormikConnect("+n+")",y()(t,e)}var Cr=function(e){return"function"==typeof e},Tr=function(e){return null!==e&&"object"==typeof e},jr=function(e){return String(Math.floor(Number(e)))===e},Or=function(e){return"[object String]"===Object.prototype.toString.call(e)},Fr=function(e){return e!=e},Pr=function(e){return 0===u.Children.count(e)},Ar=function(e){return Tr(e)&&Cr(e.then)},Rr=function(e){return e&&Tr(e)&&Tr(e.target)};function Nr(e,t,n,r){void 0===r&&(r=0);for(var o=gr(t);e&&r<o.length;)e=e[o[r++]];return void 0===e?n:e}function Mr(e,t,n){for(var r=er(e),o=r,i=0,a=gr(t);i<a.length-1;i++){var u=a[i],l=Nr(e,a.slice(0,i+1));if(l)o=o[u]=er(l);else{var c=a[i+1];o=o[u]=jr(c)&&Number(c)>=0?[]:{}}}return(0===i?e:o)[a[i]]===n?e:(void 0===n?delete o[a[i]]:o[a[i]]=n,0===i&&void 0===n&&delete r[a[i]],r)}function Dr(e,t,n,r){void 0===n&&(n=new WeakMap),void 0===r&&(r={});for(var o=0,i=Object.keys(e);o<i.length;o++){var a=i[o],u=e[a];Tr(u)?n.get(u)||(n.set(u,!0),r[a]=Array.isArray(u)?[]:{},Dr(u,t,n,r[a])):r[a]=t}return r}var Ir=function(e){function t(t){var n=e.call(this,t)||this;return n.hcCache={},n.hbCache={},n.registerField=function(e,t){n.fields[e]=t},n.unregisterField=function(e){delete n.fields[e]},n.setErrors=function(e){n.setState({errors:e})},n.setTouched=function(e){n.setState({touched:e},(function(){n.props.validateOnBlur&&n.runValidations(n.state.values)}))},n.setValues=function(e){n.setState({values:e},(function(){n.props.validateOnChange&&n.runValidations(e)}))},n.setStatus=function(e){n.setState({status:e})},n.setError=function(e){n.setState({error:e})},n.setSubmitting=function(e){n.didMount&&n.setState({isSubmitting:e})},n.validateField=function(e){return n.setState({isValidating:!0}),n.runSingleFieldLevelValidation(e,Nr(n.state.values,e)).then((function(t){return n.didMount&&n.setState({errors:Mr(n.state.errors,e,t),isValidating:!1}),t}))},n.runSingleFieldLevelValidation=function(e,t){return new Promise((function(r){return r(n.fields[e].props.validate(t))})).then((function(e){return e}),(function(e){return e}))},n.runValidationSchema=function(e){return new Promise((function(t){var r=n.props.validationSchema,o=Cr(r)?r():r;(function(e,t,n,r){void 0===n&&(n=!1);void 0===r&&(r={});var o={};for(var i in e)if(e.hasOwnProperty(i)){var a=String(i);o[a]=""!==e[a]?e[a]:void 0}return t[n?"validateSync":"validate"](o,{abortEarly:!1,context:r})})(e,o).then((function(){t({})}),(function(e){t(function(e){var t={};if(0===e.inner.length)return Mr(t,e.path,e.message);for(var n=0,r=e.inner;n<r.length;n++){var o=r[n];t[o.path]||(t=Mr(t,o.path,o.message))}return t}(e))}))}))},n.runValidations=function(e){void 0===e&&(e=n.state.values),n.validator&&n.validator();var t=function(e){var t=!1;return[new Promise((function(n,r){e.then((function(e){return t?r({isCanceled:!0}):n(e)}),(function(e){return r(t?{isCanceled:!0}:e)}))})),function(){t=!0}]}(Promise.all([n.runFieldLevelValidations(e),n.props.validationSchema?n.runValidationSchema(e):{},n.props.validate?n.runValidateHandler(e):{}]).then((function(e){var t=e[0],n=e[1],r=e[2];return v.all([t,n,r],{arrayMerge:zr})}))),r=t[0],o=t[1];return n.validator=o,r.then((function(e){return n.didMount&&n.setState((function(t){return c()(t.errors,e)?null:{errors:e}})),e})).catch((function(e){return e}))},n.handleChange=function(e){var t=function(e,t){var r,o=t;if(Rr(e)){var a=e;a.persist&&a.persist();var u=a.target,l=u.type,c=u.name,s=u.id,f=u.checked;u.outerHTML;if(o=t||(c||s),r=a.target.value,/number|range/.test(l)){var d=parseFloat(a.target.value);r=Fr(d)?"":d}/checkbox/.test(l)&&(r=f)}else r=e;o&&n.setState((function(e){return i({},e,{values:Mr(e.values,o,r)})}),(function(){n.props.validateOnChange&&n.runValidations(Mr(n.state.values,o,r))}))};if(Or(e)){var r=e;return Cr(n.hcCache[r])||(n.hcCache[r]=function(e){return t(e,r)}),n.hcCache[r]}t(e)},n.setFieldValue=function(e,t,r){void 0===r&&(r=!0),n.didMount&&n.setState((function(n){return i({},n,{values:Mr(n.values,e,t)})}),(function(){n.props.validateOnChange&&r&&n.runValidations(n.state.values)}))},n.handleSubmit=function(e){e&&e.preventDefault&&e.preventDefault(),n.submitForm()},n.submitForm=function(){return n.setState((function(e){return{touched:Dr(e.values,!0),isSubmitting:!0,isValidating:!0,submitCount:e.submitCount+1}})),n.runValidations(n.state.values).then((function(e){n.didMount&&n.setState({isValidating:!1}),0===Object.keys(e).length?n.executeSubmit():n.didMount&&n.setState({isSubmitting:!1})}))},n.executeSubmit=function(){n.props.onSubmit(n.state.values,n.getFormikActions())},n.handleBlur=function(e){var t=function(e,t){var r=t;if(Rr(e)){var o=e;o.persist&&o.persist();var i=o.target,a=i.name,u=i.id;i.outerHTML;r=a||u}n.setState((function(e){return{touched:Mr(e.touched,r,!0)}})),n.props.validateOnBlur&&n.runValidations(n.state.values)};if(Or(e)){var r=e;return Cr(n.hbCache[r])||(n.hbCache[r]=function(e){return t(e,r)}),n.hbCache[r]}t(e)},n.setFieldTouched=function(e,t,r){void 0===t&&(t=!0),void 0===r&&(r=!0),n.setState((function(n){return i({},n,{touched:Mr(n.touched,e,t)})}),(function(){n.props.validateOnBlur&&r&&n.runValidations(n.state.values)}))},n.setFieldError=function(e,t){n.setState((function(n){return i({},n,{errors:Mr(n.errors,e,t)})}))},n.resetForm=function(e){var t=e||n.props.initialValues;n.initialValues=t,n.setState({isSubmitting:!1,isValidating:!1,errors:{},touched:{},error:void 0,status:n.props.initialStatus,values:t,submitCount:0})},n.handleReset=function(){if(n.props.onReset){var e=n.props.onReset(n.state.values,n.getFormikActions());Ar(e)?e.then(n.resetForm):n.resetForm()}else n.resetForm()},n.setFormikState=function(e,t){return n.setState(e,t)},n.validateForm=function(e){return n.setState({isValidating:!0}),n.runValidations(e).then((function(e){return n.didMount&&n.setState({isValidating:!1}),e}))},n.getFormikActions=function(){return{resetForm:n.resetForm,submitForm:n.submitForm,validateForm:n.validateForm,validateField:n.validateField,setError:n.setError,setErrors:n.setErrors,setFieldError:n.setFieldError,setFieldTouched:n.setFieldTouched,setFieldValue:n.setFieldValue,setStatus:n.setStatus,setSubmitting:n.setSubmitting,setTouched:n.setTouched,setValues:n.setValues,setFormikState:n.setFormikState}},n.getFormikComputedProps=function(){var e=n.props.isInitialValid,t=!c()(n.initialValues,n.state.values);return{dirty:t,isValid:t?n.state.errors&&0===Object.keys(n.state.errors).length:!1!==e&&Cr(e)?e(n.props):e,initialValues:n.initialValues}},n.getFormikBag=function(){return i({},n.state,n.getFormikActions(),n.getFormikComputedProps(),{registerField:n.registerField,unregisterField:n.unregisterField,handleBlur:n.handleBlur,handleChange:n.handleChange,handleReset:n.handleReset,handleSubmit:n.handleSubmit,validateOnChange:n.props.validateOnChange,validateOnBlur:n.props.validateOnBlur})},n.getFormikContext=function(){return i({},n.getFormikBag(),{validationSchema:n.props.validationSchema,validate:n.props.validate,initialValues:n.initialValues})},n.state={values:t.initialValues||{},errors:{},touched:{},isSubmitting:!1,isValidating:!1,submitCount:0,status:t.initialStatus},n.didMount=!1,n.fields={},n.initialValues=t.initialValues||{},n}return o(t,e),t.prototype.componentDidMount=function(){this.didMount=!0},t.prototype.componentWillUnmount=function(){this.didMount=!1,this.validator&&this.validator()},t.prototype.componentDidUpdate=function(e){this.props.enableReinitialize&&!c()(e.initialValues,this.props.initialValues)&&(this.initialValues=this.props.initialValues,this.resetForm(this.props.initialValues))},t.prototype.runFieldLevelValidations=function(e){var t=this,n=Object.keys(this.fields).filter((function(e){return t.fields&&t.fields[e]&&t.fields[e].props.validate&&Cr(t.fields[e].props.validate)})),r=n.length>0?n.map((function(n){return t.runSingleFieldLevelValidation(n,Nr(e,n))})):[Promise.resolve("DO_NOT_DELETE_YOU_WILL_BE_FIRED")];return Promise.all(r).then((function(e){return e.reduce((function(e,t,r){return"DO_NOT_DELETE_YOU_WILL_BE_FIRED"===t?e:(t&&(e=Mr(e,n[r],t)),e)}),{})}))},t.prototype.runValidateHandler=function(e){var t=this;return new Promise((function(n){var r=t.props.validate(e);void 0===r?n({}):Ar(r)?r.then((function(){n({})}),(function(e){n(e)})):n(r)}))},t.prototype.render=function(){var e=this.props,t=e.component,n=e.render,r=e.children,o=this.getFormikBag(),i=this.getFormikContext();return Object(u.createElement)(kr,{value:i},t?Object(u.createElement)(t,o):n?n(o):r?Cr(r)?r(o):Pr(r)?null:u.Children.only(r):null)},t.defaultProps={validateOnChange:!0,validateOnBlur:!0,isInitialValid:!1,enableReinitialize:!1},t}(u.Component);function zr(e,t,n){var r=e.slice();return t.forEach((function(t,o){if(void 0===r[o]){var i=!1!==n.clone&&n.isMergeableObject(t);r[o]=i?v(Array.isArray(t)?[]:{},t,n):t}else n.isMergeableObject(t)?r[o]=v(e[o],t,n):-1===e.indexOf(t)&&r.push(t)})),r}u.Component;Sr((function(e){var t=e.formik,n=t.handleReset,r=t.handleSubmit,o=a(e,["formik"]);return Object(u.createElement)("form",i({onReset:n,onSubmit:r},o))})).displayName="Form";var Ur=function(e,t,n){var r=(e||[]).slice(),o=r[t];return r.splice(t,1),r.splice(n,0,o),r},Lr=function(e,t,n){var r=(e||[]).slice(),o=r[t];return r[t]=r[n],r[n]=o,r},$r=function(e,t,n){var r=(e||[]).slice();return r.splice(t,0,n),r},Vr=function(e,t,n){var r=(e||[]).slice();return r[t]=n,r};u.Component,u.Component,u.Component},function(e,t,n){"use strict";var r=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|itemProp|itemScope|itemType|itemID|itemRef|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,o=function(e){var t={};return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}((function(e){return r.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91}));t.a=o},function(e,t,n){"use strict";function r(e){return Object.prototype.toString.call(e).slice(8,-1)}function o(e){return"Object"===r(e)&&(e.constructor===Object&&Object.getPrototypeOf(e)===Object.prototype)}function i(e){return"Array"===r(e)}function a(e){return"Symbol"===r(e)}function u(e,t,n,r){var o=r.propertyIsEnumerable(t)?"enumerable":"nonenumerable";"enumerable"===o&&(e[t]=n),"nonenumerable"===o&&Object.defineProperty(e,t,{value:n,enumerable:!1,writable:!0,configurable:!0})}t.a=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=null,l=e;return o(e)&&e.extensions&&1===Object.keys(e).length&&(l={},r=e.extensions),t.reduce((function(e,t){return function e(t,n,r){if(!o(n))return r&&i(r)&&r.forEach((function(e){n=e(t,n)})),n;var l={};if(o(t)){var c=Object.getOwnPropertyNames(t),s=Object.getOwnPropertySymbols(t);l=c.concat(s).reduce((function(e,r){var o=t[r];return(!a(r)&&!Object.getOwnPropertyNames(n).includes(r)||a(r)&&!Object.getOwnPropertySymbols(n).includes(r))&&u(e,r,o,t),e}),{})}var f=Object.getOwnPropertyNames(n),d=Object.getOwnPropertySymbols(n);return f.concat(d).reduce((function(a,l){var c=n[l],s=o(t)?t[l]:void 0;return r&&i(r)&&r.forEach((function(e){c=e(s,c)})),void 0!==s&&o(c)&&(c=e(s,c,r)),u(a,l,c,n),a}),l)}(e,t,r)}),l)}},function(e,t,n){"use strict";
/** @license React v16.9.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(73),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,u=o?Symbol.for("react.fragment"):60107,l=o?Symbol.for("react.strict_mode"):60108,c=o?Symbol.for("react.profiler"):60114,s=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,d=o?Symbol.for("react.forward_ref"):60112,p=o?Symbol.for("react.suspense"):60113,h=o?Symbol.for("react.suspense_list"):60120,v=o?Symbol.for("react.memo"):60115,m=o?Symbol.for("react.lazy"):60116;o&&Symbol.for("react.fundamental"),o&&Symbol.for("react.responder");var y="function"==typeof Symbol&&Symbol.iterator;function g(e){for(var t=e.message,n="https://reactjs.org/docs/error-decoder.html?invariant="+t,r=1;r<arguments.length;r++)n+="&args[]="+encodeURIComponent(arguments[r]);return e.message="Minified React error #"+t+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",e}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},w={};function x(e,t,n){this.props=e,this.context=t,this.refs=w,this.updater=n||b}function _(){}function k(e,t,n){this.props=e,this.context=t,this.refs=w,this.updater=n||b}x.prototype.isReactComponent={},x.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw g(Error(85));this.updater.enqueueSetState(this,e,t,"setState")},x.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},_.prototype=x.prototype;var E=k.prototype=new _;E.constructor=k,r(E,x.prototype),E.isPureReactComponent=!0;var S={current:null},C={suspense:null},T={current:null},j=Object.prototype.hasOwnProperty,O={key:!0,ref:!0,__self:!0,__source:!0};function F(e,t,n){var r=void 0,o={},a=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)j.call(t,r)&&!O.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var c=Array(l),s=0;s<l;s++)c[s]=arguments[s+2];o.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:i,type:e,key:a,ref:u,props:o,_owner:T.current}}function P(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var A=/\/+/g,R=[];function N(e,t,n,r){if(R.length){var o=R.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function M(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>R.length&&R.push(e)}function D(e,t,n){return null==e?0:function e(t,n,r,o){var u=typeof t;"undefined"!==u&&"boolean"!==u||(t=null);var l=!1;if(null===t)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case i:case a:l=!0}}if(l)return r(o,t,""===n?"."+I(t,0):n),1;if(l=0,n=""===n?".":n+":",Array.isArray(t))for(var c=0;c<t.length;c++){var s=n+I(u=t[c],c);l+=e(u,s,r,o)}else if(null===t||"object"!=typeof t?s=null:s="function"==typeof(s=y&&t[y]||t["@@iterator"])?s:null,"function"==typeof s)for(t=s.call(t),c=0;!(u=t.next()).done;)l+=e(u=u.value,s=n+I(u,c++),r,o);else if("object"===u)throw r=""+t,g(Error(31),"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,"");return l}(e,"",t,n)}function I(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function z(e,t){e.func.call(e.context,t,e.count++)}function U(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?L(e,r,n,(function(e){return e})):null!=e&&(P(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(A,"$&/")+"/")+n)),r.push(e))}function L(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(A,"$&/")+"/"),D(e,U,t=N(t,i,r,o)),M(t)}function $(){var e=S.current;if(null===e)throw g(Error(321));return e}var V={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return L(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;D(e,z,t=N(null,null,t,n)),M(t)},count:function(e){return D(e,(function(){return null}),null)},toArray:function(e){var t=[];return L(e,t,null,(function(e){return e})),t},only:function(e){if(!P(e))throw g(Error(143));return e}},createRef:function(){return{current:null}},Component:x,PureComponent:k,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:d,render:e}},lazy:function(e){return{$$typeof:m,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:v,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return $().useCallback(e,t)},useContext:function(e,t){return $().useContext(e,t)},useEffect:function(e,t){return $().useEffect(e,t)},useImperativeHandle:function(e,t,n){return $().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return $().useLayoutEffect(e,t)},useMemo:function(e,t){return $().useMemo(e,t)},useReducer:function(e,t,n){return $().useReducer(e,t,n)},useRef:function(e){return $().useRef(e)},useState:function(e){return $().useState(e)},Fragment:u,Profiler:c,StrictMode:l,Suspense:p,unstable_SuspenseList:h,createElement:F,cloneElement:function(e,t,n){if(null==e)throw g(Error(267),e);var o=void 0,a=r({},e.props),u=e.key,l=e.ref,c=e._owner;if(null!=t){void 0!==t.ref&&(l=t.ref,c=T.current),void 0!==t.key&&(u=""+t.key);var s=void 0;for(o in e.type&&e.type.defaultProps&&(s=e.type.defaultProps),t)j.call(t,o)&&!O.hasOwnProperty(o)&&(a[o]=void 0===t[o]&&void 0!==s?s[o]:t[o])}if(1===(o=arguments.length-2))a.children=n;else if(1<o){s=Array(o);for(var f=0;f<o;f++)s[f]=arguments[f+2];a.children=s}return{$$typeof:i,type:e.type,key:u,ref:l,props:a,_owner:c}},createFactory:function(e){var t=F.bind(null,e);return t.type=e,t},isValidElement:P,version:"16.9.0",unstable_withSuspenseConfig:function(e,t){var n=C.suspense;C.suspense=void 0===t?null:t;try{e()}finally{C.suspense=n}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:S,ReactCurrentBatchConfig:C,ReactCurrentOwner:T,IsSomeRendererActing:{current:!1},assign:r}},B={default:V},W=B&&V||B;e.exports=W.default||W},function(e,t,n){"use strict";
/** @license React v16.9.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(73),i=n(135);function a(e){for(var t=e.message,n="https://reactjs.org/docs/error-decoder.html?invariant="+t,r=1;r<arguments.length;r++)n+="&args[]="+encodeURIComponent(arguments[r]);return e.message="Minified React error #"+t+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",e}if(!r)throw a(Error(227));var u=null,l={};function c(){if(u)for(var e in l){var t=l[e],n=u.indexOf(e);if(!(-1<n))throw a(Error(96),e);if(!f[n]){if(!t.extractEvents)throw a(Error(97),e);for(var r in f[n]=t,n=t.eventTypes){var o=void 0,i=n[r],c=t,p=r;if(d.hasOwnProperty(p))throw a(Error(99),p);d[p]=i;var h=i.phasedRegistrationNames;if(h){for(o in h)h.hasOwnProperty(o)&&s(h[o],c,p);o=!0}else i.registrationName?(s(i.registrationName,c,p),o=!0):o=!1;if(!o)throw a(Error(98),r,e)}}}}function s(e,t,n){if(p[e])throw a(Error(100),e);p[e]=t,h[e]=t.eventTypes[n].dependencies}var f=[],d={},p={},h={};function v(e,t,n,r,o,i,a,u,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var m=!1,y=null,g=!1,b=null,w={onError:function(e){m=!0,y=e}};function x(e,t,n,r,o,i,a,u,l){m=!1,y=null,v.apply(w,arguments)}var _=null,k=null,E=null;function S(e,t,n){var r=e.type||"unknown-event";e.currentTarget=E(n),function(e,t,n,r,o,i,u,l,c){if(x.apply(this,arguments),m){if(!m)throw a(Error(198));var s=y;m=!1,y=null,g||(g=!0,b=s)}}(r,t,void 0,e),e.currentTarget=null}function C(e,t){if(null==t)throw a(Error(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function T(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var j=null;function O(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)S(e,t[r],n[r]);else t&&S(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function F(e){if(null!==e&&(j=C(j,e)),e=j,j=null,e){if(T(e,O),j)throw a(Error(95));if(g)throw e=b,g=!1,b=null,e}}var P={injectEventPluginOrder:function(e){if(u)throw a(Error(101));u=Array.prototype.slice.call(e),c()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!l.hasOwnProperty(t)||l[t]!==r){if(l[t])throw a(Error(102),t);l[t]=r,n=!0}}n&&c()}};function A(e,t){var n=e.stateNode;if(!n)return null;var r=_(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw a(Error(231),t,typeof n);return n}var R=Math.random().toString(36).slice(2),N="__reactInternalInstance$"+R,M="__reactEventHandlers$"+R;function D(e){if(e[N])return e[N];for(;!e[N];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[N]).tag||6===e.tag?e:null}function I(e){return!(e=e[N])||5!==e.tag&&6!==e.tag?null:e}function z(e){if(5===e.tag||6===e.tag)return e.stateNode;throw a(Error(33))}function U(e){return e[M]||null}function L(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function $(e,t,n){(t=A(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=C(n._dispatchListeners,t),n._dispatchInstances=C(n._dispatchInstances,e))}function V(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=L(t);for(t=n.length;0<t--;)$(n[t],"captured",e);for(t=0;t<n.length;t++)$(n[t],"bubbled",e)}}function B(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=A(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=C(n._dispatchListeners,t),n._dispatchInstances=C(n._dispatchInstances,e))}function W(e){e&&e.dispatchConfig.registrationName&&B(e._targetInst,null,e)}function H(e){T(e,V)}var q=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement);function Q(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Y={animationend:Q("Animation","AnimationEnd"),animationiteration:Q("Animation","AnimationIteration"),animationstart:Q("Animation","AnimationStart"),transitionend:Q("Transition","TransitionEnd")},K={},G={};function X(e){if(K[e])return K[e];if(!Y[e])return e;var t,n=Y[e];for(t in n)if(n.hasOwnProperty(t)&&t in G)return K[e]=n[t];return e}q&&(G=document.createElement("div").style,"AnimationEvent"in window||(delete Y.animationend.animation,delete Y.animationiteration.animation,delete Y.animationstart.animation),"TransitionEvent"in window||delete Y.transitionend.transition);var Z=X("animationend"),J=X("animationiteration"),ee=X("animationstart"),te=X("transitionend"),ne="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),re=null,oe=null,ie=null;function ae(){if(ie)return ie;var e,t,n=oe,r=n.length,o="value"in re?re.value:re.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return ie=o.slice(e,1<t?1-t:void 0)}function ue(){return!0}function le(){return!1}function ce(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?ue:le,this.isPropagationStopped=le,this}function se(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function fe(e){if(!(e instanceof this))throw a(Error(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function de(e){e.eventPool=[],e.getPooled=se,e.release=fe}o(ce.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ue)},persist:function(){this.isPersistent=ue},isPersistent:le,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=le,this._dispatchInstances=this._dispatchListeners=null}}),ce.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},ce.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,de(n),n},de(ce);var pe=ce.extend({data:null}),he=ce.extend({data:null}),ve=[9,13,27,32],me=q&&"CompositionEvent"in window,ye=null;q&&"documentMode"in document&&(ye=document.documentMode);var ge=q&&"TextEvent"in window&&!ye,be=q&&(!me||ye&&8<ye&&11>=ye),we=String.fromCharCode(32),xe={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},_e=!1;function ke(e,t){switch(e){case"keyup":return-1!==ve.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Ee(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Se=!1;var Ce={eventTypes:xe,extractEvents:function(e,t,n,r){var o=void 0,i=void 0;if(me)e:{switch(e){case"compositionstart":o=xe.compositionStart;break e;case"compositionend":o=xe.compositionEnd;break e;case"compositionupdate":o=xe.compositionUpdate;break e}o=void 0}else Se?ke(e,n)&&(o=xe.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=xe.compositionStart);return o?(be&&"ko"!==n.locale&&(Se||o!==xe.compositionStart?o===xe.compositionEnd&&Se&&(i=ae()):(oe="value"in(re=r)?re.value:re.textContent,Se=!0)),o=pe.getPooled(o,t,n,r),i?o.data=i:null!==(i=Ee(n))&&(o.data=i),H(o),i=o):i=null,(e=ge?function(e,t){switch(e){case"compositionend":return Ee(t);case"keypress":return 32!==t.which?null:(_e=!0,we);case"textInput":return(e=t.data)===we&&_e?null:e;default:return null}}(e,n):function(e,t){if(Se)return"compositionend"===e||!me&&ke(e,t)?(e=ae(),ie=oe=re=null,Se=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return be&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=he.getPooled(xe.beforeInput,t,n,r)).data=e,H(t)):t=null,null===i?t:null===t?i:[i,t]}},Te=null,je=null,Oe=null;function Fe(e){if(e=k(e)){if("function"!=typeof Te)throw a(Error(280));var t=_(e.stateNode);Te(e.stateNode,e.type,t)}}function Pe(e){je?Oe?Oe.push(e):Oe=[e]:je=e}function Ae(){if(je){var e=je,t=Oe;if(Oe=je=null,Fe(e),t)for(e=0;e<t.length;e++)Fe(t[e])}}function Re(e,t){return e(t)}function Ne(e,t,n,r){return e(t,n,r)}function Me(){}var De=Re,Ie=!1;function ze(){null===je&&null===Oe||(Me(),Ae())}var Ue={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Le(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Ue[e.type]:"textarea"===t}function $e(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function Ve(e){if(!q)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}function Be(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function We(e){e._valueTracker||(e._valueTracker=function(e){var t=Be(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function He(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Be(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var qe=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;qe.hasOwnProperty("ReactCurrentDispatcher")||(qe.ReactCurrentDispatcher={current:null}),qe.hasOwnProperty("ReactCurrentBatchConfig")||(qe.ReactCurrentBatchConfig={suspense:null});var Qe=/^(.*)[\\\/]/,Ye="function"==typeof Symbol&&Symbol.for,Ke=Ye?Symbol.for("react.element"):60103,Ge=Ye?Symbol.for("react.portal"):60106,Xe=Ye?Symbol.for("react.fragment"):60107,Ze=Ye?Symbol.for("react.strict_mode"):60108,Je=Ye?Symbol.for("react.profiler"):60114,et=Ye?Symbol.for("react.provider"):60109,tt=Ye?Symbol.for("react.context"):60110,nt=Ye?Symbol.for("react.concurrent_mode"):60111,rt=Ye?Symbol.for("react.forward_ref"):60112,ot=Ye?Symbol.for("react.suspense"):60113,it=Ye?Symbol.for("react.suspense_list"):60120,at=Ye?Symbol.for("react.memo"):60115,ut=Ye?Symbol.for("react.lazy"):60116;Ye&&Symbol.for("react.fundamental"),Ye&&Symbol.for("react.responder");var lt="function"==typeof Symbol&&Symbol.iterator;function ct(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=lt&&e[lt]||e["@@iterator"])?e:null}function st(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case Xe:return"Fragment";case Ge:return"Portal";case Je:return"Profiler";case Ze:return"StrictMode";case ot:return"Suspense";case it:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case tt:return"Context.Consumer";case et:return"Context.Provider";case rt:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case at:return st(e.type);case ut:if(e=1===e._status?e._result:null)return st(e)}return null}function ft(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,i=st(e.type);n=null,r&&(n=st(r.type)),r=i,i="",o?i=" (at "+o.fileName.replace(Qe,"")+":"+o.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+i}t+=n,e=e.return}while(e);return t}var dt=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,pt=Object.prototype.hasOwnProperty,ht={},vt={};function mt(e,t,n,r,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i}var yt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){yt[e]=new mt(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];yt[t]=new mt(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){yt[e]=new mt(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){yt[e]=new mt(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){yt[e]=new mt(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){yt[e]=new mt(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){yt[e]=new mt(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){yt[e]=new mt(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){yt[e]=new mt(e,5,!1,e.toLowerCase(),null,!1)}));var gt=/[\-:]([a-z])/g;function bt(e){return e[1].toUpperCase()}function wt(e,t,n,r){var o=yt.hasOwnProperty(t)?yt[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!pt.call(vt,e)||!pt.call(ht,e)&&(dt.test(e)?vt[e]=!0:(ht[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function xt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function _t(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function kt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=xt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Et(e,t){null!=(t=t.checked)&&wt(e,"checked",t,!1)}function St(e,t){Et(e,t);var n=xt(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Tt(e,t.type,n):t.hasOwnProperty("defaultValue")&&Tt(e,t.type,xt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Ct(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Tt(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(gt,bt);yt[t]=new mt(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(gt,bt);yt[t]=new mt(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(gt,bt);yt[t]=new mt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){yt[e]=new mt(e,1,!1,e.toLowerCase(),null,!1)})),yt.xlinkHref=new mt("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){yt[e]=new mt(e,1,!1,e.toLowerCase(),null,!0)}));var jt={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Ot(e,t,n){return(e=ce.getPooled(jt.change,e,t,n)).type="change",Pe(n),H(e),e}var Ft=null,Pt=null;function At(e){F(e)}function Rt(e){if(He(z(e)))return e}function Nt(e,t){if("change"===e)return t}var Mt=!1;function Dt(){Ft&&(Ft.detachEvent("onpropertychange",It),Pt=Ft=null)}function It(e){if("value"===e.propertyName&&Rt(Pt))if(e=Ot(Pt,e,$e(e)),Ie)F(e);else{Ie=!0;try{Re(At,e)}finally{Ie=!1,ze()}}}function zt(e,t,n){"focus"===e?(Dt(),Pt=n,(Ft=t).attachEvent("onpropertychange",It)):"blur"===e&&Dt()}function Ut(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Rt(Pt)}function Lt(e,t){if("click"===e)return Rt(t)}function $t(e,t){if("input"===e||"change"===e)return Rt(t)}q&&(Mt=Ve("input")&&(!document.documentMode||9<document.documentMode));var Vt={eventTypes:jt,_isInputEventSupported:Mt,extractEvents:function(e,t,n,r){var o=t?z(t):window,i=void 0,a=void 0,u=o.nodeName&&o.nodeName.toLowerCase();if("select"===u||"input"===u&&"file"===o.type?i=Nt:Le(o)?Mt?i=$t:(i=Ut,a=zt):(u=o.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=Lt),i&&(i=i(e,t)))return Ot(i,n,r);a&&a(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Tt(o,"number",o.value)}},Bt=ce.extend({view:null,detail:null}),Wt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Ht(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Wt[e])&&!!t[e]}function qt(){return Ht}var Qt=0,Yt=0,Kt=!1,Gt=!1,Xt=Bt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:qt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Qt;return Qt=e.screenX,Kt?"mousemove"===e.type?e.screenX-t:0:(Kt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Yt;return Yt=e.screenY,Gt?"mousemove"===e.type?e.screenY-t:0:(Gt=!0,0)}}),Zt=Xt.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Jt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},en={eventTypes:Jt,extractEvents:function(e,t,n,r){var o="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(o&&(n.relatedTarget||n.fromElement)||!i&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,i?(i=t,t=(t=n.relatedTarget||n.toElement)?D(t):null):i=null,i===t)return null;var a=void 0,u=void 0,l=void 0,c=void 0;"mouseout"===e||"mouseover"===e?(a=Xt,u=Jt.mouseLeave,l=Jt.mouseEnter,c="mouse"):"pointerout"!==e&&"pointerover"!==e||(a=Zt,u=Jt.pointerLeave,l=Jt.pointerEnter,c="pointer");var s=null==i?o:z(i);if(o=null==t?o:z(t),(e=a.getPooled(u,i,n,r)).type=c+"leave",e.target=s,e.relatedTarget=o,(n=a.getPooled(l,t,n,r)).type=c+"enter",n.target=o,n.relatedTarget=s,r=t,i&&r)e:{for(o=r,c=0,a=t=i;a;a=L(a))c++;for(a=0,l=o;l;l=L(l))a++;for(;0<c-a;)t=L(t),c--;for(;0<a-c;)o=L(o),a--;for(;c--;){if(t===o||t===o.alternate)break e;t=L(t),o=L(o)}t=null}else t=null;for(o=t,t=[];i&&i!==o&&(null===(c=i.alternate)||c!==o);)t.push(i),i=L(i);for(i=[];r&&r!==o&&(null===(c=r.alternate)||c!==o);)i.push(r),r=L(r);for(r=0;r<t.length;r++)B(t[r],"bubbled",e);for(r=i.length;0<r--;)B(i[r],"captured",n);return[e,n]}};function tn(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t}var nn=Object.prototype.hasOwnProperty;function rn(e,t){if(tn(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!nn.call(t,n[r])||!tn(e[n[r]],t[n[r]]))return!1;return!0}function on(e,t){return{responder:e,props:t}}function an(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function un(e){if(2!==an(e))throw a(Error(188))}function ln(e){if(!(e=function(e){var t=e.alternate;if(!t){if(3===(t=an(e)))throw a(Error(188));return 1===t?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return un(o),e;if(i===r)return un(o),t;i=i.sibling}throw a(Error(188))}if(n.return!==r.return)n=o,r=i;else{for(var u=!1,l=o.child;l;){if(l===n){u=!0,n=o,r=i;break}if(l===r){u=!0,r=o,n=i;break}l=l.sibling}if(!u){for(l=i.child;l;){if(l===n){u=!0,n=i,r=o;break}if(l===r){u=!0,r=i,n=o;break}l=l.sibling}if(!u)throw a(Error(189))}}if(n.alternate!==r)throw a(Error(190))}if(3!==n.tag)throw a(Error(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}new Map,new Map,new Set,new Map;var cn=ce.extend({animationName:null,elapsedTime:null,pseudoElement:null}),sn=ce.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),fn=Bt.extend({relatedTarget:null});function dn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}for(var pn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},hn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},vn=Bt.extend({key:function(e){if(e.key){var t=pn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=dn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?hn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:qt,charCode:function(e){return"keypress"===e.type?dn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?dn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),mn=Xt.extend({dataTransfer:null}),yn=Bt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:qt}),gn=ce.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),bn=Xt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),wn=[["blur","blur",0],["cancel","cancel",0],["click","click",0],["close","close",0],["contextmenu","contextMenu",0],["copy","copy",0],["cut","cut",0],["auxclick","auxClick",0],["dblclick","doubleClick",0],["dragend","dragEnd",0],["dragstart","dragStart",0],["drop","drop",0],["focus","focus",0],["input","input",0],["invalid","invalid",0],["keydown","keyDown",0],["keypress","keyPress",0],["keyup","keyUp",0],["mousedown","mouseDown",0],["mouseup","mouseUp",0],["paste","paste",0],["pause","pause",0],["play","play",0],["pointercancel","pointerCancel",0],["pointerdown","pointerDown",0],["pointerup","pointerUp",0],["ratechange","rateChange",0],["reset","reset",0],["seeked","seeked",0],["submit","submit",0],["touchcancel","touchCancel",0],["touchend","touchEnd",0],["touchstart","touchStart",0],["volumechange","volumeChange",0],["drag","drag",1],["dragenter","dragEnter",1],["dragexit","dragExit",1],["dragleave","dragLeave",1],["dragover","dragOver",1],["mousemove","mouseMove",1],["mouseout","mouseOut",1],["mouseover","mouseOver",1],["pointermove","pointerMove",1],["pointerout","pointerOut",1],["pointerover","pointerOver",1],["scroll","scroll",1],["toggle","toggle",1],["touchmove","touchMove",1],["wheel","wheel",1],["abort","abort",2],[Z,"animationEnd",2],[J,"animationIteration",2],[ee,"animationStart",2],["canplay","canPlay",2],["canplaythrough","canPlayThrough",2],["durationchange","durationChange",2],["emptied","emptied",2],["encrypted","encrypted",2],["ended","ended",2],["error","error",2],["gotpointercapture","gotPointerCapture",2],["load","load",2],["loadeddata","loadedData",2],["loadedmetadata","loadedMetadata",2],["loadstart","loadStart",2],["lostpointercapture","lostPointerCapture",2],["playing","playing",2],["progress","progress",2],["seeking","seeking",2],["stalled","stalled",2],["suspend","suspend",2],["timeupdate","timeUpdate",2],[te,"transitionEnd",2],["waiting","waiting",2]],xn={},_n={},kn=0;kn<wn.length;kn++){var En=wn[kn],Sn=En[0],Cn=En[1],Tn=En[2],jn="on"+(Cn[0].toUpperCase()+Cn.slice(1)),On={phasedRegistrationNames:{bubbled:jn,captured:jn+"Capture"},dependencies:[Sn],eventPriority:Tn};xn[Cn]=On,_n[Sn]=On}var Fn={eventTypes:xn,getEventPriority:function(e){return void 0!==(e=_n[e])?e.eventPriority:2},extractEvents:function(e,t,n,r){var o=_n[e];if(!o)return null;switch(e){case"keypress":if(0===dn(n))return null;case"keydown":case"keyup":e=vn;break;case"blur":case"focus":e=fn;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Xt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=yn;break;case Z:case J:case ee:e=cn;break;case te:e=gn;break;case"scroll":e=Bt;break;case"wheel":e=bn;break;case"copy":case"cut":case"paste":e=sn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Zt;break;default:e=ce}return H(t=e.getPooled(o,t,n,r)),t}},Pn=Fn.getEventPriority,An=[];function Rn(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r;for(r=n;r.return;)r=r.return;if(!(r=3!==r.tag?null:r.stateNode.containerInfo))break;e.ancestors.push(n),n=D(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=$e(e.nativeEvent);r=e.topLevelType;for(var i=e.nativeEvent,a=null,u=0;u<f.length;u++){var l=f[u];l&&(l=l.extractEvents(r,t,i,o))&&(a=C(a,l))}F(a)}}var Nn=!0;function Mn(e,t){Dn(t,e,!1)}function Dn(e,t,n){switch(Pn(t)){case 0:var r=In.bind(null,t,1);break;case 1:r=zn.bind(null,t,1);break;default:r=Un.bind(null,t,1)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function In(e,t,n){Ie||Me();var r=Un,o=Ie;Ie=!0;try{Ne(r,e,t,n)}finally{(Ie=o)||ze()}}function zn(e,t,n){Un(e,t,n)}function Un(e,t,n){if(Nn){if(null===(t=D(t=$e(n)))||"number"!=typeof t.tag||2===an(t)||(t=null),An.length){var r=An.pop();r.topLevelType=e,r.nativeEvent=n,r.targetInst=t,e=r}else e={topLevelType:e,nativeEvent:n,targetInst:t,ancestors:[]};try{if(n=e,Ie)Rn(n);else{Ie=!0;try{De(Rn,n,void 0)}finally{Ie=!1,ze()}}}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>An.length&&An.push(e)}}}var Ln=new("function"==typeof WeakMap?WeakMap:Map);function $n(e){var t=Ln.get(e);return void 0===t&&(t=new Set,Ln.set(e,t)),t}function Vn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Bn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Wn(e,t){var n,r=Bn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Bn(r)}}function Hn(){for(var e=window,t=Vn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Vn((e=t.contentWindow).document)}return t}function qn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var Qn=q&&"documentMode"in document&&11>=document.documentMode,Yn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Kn=null,Gn=null,Xn=null,Zn=!1;function Jn(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Zn||null==Kn||Kn!==Vn(n)?null:("selectionStart"in(n=Kn)&&qn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Xn&&rn(Xn,n)?null:(Xn=n,(e=ce.getPooled(Yn.select,Gn,e,t)).type="select",e.target=Kn,H(e),e))}var er={eventTypes:Yn,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=$n(i),o=h.onSelect;for(var a=0;a<o.length;a++)if(!i.has(o[a])){i=!1;break e}i=!0}o=!i}if(o)return null;switch(i=t?z(t):window,e){case"focus":(Le(i)||"true"===i.contentEditable)&&(Kn=i,Gn=t,Xn=null);break;case"blur":Xn=Gn=Kn=null;break;case"mousedown":Zn=!0;break;case"contextmenu":case"mouseup":case"dragend":return Zn=!1,Jn(n,r);case"selectionchange":if(Qn)break;case"keydown":case"keyup":return Jn(n,r)}return null}};function tr(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function nr(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+xt(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function rr(e,t){if(null!=t.dangerouslySetInnerHTML)throw a(Error(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function or(e,t){var n=t.value;if(null==n){if(n=t.defaultValue,null!=(t=t.children)){if(null!=n)throw a(Error(92));if(Array.isArray(t)){if(!(1>=t.length))throw a(Error(93));t=t[0]}n=t}null==n&&(n="")}e._wrapperState={initialValue:xt(n)}}function ir(e,t){var n=xt(t.value),r=xt(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ar(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}P.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),_=U,k=I,E=z,P.injectEventPluginsByName({SimpleEventPlugin:Fn,EnterLeaveEventPlugin:en,ChangeEventPlugin:Vt,SelectEventPlugin:er,BeforeInputEventPlugin:Ce});var ur={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function lr(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function cr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?lr(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var sr=void 0,fr=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==ur.svg||"innerHTML"in e)e.innerHTML=t;else{for((sr=sr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=sr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function dr(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pr={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},hr=["Webkit","ms","Moz","O"];function vr(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pr.hasOwnProperty(e)&&pr[e]?(""+t).trim():t+"px"}function mr(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=vr(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(pr).forEach((function(e){hr.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pr[t]=pr[e]}))}));var yr=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function gr(e,t){if(t){if(yr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw a(Error(137),e,"");if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw a(Error(60));if(!("object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML))throw a(Error(61))}if(null!=t.style&&"object"!=typeof t.style)throw a(Error(62),"")}}function br(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function wr(e,t){var n=$n(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=h[t];for(var r=0;r<t.length;r++){var o=t[r];if(!n.has(o)){switch(o){case"scroll":Dn(e,"scroll",!0);break;case"focus":case"blur":Dn(e,"focus",!0),Dn(e,"blur",!0),n.add("blur"),n.add("focus");break;case"cancel":case"close":Ve(o)&&Dn(e,o,!0);break;case"invalid":case"submit":case"reset":break;default:-1===ne.indexOf(o)&&Mn(o,e)}n.add(o)}}}function xr(){}var _r=null,kr=null;function Er(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Sr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Cr="function"==typeof setTimeout?setTimeout:void 0,Tr="function"==typeof clearTimeout?clearTimeout:void 0;function jr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}new Set;var Or=[],Fr=-1;function Pr(e){0>Fr||(e.current=Or[Fr],Or[Fr]=null,Fr--)}function Ar(e,t){Or[++Fr]=e.current,e.current=t}var Rr={},Nr={current:Rr},Mr={current:!1},Dr=Rr;function Ir(e,t){var n=e.type.contextTypes;if(!n)return Rr;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function zr(e){return null!=(e=e.childContextTypes)}function Ur(e){Pr(Mr),Pr(Nr)}function Lr(e){Pr(Mr),Pr(Nr)}function $r(e,t,n){if(Nr.current!==Rr)throw a(Error(168));Ar(Nr,t),Ar(Mr,n)}function Vr(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw a(Error(108),st(t)||"Unknown",i);return o({},n,r)}function Br(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||Rr,Dr=Nr.current,Ar(Nr,t),Ar(Mr,Mr.current),!0}function Wr(e,t,n){var r=e.stateNode;if(!r)throw a(Error(169));n?(t=Vr(e,t,Dr),r.__reactInternalMemoizedMergedChildContext=t,Pr(Mr),Pr(Nr),Ar(Nr,t)):Pr(Mr),Ar(Mr,n)}var Hr=i.unstable_runWithPriority,qr=i.unstable_scheduleCallback,Qr=i.unstable_cancelCallback,Yr=i.unstable_shouldYield,Kr=i.unstable_requestPaint,Gr=i.unstable_now,Xr=i.unstable_getCurrentPriorityLevel,Zr=i.unstable_ImmediatePriority,Jr=i.unstable_UserBlockingPriority,eo=i.unstable_NormalPriority,to=i.unstable_LowPriority,no=i.unstable_IdlePriority,ro={},oo=void 0!==Kr?Kr:function(){},io=null,ao=null,uo=!1,lo=Gr(),co=1e4>lo?Gr:function(){return Gr()-lo};function so(){switch(Xr()){case Zr:return 99;case Jr:return 98;case eo:return 97;case to:return 96;case no:return 95;default:throw a(Error(332))}}function fo(e){switch(e){case 99:return Zr;case 98:return Jr;case 97:return eo;case 96:return to;case 95:return no;default:throw a(Error(332))}}function po(e,t){return e=fo(e),Hr(e,t)}function ho(e,t,n){return e=fo(e),qr(e,t,n)}function vo(e){return null===io?(io=[e],ao=qr(Zr,yo)):io.push(e),ro}function mo(){null!==ao&&Qr(ao),yo()}function yo(){if(!uo&&null!==io){uo=!0;var e=0;try{var t=io;po(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),io=null}catch(t){throw null!==io&&(io=io.slice(e+1)),qr(Zr,mo),t}finally{uo=!1}}}function go(e,t){return 1073741823===t?99:1===t?95:0>=(e=10*(1073741821-t)-10*(1073741821-e))?99:250>=e?98:5250>=e?97:95}function bo(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var wo={current:null},xo=null,_o=null,ko=null;function Eo(){ko=_o=xo=null}function So(e,t){var n=e.type._context;Ar(wo,n._currentValue),n._currentValue=t}function Co(e){var t=wo.current;Pr(wo),e.type._context._currentValue=t}function To(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function jo(e,t){xo=e,ko=_o=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(fa=!0),e.firstContext=null)}function Oo(e,t){if(ko!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(ko=e,t=1073741823),t={context:e,observedBits:t,next:null},null===_o){if(null===xo)throw a(Error(308));_o=t,xo.dependencies={expirationTime:0,firstContext:t,responders:null}}else _o=_o.next=t;return e._currentValue}var Fo=!1;function Po(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Ao(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Ro(e,t){return{expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function No(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function Mo(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,o=null;null===r&&(r=e.updateQueue=Po(e.memoizedState))}else r=e.updateQueue,o=n.updateQueue,null===r?null===o?(r=e.updateQueue=Po(e.memoizedState),o=n.updateQueue=Po(n.memoizedState)):r=e.updateQueue=Ao(o):null===o&&(o=n.updateQueue=Ao(r));null===o||r===o?No(r,t):null===r.lastUpdate||null===o.lastUpdate?(No(r,t),No(o,t)):(No(r,t),o.lastUpdate=t)}function Do(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=Po(e.memoizedState):Io(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function Io(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=Ao(t)),t}function zo(e,t,n,r,i,a){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(a,r,i):e;case 3:e.effectTag=-2049&e.effectTag|64;case 0:if(null==(i="function"==typeof(e=n.payload)?e.call(a,r,i):e))break;return o({},r,i);case 2:Fo=!0}return r}function Uo(e,t,n,r,o){Fo=!1;for(var i=(t=Io(e,t)).baseState,a=null,u=0,l=t.firstUpdate,c=i;null!==l;){var s=l.expirationTime;s<o?(null===a&&(a=l,i=c),u<s&&(u=s)):(Vu(s,l.suspenseConfig),c=zo(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=l:(t.lastEffect.nextEffect=l,t.lastEffect=l))),l=l.next}for(s=null,l=t.firstCapturedUpdate;null!==l;){var f=l.expirationTime;f<o?(null===s&&(s=l,null===a&&(i=c)),u<f&&(u=f)):(c=zo(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=l:(t.lastCapturedEffect.nextEffect=l,t.lastCapturedEffect=l))),l=l.next}null===a&&(t.lastUpdate=null),null===s?t.lastCapturedUpdate=null:e.effectTag|=32,null===a&&null===s&&(i=c),t.baseState=i,t.firstUpdate=a,t.firstCapturedUpdate=s,e.expirationTime=u,e.memoizedState=c}function Lo(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),$o(t.firstEffect,n),t.firstEffect=t.lastEffect=null,$o(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function $o(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;if("function"!=typeof n)throw a(Error(191),n);n.call(r)}e=e.nextEffect}}var Vo=qe.ReactCurrentBatchConfig,Bo=(new r.Component).refs;function Wo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var Ho={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===an(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Ou(),o=Vo.suspense;(o=Ro(r=Fu(r,e,o),o)).payload=t,null!=n&&(o.callback=n),Mo(e,o),Au(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Ou(),o=Vo.suspense;(o=Ro(r=Fu(r,e,o),o)).tag=1,o.payload=t,null!=n&&(o.callback=n),Mo(e,o),Au(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Ou(),r=Vo.suspense;(r=Ro(n=Fu(n,e,r),r)).tag=2,null!=t&&(r.callback=t),Mo(e,r),Au(e,n)}};function qo(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!rn(n,r)||!rn(o,i))}function Qo(e,t,n){var r=!1,o=Rr,i=t.contextType;return"object"==typeof i&&null!==i?i=Oo(i):(o=zr(t)?Dr:Nr.current,i=(r=null!=(r=t.contextTypes))?Ir(e,o):Rr),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Ho,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function Yo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Ho.enqueueReplaceState(t,t.state,null)}function Ko(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=Bo;var i=t.contextType;"object"==typeof i&&null!==i?o.context=Oo(i):(i=zr(t)?Dr:Nr.current,o.context=Ir(e,i)),null!==(i=e.updateQueue)&&(Uo(e,i,n,o,r),o.state=e.memoizedState),"function"==typeof(i=t.getDerivedStateFromProps)&&(Wo(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&Ho.enqueueReplaceState(o,o.state,null),null!==(i=e.updateQueue)&&(Uo(e,i,n,o,r),o.state=e.memoizedState)),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var Go=Array.isArray;function Xo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){n=n._owner;var r=void 0;if(n){if(1!==n.tag)throw a(Error(309));r=n.stateNode}if(!r)throw a(Error(147),e);var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===Bo&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw a(Error(284));if(!n._owner)throw a(Error(290),e)}return e}function Zo(e,t){if("textarea"!==e.type)throw a(Error(31),"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function Jo(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=il(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function u(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=ll(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=Xo(e,t,n),r.return=e,r):((r=al(n.type,n.key,n.props,null,e.mode,r)).ref=Xo(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=cl(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=ul(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=ll(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Ke:return(n=al(t.type,t.key,t.props,null,e.mode,n)).ref=Xo(e,null,t),n.return=e,n;case Ge:return(t=cl(t,e.mode,n)).return=e,t}if(Go(t)||ct(t))return(t=ul(t,e.mode,n,null)).return=e,t;Zo(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Ke:return n.key===o?n.type===Xe?f(e,t,n.props.children,r,o):c(e,t,n,r):null;case Ge:return n.key===o?s(e,t,n,r):null}if(Go(n)||ct(n))return null!==o?null:f(e,t,n,r,null);Zo(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Ke:return e=e.get(null===r.key?n:r.key)||null,r.type===Xe?f(t,e,r.props.children,o,r.key):c(t,e,r,o);case Ge:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(Go(r)||ct(r))return f(t,e=e.get(n)||null,r,o,null);Zo(t,r)}return null}function v(o,a,u,l){for(var c=null,s=null,f=a,v=a=0,m=null;null!==f&&v<u.length;v++){f.index>v?(m=f,f=null):m=f.sibling;var y=p(o,f,u[v],l);if(null===y){null===f&&(f=m);break}e&&f&&null===y.alternate&&t(o,f),a=i(y,a,v),null===s?c=y:s.sibling=y,s=y,f=m}if(v===u.length)return n(o,f),c;if(null===f){for(;v<u.length;v++)null!==(f=d(o,u[v],l))&&(a=i(f,a,v),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(o,f);v<u.length;v++)null!==(m=h(f,o,v,u[v],l))&&(e&&null!==m.alternate&&f.delete(null===m.key?v:m.key),a=i(m,a,v),null===s?c=m:s.sibling=m,s=m);return e&&f.forEach((function(e){return t(o,e)})),c}function m(o,u,l,c){var s=ct(l);if("function"!=typeof s)throw a(Error(150));if(null==(l=s.call(l)))throw a(Error(151));for(var f=s=null,v=u,m=u=0,y=null,g=l.next();null!==v&&!g.done;m++,g=l.next()){v.index>m?(y=v,v=null):y=v.sibling;var b=p(o,v,g.value,c);if(null===b){null===v&&(v=y);break}e&&v&&null===b.alternate&&t(o,v),u=i(b,u,m),null===f?s=b:f.sibling=b,f=b,v=y}if(g.done)return n(o,v),s;if(null===v){for(;!g.done;m++,g=l.next())null!==(g=d(o,g.value,c))&&(u=i(g,u,m),null===f?s=g:f.sibling=g,f=g);return s}for(v=r(o,v);!g.done;m++,g=l.next())null!==(g=h(v,o,m,g.value,c))&&(e&&null!==g.alternate&&v.delete(null===g.key?m:g.key),u=i(g,u,m),null===f?s=g:f.sibling=g,f=g);return e&&v.forEach((function(e){return t(o,e)})),s}return function(e,r,i,l){var c="object"==typeof i&&null!==i&&i.type===Xe&&null===i.key;c&&(i=i.props.children);var s="object"==typeof i&&null!==i;if(s)switch(i.$$typeof){case Ke:e:{for(s=i.key,c=r;null!==c;){if(c.key===s){if(7===c.tag?i.type===Xe:c.elementType===i.type){n(e,c.sibling),(r=o(c,i.type===Xe?i.props.children:i.props)).ref=Xo(e,c,i),r.return=e,e=r;break e}n(e,c);break}t(e,c),c=c.sibling}i.type===Xe?((r=ul(i.props.children,e.mode,l,i.key)).return=e,e=r):((l=al(i.type,i.key,i.props,null,e.mode,l)).ref=Xo(e,r,i),l.return=e,e=l)}return u(e);case Ge:e:{for(c=i.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=cl(i,e.mode,l)).return=e,e=r}return u(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=ll(i,e.mode,l)).return=e,e=r),u(e);if(Go(i))return v(e,r,i,l);if(ct(i))return m(e,r,i,l);if(s&&Zo(e,i),void 0===i&&!c)switch(e.tag){case 1:case 0:throw e=e.type,a(Error(152),e.displayName||e.name||"Component")}return n(e,r)}}var ei=Jo(!0),ti=Jo(!1),ni={},ri={current:ni},oi={current:ni},ii={current:ni};function ai(e){if(e===ni)throw a(Error(174));return e}function ui(e,t){Ar(ii,t),Ar(oi,e),Ar(ri,ni);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:cr(null,"");break;default:t=cr(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}Pr(ri),Ar(ri,t)}function li(e){Pr(ri),Pr(oi),Pr(ii)}function ci(e){ai(ii.current);var t=ai(ri.current),n=cr(t,e.type);t!==n&&(Ar(oi,e),Ar(ri,n))}function si(e){oi.current===e&&(Pr(ri),Pr(oi))}var fi=1,di=1,pi=2,hi={current:0};function vi(e){for(var t=e;null!==t;){if(13===t.tag){if(null!==t.memoizedState)return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var mi=0,yi=2,gi=4,bi=8,wi=16,xi=32,_i=64,ki=128,Ei=qe.ReactCurrentDispatcher,Si=0,Ci=null,Ti=null,ji=null,Oi=null,Fi=null,Pi=null,Ai=0,Ri=null,Ni=0,Mi=!1,Di=null,Ii=0;function zi(){throw a(Error(321))}function Ui(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!tn(e[n],t[n]))return!1;return!0}function Li(e,t,n,r,o,i){if(Si=i,Ci=t,ji=null!==e?e.memoizedState:null,Ei.current=null===ji?Ji:ea,t=n(r,o),Mi){do{Mi=!1,Ii+=1,ji=null!==e?e.memoizedState:null,Pi=Oi,Ri=Fi=Ti=null,Ei.current=ea,t=n(r,o)}while(Mi);Di=null,Ii=0}if(Ei.current=Zi,(e=Ci).memoizedState=Oi,e.expirationTime=Ai,e.updateQueue=Ri,e.effectTag|=Ni,e=null!==Ti&&null!==Ti.next,Si=0,Pi=Fi=Oi=ji=Ti=Ci=null,Ai=0,Ri=null,Ni=0,e)throw a(Error(300));return t}function $i(){Ei.current=Zi,Si=0,Pi=Fi=Oi=ji=Ti=Ci=null,Ai=0,Ri=null,Ni=0,Mi=!1,Di=null,Ii=0}function Vi(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===Fi?Oi=Fi=e:Fi=Fi.next=e,Fi}function Bi(){if(null!==Pi)Pi=(Fi=Pi).next,ji=null!==(Ti=ji)?Ti.next:null;else{if(null===ji)throw a(Error(310));var e={memoizedState:(Ti=ji).memoizedState,baseState:Ti.baseState,queue:Ti.queue,baseUpdate:Ti.baseUpdate,next:null};Fi=null===Fi?Oi=e:Fi.next=e,ji=Ti.next}return Fi}function Wi(e,t){return"function"==typeof t?t(e):t}function Hi(e){var t=Bi(),n=t.queue;if(null===n)throw a(Error(311));if(n.lastRenderedReducer=e,0<Ii){var r=n.dispatch;if(null!==Di){var o=Di.get(n);if(void 0!==o){Di.delete(n);var i=t.memoizedState;do{i=e(i,o.action),o=o.next}while(null!==o);return tn(i,t.memoizedState)||(fa=!0),t.memoizedState=i,t.baseUpdate===n.last&&(t.baseState=i),n.lastRenderedState=i,[i,r]}}return[t.memoizedState,r]}r=n.last;var u=t.baseUpdate;if(i=t.baseState,null!==u?(null!==r&&(r.next=null),r=u.next):r=null!==r?r.next:null,null!==r){var l=o=null,c=r,s=!1;do{var f=c.expirationTime;f<Si?(s||(s=!0,l=u,o=i),f>Ai&&(Ai=f)):(Vu(f,c.suspenseConfig),i=c.eagerReducer===e?c.eagerState:e(i,c.action)),u=c,c=c.next}while(null!==c&&c!==r);s||(l=u,o=i),tn(i,t.memoizedState)||(fa=!0),t.memoizedState=i,t.baseUpdate=l,t.baseState=o,n.lastRenderedState=i}return[t.memoizedState,n.dispatch]}function qi(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===Ri?(Ri={lastEffect:null}).lastEffect=e.next=e:null===(t=Ri.lastEffect)?Ri.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,Ri.lastEffect=e),e}function Qi(e,t,n,r){var o=Vi();Ni|=e,o.memoizedState=qi(t,n,void 0,void 0===r?null:r)}function Yi(e,t,n,r){var o=Bi();r=void 0===r?null:r;var i=void 0;if(null!==Ti){var a=Ti.memoizedState;if(i=a.destroy,null!==r&&Ui(r,a.deps))return void qi(mi,n,i,r)}Ni|=e,o.memoizedState=qi(t,n,i,r)}function Ki(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Gi(){}function Xi(e,t,n){if(!(25>Ii))throw a(Error(301));var r=e.alternate;if(e===Ci||null!==r&&r===Ci)if(Mi=!0,e={expirationTime:Si,suspenseConfig:null,action:n,eagerReducer:null,eagerState:null,next:null},null===Di&&(Di=new Map),void 0===(n=Di.get(t)))Di.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{var o=Ou(),i=Vo.suspense;i={expirationTime:o=Fu(o,e,i),suspenseConfig:i,action:n,eagerReducer:null,eagerState:null,next:null};var u=t.last;if(null===u)i.next=i;else{var l=u.next;null!==l&&(i.next=l),u.next=i}if(t.last=i,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.lastRenderedReducer))try{var c=t.lastRenderedState,s=r(c,n);if(i.eagerReducer=r,i.eagerState=s,tn(s,c))return}catch(e){}Au(e,o)}}var Zi={readContext:Oo,useCallback:zi,useContext:zi,useEffect:zi,useImperativeHandle:zi,useLayoutEffect:zi,useMemo:zi,useReducer:zi,useRef:zi,useState:zi,useDebugValue:zi,useResponder:zi},Ji={readContext:Oo,useCallback:function(e,t){return Vi().memoizedState=[e,void 0===t?null:t],e},useContext:Oo,useEffect:function(e,t){return Qi(516,ki|_i,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Qi(4,gi|xi,Ki.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Qi(4,gi|xi,e,t)},useMemo:function(e,t){var n=Vi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Vi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Xi.bind(null,Ci,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Vi().memoizedState=e},useState:function(e){var t=Vi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,lastRenderedReducer:Wi,lastRenderedState:e}).dispatch=Xi.bind(null,Ci,e),[t.memoizedState,e]},useDebugValue:Gi,useResponder:on},ea={readContext:Oo,useCallback:function(e,t){var n=Bi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ui(t,r[1])?r[0]:(n.memoizedState=[e,t],e)},useContext:Oo,useEffect:function(e,t){return Yi(516,ki|_i,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Yi(4,gi|xi,Ki.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Yi(4,gi|xi,e,t)},useMemo:function(e,t){var n=Bi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ui(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:Hi,useRef:function(){return Bi().memoizedState},useState:function(e){return Hi(Wi)},useDebugValue:Gi,useResponder:on},ta=null,na=null,ra=!1;function oa(e,t){var n=rl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function ia(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function aa(e){if(ra){var t=na;if(t){var n=t;if(!ia(e,t)){if(!(t=jr(n.nextSibling))||!ia(e,t))return e.effectTag|=2,ra=!1,void(ta=e);oa(ta,n)}ta=e,na=jr(t.firstChild)}else e.effectTag|=2,ra=!1,ta=e}}function ua(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&18!==e.tag;)e=e.return;ta=e}function la(e){if(e!==ta)return!1;if(!ra)return ua(e),ra=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Sr(t,e.memoizedProps))for(t=na;t;)oa(e,t),t=jr(t.nextSibling);return ua(e),na=ta?jr(e.stateNode.nextSibling):null,!0}function ca(){na=ta=null,ra=!1}var sa=qe.ReactCurrentOwner,fa=!1;function da(e,t,n,r){t.child=null===e?ti(t,null,n,r):ei(t,e.child,n,r)}function pa(e,t,n,r,o){n=n.render;var i=t.ref;return jo(t,o),r=Li(e,t,n,r,i,o),null===e||fa?(t.effectTag|=1,da(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Sa(e,t,o))}function ha(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||ol(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=al(n.type,null,r,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,va(e,t,a,r,o,i))}return a=e.child,o<i&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:rn)(o,r)&&e.ref===t.ref)?Sa(e,t,i):(t.effectTag|=1,(e=il(a,r)).ref=t.ref,e.return=t,t.child=e)}function va(e,t,n,r,o,i){return null!==e&&rn(e.memoizedProps,r)&&e.ref===t.ref&&(fa=!1,o<i)?Sa(e,t,i):ya(e,t,n,r,i)}function ma(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function ya(e,t,n,r,o){var i=zr(n)?Dr:Nr.current;return i=Ir(t,i),jo(t,o),n=Li(e,t,n,r,i,o),null===e||fa?(t.effectTag|=1,da(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Sa(e,t,o))}function ga(e,t,n,r,o){if(zr(n)){var i=!0;Br(t)}else i=!1;if(jo(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),Qo(t,n,r),Ko(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,u=t.memoizedProps;a.props=u;var l=a.context,c=n.contextType;"object"==typeof c&&null!==c?c=Oo(c):c=Ir(t,c=zr(n)?Dr:Nr.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&Yo(t,a,r,c),Fo=!1;var d=t.memoizedState;l=a.state=d;var p=t.updateQueue;null!==p&&(Uo(t,p,r,a,o),l=t.memoizedState),u!==r||d!==l||Mr.current||Fo?("function"==typeof s&&(Wo(t,n,s,r),l=t.memoizedState),(u=Fo||qo(t,n,u,r,d,l,c))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=c,r=u):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,u=t.memoizedProps,a.props=t.type===t.elementType?u:bo(t.type,u),l=a.context,"object"==typeof(c=n.contextType)&&null!==c?c=Oo(c):c=Ir(t,c=zr(n)?Dr:Nr.current),(f="function"==typeof(s=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&Yo(t,a,r,c),Fo=!1,l=t.memoizedState,d=a.state=l,null!==(p=t.updateQueue)&&(Uo(t,p,r,a,o),d=t.memoizedState),u!==r||l!==d||Mr.current||Fo?("function"==typeof s&&(Wo(t,n,s,r),d=t.memoizedState),(s=Fo||qo(t,n,u,r,l,d,c))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,d,c),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,d,c)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),a.props=r,a.state=d,a.context=c,r=s):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),r=!1);return ba(e,t,n,r,i,o)}function ba(e,t,n,r,o,i){ma(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return o&&Wr(t,n,!1),Sa(e,t,i);r=t.stateNode,sa.current=t;var u=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=ei(t,e.child,null,i),t.child=ei(t,null,u,i)):da(e,t,u,i),t.memoizedState=r.state,o&&Wr(t,n,!0),t.child}function wa(e){var t=e.stateNode;t.pendingContext?$r(0,t.pendingContext,t.pendingContext!==t.context):t.context&&$r(0,t.context,!1),ui(e,t.containerInfo)}var xa={};function _a(e,t,n){var r,o=t.mode,i=t.pendingProps,a=hi.current,u=null,l=!1;if((r=0!=(64&t.effectTag))||(r=0!=(a&pi)&&(null===e||null!==e.memoizedState)),r?(u=xa,l=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===i.fallback||!0===i.unstable_avoidThisFallback||(a|=di),Ar(hi,a&=fi),null===e)if(l){if(i=i.fallback,(e=ul(null,o,0,null)).return=t,0==(2&t.mode))for(l=null!==t.memoizedState?t.child.child:t.child,e.child=l;null!==l;)l.return=e,l=l.sibling;(n=ul(i,o,n,null)).return=t,e.sibling=n,o=e}else o=n=ti(t,null,i.children,n);else{if(null!==e.memoizedState)if(o=(a=e.child).sibling,l){if(i=i.fallback,(n=il(a,a.pendingProps)).return=t,0==(2&t.mode)&&(l=null!==t.memoizedState?t.child.child:t.child)!==a.child)for(n.child=l;null!==l;)l.return=n,l=l.sibling;(i=il(o,i,o.expirationTime)).return=t,n.sibling=i,o=n,n.childExpirationTime=0,n=i}else o=n=ei(t,a.child,i.children,n);else if(a=e.child,l){if(l=i.fallback,(i=ul(null,o,0,null)).return=t,i.child=a,null!==a&&(a.return=i),0==(2&t.mode))for(a=null!==t.memoizedState?t.child.child:t.child,i.child=a;null!==a;)a.return=i,a=a.sibling;(n=ul(l,o,n,null)).return=t,i.sibling=n,n.effectTag|=2,o=i,i.childExpirationTime=0}else n=o=ei(t,a,i.children,n);t.stateNode=e.stateNode}return t.memoizedState=u,t.child=o,n}function ka(e,t,n,r,o){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,last:r,tail:n,tailExpiration:0,tailMode:o}:(i.isBackwards=t,i.rendering=null,i.last=r,i.tail=n,i.tailExpiration=0,i.tailMode=o)}function Ea(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(da(e,t,r.children,n),0!=((r=hi.current)&pi))r=r&fi|pi,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag){if(null!==e.memoizedState){e.expirationTime<n&&(e.expirationTime=n);var a=e.alternate;null!==a&&a.expirationTime<n&&(a.expirationTime=n),To(e.return,n)}}else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=fi}if(Ar(hi,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(r=n.alternate)&&null===vi(r)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),ka(t,!1,o,n,i);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(r=o.alternate)&&null===vi(r)){t.child=o;break}r=o.sibling,o.sibling=n,n=o,o=r}ka(t,!0,n,null,i);break;case"together":ka(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Sa(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw a(Error(153));if(null!==t.child){for(n=il(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=il(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function Ca(e){e.effectTag|=4}var Ta=void 0,ja=void 0,Oa=void 0,Fa=void 0;function Pa(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Aa(e){switch(e.tag){case 1:zr(e.type)&&Ur();var t=e.effectTag;return 2048&t?(e.effectTag=-2049&t|64,e):null;case 3:if(li(),Lr(),0!=(64&(t=e.effectTag)))throw a(Error(285));return e.effectTag=-2049&t|64,e;case 5:return si(e),null;case 13:return Pr(hi),2048&(t=e.effectTag)?(e.effectTag=-2049&t|64,e):null;case 18:return null;case 19:return Pr(hi),null;case 4:return li(),null;case 10:return Co(e),null;default:return null}}function Ra(e,t){return{value:e,source:t,stack:ft(t)}}Ta=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(20===n.tag)e.appendChild(n.stateNode.instance);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},ja=function(){},Oa=function(e,t,n,r,i){var a=e.memoizedProps;if(a!==r){var u=t.stateNode;switch(ai(ri.current),e=null,n){case"input":a=_t(u,a),r=_t(u,r),e=[];break;case"option":a=tr(u,a),r=tr(u,r),e=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":a=rr(u,a),r=rr(u,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(u.onclick=xr)}gr(n,r),u=n=void 0;var l=null;for(n in a)if(!r.hasOwnProperty(n)&&a.hasOwnProperty(n)&&null!=a[n])if("style"===n){var c=a[n];for(u in c)c.hasOwnProperty(u)&&(l||(l={}),l[u]="")}else"dangerouslySetInnerHTML"!==n&&"children"!==n&&"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&"autoFocus"!==n&&(p.hasOwnProperty(n)?e||(e=[]):(e=e||[]).push(n,null));for(n in r){var s=r[n];if(c=null!=a?a[n]:void 0,r.hasOwnProperty(n)&&s!==c&&(null!=s||null!=c))if("style"===n)if(c){for(u in c)!c.hasOwnProperty(u)||s&&s.hasOwnProperty(u)||(l||(l={}),l[u]="");for(u in s)s.hasOwnProperty(u)&&c[u]!==s[u]&&(l||(l={}),l[u]=s[u])}else l||(e||(e=[]),e.push(n,l)),l=s;else"dangerouslySetInnerHTML"===n?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(e=e||[]).push(n,""+s)):"children"===n?c===s||"string"!=typeof s&&"number"!=typeof s||(e=e||[]).push(n,""+s):"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&(p.hasOwnProperty(n)?(null!=s&&wr(i,n),e||c===s||(e=[])):(e=e||[]).push(n,s))}l&&(e=e||[]).push("style",l),i=e,(t.updateQueue=i)&&Ca(t)}},Fa=function(e,t,n,r){n!==r&&Ca(t)};var Na="function"==typeof WeakSet?WeakSet:Set;function Ma(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ft(n)),null!==n&&st(n.type),t=t.value,null!==e&&1===e.tag&&st(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function Da(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Gu(e,t)}else t.current=null}function Ia(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if((r.tag&e)!==mi){var o=r.destroy;r.destroy=void 0,void 0!==o&&o()}(r.tag&t)!==mi&&(o=r.create,r.destroy=o()),r=r.next}while(r!==n)}}function za(e,t){switch("function"==typeof tl&&tl(e),e.tag){case 0:case 11:case 14:case 15:var n=e.updateQueue;if(null!==n&&null!==(n=n.lastEffect)){var r=n.next;po(97<t?97:t,(function(){var t=r;do{var n=t.destroy;if(void 0!==n){var o=e;try{n()}catch(e){Gu(o,e)}}t=t.next}while(t!==r)}))}break;case 1:Da(e),"function"==typeof(t=e.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Gu(e,t)}}(e,t);break;case 5:Da(e);break;case 4:Va(e,t)}}function Ua(e,t){for(var n=e;;)if(za(n,t),null!==n.child&&4!==n.tag)n.child.return=n,n=n.child;else{if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function La(e){return 5===e.tag||3===e.tag||4===e.tag}function $a(e){e:{for(var t=e.return;null!==t;){if(La(t)){var n=t;break e}t=t.return}throw a(Error(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw a(Error(161))}16&n.effectTag&&(dr(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||La(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){var i=5===o.tag||6===o.tag;if(i||20===o.tag){var u=i?o.stateNode:o.stateNode.instance;if(n)if(r){var l=u;u=n,8===(i=t).nodeType?i.parentNode.insertBefore(l,u):i.insertBefore(l,u)}else t.insertBefore(u,n);else r?(8===(l=t).nodeType?(i=l.parentNode).insertBefore(u,l):(i=l).appendChild(u),null!=(l=l._reactRootContainer)||null!==i.onclick||(i.onclick=xr)):t.appendChild(u)}else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function Va(e,t){for(var n=e,r=!1,o=void 0,i=void 0;;){if(!r){r=n.return;e:for(;;){if(null===r)throw a(Error(160));switch(o=r.stateNode,r.tag){case 5:i=!1;break e;case 3:case 4:o=o.containerInfo,i=!0;break e}r=r.return}r=!0}if(5===n.tag||6===n.tag)if(Ua(n,t),i){var u=o,l=n.stateNode;8===u.nodeType?u.parentNode.removeChild(l):u.removeChild(l)}else o.removeChild(n.stateNode);else if(20===n.tag)l=n.stateNode.instance,Ua(n,t),i?8===(u=o).nodeType?u.parentNode.removeChild(l):u.removeChild(l):o.removeChild(l);else if(4===n.tag){if(null!==n.child){o=n.stateNode.containerInfo,i=!0,n.child.return=n,n=n.child;continue}}else if(za(n,t),null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;4===(n=n.return).tag&&(r=!1)}n.sibling.return=n.return,n=n.sibling}}function Ba(e,t){switch(t.tag){case 0:case 11:case 14:case 15:Ia(gi,bi,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[M]=r,"input"===e&&"radio"===r.type&&null!=r.name&&Et(n,r),br(e,o),t=br(e,r),o=0;o<i.length;o+=2){var u=i[o],l=i[o+1];"style"===u?mr(n,l):"dangerouslySetInnerHTML"===u?fr(n,l):"children"===u?dr(n,l):wt(n,u,l,t)}switch(e){case"input":St(n,r);break;case"textarea":ir(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?nr(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?nr(n,!!r.multiple,r.defaultValue,!0):nr(n,!!r.multiple,r.multiple?[]:"",!1))}}}break;case 6:if(null===t.stateNode)throw a(Error(162));t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 12:break;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,vu=co()),null!==n)e:for(e=n;;){if(5===e.tag)i=e.stateNode,r?"function"==typeof(i=i.style).setProperty?i.setProperty("display","none","important"):i.display="none":(i=e.stateNode,o=null!=(o=e.memoizedProps.style)&&o.hasOwnProperty("display")?o.display:null,i.style.display=vr("display",o));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState){(i=e.child.sibling).return=e,e=i;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}Wa(t);break;case 19:Wa(t);break;case 17:case 20:break;default:throw a(Error(163))}}function Wa(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Na),t.forEach((function(t){var r=Zu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var Ha="function"==typeof WeakMap?WeakMap:Map;function qa(e,t,n){(n=Ro(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){gu||(gu=!0,bu=r),Ma(e,t)},n}function Qa(e,t,n){(n=Ro(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return Ma(e,t),r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===wu?wu=new Set([this]):wu.add(this),Ma(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var Ya=Math.ceil,Ka=qe.ReactCurrentDispatcher,Ga=qe.ReactCurrentOwner,Xa=0,Za=8,Ja=16,eu=32,tu=0,nu=1,ru=2,ou=3,iu=4,au=Xa,uu=null,lu=null,cu=0,su=tu,fu=1073741823,du=1073741823,pu=null,hu=!1,vu=0,mu=500,yu=null,gu=!1,bu=null,wu=null,xu=!1,_u=null,ku=90,Eu=0,Su=null,Cu=0,Tu=null,ju=0;function Ou(){return(au&(Ja|eu))!==Xa?1073741821-(co()/10|0):0!==ju?ju:ju=1073741821-(co()/10|0)}function Fu(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=so();if(0==(4&t))return 99===r?1073741823:1073741822;if((au&Ja)!==Xa)return cu;if(null!==n)e=1073741821-25*(1+((1073741821-e+(0|n.timeoutMs||5e3)/10)/25|0));else switch(r){case 99:e=1073741823;break;case 98:e=1073741821-10*(1+((1073741821-e+15)/10|0));break;case 97:case 96:e=1073741821-25*(1+((1073741821-e+500)/25|0));break;case 95:e=1;break;default:throw a(Error(326))}return null!==uu&&e===cu&&--e,e}var Pu=0;function Au(e,t){if(50<Cu)throw Cu=0,Tu=null,a(Error(185));if(null!==(e=Ru(e,t))){e.pingTime=0;var n=so();if(1073741823===t)if((au&Za)!==Xa&&(au&(Ja|eu))===Xa)for(var r=$u(e,1073741823,!0);null!==r;)r=r(!0);else Nu(e,99,1073741823),au===Xa&&mo();else Nu(e,n,t);(4&au)===Xa||98!==n&&99!==n||(null===Su?Su=new Map([[e,t]]):(void 0===(n=Su.get(e))||n>t)&&Su.set(e,t))}}function Ru(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return null!==o&&(t>o.firstPendingTime&&(o.firstPendingTime=t),0===(e=o.lastPendingTime)||t<e)&&(o.lastPendingTime=t),o}function Nu(e,t,n){if(e.callbackExpirationTime<n){var r=e.callbackNode;null!==r&&r!==ro&&Qr(r),e.callbackExpirationTime=n,1073741823===n?e.callbackNode=vo(Mu.bind(null,e,$u.bind(null,e,n))):(r=null,1!==n&&(r={timeout:10*(1073741821-n)-co()}),e.callbackNode=ho(t,Mu.bind(null,e,$u.bind(null,e,n)),r))}}function Mu(e,t,n){var r=e.callbackNode,o=null;try{return null!==(o=t(n))?Mu.bind(null,e,o):null}finally{null===o&&r===e.callbackNode&&(e.callbackNode=null,e.callbackExpirationTime=0)}}function Du(){(au&(1|Ja|eu))===Xa&&(function(){if(null!==Su){var e=Su;Su=null,e.forEach((function(e,t){vo($u.bind(null,t,e))})),mo()}}(),Qu())}function Iu(e,t){var n=au;au|=1;try{return e(t)}finally{(au=n)===Xa&&mo()}}function zu(e,t,n,r){var o=au;au|=4;try{return po(98,e.bind(null,t,n,r))}finally{(au=o)===Xa&&mo()}}function Uu(e,t){var n=au;au&=-2,au|=Za;try{return e(t)}finally{(au=n)===Xa&&mo()}}function Lu(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Tr(n)),null!==lu)for(n=lu.return;null!==n;){var r=n;switch(r.tag){case 1:var o=r.type.childContextTypes;null!=o&&Ur();break;case 3:li(),Lr();break;case 5:si(r);break;case 4:li();break;case 13:case 19:Pr(hi);break;case 10:Co(r)}n=n.return}uu=e,lu=il(e.current,null),cu=t,su=tu,du=fu=1073741823,pu=null,hu=!1}function $u(e,t,n){if((au&(Ja|eu))!==Xa)throw a(Error(327));if(e.firstPendingTime<t)return null;if(n&&e.finishedExpirationTime===t)return Hu.bind(null,e);if(Qu(),e!==uu||t!==cu)Lu(e,t);else if(su===ou)if(hu)Lu(e,t);else{var r=e.lastPendingTime;if(r<t)return $u.bind(null,e,r)}if(null!==lu){r=au,au|=Ja;var o=Ka.current;if(null===o&&(o=Zi),Ka.current=Zi,n){if(1073741823!==t){var i=Ou();if(i<t)return au=r,Eo(),Ka.current=o,$u.bind(null,e,i)}}else ju=0;for(;;)try{if(n)for(;null!==lu;)lu=Bu(lu);else for(;null!==lu&&!Yr();)lu=Bu(lu);break}catch(n){if(Eo(),$i(),null===(i=lu)||null===i.return)throw Lu(e,t),au=r,n;e:{var u=e,l=i.return,c=i,s=n,f=cu;if(c.effectTag|=1024,c.firstEffect=c.lastEffect=null,null!==s&&"object"==typeof s&&"function"==typeof s.then){var d=s,p=0!=(hi.current&di);s=l;do{var h;if((h=13===s.tag)&&(null!==s.memoizedState?h=!1:h=void 0!==(h=s.memoizedProps).fallback&&(!0!==h.unstable_avoidThisFallback||!p)),h){if(null===(l=s.updateQueue)?((l=new Set).add(d),s.updateQueue=l):l.add(d),0==(2&s.mode)){s.effectTag|=64,c.effectTag&=-1957,1===c.tag&&(null===c.alternate?c.tag=17:((f=Ro(1073741823,null)).tag=2,Mo(c,f))),c.expirationTime=1073741823;break e}c=u,u=f,null===(p=c.pingCache)?(p=c.pingCache=new Ha,l=new Set,p.set(d,l)):void 0===(l=p.get(d))&&(l=new Set,p.set(d,l)),l.has(u)||(l.add(u),c=Xu.bind(null,c,d,u),d.then(c,c)),s.effectTag|=2048,s.expirationTime=f;break e}s=s.return}while(null!==s);s=Error((st(c.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ft(c))}su!==iu&&(su=nu),s=Ra(s,c),c=l;do{switch(c.tag){case 3:c.effectTag|=2048,c.expirationTime=f,Do(c,f=qa(c,s,f));break e;case 1:if(d=s,u=c.type,l=c.stateNode,0==(64&c.effectTag)&&("function"==typeof u.getDerivedStateFromError||null!==l&&"function"==typeof l.componentDidCatch&&(null===wu||!wu.has(l)))){c.effectTag|=2048,c.expirationTime=f,Do(c,f=Qa(c,d,f));break e}}c=c.return}while(null!==c)}lu=Wu(i)}if(au=r,Eo(),Ka.current=o,null!==lu)return $u.bind(null,e,t)}if(e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,function(e,t){var n=e.firstBatch;return!!(null!==n&&n._defer&&n._expirationTime>=t)&&(ho(97,(function(){return n._onComplete(),null})),!0)}(e,t))return null;switch(uu=null,su){case tu:throw a(Error(328));case nu:return(r=e.lastPendingTime)<t?$u.bind(null,e,r):n?Hu.bind(null,e):(Lu(e,t),vo($u.bind(null,e,t)),null);case ru:return 1073741823===fu&&!n&&10<(n=vu+mu-co())?hu?(Lu(e,t),$u.bind(null,e,t)):(r=e.lastPendingTime)<t?$u.bind(null,e,r):(e.timeoutHandle=Cr(Hu.bind(null,e),n),null):Hu.bind(null,e);case ou:if(!n){if(hu)return Lu(e,t),$u.bind(null,e,t);if((n=e.lastPendingTime)<t)return $u.bind(null,e,n);if(1073741823!==du?n=10*(1073741821-du)-co():1073741823===fu?n=0:(n=10*(1073741821-fu)-5e3,0>(n=(r=co())-n)&&(n=0),(t=10*(1073741821-t)-r)<(n=(120>n?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Ya(n/1960))-n)&&(n=t)),10<n)return e.timeoutHandle=Cr(Hu.bind(null,e),n),null}return Hu.bind(null,e);case iu:return!n&&1073741823!==fu&&null!==pu&&(r=fu,0>=(t=0|(o=pu).busyMinDurationMs)?t=0:(n=0|o.busyDelayMs,t=(r=co()-(10*(1073741821-r)-(0|o.timeoutMs||5e3)))<=n?0:n+t-r),10<t)?(e.timeoutHandle=Cr(Hu.bind(null,e),t),null):Hu.bind(null,e);default:throw a(Error(329))}}function Vu(e,t){e<fu&&1<e&&(fu=e),null!==t&&e<du&&1<e&&(du=e,pu=t)}function Bu(e){var t=Ju(e.alternate,e,cu);return e.memoizedProps=e.pendingProps,null===t&&(t=Wu(e)),Ga.current=null,t}function Wu(e){lu=e;do{var t=lu.alternate;if(e=lu.return,0==(1024&lu.effectTag)){e:{var n=t,r=cu,i=(t=lu).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:zr(t.type)&&Ur();break;case 3:li(),Lr(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==n&&null!==n.child||(la(t),t.effectTag&=-3),ja(t);break;case 5:si(t),r=ai(ii.current);var u=t.type;if(null!==n&&null!=t.stateNode)Oa(n,t,u,i,r),n.ref!==t.ref&&(t.effectTag|=128);else if(i){var l=ai(ri.current);if(la(t)){i=void 0,u=(n=t).stateNode;var c=n.type,s=n.memoizedProps;switch(u[N]=n,u[M]=s,c){case"iframe":case"object":case"embed":Mn("load",u);break;case"video":case"audio":for(var f=0;f<ne.length;f++)Mn(ne[f],u);break;case"source":Mn("error",u);break;case"img":case"image":case"link":Mn("error",u),Mn("load",u);break;case"form":Mn("reset",u),Mn("submit",u);break;case"details":Mn("toggle",u);break;case"input":kt(u,s),Mn("invalid",u),wr(r,"onChange");break;case"select":u._wrapperState={wasMultiple:!!s.multiple},Mn("invalid",u),wr(r,"onChange");break;case"textarea":or(u,s),Mn("invalid",u),wr(r,"onChange")}for(i in gr(c,s),f=null,s)s.hasOwnProperty(i)&&(l=s[i],"children"===i?"string"==typeof l?u.textContent!==l&&(f=["children",l]):"number"==typeof l&&u.textContent!==""+l&&(f=["children",""+l]):p.hasOwnProperty(i)&&null!=l&&wr(r,i));switch(c){case"input":We(u),Ct(u,s,!0);break;case"textarea":We(u),ar(u);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(u.onclick=xr)}r=f,n.updateQueue=r,null!==r&&Ca(t)}else{s=u,n=i,c=t,f=9===r.nodeType?r:r.ownerDocument,l===ur.html&&(l=lr(s)),l===ur.html?"script"===s?((s=f.createElement("div")).innerHTML="<script><\/script>",f=s.removeChild(s.firstChild)):"string"==typeof n.is?f=f.createElement(s,{is:n.is}):(f=f.createElement(s),"select"===s&&(s=f,n.multiple?s.multiple=!0:n.size&&(s.size=n.size))):f=f.createElementNS(l,s),(s=f)[N]=c,s[M]=n,Ta(n=s,t,!1,!1),c=n;var d=r,h=br(u,i);switch(u){case"iframe":case"object":case"embed":Mn("load",c),r=i;break;case"video":case"audio":for(r=0;r<ne.length;r++)Mn(ne[r],c);r=i;break;case"source":Mn("error",c),r=i;break;case"img":case"image":case"link":Mn("error",c),Mn("load",c),r=i;break;case"form":Mn("reset",c),Mn("submit",c),r=i;break;case"details":Mn("toggle",c),r=i;break;case"input":kt(c,i),r=_t(c,i),Mn("invalid",c),wr(d,"onChange");break;case"option":r=tr(c,i);break;case"select":c._wrapperState={wasMultiple:!!i.multiple},r=o({},i,{value:void 0}),Mn("invalid",c),wr(d,"onChange");break;case"textarea":or(c,i),r=rr(c,i),Mn("invalid",c),wr(d,"onChange");break;default:r=i}gr(u,r),s=void 0,f=u,l=c;var v=r;for(s in v)if(v.hasOwnProperty(s)){var m=v[s];"style"===s?mr(l,m):"dangerouslySetInnerHTML"===s?null!=(m=m?m.__html:void 0)&&fr(l,m):"children"===s?"string"==typeof m?("textarea"!==f||""!==m)&&dr(l,m):"number"==typeof m&&dr(l,""+m):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(p.hasOwnProperty(s)?null!=m&&wr(d,s):null!=m&&wt(l,s,m,h))}switch(u){case"input":We(c),Ct(c,i,!1);break;case"textarea":We(c),ar(c);break;case"option":null!=i.value&&c.setAttribute("value",""+xt(i.value));break;case"select":r=c,c=i,r.multiple=!!c.multiple,null!=(s=c.value)?nr(r,!!c.multiple,s,!1):null!=c.defaultValue&&nr(r,!!c.multiple,c.defaultValue,!0);break;default:"function"==typeof r.onClick&&(c.onclick=xr)}Er(u,i)&&Ca(t),t.stateNode=n}null!==t.ref&&(t.effectTag|=128)}else if(null===t.stateNode)throw a(Error(166));break;case 6:if(n&&null!=t.stateNode)Fa(n,t,n.memoizedProps,i);else{if("string"!=typeof i&&null===t.stateNode)throw a(Error(166));n=ai(ii.current),ai(ri.current),la(t)?(r=t.stateNode,n=t.memoizedProps,r[N]=t,r.nodeValue!==n&&Ca(t)):(r=t,(n=(9===n.nodeType?n:n.ownerDocument).createTextNode(i))[N]=t,r.stateNode=n)}break;case 11:break;case 13:if(Pr(hi),i=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=r;break e}r=null!==i,i=!1,null===n?la(t):(i=null!==(u=n.memoizedState),r||null===u||null!==(u=n.child.sibling)&&(null!==(c=t.firstEffect)?(t.firstEffect=u,u.nextEffect=c):(t.firstEffect=t.lastEffect=u,u.nextEffect=null),u.effectTag=8)),r&&!i&&0!=(2&t.mode)&&(null===n&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(hi.current&di)?su===tu&&(su=ru):su!==tu&&su!==ru||(su=ou)),(r||i)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:li(),ja(t);break;case 10:Co(t);break;case 9:case 14:break;case 17:zr(t.type)&&Ur();break;case 18:break;case 19:if(Pr(hi),null===(i=t.memoizedState))break;if(u=0!=(64&t.effectTag),null===(c=i.rendering)){if(u)Pa(i,!1);else if(su!==tu||null!==n&&0!=(64&n.effectTag))for(n=t.child;null!==n;){if(null!==(c=vi(n))){for(t.effectTag|=64,Pa(i,!1),null!==(n=c.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),t.firstEffect=t.lastEffect=null,n=t.child;null!==n;)u=r,(i=n).effectTag&=2,i.nextEffect=null,i.firstEffect=null,i.lastEffect=null,null===(c=i.alternate)?(i.childExpirationTime=0,i.expirationTime=u,i.child=null,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null):(i.childExpirationTime=c.childExpirationTime,i.expirationTime=c.expirationTime,i.child=c.child,i.memoizedProps=c.memoizedProps,i.memoizedState=c.memoizedState,i.updateQueue=c.updateQueue,u=c.dependencies,i.dependencies=null===u?null:{expirationTime:u.expirationTime,firstContext:u.firstContext,responders:u.responders}),n=n.sibling;Ar(hi,hi.current&fi|pi),t=t.child;break e}n=n.sibling}}else{if(!u)if(null!==(n=vi(c))){if(t.effectTag|=64,u=!0,Pa(i,!0),null===i.tail&&"hidden"===i.tailMode){null!==(r=n.updateQueue)&&(t.updateQueue=r,t.effectTag|=4),null!==(t=t.lastEffect=i.lastEffect)&&(t.nextEffect=null);break}}else co()>i.tailExpiration&&1<r&&(t.effectTag|=64,u=!0,Pa(i,!1),t.expirationTime=t.childExpirationTime=r-1);i.isBackwards?(c.sibling=t.child,t.child=c):(null!==(r=i.last)?r.sibling=c:t.child=c,i.last=c)}if(null!==i.tail){0===i.tailExpiration&&(i.tailExpiration=co()+500),r=i.tail,i.rendering=r,i.tail=r.sibling,i.lastEffect=t.lastEffect,r.sibling=null,n=hi.current,Ar(hi,n=u?n&fi|pi:n&fi),t=r;break e}break;case 20:break;default:throw a(Error(156))}t=null}if(r=lu,1===cu||1!==r.childExpirationTime){for(n=0,i=r.child;null!==i;)(u=i.expirationTime)>n&&(n=u),(c=i.childExpirationTime)>n&&(n=c),i=i.sibling;r.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(1024&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=lu.firstEffect),null!==lu.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=lu.firstEffect),e.lastEffect=lu.lastEffect),1<lu.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=lu:e.firstEffect=lu,e.lastEffect=lu))}else{if(null!==(t=Aa(lu)))return t.effectTag&=1023,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=1024)}if(null!==(t=lu.sibling))return t;lu=e}while(null!==lu);return su===tu&&(su=iu),null}function Hu(e){var t=so();return po(99,qu.bind(null,e,t)),null!==_u&&ho(97,(function(){return Qu(),null})),null}function qu(e,t){if(Qu(),(au&(Ja|eu))!==Xa)throw a(Error(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw a(Error(177));e.callbackNode=null,e.callbackExpirationTime=0;var o=n.expirationTime,i=n.childExpirationTime;if(o=i>o?i:o,e.firstPendingTime=o,o<e.lastPendingTime&&(e.lastPendingTime=o),e===uu&&(lu=uu=null,cu=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,o=n.firstEffect):o=n:o=n.firstEffect,null!==o){i=au,au|=eu,Ga.current=null,_r=Nn;var u=Hn();if(qn(u)){if("selectionStart"in u)var l={start:u.selectionStart,end:u.selectionEnd};else e:{var c=(l=(l=u.ownerDocument)&&l.defaultView||window).getSelection&&l.getSelection();if(c&&0!==c.rangeCount){l=c.anchorNode;var s=c.anchorOffset,f=c.focusNode;c=c.focusOffset;try{l.nodeType,f.nodeType}catch(e){l=null;break e}var d=0,p=-1,h=-1,v=0,m=0,y=u,g=null;t:for(;;){for(var b;y!==l||0!==s&&3!==y.nodeType||(p=d+s),y!==f||0!==c&&3!==y.nodeType||(h=d+c),3===y.nodeType&&(d+=y.nodeValue.length),null!==(b=y.firstChild);)g=y,y=b;for(;;){if(y===u)break t;if(g===l&&++v===s&&(p=d),g===f&&++m===c&&(h=d),null!==(b=y.nextSibling))break;g=(y=g).parentNode}y=b}l=-1===p||-1===h?null:{start:p,end:h}}else l=null}l=l||{start:0,end:0}}else l=null;kr={focusedElem:u,selectionRange:l},Nn=!1,yu=o;do{try{for(;null!==yu;){if(0!=(256&yu.effectTag)){var w=yu.alternate;switch((u=yu).tag){case 0:case 11:case 15:Ia(yi,mi,u);break;case 1:if(256&u.effectTag&&null!==w){var x=w.memoizedProps,_=w.memoizedState,k=u.stateNode,E=k.getSnapshotBeforeUpdate(u.elementType===u.type?x:bo(u.type,x),_);k.__reactInternalSnapshotBeforeUpdate=E}break;case 3:case 5:case 6:case 4:case 17:break;default:throw a(Error(163))}}yu=yu.nextEffect}}catch(e){if(null===yu)throw a(Error(330));Gu(yu,e),yu=yu.nextEffect}}while(null!==yu);yu=o;do{try{for(w=t;null!==yu;){var S=yu.effectTag;if(16&S&&dr(yu.stateNode,""),128&S){var C=yu.alternate;if(null!==C){var T=C.ref;null!==T&&("function"==typeof T?T(null):T.current=null)}}switch(14&S){case 2:$a(yu),yu.effectTag&=-3;break;case 6:$a(yu),yu.effectTag&=-3,Ba(yu.alternate,yu);break;case 4:Ba(yu.alternate,yu);break;case 8:Va(x=yu,w),x.return=null,x.child=null,x.memoizedState=null,x.updateQueue=null,x.dependencies=null;var j=x.alternate;null!==j&&(j.return=null,j.child=null,j.memoizedState=null,j.updateQueue=null,j.dependencies=null)}yu=yu.nextEffect}}catch(e){if(null===yu)throw a(Error(330));Gu(yu,e),yu=yu.nextEffect}}while(null!==yu);if(T=kr,C=Hn(),S=T.focusedElem,w=T.selectionRange,C!==S&&S&&S.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(S.ownerDocument.documentElement,S)){null!==w&&qn(S)&&(C=w.start,void 0===(T=w.end)&&(T=C),"selectionStart"in S?(S.selectionStart=C,S.selectionEnd=Math.min(T,S.value.length)):(T=(C=S.ownerDocument||document)&&C.defaultView||window).getSelection&&(T=T.getSelection(),x=S.textContent.length,j=Math.min(w.start,x),w=void 0===w.end?j:Math.min(w.end,x),!T.extend&&j>w&&(x=w,w=j,j=x),x=Wn(S,j),_=Wn(S,w),x&&_&&(1!==T.rangeCount||T.anchorNode!==x.node||T.anchorOffset!==x.offset||T.focusNode!==_.node||T.focusOffset!==_.offset)&&((C=C.createRange()).setStart(x.node,x.offset),T.removeAllRanges(),j>w?(T.addRange(C),T.extend(_.node,_.offset)):(C.setEnd(_.node,_.offset),T.addRange(C))))),C=[];for(T=S;T=T.parentNode;)1===T.nodeType&&C.push({element:T,left:T.scrollLeft,top:T.scrollTop});for("function"==typeof S.focus&&S.focus(),S=0;S<C.length;S++)(T=C[S]).element.scrollLeft=T.left,T.element.scrollTop=T.top}kr=null,Nn=!!_r,_r=null,e.current=n,yu=o;do{try{for(S=r;null!==yu;){var O=yu.effectTag;if(36&O){var F=yu.alternate;switch(T=S,(C=yu).tag){case 0:case 11:case 15:Ia(wi,xi,C);break;case 1:var P=C.stateNode;if(4&C.effectTag)if(null===F)P.componentDidMount();else{var A=C.elementType===C.type?F.memoizedProps:bo(C.type,F.memoizedProps);P.componentDidUpdate(A,F.memoizedState,P.__reactInternalSnapshotBeforeUpdate)}var R=C.updateQueue;null!==R&&Lo(0,R,P);break;case 3:var N=C.updateQueue;if(null!==N){if(j=null,null!==C.child)switch(C.child.tag){case 5:j=C.child.stateNode;break;case 1:j=C.child.stateNode}Lo(0,N,j)}break;case 5:var M=C.stateNode;null===F&&4&C.effectTag&&(T=M,Er(C.type,C.memoizedProps)&&T.focus());break;case 6:case 4:case 12:break;case 13:case 19:case 17:case 20:break;default:throw a(Error(163))}}if(128&O){var D=yu.ref;if(null!==D){var I=yu.stateNode;switch(yu.tag){case 5:var z=I;break;default:z=I}"function"==typeof D?D(z):D.current=z}}512&O&&(xu=!0),yu=yu.nextEffect}}catch(e){if(null===yu)throw a(Error(330));Gu(yu,e),yu=yu.nextEffect}}while(null!==yu);yu=null,oo(),au=i}else e.current=n;if(xu)xu=!1,_u=e,Eu=r,ku=t;else for(yu=o;null!==yu;)t=yu.nextEffect,yu.nextEffect=null,yu=t;if(0!==(t=e.firstPendingTime)?Nu(e,O=go(O=Ou(),t),t):wu=null,"function"==typeof el&&el(n.stateNode,r),1073741823===t?e===Tu?Cu++:(Cu=0,Tu=e):Cu=0,gu)throw gu=!1,e=bu,bu=null,e;return(au&Za)!==Xa?null:(mo(),null)}function Qu(){if(null===_u)return!1;var e=_u,t=Eu,n=ku;return _u=null,Eu=0,ku=90,po(97<n?97:n,Yu.bind(null,e,t))}function Yu(e){if((au&(Ja|eu))!==Xa)throw a(Error(331));var t=au;for(au|=eu,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:Ia(ki,mi,n),Ia(mi,_i,n)}}catch(t){if(null===e)throw a(Error(330));Gu(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return au=t,mo(),!0}function Ku(e,t,n){Mo(e,t=qa(e,t=Ra(n,t),1073741823)),null!==(e=Ru(e,1073741823))&&Nu(e,99,1073741823)}function Gu(e,t){if(3===e.tag)Ku(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Ku(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===wu||!wu.has(r))){Mo(n,e=Qa(n,e=Ra(t,e),1073741823)),null!==(n=Ru(n,1073741823))&&Nu(n,99,1073741823);break}}n=n.return}}function Xu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),uu===e&&cu===n?su===ou||su===ru&&1073741823===fu&&co()-vu<mu?Lu(e,cu):hu=!0:e.lastPendingTime<n||(0!==(t=e.pingTime)&&t<n||(e.pingTime=n,e.finishedExpirationTime===n&&(e.finishedExpirationTime=0,e.finishedWork=null),Nu(e,t=go(t=Ou(),n),n)))}function Zu(e,t){var n=e.stateNode;null!==n&&n.delete(t),n=go(n=Ou(),t=Fu(n,e,null)),null!==(e=Ru(e,t))&&Nu(e,n,t)}var Ju=void 0;Ju=function(e,t,n){var r=t.expirationTime;if(null!==e){var o=t.pendingProps;if(e.memoizedProps!==o||Mr.current)fa=!0;else if(r<n){switch(fa=!1,t.tag){case 3:wa(t),ca();break;case 5:if(ci(t),4&t.mode&&1!==n&&o.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:zr(t.type)&&Br(t);break;case 4:ui(t,t.stateNode.containerInfo);break;case 10:So(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?_a(e,t,n):(Ar(hi,hi.current&fi),null!==(t=Sa(e,t,n))?t.sibling:null);Ar(hi,hi.current&fi);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return Ea(e,t,n);t.effectTag|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null),Ar(hi,hi.current),!r)return null}return Sa(e,t,n)}}else fa=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,o=Ir(t,Nr.current),jo(t,n),o=Li(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,$i(),zr(r)){var i=!0;Br(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null;var u=r.getDerivedStateFromProps;"function"==typeof u&&Wo(t,r,u,e),o.updater=Ho,t.stateNode=o,o._reactInternalFiber=t,Ko(t,r,e,n),t=ba(null,t,r,!0,i,n)}else t.tag=0,da(null,t,o,n),t=t.child;return t;case 16:switch(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,o=function(e){var t=e._result;switch(e._status){case 1:return t;case 2:case 0:throw t;default:switch(e._status=0,(t=(t=e._ctor)()).then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)})),e._status){case 1:return e._result;case 2:throw e._result}throw e._result=t,t}}(o),t.type=o,i=t.tag=function(e){if("function"==typeof e)return ol(e)?1:0;if(null!=e){if((e=e.$$typeof)===rt)return 11;if(e===at)return 14}return 2}(o),e=bo(o,e),i){case 0:t=ya(null,t,o,e,n);break;case 1:t=ga(null,t,o,e,n);break;case 11:t=pa(null,t,o,e,n);break;case 14:t=ha(null,t,o,bo(o.type,e),r,n);break;default:throw a(Error(306),o,"")}return t;case 0:return r=t.type,o=t.pendingProps,ya(e,t,r,o=t.elementType===r?o:bo(r,o),n);case 1:return r=t.type,o=t.pendingProps,ga(e,t,r,o=t.elementType===r?o:bo(r,o),n);case 3:if(wa(t),null===(r=t.updateQueue))throw a(Error(282));return o=null!==(o=t.memoizedState)?o.element:null,Uo(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===o?(ca(),t=Sa(e,t,n)):(o=t.stateNode,(o=(null===e||null===e.child)&&o.hydrate)&&(na=jr(t.stateNode.containerInfo.firstChild),ta=t,o=ra=!0),o?(t.effectTag|=2,t.child=ti(t,null,r,n)):(da(e,t,r,n),ca()),t=t.child),t;case 5:return ci(t),null===e&&aa(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,u=o.children,Sr(r,o)?u=null:null!==i&&Sr(r,i)&&(t.effectTag|=16),ma(e,t),4&t.mode&&1!==n&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(da(e,t,u,n),t=t.child),t;case 6:return null===e&&aa(t),null;case 13:return _a(e,t,n);case 4:return ui(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=ei(t,null,r,n):da(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,pa(e,t,r,o=t.elementType===r?o:bo(r,o),n);case 7:return da(e,t,t.pendingProps,n),t.child;case 8:case 12:return da(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,u=t.memoizedProps,So(t,i=o.value),null!==u){var l=u.value;if(0===(i=tn(l,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,i):1073741823))){if(u.children===o.children&&!Mr.current){t=Sa(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var c=l.dependencies;if(null!==c){u=l.child;for(var s=c.firstContext;null!==s;){if(s.context===r&&0!=(s.observedBits&i)){1===l.tag&&((s=Ro(n,null)).tag=2,Mo(l,s)),l.expirationTime<n&&(l.expirationTime=n),null!==(s=l.alternate)&&s.expirationTime<n&&(s.expirationTime=n),To(l.return,n),c.expirationTime<n&&(c.expirationTime=n);break}s=s.next}}else u=10===l.tag&&l.type===t.type?null:l.child;if(null!==u)u.return=l;else for(u=l;null!==u;){if(u===t){u=null;break}if(null!==(l=u.sibling)){l.return=u.return,u=l;break}u=u.return}l=u}}da(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,jo(t,n),r=r(o=Oo(o,i.unstable_observedBits)),t.effectTag|=1,da(e,t,r,n),t.child;case 14:return i=bo(o=t.type,t.pendingProps),ha(e,t,o,i=bo(o.type,i),r,n);case 15:return va(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:bo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,zr(r)?(e=!0,Br(t)):e=!1,jo(t,n),Qo(t,r,o),Ko(t,r,o,n),ba(null,t,r,!0,e,n);case 19:return Ea(e,t,n)}throw a(Error(156))};var el=null,tl=null;function nl(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function rl(e,t,n,r){return new nl(e,t,n,r)}function ol(e){return!(!(e=e.prototype)||!e.isReactComponent)}function il(e,t){var n=e.alternate;return null===n?((n=rl(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function al(e,t,n,r,o,i){var u=2;if(r=e,"function"==typeof e)ol(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case Xe:return ul(n.children,o,i,t);case nt:u=8,o|=7;break;case Ze:u=8,o|=1;break;case Je:return(e=rl(12,n,t,8|o)).elementType=Je,e.type=Je,e.expirationTime=i,e;case ot:return(e=rl(13,n,t,o)).type=ot,e.elementType=ot,e.expirationTime=i,e;case it:return(e=rl(19,n,t,o)).elementType=it,e.expirationTime=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case et:u=10;break e;case tt:u=9;break e;case rt:u=11;break e;case at:u=14;break e;case ut:u=16,r=null;break e}throw a(Error(130),null==e?e:typeof e,"")}return(t=rl(u,n,t,o)).elementType=e,t.type=r,t.expirationTime=i,t}function ul(e,t,n,r){return(e=rl(7,e,r,t)).expirationTime=n,e}function ll(e,t,n){return(e=rl(6,e,null,t)).expirationTime=n,e}function cl(e,t,n){return(t=rl(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function sl(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=this.firstBatch=null,this.pingTime=this.lastPendingTime=this.firstPendingTime=this.callbackExpirationTime=0}function fl(e,t,n){return e=new sl(e,t,n),t=rl(3,null,null,2===t?7:1===t?3:0),e.current=t,t.stateNode=e}function dl(e,t,n,r,o,i){var u=t.current;e:if(n){t:{if(2!==an(n=n._reactInternalFiber)||1!==n.tag)throw a(Error(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(zr(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw a(Error(171))}if(1===n.tag){var c=n.type;if(zr(c)){n=Vr(n,c,l);break e}}n=l}else n=Rr;return null===t.context?t.context=n:t.pendingContext=n,t=i,(o=Ro(r,o)).payload={element:e},null!==(t=void 0===t?null:t)&&(o.callback=t),Mo(u,o),Au(u,r),r}function pl(e,t,n,r){var o=t.current,i=Ou(),a=Vo.suspense;return dl(e,t,n,o=Fu(i,o,a),a,r)}function hl(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function vl(e){var t=1073741821-25*(1+((1073741821-Ou()+500)/25|0));t<=Pu&&--t,this._expirationTime=Pu=t,this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function ml(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function yl(e,t,n){this._internalRoot=fl(e,t,n)}function gl(e,t){this._internalRoot=fl(e,2,t)}function bl(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function wl(e,t,n,r,o){var i=n._reactRootContainer,a=void 0;if(i){if(a=i._internalRoot,"function"==typeof o){var u=o;o=function(){var e=hl(a);u.call(e)}}pl(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new yl(e,0,t)}(n,r),a=i._internalRoot,"function"==typeof o){var l=o;o=function(){var e=hl(a);l.call(e)}}Uu((function(){pl(t,a,e,o)}))}return hl(a)}function xl(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!bl(t))throw a(Error(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Ge,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Te=function(e,t,n){switch(t){case"input":if(St(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=U(r);if(!o)throw a(Error(90));He(r),St(r,o)}}}break;case"textarea":ir(e,n);break;case"select":null!=(t=n.value)&&nr(e,!!n.multiple,t,!1)}},vl.prototype.render=function(e){if(!this._defer)throw a(Error(250));this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new ml;return dl(e,t,null,n,null,r._onCommit),r},vl.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},vl.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(!this._defer||null===t)throw a(Error(251));if(this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;if(null===r)throw a(Error(251));r._next=o._next,this._next=t,e.firstBatch=this}if(this._defer=!1,t=n,(au&(Ja|eu))!==Xa)throw a(Error(253));vo($u.bind(null,e,t)),mo(),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},vl.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},ml.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},ml.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];if("function"!=typeof n)throw a(Error(191),n);n()}}},gl.prototype.render=yl.prototype.render=function(e,t){var n=this._internalRoot,r=new ml;return null!==(t=void 0===t?null:t)&&r.then(t),pl(e,n,null,r._onCommit),r},gl.prototype.unmount=yl.prototype.unmount=function(e){var t=this._internalRoot,n=new ml;return null!==(e=void 0===e?null:e)&&n.then(e),pl(null,t,null,n._onCommit),n},gl.prototype.createBatch=function(){var e=new vl(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime>=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},Re=Iu,Ne=zu,Me=Du,De=function(e,t){var n=au;au|=2;try{return e(t)}finally{(au=n)===Xa&&mo()}};var _l,kl,El={createPortal:xl,findDOMNode:function(e){if(null==e)e=null;else if(1!==e.nodeType){var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw a(Error(188));throw a(Error(268),Object.keys(e))}e=null===(e=ln(t))?null:e.stateNode}return e},hydrate:function(e,t,n){if(!bl(t))throw a(Error(200));return wl(null,e,t,!0,n)},render:function(e,t,n){if(!bl(t))throw a(Error(200));return wl(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){if(!bl(n))throw a(Error(200));if(null==e||void 0===e._reactInternalFiber)throw a(Error(38));return wl(e,t,n,!1,r)},unmountComponentAtNode:function(e){if(!bl(e))throw a(Error(40));return!!e._reactRootContainer&&(Uu((function(){wl(null,null,e,!1,(function(){e._reactRootContainer=null}))})),!0)},unstable_createPortal:function(){return xl.apply(void 0,arguments)},unstable_batchedUpdates:Iu,unstable_interactiveUpdates:function(e,t,n,r){return Du(),zu(e,t,n,r)},unstable_discreteUpdates:zu,unstable_flushDiscreteUpdates:Du,flushSync:function(e,t){if((au&(Ja|eu))!==Xa)throw a(Error(187));var n=au;au|=1;try{return po(99,e.bind(null,t))}finally{au=n,mo()}},unstable_createRoot:function(e,t){if(!bl(e))throw a(Error(299),"unstable_createRoot");return new gl(e,null!=t&&!0===t.hydrate)},unstable_createSyncRoot:function(e,t){if(!bl(e))throw a(Error(299),"unstable_createRoot");return new yl(e,1,null!=t&&!0===t.hydrate)},unstable_flushControlled:function(e){var t=au;au|=1;try{po(99,e)}finally{(au=t)===Xa&&mo()}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[I,z,U,P.injectEventPluginsByName,d,H,function(e){T(e,W)},Pe,Ae,Un,F,Qu,{current:!1}]}};kl=(_l={findFiberByHostInstance:D,bundleType:0,version:"16.9.0",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);el=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},tl=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(o({},_l,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:qe.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=ln(e))?null:e.stateNode},findFiberByHostInstance:function(e){return kl?kl(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}));var Sl={default:El},Cl=Sl&&El||Sl;e.exports=Cl.default||Cl},function(e,t,n){"use strict";e.exports=n(136)},function(e,t,n){"use strict";
/** @license React v0.15.0
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r=void 0,o=void 0,i=void 0,a=void 0,u=void 0;if(t.unstable_now=void 0,t.unstable_forceFrameRate=void 0,"undefined"==typeof window||"function"!=typeof MessageChannel){var l=null,c=null,s=function(){if(null!==l)try{var e=t.unstable_now();l(!0,e),l=null}catch(e){throw setTimeout(s,0),e}};t.unstable_now=function(){return Date.now()},r=function(e){null!==l?setTimeout(r,0,e):(l=e,setTimeout(s,0))},o=function(e,t){c=setTimeout(e,t)},i=function(){clearTimeout(c)},a=function(){return!1},u=t.unstable_forceFrameRate=function(){}}else{var f=window.performance,d=window.Date,p=window.setTimeout,h=window.clearTimeout,v=window.requestAnimationFrame,m=window.cancelAnimationFrame;"undefined"!=typeof console&&("function"!=typeof v&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof m&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")),t.unstable_now="object"==typeof f&&"function"==typeof f.now?function(){return f.now()}:function(){return d.now()};var y=!1,g=null,b=-1,w=-1,x=33.33,_=-1,k=-1,E=0,S=!1;a=function(){return t.unstable_now()>=E},u=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):0<e?(x=Math.floor(1e3/e),S=!0):(x=33.33,S=!1)};var C=function(){if(null!==g){var e=t.unstable_now(),n=0<E-e;try{g(n,e)||(g=null)}catch(e){throw j.postMessage(null),e}}},T=new MessageChannel,j=T.port2;T.port1.onmessage=C;var O=function(e){if(null===g)k=_=-1,y=!1;else{y=!0,v((function(e){h(b),O(e)}));var n=function(){E=t.unstable_now()+x/2,C(),b=p(n,3*x)};if(b=p(n,3*x),-1!==_&&.1<e-_){var r=e-_;!S&&-1!==k&&r<x&&k<x&&(8.33>(x=r<k?k:r)&&(x=8.33)),k=r}_=e,E=e+x,j.postMessage(null)}};r=function(e){g=e,y||(y=!0,v((function(e){O(e)})))},o=function(e,n){w=p((function(){e(t.unstable_now())}),n)},i=function(){h(w),w=-1}}var F=null,P=null,A=null,R=3,N=!1,M=!1,D=!1;function I(e,t){var n=e.next;if(n===e)F=null;else{e===F&&(F=n);var r=e.previous;r.next=n,n.previous=r}e.next=e.previous=null,n=e.callback,r=R;var o=A;R=e.priorityLevel,A=e;try{var i=e.expirationTime<=t;switch(R){case 1:var a=n(i);break;case 2:case 3:case 4:a=n(i);break;case 5:a=n(i)}}catch(e){throw e}finally{R=r,A=o}if("function"==typeof a)if(t=e.expirationTime,e.callback=a,null===F)F=e.next=e.previous=e;else{a=null,i=F;do{if(t<=i.expirationTime){a=i;break}i=i.next}while(i!==F);null===a?a=F:a===F&&(F=e),(t=a.previous).next=a.previous=e,e.next=a,e.previous=t}}function z(e){if(null!==P&&P.startTime<=e)do{var t=P,n=t.next;if(t===n)P=null;else{P=n;var r=t.previous;r.next=n,n.previous=r}t.next=t.previous=null,V(t,t.expirationTime)}while(null!==P&&P.startTime<=e)}function U(e){D=!1,z(e),M||(null!==F?(M=!0,r(L)):null!==P&&o(U,P.startTime-e))}function L(e,n){M=!1,D&&(D=!1,i()),z(n),N=!0;try{if(e){if(null!==F)do{I(F,n),z(n=t.unstable_now())}while(null!==F&&!a())}else for(;null!==F&&F.expirationTime<=n;)I(F,n),z(n=t.unstable_now());return null!==F||(null!==P&&o(U,P.startTime-n),!1)}finally{N=!1}}function $(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}function V(e,t){if(null===F)F=e.next=e.previous=e;else{var n=null,r=F;do{if(t<r.expirationTime){n=r;break}r=r.next}while(r!==F);null===n?n=F:n===F&&(F=e),(t=n.previous).next=n.previous=e,e.next=n,e.previous=t}}var B=u;t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=R;R=e;try{return t()}finally{R=n}},t.unstable_next=function(e){switch(R){case 1:case 2:case 3:var t=3;break;default:t=R}var n=R;R=t;try{return e()}finally{R=n}},t.unstable_scheduleCallback=function(e,n,a){var u=t.unstable_now();if("object"==typeof a&&null!==a){var l=a.delay;l="number"==typeof l&&0<l?u+l:u,a="number"==typeof a.timeout?a.timeout:$(e)}else a=$(e),l=u;if(e={callback:n,priorityLevel:e,startTime:l,expirationTime:a=l+a,next:null,previous:null},l>u){if(a=l,null===P)P=e.next=e.previous=e;else{n=null;var c=P;do{if(a<c.startTime){n=c;break}c=c.next}while(c!==P);null===n?n=P:n===P&&(P=e),(a=n.previous).next=n.previous=e,e.next=n,e.previous=a}null===F&&P===e&&(D?i():D=!0,o(U,l-u))}else V(e,a),M||N||(M=!0,r(L));return e},t.unstable_cancelCallback=function(e){var t=e.next;if(null!==t){if(e===t)e===F?F=null:e===P&&(P=null);else{e===F?F=t:e===P&&(P=t);var n=e.previous;n.next=t,t.previous=n}e.next=e.previous=null}},t.unstable_wrapCallback=function(e){var t=R;return function(){var n=R;R=t;try{return e.apply(this,arguments)}finally{R=n}}},t.unstable_getCurrentPriorityLevel=function(){return R},t.unstable_shouldYield=function(){var e=t.unstable_now();return z(e),null!==A&&null!==F&&F.startTime<=e&&F.expirationTime<A.expirationTime||a()},t.unstable_requestPaint=B,t.unstable_continueExecution=function(){M||N||(M=!0,r(L))},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return F}},function(e,t,n){"use strict";
/** @license React v16.9.0
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,u=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,v=r?Symbol.for("react.suspense_list"):60120,m=r?Symbol.for("react.memo"):60115,y=r?Symbol.for("react.lazy"):60116,g=r?Symbol.for("react.fundamental"):60117,b=r?Symbol.for("react.responder"):60118;function w(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case d:case a:case l:case u:case h:return e;default:switch(e=e&&e.$$typeof){case s:case p:case c:return e;default:return t}}case y:case m:case i:return t}}}function x(e){return w(e)===d}t.typeOf=w,t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=s,t.ContextProvider=c,t.Element=o,t.ForwardRef=p,t.Fragment=a,t.Lazy=y,t.Memo=m,t.Portal=i,t.Profiler=l,t.StrictMode=u,t.Suspense=h,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===l||e===u||e===h||e===v||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===m||e.$$typeof===c||e.$$typeof===s||e.$$typeof===p||e.$$typeof===g||e.$$typeof===b)},t.isAsyncMode=function(e){return x(e)||w(e)===f},t.isConcurrentMode=x,t.isContextConsumer=function(e){return w(e)===s},t.isContextProvider=function(e){return w(e)===c},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return w(e)===p},t.isFragment=function(e){return w(e)===a},t.isLazy=function(e){return w(e)===y},t.isMemo=function(e){return w(e)===m},t.isPortal=function(e){return w(e)===i},t.isProfiler=function(e){return w(e)===l},t.isStrictMode=function(e){return w(e)===u},t.isSuspense=function(e){return w(e)===h}},function(e,t,n){"use strict";t.__esModule=!0;var r=n(0),o=(a(r),a(n(18))),i=a(n(66));a(n(141));function a(e){return e&&e.__esModule?e:{default:e}}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function c(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var s=1073741823;t.default=function(e,t){var n,a,f="__create-react-context-"+(0,i.default)()+"__",d=function(e){function n(){var t,r,o,i;u(this,n);for(var a=arguments.length,c=Array(a),s=0;s<a;s++)c[s]=arguments[s];return t=r=l(this,e.call.apply(e,[this].concat(c))),r.emitter=(o=r.props.value,i=[],{on:function(e){i.push(e)},off:function(e){i=i.filter((function(t){return t!==e}))},get:function(){return o},set:function(e,t){o=e,i.forEach((function(e){return e(o,t)}))}}),l(r,t)}return c(n,e),n.prototype.getChildContext=function(){var e;return(e={})[f]=this.emitter,e},n.prototype.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n=this.props.value,r=e.value,o=void 0;((i=n)===(a=r)?0!==i||1/i==1/a:i!=i&&a!=a)?o=0:(o="function"==typeof t?t(n,r):s,0!==(o|=0)&&this.emitter.set(e.value,o))}var i,a},n.prototype.render=function(){return this.props.children},n}(r.Component);d.childContextTypes=((n={})[f]=o.default.object.isRequired,n);var p=function(t){function n(){var e,r;u(this,n);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return e=r=l(this,t.call.apply(t,[this].concat(i))),r.state={value:r.getValue()},r.onUpdate=function(e,t){0!=((0|r.observedBits)&t)&&r.setState({value:r.getValue()})},l(r,e)}return c(n,t),n.prototype.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?s:t},n.prototype.componentDidMount=function(){this.context[f]&&this.context[f].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?s:e},n.prototype.componentWillUnmount=function(){this.context[f]&&this.context[f].off(this.onUpdate)},n.prototype.getValue=function(){return this.context[f]?this.context[f].get():e},n.prototype.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(r.Component);return p.contextTypes=((a={})[f]=o.default.object,a),{Provider:d,Consumer:p}},e.exports=t.default},function(e,t,n){"use strict";var r=n(140);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var r=n(142);e.exports=r},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";var r=n(5),o=n(75),i=n(145),a=n(81);function u(e){var t=new i(e),n=o(i.prototype.request,t);return r.extend(n,i.prototype,t),r.extend(n,t),n}var l=u(n(78));l.Axios=i,l.create=function(e){return u(a(l.defaults,e))},l.Cancel=n(82),l.CancelToken=n(157),l.isCancel=n(77),l.all=function(e){return Promise.all(e)},l.spread=n(158),e.exports=l,e.exports.default=l},function(e,t){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&null!=e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}},function(e,t,n){"use strict";var r=n(5),o=n(76),i=n(146),a=n(147),u=n(81);function l(e){this.defaults=e,this.interceptors={request:new i,response:new i}}l.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=u(this.defaults,e)).method=e.method?e.method.toLowerCase():"get";var t=[a,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)n=n.then(t.shift(),t.shift());return n},l.prototype.getUri=function(e){return e=u(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){l.prototype[e]=function(t,n){return this.request(r.merge(n||{},{method:e,url:t}))}})),r.forEach(["post","put","patch"],(function(e){l.prototype[e]=function(t,n,o){return this.request(r.merge(o||{},{method:e,url:t,data:n}))}})),e.exports=l},function(e,t,n){"use strict";var r=n(5);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},function(e,t,n){"use strict";var r=n(5),o=n(148),i=n(77),a=n(78),u=n(155),l=n(156);function c(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return c(e),e.baseURL&&!u(e.url)&&(e.url=l(e.baseURL,e.url)),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||a.adapter)(e).then((function(t){return c(e),t.data=o(t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(c(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,n){"use strict";var r=n(5);e.exports=function(e,t,n){return r.forEach(n,(function(n){e=n(e,t)})),e}},function(e,t,n){"use strict";var r=n(5);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},function(e,t,n){"use strict";var r=n(80);e.exports=function(e,t,n){var o=n.config.validateStatus;!o||o(n.status)?e(n):t(r("Request failed with status code "+n.status,n.config,null,n.request,n))}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,n){"use strict";var r=n(5),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,a={};return e?(r.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}})),a):a}},function(e,t,n){"use strict";var r=n(5);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(5);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,a){var u=[];u.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&u.push("expires="+new Date(n).toGMTString()),r.isString(o)&&u.push("path="+o),r.isString(i)&&u.push("domain="+i),!0===a&&u.push("secure"),document.cookie=u.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(82);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t){var n=Object.prototype.hasOwnProperty;e.exports=function(e,t){return null!=e&&n.call(e,t)}},function(e,t,n){var r=n(22),o=Object.prototype,i=o.hasOwnProperty,a=o.toString,u=r?r.toStringTag:void 0;e.exports=function(e){var t=i.call(e,u),n=e[u];try{e[u]=void 0;var r=!0}catch(e){}var o=a.call(e);return r&&(t?e[u]=n:delete e[u]),o}},function(e,t){var n=Object.prototype.toString;e.exports=function(e){return n.call(e)}},function(e,t,n){var r=n(163),o=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,i=/\\(\\)?/g,a=r((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(o,(function(e,n,r,o){t.push(r?o.replace(i,"$1"):n||e)})),t}));e.exports=a},function(e,t,n){var r=n(164),o=500;e.exports=function(e){var t=r(e,(function(e){return n.size===o&&n.clear(),e})),n=t.cache;return t}},function(e,t,n){var r=n(51),o="Expected a function";function i(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError(o);var n=function(){var r=arguments,o=t?t.apply(this,r):r[0],i=n.cache;if(i.has(o))return i.get(o);var a=e.apply(this,r);return n.cache=i.set(o,a)||i,a};return n.cache=new(i.Cache||r),n}i.Cache=r,e.exports=i},function(e,t,n){var r=n(166),o=n(35),i=n(53);e.exports=function(){this.size=0,this.__data__={hash:new r,map:new(i||o),string:new r}}},function(e,t,n){var r=n(167),o=n(172),i=n(173),a=n(174),u=n(175);function l(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=o,l.prototype.get=i,l.prototype.has=a,l.prototype.set=u,e.exports=l},function(e,t,n){var r=n(34);e.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(e,t,n){var r=n(86),o=n(169),i=n(23),a=n(87),u=/^\[object .+?Constructor\]$/,l=Function.prototype,c=Object.prototype,s=l.toString,f=c.hasOwnProperty,d=RegExp("^"+s.call(f).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!i(e)||o(e))&&(r(e)?d:u).test(a(e))}},function(e,t,n){var r,o=n(170),i=(r=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";e.exports=function(e){return!!i&&i in e}},function(e,t,n){var r=n(11)["__core-js_shared__"];e.exports=r},function(e,t){e.exports=function(e,t){return null==e?void 0:e[t]}},function(e,t){e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},function(e,t,n){var r=n(34),o="__lodash_hash_undefined__",i=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(r){var n=t[e];return n===o?void 0:n}return i.call(t,e)?t[e]:void 0}},function(e,t,n){var r=n(34),o=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return r?void 0!==t[e]:o.call(t,e)}},function(e,t,n){var r=n(34),o="__lodash_hash_undefined__";e.exports=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=r&&void 0===t?o:t,this}},function(e,t){e.exports=function(){this.__data__=[],this.size=0}},function(e,t,n){var r=n(36),o=Array.prototype.splice;e.exports=function(e){var t=this.__data__,n=r(t,e);return!(n<0)&&(n==t.length-1?t.pop():o.call(t,n,1),--this.size,!0)}},function(e,t,n){var r=n(36);e.exports=function(e){var t=this.__data__,n=r(t,e);return n<0?void 0:t[n][1]}},function(e,t,n){var r=n(36);e.exports=function(e){return r(this.__data__,e)>-1}},function(e,t,n){var r=n(36);e.exports=function(e,t){var n=this.__data__,o=r(n,e);return o<0?(++this.size,n.push([e,t])):n[o][1]=t,this}},function(e,t,n){var r=n(37);e.exports=function(e){var t=r(this,e).delete(e);return this.size-=t?1:0,t}},function(e,t){e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},function(e,t,n){var r=n(37);e.exports=function(e){return r(this,e).get(e)}},function(e,t,n){var r=n(37);e.exports=function(e){return r(this,e).has(e)}},function(e,t,n){var r=n(37);e.exports=function(e,t){var n=r(this,e),o=n.size;return n.set(e,t),this.size+=n.size==o?0:1,this}},function(e,t,n){var r=n(22),o=n(88),i=n(10),a=n(50),u=1/0,l=r?r.prototype:void 0,c=l?l.toString:void 0;e.exports=function e(t){if("string"==typeof t)return t;if(i(t))return o(t,e)+"";if(a(t))return c?c.call(t):"";var n=t+"";return"0"==n&&1/t==-u?"-0":n}},function(e,t,n){var r=n(21),o=n(13),i="[object Arguments]";e.exports=function(e){return o(e)&&r(e)==i}},function(e,t,n){var r=n(189),o=1,i=4;e.exports=function(e,t){return r(e,o|i,t="function"==typeof t?t:void 0)}},function(e,t,n){var r=n(55),o=n(195),i=n(91),a=n(197),u=n(203),l=n(206),c=n(96),s=n(207),f=n(209),d=n(101),p=n(210),h=n(29),v=n(215),m=n(216),y=n(221),g=n(10),b=n(56),w=n(223),x=n(23),_=n(225),k=n(24),E=1,S=2,C=4,T="[object Arguments]",j="[object Function]",O="[object GeneratorFunction]",F="[object Object]",P={};P[T]=P["[object Array]"]=P["[object ArrayBuffer]"]=P["[object DataView]"]=P["[object Boolean]"]=P["[object Date]"]=P["[object Float32Array]"]=P["[object Float64Array]"]=P["[object Int8Array]"]=P["[object Int16Array]"]=P["[object Int32Array]"]=P["[object Map]"]=P["[object Number]"]=P[F]=P["[object RegExp]"]=P["[object Set]"]=P["[object String]"]=P["[object Symbol]"]=P["[object Uint8Array]"]=P["[object Uint8ClampedArray]"]=P["[object Uint16Array]"]=P["[object Uint32Array]"]=!0,P["[object Error]"]=P[j]=P["[object WeakMap]"]=!1,e.exports=function e(t,n,A,R,N,M){var D,I=n&E,z=n&S,U=n&C;if(A&&(D=N?A(t,R,N,M):A(t)),void 0!==D)return D;if(!x(t))return t;var L=g(t);if(L){if(D=v(t),!I)return c(t,D)}else{var $=h(t),V=$==j||$==O;if(b(t))return l(t,I);if($==F||$==T||V&&!N){if(D=z||V?{}:y(t),!I)return z?f(t,u(D,t)):s(t,a(D,t))}else{if(!P[$])return N?t:{};D=m(t,$,I)}}M||(M=new r);var B=M.get(t);if(B)return B;M.set(t,D),_(t)?t.forEach((function(r){D.add(e(r,n,A,r,t,M))})):w(t)&&t.forEach((function(r,o){D.set(o,e(r,n,A,o,t,M))}));var W=U?z?p:d:z?keysIn:k,H=L?void 0:W(t);return o(H||t,(function(r,o){H&&(r=t[o=r]),i(D,o,e(r,n,A,o,t,M))})),D}},function(e,t,n){var r=n(35);e.exports=function(){this.__data__=new r,this.size=0}},function(e,t){e.exports=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n}},function(e,t){e.exports=function(e){return this.__data__.get(e)}},function(e,t){e.exports=function(e){return this.__data__.has(e)}},function(e,t,n){var r=n(35),o=n(53),i=n(51),a=200;e.exports=function(e,t){var n=this.__data__;if(n instanceof r){var u=n.__data__;if(!o||u.length<a-1)return u.push([e,t]),this.size=++n.size,this;n=this.__data__=new i(u)}return n.set(e,t),this.size=n.size,this}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e}},function(e,t,n){var r=n(15),o=function(){try{var e=r(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=o},function(e,t,n){var r=n(40),o=n(24);e.exports=function(e,t){return e&&r(t,o(t),e)}},function(e,t){e.exports=function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}},function(e,t){e.exports=function(){return!1}},function(e,t,n){var r=n(21),o=n(54),i=n(13),a={};a["[object Float32Array]"]=a["[object Float64Array]"]=a["[object Int8Array]"]=a["[object Int16Array]"]=a["[object Int32Array]"]=a["[object Uint8Array]"]=a["[object Uint8ClampedArray]"]=a["[object Uint16Array]"]=a["[object Uint32Array]"]=!0,a["[object Arguments]"]=a["[object Array]"]=a["[object ArrayBuffer]"]=a["[object Boolean]"]=a["[object DataView]"]=a["[object Date]"]=a["[object Error]"]=a["[object Function]"]=a["[object Map]"]=a["[object Number]"]=a["[object Object]"]=a["[object RegExp]"]=a["[object Set]"]=a["[object String]"]=a["[object WeakMap]"]=!1,e.exports=function(e){return i(e)&&o(e.length)&&!!a[r(e)]}},function(e,t,n){var r=n(60),o=n(202),i=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return o(e);var t=[];for(var n in Object(e))i.call(e,n)&&"constructor"!=n&&t.push(n);return t}},function(e,t,n){var r=n(94)(Object.keys,Object);e.exports=r},function(e,t,n){var r=n(40),o=n(95);e.exports=function(e,t){return e&&r(t,o(t),e)}},function(e,t,n){var r=n(23),o=n(60),i=n(205),a=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return i(e);var t=o(e),n=[];for(var u in e)("constructor"!=u||!t&&a.call(e,u))&&n.push(u);return n}},function(e,t){e.exports=function(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t}},function(e,t,n){(function(e){var r=n(11),o=t&&!t.nodeType&&t,i=o&&"object"==typeof e&&e&&!e.nodeType&&e,a=i&&i.exports===o?r.Buffer:void 0,u=a?a.allocUnsafe:void 0;e.exports=function(e,t){if(t)return e.slice();var n=e.length,r=u?u(n):new e.constructor(n);return e.copy(r),r}}).call(this,n(57)(e))},function(e,t,n){var r=n(40),o=n(62);e.exports=function(e,t){return r(e,o(e),t)}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length,o=0,i=[];++n<r;){var a=e[n];t(a,n,e)&&(i[o++]=a)}return i}},function(e,t,n){var r=n(40),o=n(98);e.exports=function(e,t){return r(e,o(e),t)}},function(e,t,n){var r=n(102),o=n(98),i=n(95);e.exports=function(e){return r(e,i,o)}},function(e,t,n){var r=n(15)(n(11),"DataView");e.exports=r},function(e,t,n){var r=n(15)(n(11),"Promise");e.exports=r},function(e,t,n){var r=n(15)(n(11),"Set");e.exports=r},function(e,t,n){var r=n(15)(n(11),"WeakMap");e.exports=r},function(e,t){var n=Object.prototype.hasOwnProperty;e.exports=function(e){var t=e.length,r=new e.constructor(t);return t&&"string"==typeof e[0]&&n.call(e,"index")&&(r.index=e.index,r.input=e.input),r}},function(e,t,n){var r=n(63),o=n(217),i=n(218),a=n(219),u=n(220),l="[object Boolean]",c="[object Date]",s="[object Map]",f="[object Number]",d="[object RegExp]",p="[object Set]",h="[object String]",v="[object Symbol]",m="[object ArrayBuffer]",y="[object DataView]",g="[object Float32Array]",b="[object Float64Array]",w="[object Int8Array]",x="[object Int16Array]",_="[object Int32Array]",k="[object Uint8Array]",E="[object Uint8ClampedArray]",S="[object Uint16Array]",C="[object Uint32Array]";e.exports=function(e,t,n){var T=e.constructor;switch(t){case m:return r(e);case l:case c:return new T(+e);case y:return o(e,n);case g:case b:case w:case x:case _:case k:case E:case S:case C:return u(e,n);case s:return new T;case f:case h:return new T(e);case d:return i(e);case p:return new T;case v:return a(e)}}},function(e,t,n){var r=n(63);e.exports=function(e,t){var n=t?r(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}},function(e,t){var n=/\w*$/;e.exports=function(e){var t=new e.constructor(e.source,n.exec(e));return t.lastIndex=e.lastIndex,t}},function(e,t,n){var r=n(22),o=r?r.prototype:void 0,i=o?o.valueOf:void 0;e.exports=function(e){return i?Object(i.call(e)):{}}},function(e,t,n){var r=n(63);e.exports=function(e,t){var n=t?r(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}},function(e,t,n){var r=n(222),o=n(100),i=n(60);e.exports=function(e){return"function"!=typeof e.constructor||i(e)?{}:r(o(e))}},function(e,t,n){var r=n(23),o=Object.create,i=function(){function e(){}return function(t){if(!r(t))return{};if(o)return o(t);e.prototype=t;var n=new e;return e.prototype=void 0,n}}();e.exports=i},function(e,t,n){var r=n(224),o=n(58),i=n(59),a=i&&i.isMap,u=a?o(a):r;e.exports=u},function(e,t,n){var r=n(29),o=n(13),i="[object Map]";e.exports=function(e){return o(e)&&r(e)==i}},function(e,t,n){var r=n(226),o=n(58),i=n(59),a=i&&i.isSet,u=a?o(a):r;e.exports=u},function(e,t,n){var r=n(29),o=n(13),i="[object Set]";e.exports=function(e){return o(e)&&r(e)==i}},function(e,t,n){var r=n(22),o=n(96),i=n(29),a=n(61),u=n(228),l=n(229),c=n(104),s=n(105),f=n(106),d=n(232),p="[object Map]",h="[object Set]",v=r?r.iterator:void 0;e.exports=function(e){if(!e)return[];if(a(e))return u(e)?f(e):o(e);if(v&&e[v])return l(e[v]());var t=i(e);return(t==p?c:t==h?s:d)(e)}},function(e,t,n){var r=n(21),o=n(10),i=n(13),a="[object String]";e.exports=function(e){return"string"==typeof e||!o(e)&&i(e)&&r(e)==a}},function(e,t){e.exports=function(e){for(var t,n=[];!(t=e.next()).done;)n.push(t.value);return n}},function(e,t){e.exports=function(e){return e.split("")}},function(e,t){var n="[\\ud800-\\udfff]",r="[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]",o="\\ud83c[\\udffb-\\udfff]",i="[^\\ud800-\\udfff]",a="(?:\\ud83c[\\udde6-\\uddff]){2}",u="[\\ud800-\\udbff][\\udc00-\\udfff]",l="(?:"+r+"|"+o+")"+"?",c="[\\ufe0e\\ufe0f]?"+l+("(?:\\u200d(?:"+[i,a,u].join("|")+")[\\ufe0e\\ufe0f]?"+l+")*"),s="(?:"+[i+r+"?",r,a,u,n].join("|")+")",f=RegExp(o+"(?="+o+")|"+s+c,"g");e.exports=function(e){return e.match(f)||[]}},function(e,t,n){var r=n(233),o=n(24);e.exports=function(e){return null==e?[]:r(e,o(e))}},function(e,t,n){var r=n(88);e.exports=function(e,t){return r(t,(function(t){return e[t]}))}},function(e,t,n){"use strict";var r=n(3);t.__esModule=!0,t.default=void 0;var o=r(n(20)),i=r(n(17)),a=function(){function e(e,t){if(this.refs=e,"function"!=typeof t){if(!(0,o.default)(t,"is"))throw new TypeError("`is:` is required for `when()` conditions");if(!t.then&&!t.otherwise)throw new TypeError("either `then:` or `otherwise:` is required for `when()` conditions");var n=t.is,r=t.then,i=t.otherwise,a="function"==typeof n?n:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return t.every((function(e){return e===n}))};this.fn=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var o=t.pop(),u=t.pop(),l=a.apply(void 0,t)?r:i;if(l)return"function"==typeof l?l(u):u.concat(l.resolve(o))}}else this.fn=t}return e.prototype.resolve=function(e,t){var n=this.refs.map((function(e){return e.getValue(t)})),r=this.fn.apply(e,n.concat(e,t));if(void 0===r||r===e)return e;if(!(0,i.default)(r))throw new TypeError("conditions must return a schema object");return r.resolve(t)},e}();t.default=a,e.exports=t.default},function(e,t,n){"use strict";var r=n(3);t.__esModule=!0,t.default=function e(t,n){for(var r in n)if((0,o.default)(n,r)){var u=n[r],l=t[r];if(void 0===l)t[r]=u;else{if(l===u)continue;(0,i.default)(l)?(0,i.default)(u)&&(t[r]=u.concat(l)):a(l)?a(u)&&(t[r]=e(l,u)):Array.isArray(l)&&Array.isArray(u)&&(t[r]=u.concat(l))}}return t};var o=r(n(20)),i=r(n(17)),a=function(e){return"[object Object]"===Object.prototype.toString.call(e)};e.exports=t.default},function(e,t,n){"use strict";var r=n(3);t.__esModule=!0,t.createErrorFactory=d,t.default=function(e){var t=e.name,n=e.message,r=e.test,a=e.params;function s(e){var s=e.value,p=e.path,h=e.label,v=e.options,m=e.originalValue,y=e.sync,g=(0,o.default)(e,["value","path","label","options","originalValue","sync"]),b=v.parent,w=function(e){return l.default.isRef(e)?e.getValue({value:s,parent:b,context:v.context}):e},x=d({message:n,path:p,value:s,originalValue:m,params:a,label:h,resolve:w,name:t}),_=(0,i.default)({path:p,parent:b,type:t,createError:x,resolve:w,options:v},g);return function(e,t,n,r){var o=e.call(t,n);if(!r)return Promise.resolve(o);if(f(o))throw new Error('Validation test of type: "'+t.type+'" returned a Promise during a synchronous validate. This test will finish after the validate call has returned');return c.SynchronousPromise.resolve(o)}(r,_,s,y).then((function(e){if(u.default.isError(e))throw e;if(!e)throw x()}))}return s.OPTIONS=e,s};var o=r(n(108)),i=r(n(19)),a=r(n(110)),u=r(n(65)),l=r(n(30)),c=n(109),s=u.default.formatError,f=function(e){return e&&"function"==typeof e.then&&"function"==typeof e.catch};function d(e){var t=e.value,n=e.label,r=e.resolve,l=e.originalValue,c=(0,o.default)(e,["value","label","resolve","originalValue"]);return function(e){var o=void 0===e?{}:e,f=o.path,d=void 0===f?c.path:f,p=o.message,h=void 0===p?c.message:p,v=o.type,m=void 0===v?c.name:v,y=o.params;return y=(0,i.default)({path:d,value:t,originalValue:l,label:n},function(e,t,n){return(0,a.default)((0,i.default)({},e,t),n)}(c.params,y,r)),(0,i.default)(new u.default(s(h,y),t,d,m),{params:y})}}},function(e,t,n){var r=n(238)();e.exports=r},function(e,t){e.exports=function(e){return function(t,n,r){for(var o=-1,i=Object(t),a=r(t),u=a.length;u--;){var l=a[e?u:++o];if(!1===n(i[l],l,i))break}return t}}},function(e,t,n){var r=n(240),o=n(249),i=n(116);e.exports=function(e){var t=o(e);return 1==t.length&&t[0][2]?i(t[0][0],t[0][1]):function(n){return n===e||r(n,e,t)}}},function(e,t,n){var r=n(55),o=n(113),i=1,a=2;e.exports=function(e,t,n,u){var l=n.length,c=l,s=!u;if(null==e)return!c;for(e=Object(e);l--;){var f=n[l];if(s&&f[2]?f[1]!==e[f[0]]:!(f[0]in e))return!1}for(;++l<c;){var d=(f=n[l])[0],p=e[d],h=f[1];if(s&&f[2]){if(void 0===p&&!(d in e))return!1}else{var v=new r;if(u)var m=u(p,h,d,e,t,v);if(!(void 0===m?o(h,p,i|a,u,v):m))return!1}}return!0}},function(e,t,n){var r=n(55),o=n(114),i=n(247),a=n(248),u=n(29),l=n(10),c=n(56),s=n(93),f=1,d="[object Arguments]",p="[object Array]",h="[object Object]",v=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,m,y,g){var b=l(e),w=l(t),x=b?p:u(e),_=w?p:u(t),k=(x=x==d?h:x)==h,E=(_=_==d?h:_)==h,S=x==_;if(S&&c(e)){if(!c(t))return!1;b=!0,k=!1}if(S&&!k)return g||(g=new r),b||s(e)?o(e,t,n,m,y,g):i(e,t,x,n,m,y,g);if(!(n&f)){var C=k&&v.call(e,"__wrapped__"),T=E&&v.call(t,"__wrapped__");if(C||T){var j=C?e.value():e,O=T?t.value():t;return g||(g=new r),y(j,O,n,m,g)}}return!!S&&(g||(g=new r),a(e,t,n,m,y,g))}},function(e,t,n){var r=n(51),o=n(243),i=n(244);function a(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new r;++t<n;)this.add(e[t])}a.prototype.add=a.prototype.push=o,a.prototype.has=i,e.exports=a},function(e,t){var n="__lodash_hash_undefined__";e.exports=function(e){return this.__data__.set(e,n),this}},function(e,t){e.exports=function(e){return this.__data__.has(e)}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}},function(e,t){e.exports=function(e,t){return e.has(t)}},function(e,t,n){var r=n(22),o=n(103),i=n(52),a=n(114),u=n(104),l=n(105),c=1,s=2,f="[object Boolean]",d="[object Date]",p="[object Error]",h="[object Map]",v="[object Number]",m="[object RegExp]",y="[object Set]",g="[object String]",b="[object Symbol]",w="[object ArrayBuffer]",x="[object DataView]",_=r?r.prototype:void 0,k=_?_.valueOf:void 0;e.exports=function(e,t,n,r,_,E,S){switch(n){case x:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case w:return!(e.byteLength!=t.byteLength||!E(new o(e),new o(t)));case f:case d:case v:return i(+e,+t);case p:return e.name==t.name&&e.message==t.message;case m:case g:return e==t+"";case h:var C=u;case y:var T=r&c;if(C||(C=l),e.size!=t.size&&!T)return!1;var j=S.get(e);if(j)return j==t;r|=s,S.set(e,t);var O=a(C(e),C(t),r,_,E,S);return S.delete(e),O;case b:if(k)return k.call(e)==k.call(t)}return!1}},function(e,t,n){var r=n(101),o=1,i=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,a,u,l){var c=n&o,s=r(e),f=s.length;if(f!=r(t).length&&!c)return!1;for(var d=f;d--;){var p=s[d];if(!(c?p in t:i.call(t,p)))return!1}var h=l.get(e);if(h&&l.get(t))return h==t;var v=!0;l.set(e,t),l.set(t,e);for(var m=c;++d<f;){var y=e[p=s[d]],g=t[p];if(a)var b=c?a(g,y,p,t,e,l):a(y,g,p,e,t,l);if(!(void 0===b?y===g||u(y,g,n,a,l):b)){v=!1;break}m||(m="constructor"==p)}if(v&&!m){var w=e.constructor,x=t.constructor;w!=x&&"constructor"in e&&"constructor"in t&&!("function"==typeof w&&w instanceof w&&"function"==typeof x&&x instanceof x)&&(v=!1)}return l.delete(e),l.delete(t),v}},function(e,t,n){var r=n(115),o=n(24);e.exports=function(e){for(var t=o(e),n=t.length;n--;){var i=t[n],a=e[i];t[n]=[i,a,r(a)]}return t}},function(e,t,n){var r=n(113),o=n(251),i=n(252),a=n(49),u=n(115),l=n(116),c=n(38),s=1,f=2;e.exports=function(e,t){return a(e)&&u(t)?l(c(e),t):function(n){var a=o(n,e);return void 0===a&&a===t?i(n,e):r(t,a,s|f)}}},function(e,t,n){var r=n(117);e.exports=function(e,t,n){var o=null==e?void 0:r(e,t);return void 0===o?n:o}},function(e,t,n){var r=n(253),o=n(83);e.exports=function(e,t){return null!=e&&o(e,t,r)}},function(e,t){e.exports=function(e,t){return null!=e&&t in Object(e)}},function(e,t){e.exports=function(e){return e}},function(e,t,n){var r=n(256),o=n(257),i=n(49),a=n(38);e.exports=function(e){return i(e)?r(a(e)):o(e)}},function(e,t){e.exports=function(e){return function(t){return null==t?void 0:t[e]}}},function(e,t,n){var r=n(117);e.exports=function(e){return function(t){return r(t,e)}}},function(e,t,n){"use strict";var r=n(3);t.__esModule=!0,t.default=void 0;var o=r(n(25)),i=r(n(14)),a=u;function u(){var e=this;if(!(this instanceof u))return new u;i.default.call(this,{type:"boolean"}),this.withMutation((function(){e.transform((function(e){if(!this.isType(e)){if(/^(true|1)$/i.test(e))return!0;if(/^(false|0)$/i.test(e))return!1}return e}))}))}t.default=a,(0,o.default)(u,i.default,{_typeCheck:function(e){return e instanceof Boolean&&(e=e.valueOf()),"boolean"==typeof e}}),e.exports=t.default},function(e,t,n){"use strict";var r=n(3);t.__esModule=!0,t.default=f;var o=r(n(25)),i=r(n(14)),a=n(16),u=r(n(43)),l=/^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i,c=/^((https?|ftp):)?\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i,s=function(e){return(0,u.default)(e)||e===e.trim()};function f(){var e=this;if(!(this instanceof f))return new f;i.default.call(this,{type:"string"}),this.withMutation((function(){e.transform((function(e){return this.isType(e)?e:null!=e&&e.toString?e.toString():e}))}))}(0,o.default)(f,i.default,{_typeCheck:function(e){return e instanceof String&&(e=e.valueOf()),"string"==typeof e},_isPresent:function(e){return i.default.prototype._cast.call(this,e)&&e.length>0},length:function(e,t){return void 0===t&&(t=a.string.length),this.test({message:t,name:"length",exclusive:!0,params:{length:e},test:function(t){return(0,u.default)(t)||t.length===this.resolve(e)}})},min:function(e,t){return void 0===t&&(t=a.string.min),this.test({message:t,name:"min",exclusive:!0,params:{min:e},test:function(t){return(0,u.default)(t)||t.length>=this.resolve(e)}})},max:function(e,t){return void 0===t&&(t=a.string.max),this.test({name:"max",exclusive:!0,message:t,params:{max:e},test:function(t){return(0,u.default)(t)||t.length<=this.resolve(e)}})},matches:function(e,t){var n,r=!1;return t&&(t.message||t.hasOwnProperty("excludeEmptyString")?(r=t.excludeEmptyString,n=t.message):n=t),this.test({message:n||a.string.matches,params:{regex:e},test:function(t){return(0,u.default)(t)||""===t&&r||e.test(t)}})},email:function(e){return void 0===e&&(e=a.string.email),this.matches(l,{message:e,excludeEmptyString:!0})},url:function(e){return void 0===e&&(e=a.string.url),this.matches(c,{message:e,excludeEmptyString:!0})},ensure:function(){return this.default("").transform((function(e){return null===e?"":e}))},trim:function(e){return void 0===e&&(e=a.string.trim),this.transform((function(e){return null!=e?e.trim():e})).test({message:e,name:"trim",test:s})},lowercase:function(e){return void 0===e&&(e=a.string.lowercase),this.transform((function(e){return(0,u.default)(e)?e:e.toLowerCase()})).test({message:e,name:"string_case",exclusive:!0,test:function(e){return(0,u.default)(e)||e===e.toLowerCase()}})},uppercase:function(e){return void 0===e&&(e=a.string.uppercase),this.transform((function(e){return(0,u.default)(e)?e:e.toUpperCase()})).test({message:e,name:"string_case",exclusive:!0,test:function(e){return(0,u.default)(e)||e===e.toUpperCase()}})}}),e.exports=t.default},function(e,t,n){"use strict";var r=n(3);t.__esModule=!0,t.default=c;var o=r(n(25)),i=r(n(14)),a=n(16),u=r(n(43)),l=function(e){return(0,u.default)(e)||e===(0|e)};function c(){var e=this;if(!(this instanceof c))return new c;i.default.call(this,{type:"number"}),this.withMutation((function(){e.transform((function(e){var t=e;if("string"==typeof t){if(""===(t=t.replace(/\s/g,"")))return NaN;t=+t}return this.isType(t)?t:parseFloat(t)}))}))}(0,o.default)(c,i.default,{_typeCheck:function(e){return e instanceof Number&&(e=e.valueOf()),"number"==typeof e&&!function(e){return e!=+e}(e)},min:function(e,t){return void 0===t&&(t=a.number.min),this.test({message:t,name:"min",exclusive:!0,params:{min:e},test:function(t){return(0,u.default)(t)||t>=this.resolve(e)}})},max:function(e,t){return void 0===t&&(t=a.number.max),this.test({message:t,name:"max",exclusive:!0,params:{max:e},test:function(t){return(0,u.default)(t)||t<=this.resolve(e)}})},lessThan:function(e,t){return void 0===t&&(t=a.number.lessThan),this.test({message:t,name:"max",exclusive:!0,params:{less:e},test:function(t){return(0,u.default)(t)||t<this.resolve(e)}})},moreThan:function(e,t){return void 0===t&&(t=a.number.moreThan),this.test({message:t,name:"min",exclusive:!0,params:{more:e},test:function(t){return(0,u.default)(t)||t>this.resolve(e)}})},positive:function(e){return void 0===e&&(e=a.number.positive),this.moreThan(0,e)},negative:function(e){return void 0===e&&(e=a.number.negative),this.lessThan(0,e)},integer:function(e){return void 0===e&&(e=a.number.integer),this.test({name:"integer",message:e,test:l})},truncate:function(){return this.transform((function(e){return(0,u.default)(e)?e:0|e}))},round:function(e){var t=["ceil","floor","round","trunc"];if("trunc"===(e=e&&e.toLowerCase()||"round"))return this.truncate();if(-1===t.indexOf(e.toLowerCase()))throw new TypeError("Only valid options for round() are: "+t.join(", "));return this.transform((function(t){return(0,u.default)(t)?t:Math[e](t)}))}}),e.exports=t.default},function(e,t,n){"use strict";var r=n(3);t.__esModule=!0,t.default=void 0;var o=r(n(14)),i=r(n(25)),a=r(n(262)),u=n(16),l=r(n(43)),c=r(n(30)),s=new Date(""),f=d;function d(){var e=this;if(!(this instanceof d))return new d;o.default.call(this,{type:"date"}),this.withMutation((function(){e.transform((function(e){return this.isType(e)?e:(e=(0,a.default)(e))?new Date(e):s}))}))}t.default=f,(0,i.default)(d,o.default,{_typeCheck:function(e){return t=e,"[object Date]"===Object.prototype.toString.call(t)&&!isNaN(e.getTime());var t},min:function(e,t){void 0===t&&(t=u.date.min);var n=e;if(!c.default.isRef(n)&&(n=this.cast(e),!this._typeCheck(n)))throw new TypeError("`min` must be a Date or a value that can be `cast()` to a Date");return this.test({message:t,name:"min",exclusive:!0,params:{min:e},test:function(e){return(0,l.default)(e)||e>=this.resolve(n)}})},max:function(e,t){void 0===t&&(t=u.date.max);var n=e;if(!c.default.isRef(n)&&(n=this.cast(e),!this._typeCheck(n)))throw new TypeError("`max` must be a Date or a value that can be `cast()` to a Date");return this.test({message:t,name:"max",exclusive:!0,params:{max:e},test:function(e){return(0,l.default)(e)||e<=this.resolve(n)}})}}),e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){var t,n,o=[1,4,5,6,7,10,11],i=0;if(n=r.exec(e)){for(var a,u=0;a=o[u];++u)n[a]=+n[a]||0;n[2]=(+n[2]||1)-1,n[3]=+n[3]||1,n[7]=n[7]?String(n[7]).substr(0,3):0,void 0!==n[8]&&""!==n[8]||void 0!==n[9]&&""!==n[9]?("Z"!==n[8]&&void 0!==n[9]&&(i=60*n[10]+n[11],"+"===n[9]&&(i=0-i)),t=Date.UTC(n[1],n[2],n[3],n[4],n[5]+i,n[6],n[7])):t=+new Date(n[1],n[2],n[3],n[4],n[5],n[6],n[7])}else t=Date.parse?Date.parse(e):NaN;return t};var r=/^(\d{4}|[+\-]\d{6})(?:-?(\d{2})(?:-?(\d{2}))?)?(?:[ T]?(\d{2}):?(\d{2})(?::?(\d{2})(?:[,\.](\d{1,}))?)?(?:(Z)|([+\-])(\d{2})(?::?(\d{2}))?)?)?$/;e.exports=t.default},function(e,t,n){"use strict";var r=n(119),o=n(3);t.__esModule=!0,t.default=k;var i=o(n(120)),a=o(n(19)),u=o(n(20)),l=o(n(264)),c=o(n(273)),s=o(n(279)),f=o(n(110)),d=n(42),p=o(n(14)),h=n(16),v=o(n(280)),m=o(n(282)),y=o(n(25)),g=o(n(122)),b=r(n(64));function w(){var e=(0,i.default)(["",".",""]);return w=function(){return e},e}function x(){var e=(0,i.default)(["",".",""]);return x=function(){return e},e}var _=function(e){return"[object Object]"===Object.prototype.toString.call(e)};function k(e){var t=this;if(!(this instanceof k))return new k(e);p.default.call(this,{type:"object",default:function(){var e=this;if(this._nodes.length){var t={};return this._nodes.forEach((function(n){t[n]=e.fields[n].default?e.fields[n].default():void 0})),t}}}),this.fields=Object.create(null),this._nodes=[],this._excludedEdges=[],this.withMutation((function(){t.transform((function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(t){e=null}return this.isType(e)?e:null})),e&&t.shape(e)}))}(0,y.default)(k,p.default,{_typeCheck:function(e){return _(e)||"function"==typeof e},_cast:function(e,t){var n=this;void 0===t&&(t={});var r=p.default.prototype._cast.call(this,e,t);if(void 0===r)return this.default();if(!this._typeCheck(r))return r;var o=this.fields,i=!0===this._option("stripUnknown",t),l=this._nodes.concat(Object.keys(r).filter((function(e){return-1===n._nodes.indexOf(e)}))),c={},s=(0,a.default)({},t,{parent:c,__validating:!1}),f=!1;return l.forEach((function(e){var n=o[e],a=(0,u.default)(r,e);if(n){var l,d=n._options&&n._options.strict;if(s.path=(0,g.default)(x(),t.path,e),s.value=r[e],!0===(n=n.resolve(s))._strip)return void(f=f||e in r);void 0!==(l=t.__validating&&d?r[e]:n.cast(r[e],s))&&(c[e]=l)}else a&&!i&&(c[e]=r[e]);c[e]!==r[e]&&(f=!0)})),f?c:r},_validate:function(e,t){var n,r,o=this;void 0===t&&(t={});var i=t.sync,u=[],l=null!=t.originalValue?t.originalValue:e;return n=this._option("abortEarly",t),r=this._option("recursive",t),t=(0,a.default)({},t,{__validating:!0,originalValue:l}),p.default.prototype._validate.call(this,e,t).catch((0,b.propagateErrors)(n,u)).then((function(e){if(!r||!_(e)){if(u.length)throw u[0];return e}l=l||e;var c=o._nodes.map((function(n){var r=(0,g.default)(w(),t.path,n),i=o.fields[n],u=(0,a.default)({},t,{path:r,parent:e,originalValue:l[n]});return i&&i.validate?(u.strict=!0,i.validate(e[n],u)):Promise.resolve(!0)}));return(0,b.default)({sync:i,validations:c,value:e,errors:u,endEarly:n,path:t.path,sort:(0,m.default)(o.fields)})}))},concat:function(e){var t=p.default.prototype.concat.call(this,e);return t._nodes=(0,v.default)(t.fields,t._excludedEdges),t},shape:function(e,t){void 0===t&&(t=[]);var n=this.clone(),r=(0,a.default)(n.fields,e);if(n.fields=r,t.length){Array.isArray(t[0])||(t=[t]);var o=t.map((function(e){return e[0]+"-"+e[1]}));n._excludedEdges=n._excludedEdges.concat(o)}return n._nodes=(0,v.default)(r,n._excludedEdges),n},from:function(e,t,n){var r=(0,d.getter)(e,!0);return this.transform((function(o){if(null==o)return o;var i=o;return(0,u.default)(o,e)&&(i=(0,a.default)({},o),n||delete i[e],i[t]=r(o)),i}))},noUnknown:function(e,t){void 0===e&&(e=!0),void 0===t&&(t=h.object.noUnknown),"string"==typeof e&&(t=e,e=!0);var n=this.test({name:"noUnknown",exclusive:!0,message:t,test:function(t){return null==t||!e||0===function(e,t){var n=Object.keys(e.fields);return Object.keys(t).filter((function(e){return-1===n.indexOf(e)}))}(this.schema,t).length}});return n._options.stripUnknown=e,n},unknown:function(e,t){return void 0===e&&(e=!0),void 0===t&&(t=h.object.noUnknown),this.noUnknown(!e,t)},transformKeys:function(e){return this.transform((function(t){return t&&(0,s.default)(t,(function(t,n){return e(n)}))}))},camelCase:function(){return this.transformKeys(c.default)},snakeCase:function(){return this.transformKeys(l.default)},constantCase:function(){return this.transformKeys((function(e){return(0,l.default)(e).toUpperCase()}))},describe:function(){var e=p.default.prototype.describe.call(this);return e.fields=(0,f.default)(this.fields,(function(e){return e.describe()})),e}}),e.exports=t.default},function(e,t,n){var r=n(121)((function(e,t,n){return e+(n?"_":"")+t.toLowerCase()}));e.exports=r},function(e,t){e.exports=function(e,t,n,r){var o=-1,i=null==e?0:e.length;for(r&&i&&(n=e[++o]);++o<i;)n=t(n,e[o],o,e);return n}},function(e,t,n){var r=n(267),o=n(28),i=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,a=RegExp("[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]","g");e.exports=function(e){return(e=o(e))&&e.replace(i,r).replace(a,"")}},function(e,t,n){var r=n(268)({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"});e.exports=r},function(e,t){e.exports=function(e){return function(t){return null==e?void 0:e[t]}}},function(e,t,n){var r=n(270),o=n(271),i=n(28),a=n(272);e.exports=function(e,t,n){return e=i(e),void 0===(t=n?void 0:t)?o(e)?a(e):r(e):e.match(t)||[]}},function(e,t){var n=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;e.exports=function(e){return e.match(n)||[]}},function(e,t){var n=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;e.exports=function(e){return n.test(e)}},function(e,t){var n="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",r="["+n+"]",o="\\d+",i="[\\u2700-\\u27bf]",a="[a-z\\xdf-\\xf6\\xf8-\\xff]",u="[^\\ud800-\\udfff"+n+o+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",l="(?:\\ud83c[\\udde6-\\uddff]){2}",c="[\\ud800-\\udbff][\\udc00-\\udfff]",s="[A-Z\\xc0-\\xd6\\xd8-\\xde]",f="(?:"+a+"|"+u+")",d="(?:"+s+"|"+u+")",p="(?:[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|\\ud83c[\\udffb-\\udfff])?",h="[\\ufe0e\\ufe0f]?"+p+("(?:\\u200d(?:"+["[^\\ud800-\\udfff]",l,c].join("|")+")[\\ufe0e\\ufe0f]?"+p+")*"),v="(?:"+[i,l,c].join("|")+")"+h,m=RegExp([s+"?"+a+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[r,s,"$"].join("|")+")",d+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[r,s+f,"$"].join("|")+")",s+"?"+f+"+(?:['’](?:d|ll|m|re|s|t|ve))?",s+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",o,v].join("|"),"g");e.exports=function(e){return e.match(m)||[]}},function(e,t,n){var r=n(274),o=n(121)((function(e,t,n){return t=t.toLowerCase(),e+(n?r(t):t)}));e.exports=o},function(e,t,n){var r=n(28),o=n(275);e.exports=function(e){return o(r(e).toLowerCase())}},function(e,t,n){var r=n(276)("toUpperCase");e.exports=r},function(e,t,n){var r=n(277),o=n(107),i=n(106),a=n(28);e.exports=function(e){return function(t){t=a(t);var n=o(t)?i(t):void 0,u=n?n[0]:t.charAt(0),l=n?r(n,1).join(""):t.slice(1);return u[e]()+l}}},function(e,t,n){var r=n(278);e.exports=function(e,t,n){var o=e.length;return n=void 0===n?o:n,!t&&n>=o?e:r(e,t,n)}},function(e,t){e.exports=function(e,t,n){var r=-1,o=e.length;t<0&&(t=-t>o?0:o+t),(n=n>o?o:n)<0&&(n+=o),o=t>n?0:n-t>>>0,t>>>=0;for(var i=Array(o);++r<o;)i[r]=e[r+t];return i}},function(e,t,n){var r=n(39),o=n(111),i=n(112);e.exports=function(e,t){var n={};return t=i(t,3),o(e,(function(e,o,i){r(n,t(e,o,i),e)})),n}},function(e,t,n){"use strict";var r=n(3);t.__esModule=!0,t.default=function(e,t){void 0===t&&(t=[]);var n=[],r=[];function c(e,o){var i=(0,a.split)(e)[0];~r.indexOf(i)||r.push(i),~t.indexOf(o+"-"+i)||n.push([o,i])}for(var s in e)if((0,o.default)(e,s)){var f=e[s];~r.indexOf(s)||r.push(s),u.default.isRef(f)&&f.isSibling?c(f.path,s):(0,l.default)(f)&&f._deps&&f._deps.forEach((function(e){return c(e,s)}))}return i.default.array(r,n).reverse()};var o=r(n(20)),i=r(n(281)),a=n(42),u=r(n(30)),l=r(n(17));e.exports=t.default},function(e,t){function n(e,t){var n=e.length,r=new Array(n),o={},i=n,a=function(e){for(var t=new Map,n=0,r=e.length;n<r;n++){var o=e[n];t.has(o[0])||t.set(o[0],new Set),t.has(o[1])||t.set(o[1],new Set),t.get(o[0]).add(o[1])}return t}(t),u=function(e){for(var t=new Map,n=0,r=e.length;n<r;n++)t.set(e[n],n);return t}(e);for(t.forEach((function(e){if(!u.has(e[0])||!u.has(e[1]))throw new Error("Unknown node. There is an unknown node in the supplied edges.")}));i--;)o[i]||l(e[i],i,new Set);return r;function l(e,t,i){if(i.has(e)){var c;try{c=", node was:"+JSON.stringify(e)}catch(e){c=""}throw new Error("Cyclic dependency"+c)}if(!u.has(e))throw new Error("Found unknown node. Make sure to provided all involved nodes. Unknown node: "+JSON.stringify(e));if(!o[t]){o[t]=!0;var s=a.get(e)||new Set;if(t=(s=Array.from(s)).length){i.add(e);do{var f=s[--t];l(f,u.get(f),i)}while(t);i.delete(e)}r[--n]=e}}}e.exports=function(e){return n(function(e){for(var t=new Set,n=0,r=e.length;n<r;n++){var o=e[n];t.add(o[0]),t.add(o[1])}return Array.from(t)}(e),e)},e.exports.array=n},function(e,t,n){"use strict";function r(e,t){var n=1/0;return e.some((function(e,r){if(-1!==t.path.indexOf(e))return n=r,!0})),n}t.__esModule=!0,t.default=function(e){var t=Object.keys(e);return function(e,n){return r(t,e)-r(t,n)}},e.exports=t.default},function(e,t,n){"use strict";var r=n(119),o=n(3);t.__esModule=!0,t.default=void 0;var i=o(n(19)),a=o(n(120)),u=o(n(25)),l=o(n(43)),c=o(n(17)),s=o(n(122)),f=o(n(41)),d=o(n(14)),p=n(16),h=r(n(64));function v(){var e=(0,a.default)(["","[","]"]);return v=function(){return e},e}var m=y;function y(e){var t=this;if(!(this instanceof y))return new y(e);d.default.call(this,{type:"array"}),this._subType=void 0,this.withMutation((function(){t.transform((function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(t){e=null}return this.isType(e)?e:null})),e&&t.of(e)}))}t.default=m,(0,u.default)(y,d.default,{_typeCheck:function(e){return Array.isArray(e)},_cast:function(e,t){var n=this,r=d.default.prototype._cast.call(this,e,t);if(!this._typeCheck(r)||!this._subType)return r;var o=!1,i=r.map((function(e){var r=n._subType.cast(e,t);return r!==e&&(o=!0),r}));return o?i:r},_validate:function(e,t){var n=this;void 0===t&&(t={});var r=[],o=t.sync,a=t.path,u=this._subType,l=this._option("abortEarly",t),c=this._option("recursive",t),f=null!=t.originalValue?t.originalValue:e;return d.default.prototype._validate.call(this,e,t).catch((0,h.propagateErrors)(l,r)).then((function(e){if(!c||!u||!n._typeCheck(e)){if(r.length)throw r[0];return e}f=f||e;var d=e.map((function(n,r){var o=(0,s.default)(v(),t.path,r),a=(0,i.default)({},t,{path:o,strict:!0,parent:e,originalValue:f[r]});return!u.validate||u.validate(n,a)}));return(0,h.default)({sync:o,path:a,value:e,errors:r,endEarly:l,validations:d})}))},_isPresent:function(e){return d.default.prototype._cast.call(this,e)&&e.length>0},of:function(e){var t=this.clone();if(!1!==e&&!(0,c.default)(e))throw new TypeError("`array.of()` sub-schema must be a valid yup schema, or `false` to negate a current sub-schema. not: "+(0,f.default)(e));return t._subType=e,t},min:function(e,t){return t=t||p.array.min,this.test({message:t,name:"min",exclusive:!0,params:{min:e},test:function(t){return(0,l.default)(t)||t.length>=this.resolve(e)}})},max:function(e,t){return t=t||p.array.max,this.test({message:t,name:"max",exclusive:!0,params:{max:e},test:function(t){return(0,l.default)(t)||t.length<=this.resolve(e)}})},ensure:function(){var e=this;return this.default((function(){return[]})).transform((function(t){return e.isType(t)?t:null===t?[]:[].concat(t)}))},compact:function(e){var t=e?function(t,n,r){return!e(t,n,r)}:function(e){return!!e};return this.transform((function(e){return null!=e?e.filter(t):e}))},describe:function(){var e=d.default.prototype.describe.call(this);return this._subType&&(e.innerType=this._subType.describe()),e}}),e.exports=t.default},function(e,t,n){"use strict";var r=n(3);t.__esModule=!0,t.default=void 0;var o=r(n(17)),i=function(){function e(e){this._resolve=function(t,n){var r=e(t,n);if(!(0,o.default)(r))throw new TypeError("lazy() functions must return a valid schema");return r.resolve(n)}}var t=e.prototype;return t.resolve=function(e){return this._resolve(e.value,e)},t.cast=function(e,t){return this._resolve(e,t).cast(e,t)},t.validate=function(e,t){return this._resolve(e,t).validate(e,t)},t.validateSync=function(e,t){return this._resolve(e,t).validateSync(e,t)},t.validateAt=function(e,t,n){return this._resolve(t,n).validateAt(e,t,n)},t.validateSyncAt=function(e,t,n){return this._resolve(t,n).validateSyncAt(e,t,n)},e}();i.prototype.__isYupSchema__=!0;var a=i;t.default=a,e.exports=t.default},function(e,t,n){"use strict";var r=n(3);t.__esModule=!0,t.default=function(e){Object.keys(e).forEach((function(t){Object.keys(e[t]).forEach((function(n){o.default[t][n]=e[t][n]}))}))};var o=r(n(16));e.exports=t.default},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}}]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlZC1jb21wb25lbnRzL2Rpc3Qvc3R5bGVkLWNvbXBvbmVudHMuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3Jvb3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWluaS1jcmVhdGUtcmVhY3QtY29udGV4dC9kaXN0L2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzbS9yZWFjdC1yb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RpbnktaW52YXJpYW50L2Rpc3QvdGlueS1pbnZhcmlhbnQuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZXNvbHZlLXBhdGhuYW1lL2VzbS9yZXNvbHZlLXBhdGhuYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92YWx1ZS1lcXVhbC9lc20vdmFsdWUtZXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXNtL2hpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3Jvb3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbm9kZVV0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdExpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3l1cC9saWIvbWl4ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0TmF0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95dXAvbGliL2xvY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveXVwL2xpYi91dGlsL2lzU2NoZW1hLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldFRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2tleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3l1cC9saWIvdXRpbC9pbmhlcml0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveXVwL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveXVwL2xpYi9SZWZlcmVuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19uYXRpdmVDcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fTGlzdENhY2hlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Fzc29jSW5kZXhPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRNYXBEYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3RvS2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VBc3NpZ25WYWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3B5T2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95dXAvbGliL3V0aWwvcHJpbnRWYWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcGVydHktZXhwci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveXVwL2xpYi91dGlsL2lzQWJzZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2ZyZWVHbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc0J1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZmFzdC1jb21wYXJlL2luZGV4LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzS2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNTeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fTWFwQ2FjaGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9lcS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19NYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0xlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TdGFjay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQnVmZmVyLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVVuYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX25vZGVVdGlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzUHJvdG90eXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcnJheUxpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0U3ltYm9scy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jbG9uZUFycmF5QnVmZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95dXAvbGliL3V0aWwvcnVuVmFsaWRhdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3l1cC9saWIvVmFsaWRhdGlvbkVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ndWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXNtL3JlYWN0LXJvdXRlci1kb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zdHlsaXMubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tZW1vaXplLW9uZS9kaXN0L21lbW9pemUtb25lLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9wYXRoLXRvLXJlZ2V4cC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc1BhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2FzdFBhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZnJlZUdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fdG9Tb3VyY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FyZ3VtZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Fzc2lnblZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5TGlrZUtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1R5cGVkQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fb3ZlckFyZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2tleXNJbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3B5QXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zdHViQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0U3ltYm9sc0luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5UHVzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRQcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0QWxsS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0QWxsS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19VaW50OEFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcFRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2V0VG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdHJpbmdUb0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc1VuaWNvZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3luY2hyb25vdXMtcHJvbWlzZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL21hcFZhbHVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlRm9yT3duLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJdGVyYXRlZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19lcXVhbEFycmF5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc1N0cmljdENvbXBhcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWF0Y2hlc1N0cmljdENvbXBhcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveXVwL2xpYi91dGlsL3JlYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdGFnZ2VkVGVtcGxhdGVMaXRlcmFsTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlQ29tcG91bmRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveXVwL2xpYi91dGlsL21ha2VQYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NyZWF0ZS1yZWFjdC1jb250ZXh0L2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL3N0dWJGYWxzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jbG9uZUJ1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGlzLXJ1bGUtc2hlZXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3VuaXRsZXNzL2Rpc3QvdW5pdGxlc3MuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1jb25maWcvZXNtL3JlYWN0LXJvdXRlci1jb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVlcG1lcmdlL2Rpc3QvZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbGlzdENhY2hlQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9lcS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19hc3NvY0luZGV4T2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbGlzdENhY2hlRGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2xpc3RDYWNoZUdldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19saXN0Q2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbGlzdENhY2hlU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX0xpc3RDYWNoZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19zdGFja0NsZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3N0YWNrRGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3N0YWNrR2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3N0YWNrSGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX1N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRSYXdUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fb2JqZWN0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUdldFRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pc01hc2tlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jb3JlSnNEYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3RvU291cmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VJc05hdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRWYWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXROYXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fTWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX25hdGl2ZUNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19oYXNoQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faGFzaERlbGV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19oYXNoR2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2hhc2hIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faGFzaFNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19IYXNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX21hcENhY2hlQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faXNLZXlhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldE1hcERhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbWFwQ2FjaGVEZWxldGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbWFwQ2FjaGVHZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbWFwQ2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbWFwQ2FjaGVTZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fTWFwQ2FjaGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fc3RhY2tTZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fU3RhY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXJyYXlFYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VBc3NpZ25WYWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19hc3NpZ25WYWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jb3B5T2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VUaW1lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzT2JqZWN0TGlrZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlSXNBcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc0FyZ3VtZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faXNJbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzTGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VJc1R5cGVkQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZVVuYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNUeXBlZEFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2FycmF5TGlrZUtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faXNQcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fb3ZlckFyZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19uYXRpdmVLZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VLZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNBcnJheUxpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VBc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbmF0aXZlS2V5c0luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VLZXlzSW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9rZXlzSW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUFzc2lnbkluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2NvcHlBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19hcnJheUZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL3N0dWJBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRTeW1ib2xzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2NvcHlTeW1ib2xzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2FycmF5UHVzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRQcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0U3ltYm9sc0luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2NvcHlTeW1ib2xzSW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUdldEFsbEtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0QWxsS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRBbGxLZXlzSW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fRGF0YVZpZXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fUHJvbWlzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19TZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fV2Vha01hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faW5pdENsb25lQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fVWludDhBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jbG9uZUFycmF5QnVmZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Nsb25lRGF0YVZpZXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY2xvbmVSZWdFeHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY2xvbmVTeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY2xvbmVUeXBlZEFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2luaXRDbG9uZUJ5VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VDcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faW5pdENsb25lT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VJc01hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzTWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VJc1NldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VDbG9uZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2Nsb25lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2FycmF5TWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNTeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9tZW1vaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX21lbW9pemVDYXBwZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fc3RyaW5nVG9QYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3RvS2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL3RvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvdG9QYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvY2xvbmVEZWVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mb3JtaWsvZGlzdC9mb3JtaWsuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9tZW1vaXplL2Rpc3QvbWVtb2l6ZS5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vaXMtcHJvcC12YWxpZC9kaXN0L2lzLXByb3AtdmFsaWQuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLXdoYXQvZGlzdC9pbmRleC5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21lcmdlLWFueXRoaW5nL2Rpc3QvaW5kZXguZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NyZWF0ZS1yZWFjdC1jb250ZXh0L2xpYi9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi93YXJuaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9lbXB0eUZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL25vZGVfbW9kdWxlcy9pcy1idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9lbmhhbmNlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0UmF3VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX29iamVjdFRvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0cmluZ1RvUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tZW1vaXplQ2FwcGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbWVtb2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZUNsZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX0hhc2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaENsZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc05hdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc01hc2tlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3JlSnNEYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hEZWxldGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaEdldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoSGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hTZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlRGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUdldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlRGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzS2V5YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZUdldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZVNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzQXJndW1lbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvY2xvbmVEZWVwV2l0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlQ2xvbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tDbGVhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja0RlbGV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja0dldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja0hhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja1NldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheUVhY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZGVmaW5lUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVGltZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zdHViRmFsc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzVHlwZWRBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19uYXRpdmVLZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VBc3NpZ25Jbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlS2V5c0luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX25hdGl2ZUtleXNJbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jbG9uZUJ1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3B5U3ltYm9scy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheUZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3B5U3ltYm9sc0luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldEFsbEtleXNJbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19EYXRhVmlldy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19Qcm9taXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1NldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19XZWFrTWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2luaXRDbG9uZUFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2luaXRDbG9uZUJ5VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nsb25lRGF0YVZpZXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2xvbmVSZWdFeHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2xvbmVTeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2xvbmVUeXBlZEFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2luaXRDbG9uZU9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlQ3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzTWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNTZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2l0ZXJhdG9yVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hc2NpaVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fdW5pY29kZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC92YWx1ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVZhbHVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveXVwL2xpYi9Db25kaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3l1cC9saWIvdXRpbC9wcmVwZW5kRGVlcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveXVwL2xpYi91dGlsL2NyZWF0ZVZhbGlkYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUZvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jcmVhdGVCYXNlRm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VNYXRjaGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc01hdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc0VxdWFsRGVlcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TZXRDYWNoZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zZXRDYWNoZUFkZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zZXRDYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheVNvbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZXF1YWxCeVRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19lcXVhbE9iamVjdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0TWF0Y2hEYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VNYXRjaGVzUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9nZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9oYXNJbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSGFzSW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3Byb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlUHJvcGVydHlEZWVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95dXAvbGliL2Jvb2xlYW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3l1cC9saWIvc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95dXAvbGliL251bWJlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveXVwL2xpYi9kYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95dXAvbGliL3V0aWwvaXNvZGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveXVwL2xpYi9vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zbmFrZUNhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlSZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9kZWJ1cnIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZGVidXJyTGV0dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VQcm9wZXJ0eU9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvd29yZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXNjaWlXb3Jkcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNVbmljb2RlV29yZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL191bmljb2RlV29yZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9jYW1lbENhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9jYXBpdGFsaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdXBwZXJGaXJzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jcmVhdGVDYXNlRmlyc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2FzdFNsaWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VTbGljZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL21hcEtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3l1cC9saWIvdXRpbC9zb3J0RmllbGRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95dXAvbm9kZV9tb2R1bGVzL3RvcG9zb3J0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95dXAvbGliL3V0aWwvc29ydEJ5S2V5T3JkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3l1cC9saWIvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3l1cC9saWIvTGF6eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveXVwL2xpYi9zZXRMb2NhbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiaW50ZXJsZWF2ZSIsInN0cmluZ3MiLCJpbnRlcnBvbGF0aW9ucyIsInJlc3VsdCIsImkiLCJsZW4iLCJsZW5ndGgiLCJwdXNoIiwiX3R5cGVvZiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwib2JqIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJjbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJjcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImtleSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9leHRlbmRzIiwiYXNzaWduIiwiYXJndW1lbnRzIiwic291cmNlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJ2YWx1ZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwib2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJrZXlzIiwiaW5kZXhPZiIsInBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJpc1BsYWluT2JqZWN0IiwieCIsIkVNUFRZX0FSUkFZIiwiZnJlZXplIiwiRU1QVFlfT0JKRUNUIiwiaXNGdW5jdGlvbiIsInRlc3QiLCJnZXRDb21wb25lbnROYW1lIiwiZGlzcGxheU5hbWUiLCJuYW1lIiwiaXNTdHlsZWRDb21wb25lbnQiLCJzdHlsZWRDb21wb25lbnRJZCIsIlNDX0FUVFIiLCJwcm9jZXNzIiwiZW52IiwiUkVBQ1RfQVBQX1NDX0FUVFIiLCJJU19CUk9XU0VSIiwid2luZG93IiwiRElTQUJMRV9TUEVFRFkiLCJTQ19ESVNBQkxFX1NQRUVEWSIsIlJFQUNUX0FQUF9TQ19ESVNBQkxFX1NQRUVEWSIsIlN0eWxlZENvbXBvbmVudHNFcnJvciIsIl9FcnJvciIsImNvZGUiLCJ0aGlzIiwiX2xlbiIsIkFycmF5IiwiX2tleSIsIl90aGlzIiwiam9pbiIsIkVycm9yIiwiU0NfQ09NUE9ORU5UX0lEIiwiZXh0cmFjdENvbXBzIiwibWF5YmVDU1MiLCJjc3MiLCJleGlzdGluZ0NvbXBvbmVudHMiLCJyZXBsYWNlIiwibWF0Y2giLCJjb21wb25lbnRJZCIsIm1hdGNoSW5kZXgiLCJtYXAiLCJfcmVmIiwibmV4dENvbXAiLCJjc3NGcm9tRE9NIiwic2xpY2UiLCJDT01NRU5UX1JFR0VYIiwic3R5bGlzU3BsaXR0ZXIiLCJnbG9iYWwiLCJjYXNjYWRlIiwia2V5ZnJhbWUiLCJwcmVmaXgiLCJjb21wcmVzcyIsInNlbWljb2xvbiIsInN0eWxpcyIsInBhcnNpbmdSdWxlcyIsInJldHVyblJ1bGVzUGx1Z2luIiwiY29udGV4dCIsInBhcnNlZFJ1bGVzIiwicGFyc2VSdWxlc1BsdWdpbiIsInJ1bGUiLCJfY29tcG9uZW50SWQiLCJfc2VsZWN0b3IiLCJfc2VsZWN0b3JSZWdleHAiLCJzZWxmUmVmZXJlbmNlUmVwbGFjZXIiLCJvZmZzZXQiLCJzdHJpbmciLCJ1c2UiLCJfIiwic2VsZWN0b3JzIiwibGFzdEluZGV4T2YiLCJzcGxpdEJ5UnVsZXMiLCJzdHJpbmdpZnlSdWxlcyIsInJ1bGVzIiwic2VsZWN0b3IiLCJ1bmRlZmluZWQiLCJmbGF0Q1NTIiwiY3NzU3RyIiwiUmVnRXhwIiwiZ2V0Tm9uY2UiLCJhZGROYW1lRm9ySWQiLCJuYW1lcyIsImlkIiwicmVzZXRJZE5hbWVzIiwiaGFzTmFtZUZvcklkIiwic3RyaW5naWZ5TmFtZXMiLCJzdHIiLCJ0cmltIiwic2hlZXRGb3JUYWciLCJ0YWciLCJzaGVldCIsInNpemUiLCJkb2N1bWVudCIsInN0eWxlU2hlZXRzIiwib3duZXJOb2RlIiwic2FmZUluc2VydFJ1bGUiLCJjc3NSdWxlIiwiaW5kZXgiLCJtYXhJbmRleCIsImNzc1J1bGVzIiwiaW5zZXJ0UnVsZSIsImVyciIsIm1ha2VUZXh0TWFya2VyIiwiYWRkVXBVbnRpbEluZGV4Iiwic2l6ZXMiLCJ0b3RhbFVwVG9JbmRleCIsIndyYXBBc0h0bWxUYWciLCJhZGRpdGlvbmFsQXR0cnMiLCJub25jZSIsIlNDX1ZFUlNJT05fQVRUUiIsImZpbHRlciIsIkJvb2xlYW4iLCJ3cmFwQXNFbGVtZW50IiwiX3Byb3BzIiwiY3JlYXRlRWxlbWVudCIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiX19odG1sIiwiZ2V0SWRzRnJvbU1hcmtlcnNGYWN0b3J5IiwibWFya2VycyIsIm1ha2VUZXh0Tm9kZSIsImNyZWF0ZVRleHROb2RlIiwibWFrZVNlcnZlclRhZyIsIm5hbWVzQXJnIiwibWFya2Vyc0FyZyIsImluc2VydE1hcmtlciIsInByZXYiLCJjc3NGb3JJZCIsImNsb25lIiwibmFtZXNDbG9uZSIsImNsb25lTmFtZXMiLCJtYXJrZXJzQ2xvbmUiLCJnZXRJZHMiLCJpbnNlcnRSdWxlcyIsInJlbW92ZVJ1bGVzIiwibWFya2VyIiwic2VhbGVkIiwic3R5bGVUYWciLCJ0b0VsZW1lbnQiLCJ0b0hUTUwiLCJtYWtlVGFnIiwidGFnRWwiLCJmb3JjZVNlcnZlciIsImluc2VydEJlZm9yZSIsImdldEltcG9ydFJ1bGVUYWciLCJlbCIsInNldEF0dHJpYnV0ZSIsImFwcGVuZENoaWxkIiwicGFyZW50Tm9kZSIsIm5leHRTaWJsaW5nIiwibWFrZVN0eWxlVGFnIiwiZXh0cmFjdEltcG9ydCIsInVzZWRJbXBvcnRSdWxlVGFnIiwiZGF0YSIsImltcG9ydFJ1bGVzIiwiY3NzUnVsZXNTaXplIiwibWF5SGF2ZUltcG9ydCIsInNlcGFyYXRvciIsImFwcGVuZERhdGEiLCJuZXdNYXJrZXIiLCJyZXBsYWNlQ2hpbGQiLCJtYWtlQnJvd3NlclRhZyIsImVuZCIsImNzc1RleHQiLCJpbnNlcnRJbmRleCIsImluamVjdGVkUnVsZXMiLCJyZW1vdmFsSW5kZXgiLCJsb3dlckJvdW5kIiwiZGVsZXRlUnVsZSIsImRlbGV0ZVJ1bGVzIiwibWFrZVNwZWVkeVRhZyIsIlNQTElUX1JFR0VYIiwiTUFYX1NJWkUiLCJzaGVldFJ1bm5pbmdJZCIsIm1hc3RlciIsIlN0eWxlU2hlZXQiLCJoZWFkIiwiaW1wb3J0UnVsZVRhZyIsImZpcnN0VGFnIiwidGFncyIsInRhZ01hcCIsImRlZmVycmVkIiwicmVoeWRyYXRlZE5hbWVzIiwiaWdub3JlUmVoeWRyYXRlZE5hbWVzIiwiY2FwYWNpdHkiLCJjbG9uZXMiLCJyZWh5ZHJhdGUiLCJlbHMiLCJleHRyYWN0ZWQiLCJpc1N0cmVhbWVkIiwibm9kZXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwibm9kZXNTaXplIiwiZ2V0QXR0cmlidXRlIiwiZWxOYW1lcyIsInNwbGl0IiwiZWxOYW1lc1NpemUiLCJqIiwiYXBwbHkiLCJ0ZXh0Q29udGVudCIsImV4dHJhY3RlZFNpemUiLCJfZXh0cmFjdGVkJGkiLCJfaSIsInJlbW92ZUNoaWxkIiwiTWF0aCIsIm1heCIsIl9qIiwicmVzZXQiLCJpZHMiLCJuZXdUYWciLCJzZWFsQWxsVGFncyIsImZvckVhY2giLCJsYXN0RWwiLCJnZXRUYWdGb3JJZCIsImhhc0lkIiwiZGVmZXJyZWRJbmplY3QiLCJpbmplY3QiLCJjb25jYXQiLCJyZW1vdmUiLCJ0b1JlYWN0RWxlbWVudHMiLCJnZXQiLCJLZXlmcmFtZXMiLCJzdHlsZVNoZWV0IiwidG9TdHJpbmciLCJTdHJpbmciLCJnZXROYW1lIiwidXBwZXJjYXNlUGF0dGVybiIsIm1zUGF0dGVybiIsImh5cGhlbmF0ZVN0eWxlTmFtZSIsInRvTG93ZXJDYXNlIiwiaXNGYWxzaXNoIiwiY2h1bmsiLCJvYmpUb0Nzc0FycmF5IiwicHJldktleSIsImZsYXR0ZW4iLCJleGVjdXRpb25Db250ZXh0IiwiaXNBcnJheSIsInJ1bGVTZXQiLCJpc1JlYWN0Q29tcG9uZW50Iiwic3R5bGVzIiwibXVybXVyaGFzaCIsImMiLCJiIiwiZSIsImEiLCJkIiwiY2hhckNvZGVBdCIsImNoYXJzTGVuZ3RoIiwiZ2V0QWxwaGFiZXRpY0NoYXIiLCJmcm9tQ2hhckNvZGUiLCJnZW5lcmF0ZUFscGhhYmV0aWNOYW1lIiwiZmxvb3IiLCJpc1N0YXRpY1J1bGVzIiwiYXR0cnMiLCJzb21lIiwiaGFzRnVuY3Rpb25PYmplY3RLZXkiLCJfVFlQRV9TVEFUSUNTIiwiaXNITVJFbmFibGVkIiwiaGFzaGVyIiwiQ29tcG9uZW50U3R5bGUiLCJpc1N0YXRpYyIsImdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzIiwibGFzdENsYXNzTmFtZSIsImdlbmVyYXRlTmFtZSIsImRldGVybWluZVRoZW1lIiwiZmFsbGJhY2tUaGVtZSIsImRlZmF1bHRQcm9wcyIsImlzRGVmYXVsdFRoZW1lIiwidGhlbWUiLCJlc2NhcGVSZWdleCIsImRhc2hlc0F0RW5kcyIsImVzY2FwZSIsImlzVGFnIiwiUkVBQ1RfU1RBVElDUyIsImNoaWxkQ29udGV4dFR5cGVzIiwiY29udGV4dFR5cGVzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwicHJvcFR5cGVzIiwidHlwZSIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcml0eSIsIlRZUEVfU1RBVElDUyIsIiQkdHlwZW9mIiwicmVuZGVyIiwiZGVmaW5lUHJvcGVydHkkMSIsImdldE93blByb3BlcnR5TmFtZXMiLCJfT2JqZWN0JGdldE93blByb3BlcnQiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRQcm90b3R5cGVPZiIsIm9iamVjdFByb3RvdHlwZSIsImFycmF5UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJ0YXJnZXRTdGF0aWNzIiwic291cmNlU3RhdGljcyIsIlRoZW1lQ29udGV4dCIsIlRoZW1lQ29uc3VtZXIiLCJDb25zdW1lciIsIlN0eWxlU2hlZXRDb250ZXh0IiwiX0NvbXBvbmVudCIsIlRoZW1lUHJvdmlkZXIiLCJnZXRDb250ZXh0IiwiYmluZCIsInJlbmRlcklubmVyIiwiY2hpbGRyZW4iLCJvdXRlclRoZW1lIiwiUHJvdmlkZXIiLCJDaGlsZHJlbiIsIm9ubHkiLCJnZXRUaGVtZSIsIlNlcnZlclN0eWxlU2hlZXQiLCJtYXN0ZXJTaGVldCIsInNlYWwiLCJzcGxpY2UiLCJjb2xsZWN0U3R5bGVzIiwiU3R5bGVTaGVldE1hbmFnZXIiLCJnZXRTdHlsZVRhZ3MiLCJnZXRTdHlsZUVsZW1lbnQiLCJpbnRlcmxlYXZlV2l0aE5vZGVTdHJlYW0iLCJyZWFkYWJsZVN0cmVhbSIsIlN0eWxlU2hlZXRDb25zdW1lciIsImlkZW50aWZpZXJzIiwiU3R5bGVkQ29tcG9uZW50IiwicmVuZGVyT3V0ZXIiLCJmb3J3YXJkZWRDb21wb25lbnQiLCJjb21wb25lbnRTdHlsZSIsIl9wcm9wcyRmb3J3YXJkZWRDb21wbyIsImZvbGRlZENvbXBvbmVudElkcyIsImdlbmVyYXRlZENsYXNzTmFtZSIsImVsZW1lbnRUb0JlQ3JlYXRlZCIsImFzIiwiaXNUYXJnZXRUYWciLCJwcm9wc0ZvckVsZW1lbnQiLCJjb21wdXRlZFByb3BzIiwicmVmIiwic3R5bGUiLCJjbGFzc05hbWUiLCJidWlsZEV4ZWN1dGlvbkNvbnRleHQiLCJfdGhpczIiLCJhdHRyRGVmIiwiZm4iLCJyZXNvbHZlZEF0dHJEZWYiLCJhdHRyRGVmV2FzRm4iLCJhdHRyIiwiX3Byb3BzJGZvcndhcmRlZENvbXBvMiIsIndhcm5Ub29NYW55Q2xhc3NlcyIsImNyZWF0ZVN0eWxlZENvbXBvbmVudCIsIm9wdGlvbnMiLCJpc1RhcmdldFN0eWxlZENvbXAiLCJpc0NsYXNzIiwiX29wdGlvbnMkZGlzcGxheU5hbWUiLCJnZW5lcmF0ZURpc3BsYXlOYW1lIiwiX29wdGlvbnMkY29tcG9uZW50SWQiLCJfQ29tcG9uZW50U3R5bGUiLCJfZGlzcGxheU5hbWUiLCJwYXJlbnRDb21wb25lbnRJZCIsIm5yIiwiZ2VuZXJhdGVJZCIsIl9vcHRpb25zJFBhcmVudENvbXBvbiIsIlBhcmVudENvbXBvbmVudCIsIl9vcHRpb25zJGF0dHJzIiwiZmluYWxBdHRycyIsIldyYXBwZWRTdHlsZWRDb21wb25lbnQiLCJmb3J3YXJkUmVmIiwiZm9yd2FyZGVkUmVmIiwid2l0aENvbXBvbmVudCIsInByZXZpb3VzQ29tcG9uZW50SWQiLCJvcHRpb25zVG9Db3B5IiwibmV3Q29tcG9uZW50SWQiLCJfZm9sZGVkRGVmYXVsdFByb3BzIiwic2V0Iiwic3R5bGVkIiwiY29uc3RydWN0V2l0aE9wdGlvbnMiLCJjb21wb25lbnRDb25zdHJ1Y3RvciIsInRlbXBsYXRlRnVuY3Rpb24iLCJ3aXRoQ29uZmlnIiwiY29uZmlnIiwiZG9tRWxlbWVudCIsIkdsb2JhbFN0eWxlIiwiY3JlYXRlU3R5bGVzIiwicmVtb3ZlU3R5bGVzIiwicmVuZGVyU3R5bGVzIiwic2NDR1NITVJDYWNoZSIsIl9fZXNNb2R1bGUiLCJmcmVlU2VsZiIsInJvb3QiLCJGdW5jdGlvbiIsImlzQnVmZmVyIiwidmFsIiwiaXNPYmplY3QiLCJsIiwiaXNBcnJheUJ1ZmZlciIsImlzRm9ybURhdGEiLCJGb3JtRGF0YSIsImlzQXJyYXlCdWZmZXJWaWV3IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJidWZmZXIiLCJpc1N0cmluZyIsImlzTnVtYmVyIiwiaXNVbmRlZmluZWQiLCJpc0RhdGUiLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc1N0cmVhbSIsInBpcGUiLCJpc1VSTFNlYXJjaFBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsImlzU3RhbmRhcmRCcm93c2VyRW52IiwibmF2aWdhdG9yIiwicHJvZHVjdCIsIm1lcmdlIiwiYXNzaWduVmFsdWUiLCJkZWVwTWVyZ2UiLCJleHRlbmQiLCJ0aGlzQXJnIiwiTUFYX1NJR05FRF8zMV9CSVRfSU5UIiwiY3JlYXRlQ29udGV4dCIsImRlZmF1bHRWYWx1ZSIsImNhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX1Byb3ZpZGVyJGNoaWxkQ29udGV4IiwiX0NvbnN1bWVyJGNvbnRleHRUeXBlIiwiY29udGV4dFByb3AiLCJoYW5kbGVycyIsImVtaXR0ZXIiLCJvbiIsImhhbmRsZXIiLCJvZmYiLCJoIiwibmV3VmFsdWUiLCJjaGFuZ2VkQml0cyIsIl9wcm90byIsImdldENoaWxkQ29udGV4dCIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJuZXh0UHJvcHMiLCJvbGRWYWx1ZSIsInkiLCJvYmplY3QiLCJpc1JlcXVpcmVkIiwiX0NvbXBvbmVudDIiLCJzdGF0ZSIsImdldFZhbHVlIiwib25VcGRhdGUiLCJvYnNlcnZlZEJpdHMiLCJzZXRTdGF0ZSIsIl9wcm90bzIiLCJjb21wb25lbnREaWRNb3VudCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiX1JlYWN0JENvbXBvbmVudCIsIlJvdXRlciIsImxvY2F0aW9uIiwiaGlzdG9yeSIsIl9pc01vdW50ZWQiLCJfcGVuZGluZ0xvY2F0aW9uIiwic3RhdGljQ29udGV4dCIsInVubGlzdGVuIiwibGlzdGVuIiwiY29tcHV0ZVJvb3RNYXRjaCIsInBhdGhuYW1lIiwicGF0aCIsInVybCIsInBhcmFtcyIsImlzRXhhY3QiLCJDb21wb25lbnQiLCJjYWNoZSQxIiwiY2FjaGVMaW1pdCQxIiwiY2FjaGVDb3VudCQxIiwibWF0Y2hQYXRoIiwiX29wdGlvbnMiLCJfb3B0aW9ucyRleGFjdCIsImV4YWN0IiwiX29wdGlvbnMkc3RyaWN0Iiwic3RyaWN0IiwiX29wdGlvbnMkc2Vuc2l0aXZlIiwic2Vuc2l0aXZlIiwicmVkdWNlIiwibWF0Y2hlZCIsIl9jb21waWxlUGF0aCIsImNhY2hlS2V5IiwicGF0aENhY2hlIiwicmVnZXhwIiwiY29tcGlsZVBhdGgkMSIsImV4ZWMiLCJ2YWx1ZXMiLCJtZW1vIiwiUm91dGUiLCJjb250ZXh0JCQxIiwiY29tcHV0ZWRNYXRjaCIsIl90aGlzJHByb3BzIiwiY29tcG9uZW50IiwiY291bnQiLCJpc0VtcHR5Q2hpbGRyZW4iLCJhZGRMZWFkaW5nU2xhc2giLCJjaGFyQXQiLCJzdHJpcEJhc2VuYW1lIiwiYmFzZW5hbWUiLCJiYXNlIiwic3Vic3RyIiwiY3JlYXRlVVJMIiwic3RhdGljSGFuZGxlciIsIm1ldGhvZE5hbWUiLCJub29wIiwiU3dpdGNoIiwiZWxlbWVudCIsImNoaWxkIiwiaXNWYWxpZEVsZW1lbnQiLCJmcm9tIiwiY2xvbmVFbGVtZW50Iiwid2l0aFJvdXRlciIsIkMiLCJ3cmFwcGVkQ29tcG9uZW50UmVmIiwicmVtYWluaW5nUHJvcHMiLCJXcmFwcGVkQ29tcG9uZW50IiwiaXNQcm9kdWN0aW9uIiwiY29uZGl0aW9uIiwibWVzc2FnZSIsImlzQWJzb2x1dGUiLCJzcGxpY2VPbmUiLCJsaXN0IiwiayIsIm4iLCJwb3AiLCJ0byIsImhhc1RyYWlsaW5nU2xhc2giLCJ0b1BhcnRzIiwiZnJvbVBhcnRzIiwiaXNUb0FicyIsImlzRnJvbUFicyIsIm11c3RFbmRBYnMiLCJsYXN0IiwidXAiLCJwYXJ0IiwidW5zaGlmdCIsInZhbHVlT2YiLCJ2YWx1ZUVxdWFsIiwiZXZlcnkiLCJpdGVtIiwiYVZhbHVlIiwiYlZhbHVlIiwic3RyaXBMZWFkaW5nU2xhc2giLCJoYXNCYXNlbmFtZSIsInN0cmlwVHJhaWxpbmdTbGFzaCIsImNyZWF0ZVBhdGgiLCJzZWFyY2giLCJoYXNoIiwiY3JlYXRlTG9jYXRpb24iLCJjdXJyZW50TG9jYXRpb24iLCJoYXNoSW5kZXgiLCJzZWFyY2hJbmRleCIsInBhcnNlUGF0aCIsImRlY29kZVVSSSIsIlVSSUVycm9yIiwibG9jYXRpb25zQXJlRXF1YWwiLCJjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciIsInByb21wdCIsImxpc3RlbmVycyIsInNldFByb21wdCIsIm5leHRQcm9tcHQiLCJjb25maXJtVHJhbnNpdGlvblRvIiwiYWN0aW9uIiwiZ2V0VXNlckNvbmZpcm1hdGlvbiIsImNhbGxiYWNrIiwiYXBwZW5kTGlzdGVuZXIiLCJpc0FjdGl2ZSIsImxpc3RlbmVyIiwibm90aWZ5TGlzdGVuZXJzIiwiYXJncyIsImNhblVzZURPTSIsImdldENvbmZpcm1hdGlvbiIsImNvbmZpcm0iLCJQb3BTdGF0ZUV2ZW50IiwiSGFzaENoYW5nZUV2ZW50IiwiZ2V0SGlzdG9yeVN0YXRlIiwiY3JlYXRlQnJvd3Nlckhpc3RvcnkiLCJ1YSIsImdsb2JhbEhpc3RvcnkiLCJjYW5Vc2VIaXN0b3J5IiwidXNlckFnZW50IiwibmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIiLCJfcHJvcHMkZm9yY2VSZWZyZXNoIiwiZm9yY2VSZWZyZXNoIiwiX3Byb3BzJGdldFVzZXJDb25maXJtIiwiX3Byb3BzJGtleUxlbmd0aCIsImtleUxlbmd0aCIsImdldERPTUxvY2F0aW9uIiwiaGlzdG9yeVN0YXRlIiwiX3dpbmRvdyRsb2NhdGlvbiIsImNyZWF0ZUtleSIsInJhbmRvbSIsInRyYW5zaXRpb25NYW5hZ2VyIiwibmV4dFN0YXRlIiwiaGFuZGxlUG9wU3RhdGUiLCJldmVudCIsImlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQiLCJoYW5kbGVQb3AiLCJoYW5kbGVIYXNoQ2hhbmdlIiwiZm9yY2VOZXh0UG9wIiwib2siLCJmcm9tTG9jYXRpb24iLCJ0b0xvY2F0aW9uIiwidG9JbmRleCIsImFsbEtleXMiLCJmcm9tSW5kZXgiLCJkZWx0YSIsImdvIiwicmV2ZXJ0UG9wIiwiaW5pdGlhbExvY2F0aW9uIiwiY3JlYXRlSHJlZiIsImxpc3RlbmVyQ291bnQiLCJjaGVja0RPTUxpc3RlbmVycyIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaXNCbG9ja2VkIiwiaHJlZiIsInB1c2hTdGF0ZSIsInByZXZJbmRleCIsIm5leHRLZXlzIiwicmVwbGFjZVN0YXRlIiwiZ29CYWNrIiwiZ29Gb3J3YXJkIiwiYmxvY2siLCJ1bmJsb2NrIiwiSGFzaENoYW5nZUV2ZW50JDEiLCJIYXNoUGF0aENvZGVycyIsImhhc2hiYW5nIiwiZW5jb2RlUGF0aCIsImRlY29kZVBhdGgiLCJub3NsYXNoIiwic2xhc2giLCJzdHJpcEhhc2giLCJnZXRIYXNoUGF0aCIsInN1YnN0cmluZyIsInJlcGxhY2VIYXNoUGF0aCIsImNyZWF0ZUhhc2hIaXN0b3J5IiwiX3Byb3BzJGhhc2hUeXBlIiwiaGFzaFR5cGUiLCJfSGFzaFBhdGhDb2RlcnMkaGFzaFQiLCJpZ25vcmVQYXRoIiwiZW5jb2RlZFBhdGgiLCJwcmV2TG9jYXRpb24iLCJhbGxQYXRocyIsImJhc2VUYWciLCJxdWVyeVNlbGVjdG9yIiwicHVzaEhhc2hQYXRoIiwibmV4dFBhdGhzIiwiY2xhbXAiLCJ1cHBlckJvdW5kIiwibWluIiwiY3JlYXRlTWVtb3J5SGlzdG9yeSIsIl9wcm9wcyRpbml0aWFsRW50cmllcyIsImluaXRpYWxFbnRyaWVzIiwiX3Byb3BzJGluaXRpYWxJbmRleCIsImluaXRpYWxJbmRleCIsImVudHJpZXMiLCJlbnRyeSIsIm5leHRJbmRleCIsIm5leHRFbnRyaWVzIiwiY2FuR28iLCJfaW5oZXJpdHNMb29zZSIsImZyZWVHbG9iYWwiLCJmcmVlRXhwb3J0cyIsIm5vZGVUeXBlIiwiZnJlZU1vZHVsZSIsImZyZWVQcm9jZXNzIiwibm9kZVV0aWwiLCJ0eXBlcyIsInJlcXVpcmUiLCJiaW5kaW5nIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsImRlZmF1bHQiLCJTY2hlbWFUeXBlIiwiX2V4dGVuZHMyIiwiX2hhcyIsIl9jbG9uZURlZXBXaXRoIiwiX3RvQXJyYXkyIiwiX2xvY2FsZSIsIl9Db25kaXRpb24iLCJfcnVuVmFsaWRhdGlvbnMiLCJfcHJlcGVuZERlZXAiLCJfaXNTY2hlbWEiLCJfY3JlYXRlVmFsaWRhdGlvbiIsIl9wcmludFZhbHVlIiwiX1JlZmVyZW5jZSIsIl9yZWFjaCIsIlJlZlNldCIsIlNldCIsInJlZnMiLCJNYXAiLCJ0b0FycmF5IiwiYWRkIiwiaXNSZWYiLCJkZWxldGUiLCJoYXMiLCJyZXNvbHZlIiwibmV4dCIsImRvbmUiLCJfZGVwcyIsIl9jb25kaXRpb25zIiwiYWJvcnRFYXJseSIsInJlY3Vyc2l2ZSIsIl9leGNsdXNpdmUiLCJfd2hpdGVsaXN0IiwiX2JsYWNrbGlzdCIsInRlc3RzIiwidHJhbnNmb3JtcyIsIndpdGhNdXRhdGlvbiIsInR5cGVFcnJvciIsIm1peGVkIiwibm90VHlwZSIsIl9kZWZhdWx0RGVmYXVsdCIsIl90eXBlIiwicHJvdG8iLCJfX2lzWXVwU2NoZW1hX18iLCJfbXV0YXRlIiwibGFiZWwiLCJfbGFiZWwiLCJtZXRhIiwiX21ldGEiLCJiZWZvcmUiLCJzY2hlbWEiLCJfZGVmYXVsdCIsIk9QVElPTlMiLCJpc1R5cGUiLCJ2IiwiX251bGxhYmxlIiwiX3R5cGVDaGVjayIsImNvbmRpdGlvbnMiLCJjYXN0IiwicmVzb2x2ZWRTY2hlbWEiLCJfY2FzdCIsImFzc2VydCIsImZvcm1hdHRlZFZhbHVlIiwiZm9ybWF0dGVkUmVzdWx0IiwicmF3VmFsdWUiLCJfdGhpczMiLCJfdmFsaWRhdGUiLCJfdmFsdWUiLCJfdGhpczQiLCJvcmlnaW5hbFZhbHVlIiwiaXNTdHJpY3QiLCJfb3B0aW9uIiwiZW5kRWFybHkiLCJzeW5jIiwidmFsaWRhdGlvblBhcmFtcyIsImluaXRpYWxUZXN0cyIsIl90eXBlRXJyb3IiLCJfd2hpdGVsaXN0RXJyb3IiLCJfYmxhY2tsaXN0RXJyb3IiLCJ2YWxpZGF0aW9ucyIsInRoZW4iLCJ2YWxpZGF0ZSIsInZhbGlkYXRlU3luYyIsInIiLCJjYXRjaCIsImlzVmFsaWQiLCJpc1ZhbGlkU3luYyIsImdldERlZmF1bHQiLCJkZWYiLCJfaXNQcmVzZW50IiwicmVxdWlyZWQiLCJleGNsdXNpdmUiLCJub3RSZXF1aXJlZCIsIm51bGxhYmxlIiwiaXNOdWxsYWJsZSIsInRyYW5zZm9ybSIsIm9wdHMiLCJpc0V4Y2x1c2l2ZSIsIndoZW4iLCJkZXBzIiwiZGVwIiwiaXNTaWJsaW5nIiwiY3JlYXRlRXJyb3IiLCJvbmVPZiIsImVudW1zIiwidmFsaWRzIiwibm90T25lT2YiLCJpbnZhbGlkcyIsInN0cmlwIiwiX3N0cmlwIiwib3ZlcnJpZGVzIiwiZGVzY3JpYmUiLCJpZHgiLCJmaW5kSW5kZXgiLCJfYXJyIiwiX2xvb3AiLCJtZXRob2QiLCJfZ2V0SW4iLCJnZXRJbiIsInBhcmVudCIsInBhcmVudFBhdGgiLCJfYXJyMiIsIl9pMiIsIl9hcnIzIiwiX2kzIiwib3B0aW9uYWwiLCJiYXNlSXNOYXRpdmUiLCJhcnJheSIsImJvb2xlYW4iLCJkYXRlIiwibnVtYmVyIiwiaXNDYXN0IiwibXNnIiwibWF0Y2hlcyIsImVtYWlsIiwibG93ZXJjYXNlIiwidXBwZXJjYXNlIiwibGVzc1RoYW4iLCJtb3JlVGhhbiIsIm5vdEVxdWFsIiwicG9zaXRpdmUiLCJuZWdhdGl2ZSIsImludGVnZXIiLCJub1Vua25vd24iLCJiYXNlSGFzIiwiaGFzUGF0aCIsImdldFJhd1RhZyIsIm9iamVjdFRvU3RyaW5nIiwibnVsbFRhZyIsInVuZGVmaW5lZFRhZyIsInN5bVRvU3RyaW5nVGFnIiwidG9TdHJpbmdUYWciLCJhcnJheUxpa2VLZXlzIiwiYmFzZUtleXMiLCJpc0FycmF5TGlrZSIsImN0b3IiLCJzdXBlckN0b3IiLCJzcGVjIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJhZGRNZXRob2QiLCJzY2hlbWFUeXBlIiwibGF6eSIsIl9taXhlZCIsIl9ib29sZWFuIiwiYm9vbCIsIl9zdHJpbmciLCJfbnVtYmVyIiwiX2RhdGUiLCJfb2JqZWN0IiwiX2FycmF5IiwiX0xhenkiLCJfVmFsaWRhdGlvbkVycm9yIiwiVmFsaWRhdGlvbkVycm9yIiwicmVhY2giLCJpc1NjaGVtYSIsIl9zZXRMb2NhbGUiLCJzZXRMb2NhbGUiLCJiYXNlVG9TdHJpbmciLCJEYXRhVmlldyIsIlByb21pc2UiLCJXZWFrTWFwIiwiYmFzZUdldFRhZyIsInRvU291cmNlIiwiZGF0YVZpZXdDdG9yU3RyaW5nIiwibWFwQ3RvclN0cmluZyIsInByb21pc2VDdG9yU3RyaW5nIiwic2V0Q3RvclN0cmluZyIsIndlYWtNYXBDdG9yU3RyaW5nIiwiZ2V0VGFnIiwiQ3RvciIsImN0b3JTdHJpbmciLCJfcHJvcGVydHlFeHByIiwicHJlZml4ZXMiLCJSZWZlcmVuY2UiLCJpc0NvbnRleHQiLCJpc1ZhbHVlIiwiZ2V0dGVyIiwiX19pc1l1cFJlZiIsIlJlYWN0SXMiLCJjb250ZXh0VHlwZSIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsIm1peGlucyIsIk1FTU9fU1RBVElDUyIsImNvbXBhcmUiLCJnZXRTdGF0aWNzIiwiaXNNZW1vIiwiRm9yd2FyZFJlZiIsIm5hdGl2ZUNyZWF0ZSIsImdldE5hdGl2ZSIsImxpc3RDYWNoZUNsZWFyIiwibGlzdENhY2hlRGVsZXRlIiwibGlzdENhY2hlR2V0IiwibGlzdENhY2hlSGFzIiwibGlzdENhY2hlU2V0IiwiTGlzdENhY2hlIiwiY2xlYXIiLCJlcSIsImlzS2V5YWJsZSIsIl9fZGF0YV9fIiwiaXNTeW1ib2wiLCJJTkZJTklUWSIsImJhc2VBc3NpZ25WYWx1ZSIsImN1c3RvbWl6ZXIiLCJpc05ldyIsInF1b3RlU3RyaW5ncyIsInByaW50U2ltcGxlVmFsdWUiLCJKU09OIiwic3RyaW5naWZ5IiwiZXJyb3JUb1N0cmluZyIsInJlZ0V4cFRvU3RyaW5nIiwic3ltYm9sVG9TdHJpbmciLCJTWU1CT0xfUkVHRVhQIiwidHlwZU9mIiwicHJpbnROdW1iZXIiLCJpc05hTiIsImdldFRpbWUiLCJ0b0lTT1N0cmluZyIsIkNhY2hlIiwibWF4U2l6ZSIsIl9tYXhTaXplIiwiX3NpemUiLCJfdmFsdWVzIiwiRElHSVRfUkVHRVgiLCJMRUFEX0RJR0lUX1JFR0VYIiwiU1BFQ19DSEFSX1JFR0VYIiwiQ0xFQU5fUVVPVEVTX1JFR0VYIiwiY29udGVudFNlY3VyaXR5UG9saWN5Iiwic2V0Q2FjaGUiLCJnZXRDYWNoZSIsImVycm9yIiwibm9ybWFsaXplUGF0aCIsImV4cHIiLCJleHByZXNzaW9uIiwic2FmZSIsInBhcmFtIiwiaXNMYXN0IiwicGFydHMiLCJpc0JyYWNrZXQiLCJtYWtlU2FmZSIsIml0ZXIiLCJzaG91bGRCZVF1b3RlZCIsImlzUXVvdGVkIiwiaGFzTGVhZGluZ051bWJlciIsImhhc1NwZWNpYWxDaGFycyIsInNldHRlciIsInNldHRlckZhbGxiYWNrIiwiZ2V0dGVyRmFsbGJhY2siLCJzZWdtZW50cyIsImNiIiwiQnVmZmVyIiwia2V5TGlzdCIsImhhc1Byb3AiLCJoYXNFbGVtZW50VHlwZSIsIkVsZW1lbnQiLCJlcXVhbCIsImFyckEiLCJhcnJCIiwiZGF0ZUEiLCJEYXRlIiwiZGF0ZUIiLCJyZWdleHBBIiwicmVnZXhwQiIsImNvbnNvbGUiLCJ3YXJuIiwiZyIsIm9yaWdpbmFsTW9kdWxlIiwid2VicGFja1BvbHlmaWxsIiwicmVJc0RlZXBQcm9wIiwicmVJc1BsYWluUHJvcCIsImlzT2JqZWN0TGlrZSIsInN5bWJvbFRhZyIsIm1hcENhY2hlQ2xlYXIiLCJtYXBDYWNoZURlbGV0ZSIsIm1hcENhY2hlR2V0IiwibWFwQ2FjaGVIYXMiLCJtYXBDYWNoZVNldCIsIk1hcENhY2hlIiwib3RoZXIiLCJNQVhfU0FGRV9JTlRFR0VSIiwic3RhY2tDbGVhciIsInN0YWNrRGVsZXRlIiwic3RhY2tHZXQiLCJzdGFja0hhcyIsInN0YWNrU2V0IiwiU3RhY2siLCJzdHViRmFsc2UiLCJkZXByZWNhdGUiLCJwYXRocyIsImZ1bmMiLCJvYmplY3RQcm90byIsImlzTGVuZ3RoIiwiYXJyYXlGaWx0ZXIiLCJzdHViQXJyYXkiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIm5hdGl2ZUdldFN5bWJvbHMiLCJnZXRTeW1ib2xzIiwic3ltYm9sIiwiVWludDhBcnJheSIsImFycmF5QnVmZmVyIiwiYnl0ZUxlbmd0aCIsInByb3BhZ2F0ZUVycm9ycyIsImVycm9ycyIsInNldHRsZWQiLCJjb2xsZWN0RXJyb3JzIiwiX3JlZjMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIiLCJwcm9taXNlcyIsInByb21pc2UiLCJhbGwiLCJzY29wZVRvVmFsdWUiLCJfc3luY2hyb25vdXNQcm9taXNlIiwiU3luY2hyb25vdXNQcm9taXNlIiwidW53cmFwRXJyb3IiLCJpbm5lciIsInAiLCJmdWxmaWxsZWQiLCJzb3J0IiwicmVzdWx0cyIsIm5lc3RlZEVycm9ycyIsImFyciIsIl9yZWYyIiwiaXNFcnJvciIsInN0clJlZyIsImZpZWxkIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJmb3JtYXRFcnJvciIsIkJyb3dzZXJSb3V0ZXIiLCJzIiwidCIsImYiLCJvIiwidSIsIkEiLCJ3IiwibSIsIiQiLCJPIiwieiIsIk4iLCJTIiwiRiIsIlciLCJxIiwiQiIsIkQiLCJFIiwiRyIsIkgiLCJJIiwiSiIsIksiLCJMIiwiTSIsIlAiLCJRIiwiUiIsIlQiLCJVIiwiViIsIlgiLCJZIiwiWiIsImVlIiwiYWUiLCJyZSIsImNlIiwic2UiLCJ0ZSIsImllIiwiZmUiLCJuZSIsImxlIiwib2UiLCJoZSIsInVlIiwiZGUiLCJiZSIsInBlIiwia2UiLCJnZSIsIkFlIiwiQ2UiLCJ3ZSIsInZlIiwibWUiLCJ4ZSIsIiRlIiwieWUiLCJPZSIsImplIiwiemUiLCJOZSIsIlNlIiwiRmUiLCJXZSIsInFlIiwiQmUiLCJEZSIsIkVlIiwiR2UiLCJIZSIsIkplIiwiUmUiLCJUZSIsIlVlIiwiVmUiLCJYZSIsIlllIiwiUWUiLCJJZSIsIlBlIiwiTWUiLCJMZSIsIktlIiwicGFyc2VGbG9hdCIsImFyZUlucHV0c0VxdWFsIiwibmV3SW5wdXRzIiwibGFzdElucHV0cyIsInJlc3VsdEZuIiwiaXNFcXVhbCIsImxhc3RUaGlzIiwibGFzdFJlc3VsdCIsImxhc3RBcmdzIiwiY2FsbGVkT25jZSIsIm5ld0FyZ3MiLCJpc2FycmF5IiwicGF0aFRvUmVnZXhwIiwicGFyc2UiLCJjb21waWxlIiwidG9rZW5zVG9GdW5jdGlvbiIsInRva2Vuc1RvUmVnRXhwIiwiUEFUSF9SRUdFWFAiLCJyZXMiLCJ0b2tlbnMiLCJkZWZhdWx0RGVsaW1pdGVyIiwiZGVsaW1pdGVyIiwiZXNjYXBlZCIsImNhcHR1cmUiLCJncm91cCIsIm1vZGlmaWVyIiwiYXN0ZXJpc2siLCJwYXJ0aWFsIiwicmVwZWF0IiwicGF0dGVybiIsImVzY2FwZUdyb3VwIiwiZXNjYXBlU3RyaW5nIiwiZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IiwiZW5jb2RlVVJJIiwidG9VcHBlckNhc2UiLCJlbmNvZGUiLCJwcmV0dHkiLCJlbmNvZGVVUklDb21wb25lbnQiLCJ0b2tlbiIsInNlZ21lbnQiLCJhdHRhY2hLZXlzIiwiZmxhZ3MiLCJyb3V0ZSIsImVuZHNXaXRoRGVsaW1pdGVyIiwiZ3JvdXBzIiwicmVnZXhwVG9SZWdleHAiLCJhcnJheVRvUmVnZXhwIiwic3RyaW5nVG9SZWdleHAiLCJwcm9wSXNFbnVtZXJhYmxlIiwidG9PYmplY3QiLCJ0ZXN0MSIsInRlc3QyIiwidGVzdDMiLCJsZXR0ZXIiLCJzaG91bGRVc2VOYXRpdmUiLCJzeW1ib2xzIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwicnVuIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsIm5leHRUaWNrIiwidGl0bGUiLCJicm93c2VyIiwiYXJndiIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsImFkZExpc3RlbmVyIiwib25jZSIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwidXRpbHMiLCJwYXJhbXNTZXJpYWxpemVyIiwic2VyaWFsaXplZFBhcmFtcyIsImhhc2htYXJrSW5kZXgiLCJfX0NBTkNFTF9fIiwibm9ybWFsaXplSGVhZGVyTmFtZSIsIkRFRkFVTFRfQ09OVEVOVF9UWVBFIiwic2V0Q29udGVudFR5cGVJZlVuc2V0IiwiaGVhZGVycyIsImFkYXB0ZXIiLCJkZWZhdWx0cyIsIlhNTEh0dHBSZXF1ZXN0IiwidHJhbnNmb3JtUmVxdWVzdCIsInRyYW5zZm9ybVJlc3BvbnNlIiwieHNyZkNvb2tpZU5hbWUiLCJ4c3JmSGVhZGVyTmFtZSIsIm1heENvbnRlbnRMZW5ndGgiLCJ2YWxpZGF0ZVN0YXR1cyIsInN0YXR1cyIsImNvbW1vbiIsInNldHRsZSIsImJ1aWxkVVJMIiwicGFyc2VIZWFkZXJzIiwiaXNVUkxTYW1lT3JpZ2luIiwicmVqZWN0IiwicmVxdWVzdERhdGEiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3QiLCJhdXRoIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsIkF1dGhvcml6YXRpb24iLCJidG9hIiwib3BlbiIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJyZXNwb25zZVVSTCIsInJlc3BvbnNlSGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInJlc3BvbnNlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0Iiwic3RhdHVzVGV4dCIsIm9uYWJvcnQiLCJvbmVycm9yIiwib250aW1lb3V0IiwiY29va2llcyIsInhzcmZWYWx1ZSIsIndpdGhDcmVkZW50aWFscyIsInJlYWQiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25Eb3dubG9hZFByb2dyZXNzIiwib25VcGxvYWRQcm9ncmVzcyIsInVwbG9hZCIsImNhbmNlbFRva2VuIiwiY2FuY2VsIiwiYWJvcnQiLCJzZW5kIiwiZW5oYW5jZUVycm9yIiwiY29uZmlnMSIsImNvbmZpZzIiLCJwcm9wIiwiQ2FuY2VsIiwiY2FzdFBhdGgiLCJpc0FyZ3VtZW50cyIsImlzSW5kZXgiLCJ0b0tleSIsImhhc0Z1bmMiLCJpc0tleSIsInN0cmluZ1RvUGF0aCIsImFzeW5jVGFnIiwiZnVuY1RhZyIsImdlblRhZyIsInByb3h5VGFnIiwiZnVuY1RvU3RyaW5nIiwiaXRlcmF0ZWUiLCJiYXNlSXNBcmd1bWVudHMiLCJyZUlzVWludCIsIm9ialZhbHVlIiwiYmFzZVRpbWVzIiwiaXNUeXBlZEFycmF5IiwiaW5oZXJpdGVkIiwiaXNBcnIiLCJpc0FyZyIsImlzQnVmZiIsInNraXBJbmRleGVzIiwiYmFzZUlzVHlwZWRBcnJheSIsImJhc2VVbmFyeSIsIm5vZGVJc1R5cGVkQXJyYXkiLCJhcmciLCJiYXNlS2V5c0luIiwiYXJyYXlQdXNoIiwiZ2V0UHJvdG90eXBlIiwiZ2V0U3ltYm9sc0luIiwib3ZlckFyZyIsImJhc2VHZXRBbGxLZXlzIiwia2V5c0Z1bmMiLCJzeW1ib2xzRnVuYyIsImFzY2lpVG9BcnJheSIsImhhc1VuaWNvZGUiLCJ1bmljb2RlVG9BcnJheSIsInJlSGFzVW5pY29kZSIsIm1ha2VBcnJheUZyb20iLCJQRU5ESU5HIiwiX2NvbnRpbnVhdGlvbnMiLCJfcGFyZW50IiwiX3BhdXNlZCIsIl9jb250aW51ZVdpdGgiLCJfZmFpbFdpdGgiLCJsb29rc0xpa2VBUHJvbWlzZSIsIm5leHRGbiIsImNhdGNoRm4iLCJ1bnJlc29sdmVkIiwiX3NldFBhcmVudCIsIl9pc1JlamVjdGVkIiwiY2F0Y2hSZXN1bHQiLCJfZXJyb3IiLCJfY2hhaW5Qcm9taXNlRGF0YSIsIl9ydW5SZXNvbHV0aW9ucyIsIl9pc1Jlc29sdmVkIiwiX2RhdGEiLCJfcnVuUmVqZWN0aW9ucyIsImZpbmFsbHkiLCJyYW4iLCJydW5GaW5hbGx5IiwicGF1c2UiLCJyZXN1bWUiLCJmaXJzdFBhdXNlZCIsIl9maW5kRmlyc3RQYXVzZWQiLCJfZmluZEFuY2VzdHJ5IiwiYWNjIiwiY3VyIiwibm9kZSIsImZpcnN0UGVuZGluZyIsIl9maW5kRmlyc3RQZW5kaW5nIiwiX3NldFJlc29sdmVkIiwiX2ZpbmRGaXJzdEFuY2VzdG9yIiwiX2lzUGVuZGluZyIsIm1hdGNoaW5nIiwiZmlyc3RSZWplY3RlZCIsIl9zZXRSZWplY3RlZCIsIl90YWtlQ29udGludWF0aW9ucyIsImNvbnRpbnVhdGlvbnMiLCJjb250IiwiX2hhbmRsZVVzZXJGdW5jdGlvblJlc3VsdCIsIl9oYW5kbGVXaGVuUmVzb2x2ZWREYXRhSXNQcm9taXNlIiwiX2hhbmRsZVJlc29sdXRpb25FcnJvciIsImNvbnRpbnVhdGlvbiIsImUyIiwibmV4dFN5bmNocm9ub3VzUHJvbWlzZSIsInByb21pc2VEYXRhIiwibmV3RGF0YSIsIm5ld0Vycm9yIiwibmV3UmVzdWx0IiwiYWxsRGF0YSIsIm51bVJlc29sdmVkIiwicmVqZWN0ZWQiLCJ0aGlzUmVzdWx0IiwiZG9SZWplY3QiLCJSZWFsUHJvbWlzZSIsImluc3RhbGxHbG9iYWxseSIsIl9fYXdhaXRlciIsIl9fcGF0Y2hlZCIsIm9yaWdpbmFsQXdhaXRlciIsInBhdGNoQXdhaXRlcklmUmVxdWlyZWQiLCJ1bmluc3RhbGxHbG9iYWxseSIsImJhc2VGb3JPd24iLCJiYXNlSXRlcmF0ZWUiLCJiYXNlRm9yIiwiYmFzZU1hdGNoZXMiLCJiYXNlTWF0Y2hlc1Byb3BlcnR5IiwiaWRlbnRpdHkiLCJwcm9wZXJ0eSIsImJhc2VJc0VxdWFsRGVlcCIsImJhc2VJc0VxdWFsIiwiYml0bWFzayIsInN0YWNrIiwiU2V0Q2FjaGUiLCJhcnJheVNvbWUiLCJjYWNoZUhhcyIsIkNPTVBBUkVfUEFSVElBTF9GTEFHIiwiQ09NUEFSRV9VTk9SREVSRURfRkxBRyIsImVxdWFsRnVuYyIsImlzUGFydGlhbCIsImFyckxlbmd0aCIsIm90aExlbmd0aCIsInN0YWNrZWQiLCJzZWVuIiwiYXJyVmFsdWUiLCJvdGhWYWx1ZSIsImNvbXBhcmVkIiwib3RoSW5kZXgiLCJzcmNWYWx1ZSIsImxhc3RQYXJ0IiwibGFzdFBhcnREZWJ1ZyIsIl9wYXJ0IiwicGFyc2VJbnQiLCJfc3ViVHlwZSIsImZpZWxkcyIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImNhY2hlIiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiZGVzYyIsInJhdyIsImFycmF5UmVkdWNlIiwiZGVidXJyIiwid29yZHMiLCJyZUFwb3MiLCJzaGlmdCIsImNoZWNrRENFIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiX3JlYWN0MiIsIl9pbXBsZW1lbnRhdGlvbjIiLCJhbGxvY1Vuc2FmZSIsImlzRGVlcCIsImNvcHkiLCJ0b1NoZWV0IiwiY29udGVudCIsInBhcmVudHMiLCJsaW5lIiwiY29sdW1uIiwibnMiLCJkZXB0aCIsImF0IiwiZmFjdG9yeSIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJtc0dyaWRSb3ciLCJtc0dyaWRSb3dTcGFuIiwibXNHcmlkQ29sdW1uIiwibXNHcmlkQ29sdW1uU3BhbiIsImZvbnRXZWlnaHQiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiV2Via2l0TGluZUNsYW1wIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwicmVuZGVyUm91dGVzIiwicm91dGVzIiwiZXh0cmFQcm9wcyIsInN3aXRjaFByb3BzIiwiZXh0ZW5kU3RhdGljcyIsIl9fZXh0ZW5kcyIsIl9fIiwiX19hc3NpZ24iLCJfX3Jlc3QiLCJpc01lcmdlYWJsZU9iamVjdCIsImlzTm9uTnVsbE9iamVjdCIsInN0cmluZ1ZhbHVlIiwiUkVBQ1RfRUxFTUVOVF9UWVBFIiwiaXNSZWFjdEVsZW1lbnQiLCJpc1NwZWNpYWwiLCJmb3IiLCJjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCIsImRlZXBtZXJnZSIsImRlZmF1bHRBcnJheU1lcmdlIiwiYXJyYXlNZXJnZSIsInNvdXJjZUlzQXJyYXkiLCJkZXN0aW5hdGlvbiIsIm1lcmdlT2JqZWN0IiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJpc093biIsInVubWFza2VkIiwidWlkIiwibWFza1NyY0tleSIsIklFX1BST1RPIiwicmVJc0hvc3RDdG9yIiwicmVJc05hdGl2ZSIsIkhBU0hfVU5ERUZJTkVEIiwiSGFzaCIsIkxBUkdFX0FSUkFZX1NJWkUiLCJwYWlycyIsImFyZ3NUYWciLCJ0eXBlZEFycmF5VGFncyIsImlzUHJvdG8iLCJwcmVkaWNhdGUiLCJyZXNJbmRleCIsImlucHV0IiwiZGF0YVZpZXciLCJieXRlT2Zmc2V0IiwicmVGbGFncyIsImxhc3RJbmRleCIsInN5bWJvbFByb3RvIiwic3ltYm9sVmFsdWVPZiIsInR5cGVkQXJyYXkiLCJvYmplY3RDcmVhdGUiLCJub2RlSXNNYXAiLCJpc01hcCIsIm5vZGVJc1NldCIsImlzU2V0IiwiQ0xPTkVfREVFUF9GTEFHIiwiQ0xPTkVfRkxBVF9GTEFHIiwiQ0xPTkVfU1lNQk9MU19GTEFHIiwiY2xvbmVhYmxlVGFncyIsImJhc2VDbG9uZSIsImlzRmxhdCIsImlzRnVsbCIsImlzRnVuYyIsInN1YlZhbHVlIiwia2V5c0luIiwiRlVOQ19FUlJPUl9URVhUIiwibWVtb2l6ZSIsInJlc29sdmVyIiwibWVtb2l6ZWQiLCJNQVhfTUVNT0laRV9TSVpFIiwicmVQcm9wTmFtZSIsInJlRXNjYXBlQ2hhciIsInF1b3RlIiwic3ViU3RyaW5nIiwiRm9ybWlrUHJvdmlkZXIiLCJGb3JtaWtDb25zdW1lciIsImNvbm5lY3QiLCJDb21wIiwiZm9ybWlrIiwiY29tcG9uZW50RGlzcGxheU5hbWUiLCJpc0ludGVnZXIiLCJOdW1iZXIiLCJpc1Byb21pc2UiLCJpc0lucHV0RXZlbnQiLCJzZXRJbiIsInJlc1ZhbCIsInBhdGhBcnJheSIsImN1cnJlbnRQYXRoIiwiY3VycmVudE9iaiIsIm5leHRQYXRoIiwic2V0TmVzdGVkT2JqZWN0VmFsdWVzIiwidmlzaXRlZCIsIl9hIiwiX3N1cGVyIiwiRm9ybWlrIiwiaGNDYWNoZSIsImhiQ2FjaGUiLCJyZWdpc3RlckZpZWxkIiwidW5yZWdpc3RlckZpZWxkIiwic2V0RXJyb3JzIiwic2V0VG91Y2hlZCIsInRvdWNoZWQiLCJ2YWxpZGF0ZU9uQmx1ciIsInJ1blZhbGlkYXRpb25zIiwic2V0VmFsdWVzIiwidmFsaWRhdGVPbkNoYW5nZSIsInNldFN0YXR1cyIsInNldEVycm9yIiwic2V0U3VibWl0dGluZyIsImlzU3VibWl0dGluZyIsImRpZE1vdW50IiwidmFsaWRhdGVGaWVsZCIsImlzVmFsaWRhdGluZyIsInJ1blNpbmdsZUZpZWxkTGV2ZWxWYWxpZGF0aW9uIiwicnVuVmFsaWRhdGlvblNjaGVtYSIsInZhbGlkYXRpb25TY2hlbWEiLCJ2YWxpZGF0ZURhdGEiLCJ2YWxpZGF0ZVl1cFNjaGVtYSIsInl1cEVycm9yIiwieXVwVG9Gb3JtRXJyb3JzIiwidmFsaWRhdG9yIiwiaGFzQ2FuY2VsZWQiLCJpc0NhbmNlbGVkIiwibWFrZUNhbmNlbGFibGUiLCJydW5GaWVsZExldmVsVmFsaWRhdGlvbnMiLCJydW5WYWxpZGF0ZUhhbmRsZXIiLCJmaWVsZEVycm9ycyIsInNjaGVtYUVycm9ycyIsImhhbmRsZXJFcnJvcnMiLCJwcmV2U3RhdGUiLCJoYW5kbGVDaGFuZ2UiLCJldmVudE9yUGF0aCIsImV4ZWN1dGVDaGFuZ2UiLCJldmVudE9yVmFsdWUiLCJtYXliZVBhdGgiLCJldmVudF8xIiwicGVyc2lzdCIsIm5hbWVfMSIsImNoZWNrZWQiLCJvdXRlckhUTUwiLCJwYXJzZWQiLCJwYXRoXzEiLCJzZXRGaWVsZFZhbHVlIiwic2hvdWxkVmFsaWRhdGUiLCJoYW5kbGVTdWJtaXQiLCJwcmV2ZW50RGVmYXVsdCIsInN1Ym1pdEZvcm0iLCJzdWJtaXRDb3VudCIsImNvbWJpbmVkRXJyb3JzIiwiZXhlY3V0ZVN1Ym1pdCIsIm9uU3VibWl0IiwiZ2V0Rm9ybWlrQWN0aW9ucyIsImhhbmRsZUJsdXIiLCJleGVjdXRlQmx1ciIsIm1heWJlRXZlbnQiLCJldmVudF8zIiwibmFtZV8yIiwicGF0aF8yIiwic2V0RmllbGRUb3VjaGVkIiwic2V0RmllbGRFcnJvciIsInJlc2V0Rm9ybSIsIm5leHRWYWx1ZXMiLCJpbml0aWFsVmFsdWVzIiwiaW5pdGlhbFN0YXR1cyIsImhhbmRsZVJlc2V0Iiwib25SZXNldCIsIm1heWJlUHJvbWlzZWRPblJlc2V0Iiwic2V0Rm9ybWlrU3RhdGUiLCJ2YWxpZGF0ZUZvcm0iLCJnZXRGb3JtaWtDb21wdXRlZFByb3BzIiwiaXNJbml0aWFsVmFsaWQiLCJkaXJ0eSIsImdldEZvcm1pa0JhZyIsImdldEZvcm1pa0NvbnRleHQiLCJjb21wb25lbnREaWRVcGRhdGUiLCJwcmV2UHJvcHMiLCJlbmFibGVSZWluaXRpYWxpemUiLCJmaWVsZEtleXNXaXRoVmFsaWRhdGlvbiIsImZpZWxkVmFsaWRhdGlvbnMiLCJmaWVsZEVycm9yc0xpc3QiLCJjdXJyIiwibWF5YmVQcm9taXNlZEVycm9ycyIsImN0eCIsInNob3VsZENsb25lIiwiX2IiLCJtb3ZlIiwic3dhcCIsImluZGV4QSIsImluZGV4QiIsImluc2VydCIsInJlYWN0UHJvcHNSZWdleCIsImdldFR5cGUiLCJwYXlsb2FkIiwiYXNzaWduUHJvcCIsImNhcnJ5IiwibmV3VmFsIiwib3JpZ2luYWxPYmplY3QiLCJwcm9wVHlwZSIsIm9yaWdpbiIsIm5ld0NvbWVycyIsImV4dGVuc2lvbnMiLCJuZXdDb21lciIsIm1lcmdlUmVjdXJzaXZlbHkiLCJuZXdPYmplY3QiLCJwcm9wc18xIiwic3ltYm9sc18xIiwidGFyZ2V0VmFsIiwiaW5jbHVkZXMiLCJhYSIsImJhIiwiY2EiLCJpc01vdW50ZWQiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZVNldFN0YXRlIiwidXBkYXRlciIsImZvcmNlVXBkYXRlIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJjdXJyZW50Iiwic3VzcGVuc2UiLCJfX3NlbGYiLCJfX3NvdXJjZSIsIl9vd25lciIsImtleVByZWZpeCIsImVhIiwiZmEiLCJkYSIsImNyZWF0ZVJlZiIsIlB1cmVDb21wb25lbnQiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfY3VycmVudFZhbHVlIiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJfY29udGV4dCIsIl9jdG9yIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlRGVidWdWYWx1ZSIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlU3RhdGUiLCJGcmFnbWVudCIsIlByb2ZpbGVyIiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwidW5zdGFibGVfU3VzcGVuc2VMaXN0IiwiY3JlYXRlRmFjdG9yeSIsInVuc3RhYmxlX3dpdGhTdXNwZW5zZUNvbmZpZyIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwiUmVhY3RDdXJyZW50T3duZXIiLCJJc1NvbWVSZW5kZXJlckFjdGluZyIsImV4dHJhY3RFdmVudHMiLCJldmVudFR5cGVzIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJoYSIsInJlZ2lzdHJhdGlvbk5hbWUiLCJpYSIsImphIiwiZGVwZW5kZW5jaWVzIiwia2EiLCJvbkVycm9yIiwibGEiLCJtYSIsIm5hIiwib2EiLCJwYSIsInFhIiwic2EiLCJ0YSIsInZhIiwid2EiLCJjdXJyZW50VGFyZ2V0IiwicmEiLCJ4YSIsInlhIiwiemEiLCJBYSIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNQZXJzaXN0ZW50IiwicmVsZWFzZSIsIkJhIiwiQ2EiLCJpbmplY3RFdmVudFBsdWdpbk9yZGVyIiwiaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lIiwiRGEiLCJzdGF0ZU5vZGUiLCJkaXNhYmxlZCIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIkthIiwiTGEiLCJyZXR1cm4iLCJNYSIsImRpc3BhdGNoQ29uZmlnIiwiTmEiLCJfdGFyZ2V0SW5zdCIsIk9hIiwiUGEiLCJRYSIsIlJhIiwiU2EiLCJUYSIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIlVhIiwiVmEiLCJXYSIsImFuaW1hdGlvbiIsInRyYW5zaXRpb24iLCJYYSIsIllhIiwiWmEiLCJhYiIsImJiIiwiZGIiLCJlYiIsImZiIiwiZ2IiLCJoYiIsIm5hdGl2ZUV2ZW50IiwiSW50ZXJmYWNlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiamIiLCJldmVudFBvb2wiLCJrYiIsImRlc3RydWN0b3IiLCJpYiIsImdldFBvb2xlZCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsIm5vdyIsImlzVHJ1c3RlZCIsImxiIiwibWIiLCJuYiIsIm9iIiwicGIiLCJkb2N1bWVudE1vZGUiLCJxYiIsInNiIiwidGIiLCJ1YiIsImJlZm9yZUlucHV0IiwiYnViYmxlZCIsImNhcHR1cmVkIiwiY29tcG9zaXRpb25FbmQiLCJjb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25VcGRhdGUiLCJ2YiIsIndiIiwia2V5Q29kZSIsInhiIiwiZGV0YWlsIiwieWIiLCJDYiIsImxvY2FsZSIsIndoaWNoIiwiQWIiLCJjdHJsS2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImNoYXIiLCJCYiIsIkRiIiwiRWIiLCJGYiIsIkdiIiwiSGIiLCJJYiIsIkpiIiwiS2IiLCJMYiIsIk1iIiwiTmIiLCJPYiIsIlBiIiwiY29sb3IiLCJkYXRldGltZSIsIm1vbnRoIiwicmFuZ2UiLCJ0ZWwiLCJ0ZXh0IiwidGltZSIsIndlZWsiLCJRYiIsIm5vZGVOYW1lIiwiUmIiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJTYiIsIlRiIiwiVmIiLCJfdmFsdWVUcmFja2VyIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJVYiIsIldiIiwiWGIiLCJZYiIsIlpiIiwiJGIiLCJhYyIsImJjIiwiY2MiLCJkYyIsImVjIiwiZmMiLCJnYyIsImhjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJtYyIsIm9jIiwicGMiLCJfZGVidWdPd25lciIsIl9kZWJ1Z1NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsInFjIiwicmMiLCJzYyIsInRjIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInNhbml0aXplVVJMIiwieGMiLCJ5YyIsInpjIiwidmMiLCJ3YyIsInVjIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJBYyIsIkJjIiwiZGVmYXVsdENoZWNrZWQiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJDYyIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJEYyIsIkVjIiwiRmMiLCJHYyIsIm93bmVyRG9jdW1lbnQiLCJhY3RpdmVFbGVtZW50IiwieGxpbmtIcmVmIiwiSGMiLCJjaGFuZ2UiLCJJYyIsIkpjIiwiS2MiLCJMYyIsIk1jIiwiTmMiLCJPYyIsIlBjIiwiZGV0YWNoRXZlbnQiLCJRYyIsIlJjIiwiYXR0YWNoRXZlbnQiLCJTYyIsIlRjIiwiVWMiLCJWYyIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJXYyIsInZpZXciLCJYYyIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJZYyIsImdldE1vZGlmaWVyU3RhdGUiLCJaYyIsIiRjIiwiYWQiLCJiZCIsImNkIiwiZGQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwiYnV0dG9uIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsImVkIiwicG9pbnRlcklkIiwid2lkdGgiLCJoZWlnaHQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiZmQiLCJtb3VzZUVudGVyIiwibW91c2VMZWF2ZSIsInBvaW50ZXJFbnRlciIsInBvaW50ZXJMZWF2ZSIsImdkIiwiZGVmYXVsdFZpZXciLCJwYXJlbnRXaW5kb3ciLCJhbHRlcm5hdGUiLCJoZCIsImpkIiwia2QiLCJyZXNwb25kZXIiLCJsZCIsImVmZmVjdFRhZyIsIm9kIiwicWQiLCJzaWJsaW5nIiwicGQiLCJyZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJzZCIsImNsaXBib2FyZERhdGEiLCJ0ZCIsInVkIiwiY2hhckNvZGUiLCJ2ZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJ3ZCIsIjgiLCI5IiwiMTIiLCIxMyIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyNyIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJ4ZCIsInlkIiwiZGF0YVRyYW5zZmVyIiwiemQiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiQWQiLCJCZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiQ2QiLCJEZCIsIkVkIiwiRmQiLCJHZCIsIkhkIiwiSWQiLCJKZCIsIktkIiwiTGQiLCJldmVudFByaW9yaXR5IiwiTWQiLCJnZXRFdmVudFByaW9yaXR5IiwiTmQiLCJPZCIsIlBkIiwidGFyZ2V0SW5zdCIsImFuY2VzdG9ycyIsImNvbnRhaW5lckluZm8iLCJ0b3BMZXZlbFR5cGUiLCJRZCIsIlJkIiwiU2QiLCJUZCIsIlVkIiwiVmQiLCJXZCIsIlhkIiwiYm9keSIsIllkIiwiZmlyc3RDaGlsZCIsIlpkIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50V2luZG93IiwiY29udGVudEVkaXRhYmxlIiwic2VsZWN0Iiwic3RhcnQiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImFuY2hvck5vZGUiLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsIm9uU2VsZWN0Iiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJTaW1wbGVFdmVudFBsdWdpbiIsIkVudGVyTGVhdmVFdmVudFBsdWdpbiIsIkNoYW5nZUV2ZW50UGx1Z2luIiwiU2VsZWN0RXZlbnRQbHVnaW4iLCJCZWZvcmVJbnB1dEV2ZW50UGx1Z2luIiwiaHRtbCIsIm1hdGhtbCIsInN2ZyIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJsYXN0Q2hpbGQiLCJub2RlVmFsdWUiLCJncmlkQXJlYSIsImxpbmVDbGFtcCIsInNldFByb3BlcnR5IiwibWVudWl0ZW0iLCJhcmVhIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwia2V5Z2VuIiwibGluayIsInRyYWNrIiwid2JyIiwiaXMiLCJhdXRvRm9jdXMiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsIlplIiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsImFmIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJiZiIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiY2YiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJkZiIsInVuc3RhYmxlX25vdyIsImVmIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJmZiIsInVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5IiwiaGYiLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsImpmIiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJrZiIsInVuc3RhYmxlX0xvd1ByaW9yaXR5IiwibGYiLCJ1bnN0YWJsZV9JZGxlUHJpb3JpdHkiLCJtZiIsIm5mIiwib2YiLCJwZiIsInFmIiwicmYiLCJzZiIsInRmIiwidWYiLCJ2ZiIsIndmIiwieGYiLCJ5ZiIsInpmIiwiQWYiLCJDZiIsIkRmIiwiRWYiLCJGZiIsIkdmIiwiSGYiLCJJZiIsIkpmIiwiY2hpbGRFeHBpcmF0aW9uVGltZSIsIktmIiwiZmlyc3RDb250ZXh0IiwiZXhwaXJhdGlvblRpbWUiLCJMZiIsIk1mIiwicmVzcG9uZGVycyIsIk5mIiwiT2YiLCJiYXNlU3RhdGUiLCJmaXJzdFVwZGF0ZSIsImxhc3RVcGRhdGUiLCJmaXJzdENhcHR1cmVkVXBkYXRlIiwibGFzdENhcHR1cmVkVXBkYXRlIiwiZmlyc3RFZmZlY3QiLCJsYXN0RWZmZWN0IiwiZmlyc3RDYXB0dXJlZEVmZmVjdCIsImxhc3RDYXB0dXJlZEVmZmVjdCIsIlBmIiwiUWYiLCJzdXNwZW5zZUNvbmZpZyIsIm5leHRFZmZlY3QiLCJSZiIsIlNmIiwidXBkYXRlUXVldWUiLCJtZW1vaXplZFN0YXRlIiwiVGYiLCJVZiIsIlZmIiwiV2YiLCJYZiIsIllmIiwiWmYiLCIkZiIsImFnIiwiYmciLCJmZyIsIl9yZWFjdEludGVybmFsRmliZXIiLCJjZyIsImRnIiwiZWciLCJnZyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImhnIiwiaWciLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsImpnIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50Iiwia2ciLCJsZyIsIl9zdHJpbmdSZWYiLCJtZyIsIm5nIiwib2ciLCJwZyIsIm1vZGUiLCJlbGVtZW50VHlwZSIsInFnIiwiaW1wbGVtZW50YXRpb24iLCJyZyIsInNnIiwicmIiLCJ0ZyIsInVnIiwidmciLCJ3ZyIsInhnIiwieWciLCJ6ZyIsIkFnIiwiZG9jdW1lbnRFbGVtZW50IiwidGFnTmFtZSIsIkJnIiwiQ2ciLCJEZyIsIkVnIiwiRmciLCJHZyIsIkhnIiwibWVtb2l6ZWRQcm9wcyIsInJldmVhbE9yZGVyIiwiSWciLCJKZyIsIktnIiwiTGciLCJNZyIsIk5nIiwiT2ciLCJQZyIsIlFnIiwiUmciLCJTZyIsIlRnIiwiVWciLCJWZyIsIldnIiwiWGciLCJZZyIsIlpnIiwiJGciLCJhaCIsImJoIiwiY2giLCJkaCIsImVoIiwiZmgiLCJoaCIsImloIiwiamgiLCJiYXNlVXBkYXRlIiwia2giLCJsaCIsIm1oIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImRpc3BhdGNoIiwibGFzdFJlbmRlcmVkU3RhdGUiLCJlYWdlclJlZHVjZXIiLCJlYWdlclN0YXRlIiwibmgiLCJkZXN0cm95Iiwib2giLCJwaCIsInFoIiwicmgiLCJzaCIsInJlYWRDb250ZXh0IiwidXNlUmVzcG9uZGVyIiwidGgiLCJ1aCIsInZoIiwid2giLCJ4aCIsInloIiwicGVuZGluZ1Byb3BzIiwiemgiLCJBaCIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJHaCIsIkhoIiwiSWgiLCJKaCIsIktoIiwiTGgiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJNaCIsIk5oIiwicGVuZGluZ0NvbnRleHQiLCJPaCIsIlBoIiwiZmFsbGJhY2siLCJ1bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjayIsIlFoIiwiaXNCYWNrd2FyZHMiLCJyZW5kZXJpbmciLCJ0YWlsIiwidGFpbEV4cGlyYXRpb24iLCJ0YWlsTW9kZSIsIlJoIiwiU2giLCJUaCIsIlVoIiwiVmgiLCJXaCIsIiRoIiwiYWkiLCJiaSIsIm9uQ2xpY2siLCJvbmNsaWNrIiwiY2kiLCJXZWFrU2V0IiwiZGkiLCJnaSIsImZpIiwiaGkiLCJpaSIsImppIiwiZWkiLCJraSIsImxpIiwibWkiLCJuaSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJvaSIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJwaSIsImRpc3BsYXkiLCJxaSIsInJpIiwic2kiLCJ0aSIsInVpIiwidmkiLCJ3aSIsImNvbXBvbmVudERpZENhdGNoIiwieGkiLCJjb21wb25lbnRTdGFjayIsInlpIiwiY2VpbCIsInppIiwiQWkiLCJCaSIsIkNpIiwiRGkiLCJFaSIsIkZpIiwiR2kiLCJIaSIsIklpIiwiSmkiLCJLaSIsIkxpIiwiTWkiLCJOaSIsIk9pIiwiUGkiLCJRaSIsIlJpIiwiU2kiLCJUaSIsIlVpIiwiVmkiLCJXaSIsInRpbWVvdXRNcyIsIlhpIiwiWWkiLCJwaW5nVGltZSIsIlppIiwiZmlyc3RQZW5kaW5nVGltZSIsImxhc3RQZW5kaW5nVGltZSIsImNhbGxiYWNrRXhwaXJhdGlvblRpbWUiLCJjYWxsYmFja05vZGUiLCIkaSIsImFqIiwiYmoiLCJjaiIsImVqIiwiZmoiLCJnaiIsImhqIiwiZmluaXNoZWRXb3JrIiwiZmluaXNoZWRFeHBpcmF0aW9uVGltZSIsInRpbWVvdXRIYW5kbGUiLCJpaiIsImpqIiwicGluZ0NhY2hlIiwia2oiLCJsaiIsImZpcnN0QmF0Y2giLCJfZGVmZXIiLCJfZXhwaXJhdGlvblRpbWUiLCJfb25Db21wbGV0ZSIsImRqIiwiYnVzeU1pbkR1cmF0aW9uTXMiLCJidXN5RGVsYXlNcyIsIm1qIiwiY3JlYXRlRWxlbWVudE5TIiwibmoiLCJyYW5nZUNvdW50IiwiemIiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiZ2giLCJvaiIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiJGQiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJmb2N1cyIsIiRhIiwibmMiLCJtZCIsIkZqIiwiWGgiLCJZaCIsIkdqIiwibmQiLCJaaCIsImdmIiwicGoiLCJxaiIsInJqIiwiaGlkZGVuIiwiQmYiLCJzaiIsImh5ZHJhdGUiLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJ1aiIsInBlbmRpbmdDaGlsZHJlbiIsInZqIiwid2oiLCJ4aiIsInlqIiwiemoiLCJCaiIsIl9yb290IiwiX2NhbGxiYWNrcyIsIl9uZXh0IiwiX2hhc0NoaWxkcmVuIiwiX2RpZENvbXBsZXRlIiwiX2NoaWxkcmVuIiwiQ2oiLCJfZGlkQ29tbWl0IiwiX29uQ29tbWl0IiwiRGoiLCJfaW50ZXJuYWxSb290IiwiRWoiLCJIaiIsIkpqIiwiaGFzQXR0cmlidXRlIiwiSWoiLCJLaiIsIkFqIiwiZm9ybSIsImNvbW1pdCIsInVubW91bnQiLCJjcmVhdGVCYXRjaCIsIk5qIiwiY3JlYXRlUG9ydGFsIiwiZmluZERPTU5vZGUiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9jcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX2ludGVyYWN0aXZlVXBkYXRlcyIsInVuc3RhYmxlX2Rpc2NyZXRlVXBkYXRlcyIsInVuc3RhYmxlX2ZsdXNoRGlzY3JldGVVcGRhdGVzIiwiZmx1c2hTeW5jIiwidW5zdGFibGVfY3JlYXRlUm9vdCIsInVuc3RhYmxlX2NyZWF0ZVN5bmNSb290IiwidW5zdGFibGVfZmx1c2hDb250cm9sbGVkIiwiRXZlbnRzIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwib25Db21taXRGaWJlclJvb3QiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsInRqIiwib3ZlcnJpZGVIb29rU3RhdGUiLCJvdmVycmlkZVByb3BzIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwic2NoZWR1bGVVcGRhdGUiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoIiwic2NoZWR1bGVSZWZyZXNoIiwic2NoZWR1bGVSb290Iiwic2V0UmVmcmVzaEhhbmRsZXIiLCJnZXRDdXJyZW50RmliZXIiLCJPaiIsIlBqIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJNZXNzYWdlQ2hhbm5lbCIsInBlcmZvcm1hbmNlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJwb3N0TWVzc2FnZSIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwcmV2aW91cyIsInByaW9yaXR5TGV2ZWwiLCJzdGFydFRpbWUiLCJ1bnN0YWJsZV9uZXh0IiwiZGVsYXkiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJ1bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbiIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkxhenkiLCJNZW1vIiwiUG9ydGFsIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImlzRWxlbWVudCIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc0xhenkiLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwiX3JlYWN0IiwiX3Byb3BUeXBlczIiLCJfZ3VkMiIsIl9jbGFzc0NhbGxDaGVjayIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiX2luaGVyaXRzIiwiX3RlbXAiLCJfdGVtcDIiLCJfbGVuMiIsIl9rZXkyIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJlbXB0eUZ1bmN0aW9uIiwiZW1wdHlGdW5jdGlvbldpdGhSZXNldCIsInJlc2V0V2FybmluZ0NhY2hlIiwic2hpbSIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJSZWFjdFByb3BUeXBlcyIsImFueSIsImFycmF5T2YiLCJpbnN0YW5jZU9mIiwib2JqZWN0T2YiLCJvbmVPZlR5cGUiLCJzaGFwZSIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwid2FybmluZyIsIm1ha2VFbXB0eUZ1bmN0aW9uIiwidGhhdFJldHVybnMiLCJ0aGF0UmV0dXJuc0ZhbHNlIiwidGhhdFJldHVybnNUcnVlIiwidGhhdFJldHVybnNOdWxsIiwidGhhdFJldHVybnNUaGlzIiwidGhhdFJldHVybnNBcmd1bWVudCIsIkF4aW9zIiwibWVyZ2VDb25maWciLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJheGlvcyIsImluc3RhbmNlQ29uZmlnIiwiQ2FuY2VsVG9rZW4iLCJpc0NhbmNlbCIsInNwcmVhZCIsIkludGVyY2VwdG9yTWFuYWdlciIsImRpc3BhdGNoUmVxdWVzdCIsImludGVyY2VwdG9ycyIsImNoYWluIiwiaW50ZXJjZXB0b3IiLCJnZXRVcmkiLCJlamVjdCIsInRyYW5zZm9ybURhdGEiLCJpc0Fic29sdXRlVVJMIiwiY29tYmluZVVSTHMiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwidGhyb3dJZlJlcXVlc3RlZCIsImJhc2VVUkwiLCJyZWFzb24iLCJmbnMiLCJub3JtYWxpemVkTmFtZSIsImlzQXhpb3NFcnJvciIsInRvSlNPTiIsImRlc2NyaXB0aW9uIiwiY29sdW1uTnVtYmVyIiwiaWdub3JlRHVwbGljYXRlT2YiLCJvcmlnaW5VUkwiLCJtc2llIiwidXJsUGFyc2luZ05vZGUiLCJyZXNvbHZlVVJMIiwicHJvdG9jb2wiLCJob3N0IiwiaG9zdG5hbWUiLCJwb3J0IiwicmVxdWVzdFVSTCIsIndyaXRlIiwiZXhwaXJlcyIsImRvbWFpbiIsInNlY3VyZSIsImNvb2tpZSIsInRvR01UU3RyaW5nIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicmVsYXRpdmVVUkwiLCJleGVjdXRvciIsInJlc29sdmVQcm9taXNlIiwibWVtb2l6ZUNhcHBlZCIsImhhc2hDbGVhciIsImhhc2hEZWxldGUiLCJoYXNoR2V0IiwiaGFzaEhhcyIsImhhc2hTZXQiLCJpc01hc2tlZCIsImZ1bmNQcm90byIsImNvcmVKc0RhdGEiLCJhc3NvY0luZGV4T2YiLCJnZXRNYXBEYXRhIiwiYXJyYXlNYXAiLCJhcnJheUVhY2giLCJiYXNlQXNzaWduIiwiYmFzZUFzc2lnbkluIiwiY2xvbmVCdWZmZXIiLCJjb3B5QXJyYXkiLCJjb3B5U3ltYm9scyIsImNvcHlTeW1ib2xzSW4iLCJnZXRBbGxLZXlzIiwiZ2V0QWxsS2V5c0luIiwiaW5pdENsb25lQXJyYXkiLCJpbml0Q2xvbmVCeVRhZyIsImluaXRDbG9uZU9iamVjdCIsIm9iamVjdFRhZyIsImNvcHlPYmplY3QiLCJpc1Byb3RvdHlwZSIsIm5hdGl2ZUtleXMiLCJuYXRpdmVLZXlzSW4iLCJjbG9uZUFycmF5QnVmZmVyIiwiY2xvbmVEYXRhVmlldyIsImNsb25lUmVnRXhwIiwiY2xvbmVTeW1ib2wiLCJjbG9uZVR5cGVkQXJyYXkiLCJib29sVGFnIiwiZGF0ZVRhZyIsIm1hcFRhZyIsIm51bWJlclRhZyIsInJlZ2V4cFRhZyIsInNldFRhZyIsInN0cmluZ1RhZyIsImFycmF5QnVmZmVyVGFnIiwiZGF0YVZpZXdUYWciLCJmbG9hdDMyVGFnIiwiZmxvYXQ2NFRhZyIsImludDhUYWciLCJpbnQxNlRhZyIsImludDMyVGFnIiwidWludDhUYWciLCJ1aW50OENsYW1wZWRUYWciLCJ1aW50MTZUYWciLCJ1aW50MzJUYWciLCJiYXNlQ3JlYXRlIiwiYmFzZUlzTWFwIiwiYmFzZUlzU2V0IiwiaXRlcmF0b3JUb0FycmF5IiwibWFwVG9BcnJheSIsInNldFRvQXJyYXkiLCJzdHJpbmdUb0FycmF5Iiwic3ltSXRlcmF0b3IiLCJyc0FzdHJhbCIsInJzQ29tYm8iLCJyc0ZpdHoiLCJyc05vbkFzdHJhbCIsInJzUmVnaW9uYWwiLCJyc1N1cnJQYWlyIiwicmVPcHRNb2QiLCJyc1NlcSIsInJzU3ltYm9sIiwicmVVbmljb2RlIiwiYmFzZVZhbHVlcyIsIkNvbmRpdGlvbiIsIm90aGVyd2lzZSIsImNoZWNrIiwiYnJhbmNoIiwicHJlcGVuZERlZXAiLCJzb3VyY2VWYWwiLCJjcmVhdGVFcnJvckZhY3RvcnkiLCJyZXN0IiwidGVzdEZuIiwidGhlbmFibGUiLCJydW5UZXN0IiwidmFsaWRPckVycm9yIiwiX21hcFZhbHVlcyIsIl9yZWYyJHBhdGgiLCJfcmVmMiRtZXNzYWdlIiwiX3JlZjIkdHlwZSIsIm9sZFBhcmFtcyIsIm5ld1BhcmFtcyIsInJlc29sdmVQYXJhbXMiLCJjcmVhdGVCYXNlRm9yIiwiZnJvbVJpZ2h0IiwiaXRlcmFibGUiLCJiYXNlSXNNYXRjaCIsImdldE1hdGNoRGF0YSIsIm1hdGNoZXNTdHJpY3RDb21wYXJhYmxlIiwibWF0Y2hEYXRhIiwibm9DdXN0b21pemVyIiwiZXF1YWxBcnJheXMiLCJlcXVhbEJ5VGFnIiwiZXF1YWxPYmplY3RzIiwiYXJyYXlUYWciLCJvYmpJc0FyciIsIm90aElzQXJyIiwib2JqVGFnIiwib3RoVGFnIiwib2JqSXNPYmoiLCJvdGhJc09iaiIsImlzU2FtZVRhZyIsIm9iaklzV3JhcHBlZCIsIm90aElzV3JhcHBlZCIsIm9ialVud3JhcHBlZCIsIm90aFVud3JhcHBlZCIsInNldENhY2hlQWRkIiwic2V0Q2FjaGVIYXMiLCJlcnJvclRhZyIsImNvbnZlcnQiLCJvYmpQcm9wcyIsIm9iakxlbmd0aCIsInNraXBDdG9yIiwib2JqQ3RvciIsIm90aEN0b3IiLCJpc1N0cmljdENvbXBhcmFibGUiLCJoYXNJbiIsImJhc2VHZXQiLCJiYXNlSGFzSW4iLCJiYXNlUHJvcGVydHkiLCJiYXNlUHJvcGVydHlEZWVwIiwiQm9vbGVhblNjaGVtYSIsIlN0cmluZ1NjaGVtYSIsIl9pc0Fic2VudCIsInJFbWFpbCIsInJVcmwiLCJpc1RyaW1tZWQiLCJfbGVuZ3RoIiwiX21pbiIsIl9tYXgiLCJyZWdleCIsImV4Y2x1ZGVFbXB0eVN0cmluZyIsImVuc3VyZSIsIk51bWJlclNjaGVtYSIsIk5hTiIsImxlc3MiLCJtb3JlIiwidHJ1bmNhdGUiLCJyb3VuZCIsImF2YWlsIiwiX2lzb2RhdGUiLCJpbnZhbGlkRGF0ZSIsIkRhdGVTY2hlbWEiLCJsaW1pdCIsInRpbWVzdGFtcCIsInN0cnVjdCIsIm51bWVyaWNLZXlzIiwibWludXRlc09mZnNldCIsImlzb1JlZyIsIlVUQyIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiT2JqZWN0U2NoZW1hIiwiX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbExvb3NlMiIsIl9zbmFrZUNhc2UyIiwiX2NhbWVsQ2FzZTIiLCJfbWFwS2V5cyIsIl9zb3J0RmllbGRzIiwiX3NvcnRCeUtleU9yZGVyIiwiX21ha2VQYXRoIiwiX3RlbXBsYXRlT2JqZWN0MiIsIl90ZW1wbGF0ZU9iamVjdCIsIl9ub2RlcyIsImRmdCIsIl9leGNsdWRlZEVkZ2VzIiwiaW50ZXJtZWRpYXRlVmFsdWUiLCJpbm5lck9wdGlvbnMiLCJfX3ZhbGlkYXRpbmciLCJpc0NoYW5nZWQiLCJleGlzdHMiLCJmaWVsZFZhbHVlIiwiZXhjbHVkZXMiLCJfZnJvbSIsImFsaWFzIiwiZnJvbUdldHRlciIsIm5vQWxsb3ciLCJrbm93biIsInVua25vd24iLCJzdHJpcFVua25vd24iLCJhbGxvdyIsInRyYW5zZm9ybUtleXMiLCJjYW1lbENhc2UiLCJzbmFrZUNhc2UiLCJjb25zdGFudENhc2UiLCJjcmVhdGVDb21wb3VuZGVyIiwid29yZCIsImFjY3VtdWxhdG9yIiwiaW5pdEFjY3VtIiwiZGVidXJyTGV0dGVyIiwicmVMYXRpbiIsInJlQ29tYm9NYXJrIiwiYmFzZVByb3BlcnR5T2YiLCJhc2NpaVdvcmRzIiwiaGFzVW5pY29kZVdvcmQiLCJ1bmljb2RlV29yZHMiLCJndWFyZCIsInJlQXNjaWlXb3JkIiwicmVIYXNVbmljb2RlV29yZCIsInJzQnJlYWtSYW5nZSIsInJzTWF0aE9wUmFuZ2UiLCJyc0JyZWFrIiwicnNEaWdpdHMiLCJyc0RpbmdiYXQiLCJyc0xvd2VyIiwicnNNaXNjIiwicnNVcHBlciIsInJzTWlzY0xvd2VyIiwicnNNaXNjVXBwZXIiLCJyc01vZGlmaWVyIiwicnNFbW9qaSIsInJlVW5pY29kZVdvcmQiLCJjYXBpdGFsaXplIiwidXBwZXJGaXJzdCIsImNyZWF0ZUNhc2VGaXJzdCIsImNhc3RTbGljZSIsInN0clN5bWJvbHMiLCJjaHIiLCJ0cmFpbGluZyIsImJhc2VTbGljZSIsImVkZ2VzIiwiYWRkTm9kZSIsImRlcFBhdGgiLCJfdG9wb3NvcnQiLCJyZXZlcnNlIiwidG9wb3NvcnQiLCJjdXJzb3IiLCJzb3J0ZWQiLCJvdXRnb2luZ0VkZ2VzIiwiZWRnZSIsIm1ha2VPdXRnb2luZ0VkZ2VzIiwibm9kZXNIYXNoIiwibWFrZU5vZGVzSGFzaCIsInZpc2l0IiwicHJlZGVjZXNzb3JzIiwibm9kZVJlcCIsIm91dGdvaW5nIiwidW5pcXVlTm9kZXMiLCJJbmZpbml0eSIsIkFycmF5U2NoZW1hIiwiX29wdHMiLCJjYXN0QXJyYXkiLCJjYXN0RWxlbWVudCIsInN1YlR5cGUiLCJjb21wYWN0IiwicmVqZWN0b3IiLCJpbm5lclR5cGUiLCJtYXBGbiIsIl9yZXNvbHZlIiwidmFsaWRhdGVBdCIsInZhbGlkYXRlU3luY0F0IiwiY3VzdG9tIl0sIm1hcHBpbmdzIjoic0ZBR0VBLEVBQU9DLFFBQVUsRUFBUSxNLDhCQ0gzQixzSEFZSUMsRUFBYSxTQUFXQyxFQUFTQyxHQUduQyxJQUZBLElBQUlDLEVBQVMsQ0FBQ0YsRUFBUSxJQUViRyxFQUFJLEVBQUdDLEVBQU1ILEVBQWVJLE9BQVFGLEVBQUlDLEVBQUtELEdBQUssRUFDekRELEVBQU9JLEtBQUtMLEVBQWVFLEdBQUlILEVBQVFHLEVBQUksSUFHN0MsT0FBT0QsR0FHTEssRUFBNEIsbUJBQVhDLFFBQW9ELGlCQUFwQkEsT0FBT0MsU0FBd0IsU0FBVUMsR0FDNUYsY0FBY0EsR0FDWixTQUFVQSxHQUNaLE9BQU9BLEdBQXlCLG1CQUFYRixRQUF5QkUsRUFBSUMsY0FBZ0JILFFBQVVFLElBQVFGLE9BQU9JLFVBQVksZ0JBQWtCRixHQUd2SEcsRUFBaUIsU0FBVUMsRUFBVUMsR0FDdkMsS0FBTUQsYUFBb0JDLEdBQ3hCLE1BQU0sSUFBSUMsVUFBVSxzQ0FJcEJDLEVBQWMsV0FDaEIsU0FBU0MsRUFBaUJDLEVBQVFDLEdBQ2hDLElBQUssSUFBSWpCLEVBQUksRUFBR0EsRUFBSWlCLEVBQU1mLE9BQVFGLElBQUssQ0FDckMsSUFBSWtCLEVBQWFELEVBQU1qQixHQUN2QmtCLEVBQVdDLFdBQWFELEVBQVdDLGFBQWMsRUFDakRELEVBQVdFLGNBQWUsRUFDdEIsVUFBV0YsSUFBWUEsRUFBV0csVUFBVyxHQUNqREMsT0FBT0MsZUFBZVAsRUFBUUUsRUFBV00sSUFBS04sSUFJbEQsT0FBTyxTQUFVTixFQUFhYSxFQUFZQyxHQUd4QyxPQUZJRCxHQUFZVixFQUFpQkgsRUFBWUgsVUFBV2dCLEdBQ3BEQyxHQUFhWCxFQUFpQkgsRUFBYWMsR0FDeENkLEdBZE8sR0FrQmRlLEVBQVdMLE9BQU9NLFFBQVUsU0FBVVosR0FDeEMsSUFBSyxJQUFJ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LElBQUssSUFBUSxJQUFLLElBQVEsSUFDaEQsSUFBUSxJQUFNLElBQVEsSUFBSyxJQUFRLElBQ25DLElBQVEsS0FBTSxJQUFRLEtBQ3RCLElBQVEsS0FBTSxJQUFRLEtBQ3RCLElBQVEsS0FFUixJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3ZFLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3ZFLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3ZFLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3ZFLElBQVUsSUFBTSxJQUFVLElBQzFCLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN2RSxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN2RSxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJ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b3RCLFFBSVIsU0FBbUIydkUsR0FDakJwN0YsT0FBT21CLEtBQUtpNkYsR0FBUTNzRixTQUFRLFNBQVVtRSxHQUNwQzVTLE9BQU9tQixLQUFLaTZGLEVBQU94b0YsSUFBT25FLFNBQVEsU0FBVW9rQixHQUMxQzlHLEVBQVFOLFFBQVE3WSxHQUFNaWdCLEdBQVV1b0UsRUFBT3hvRixHQUFNaWdCLFVBTG5ELElBQUk5RyxFQUFVUCxFQUF1QixFQUFRLEtBVTdDcHRCLEVBQU9DLFFBQVVBLEVBQWlCLFMsY0NqQmxDRCxFQUFPQyxRQUFVNkUsTUFBTWdOLFNBQVcsU0FBVTZ3QixHQUMxQyxNQUE4QyxrQkFBdkMvZ0MsT0FBT2IsVUFBVWtRLFNBQVMzTyxLQUFLcWdDIiwiZmlsZSI6InZlbmRvcnN+YXBwLmY4YjRiMDhlODZjNDViNjRkMTg0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJpbXBvcnQgU3R5bGlzIGZyb20gJ3N0eWxpcy9zdHlsaXMubWluJztcbmltcG9ydCBfaW5zZXJ0UnVsZVBsdWdpbiBmcm9tICdzdHlsaXMtcnVsZS1zaGVldCc7XG5pbXBvcnQgUmVhY3QsIHsgY2xvbmVFbGVtZW50LCBjcmVhdGVDb250ZXh0LCBDb21wb25lbnQsIGNyZWF0ZUVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdW5pdGxlc3MgZnJvbSAnQGVtb3Rpb24vdW5pdGxlc3MnO1xuaW1wb3J0IHsgaXNFbGVtZW50LCBpc1ZhbGlkRWxlbWVudFR5cGUsIEZvcndhcmRSZWYgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgbWVtb2l6ZSBmcm9tICdtZW1vaXplLW9uZSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHZhbGlkQXR0ciBmcm9tICdAZW1vdGlvbi9pcy1wcm9wLXZhbGlkJztcbmltcG9ydCBtZXJnZSBmcm9tICdtZXJnZS1hbnl0aGluZyc7XG5cbi8vIFxuXG52YXIgaW50ZXJsZWF2ZSA9IChmdW5jdGlvbiAoc3RyaW5ncywgaW50ZXJwb2xhdGlvbnMpIHtcbiAgdmFyIHJlc3VsdCA9IFtzdHJpbmdzWzBdXTtcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gaW50ZXJwb2xhdGlvbnMubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICByZXN1bHQucHVzaChpbnRlcnBvbGF0aW9uc1tpXSwgc3RyaW5nc1tpICsgMV0pO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iajtcbn0gOiBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xufTtcblxudmFyIGNsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn07XG5cbnZhciBjcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfTtcbn0oKTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cbnZhciBpbmhlcml0cyA9IGZ1bmN0aW9uIChzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn07XG5cbnZhciBvYmplY3RXaXRob3V0UHJvcGVydGllcyA9IGZ1bmN0aW9uIChvYmosIGtleXMpIHtcbiAgdmFyIHRhcmdldCA9IHt9O1xuXG4gIGZvciAodmFyIGkgaW4gb2JqKSB7XG4gICAgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTtcbiAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTtcbiAgICB0YXJnZXRbaV0gPSBvYmpbaV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTtcblxudmFyIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gPSBmdW5jdGlvbiAoc2VsZiwgY2FsbCkge1xuICBpZiAoIXNlbGYpIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbn07XG5cbi8vIFxudmFyIGlzUGxhaW5PYmplY3QgPSAoZnVuY3Rpb24gKHgpIHtcbiAgcmV0dXJuICh0eXBlb2YgeCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoeCkpID09PSAnb2JqZWN0JyAmJiB4LmNvbnN0cnVjdG9yID09PSBPYmplY3Q7XG59KTtcblxuLy8gXG52YXIgRU1QVFlfQVJSQVkgPSBPYmplY3QuZnJlZXplKFtdKTtcbnZhciBFTVBUWV9PQkpFQ1QgPSBPYmplY3QuZnJlZXplKHt9KTtcblxuLy8gXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHRlc3QpIHtcbiAgcmV0dXJuIHR5cGVvZiB0ZXN0ID09PSAnZnVuY3Rpb24nO1xufVxuXG4vLyBcblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZSh0YXJnZXQpIHtcbiAgcmV0dXJuIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gdHlwZW9mIHRhcmdldCA9PT0gJ3N0cmluZycgJiYgdGFyZ2V0IDogZmFsc2UpIHx8IHRhcmdldC5kaXNwbGF5TmFtZSB8fCB0YXJnZXQubmFtZSB8fCAnQ29tcG9uZW50Jztcbn1cblxuLy8gXG5mdW5jdGlvbiBpc1N0YXRlbGVzc0Z1bmN0aW9uKHRlc3QpIHtcbiAgcmV0dXJuIHR5cGVvZiB0ZXN0ID09PSAnZnVuY3Rpb24nICYmICEodGVzdC5wcm90b3R5cGUgJiYgdGVzdC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCk7XG59XG5cbi8vIFxuZnVuY3Rpb24gaXNTdHlsZWRDb21wb25lbnQodGFyZ2V0KSB7XG4gIHJldHVybiB0YXJnZXQgJiYgdHlwZW9mIHRhcmdldC5zdHlsZWRDb21wb25lbnRJZCA9PT0gJ3N0cmluZyc7XG59XG5cbi8vIFxuXG52YXIgU0NfQVRUUiA9IHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAocHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX1NDX0FUVFIgfHwgcHJvY2Vzcy5lbnYuU0NfQVRUUikgfHwgJ2RhdGEtc3R5bGVkJztcblxudmFyIFNDX1ZFUlNJT05fQVRUUiA9ICdkYXRhLXN0eWxlZC12ZXJzaW9uJztcblxudmFyIFNDX1NUUkVBTV9BVFRSID0gJ2RhdGEtc3R5bGVkLXN0cmVhbWVkJztcblxudmFyIElTX0JST1dTRVIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiAnSFRNTEVsZW1lbnQnIGluIHdpbmRvdztcblxudmFyIERJU0FCTEVfU1BFRURZID0gdHlwZW9mIFNDX0RJU0FCTEVfU1BFRURZID09PSAnYm9vbGVhbicgJiYgU0NfRElTQUJMRV9TUEVFRFkgfHwgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIChwcm9jZXNzLmVudi5SRUFDVF9BUFBfU0NfRElTQUJMRV9TUEVFRFkgfHwgcHJvY2Vzcy5lbnYuU0NfRElTQUJMRV9TUEVFRFkpIHx8IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbic7XG5cbi8vIFNoYXJlZCBlbXB0eSBleGVjdXRpb24gY29udGV4dCB3aGVuIGdlbmVyYXRpbmcgc3RhdGljIHN0eWxlc1xudmFyIFNUQVRJQ19FWEVDVVRJT05fQ09OVEVYVCA9IHt9O1xuXG4vLyBcblxuXG4vKipcbiAqIFBhcnNlIGVycm9ycy5tZCBhbmQgdHVybiBpdCBpbnRvIGEgc2ltcGxlIGhhc2ggb2YgY29kZTogbWVzc2FnZVxuICovXG52YXIgRVJST1JTID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHtcbiAgXCIxXCI6IFwiQ2Fubm90IGNyZWF0ZSBzdHlsZWQtY29tcG9uZW50IGZvciBjb21wb25lbnQ6ICVzLlxcblxcblwiLFxuICBcIjJcIjogXCJDYW4ndCBjb2xsZWN0IHN0eWxlcyBvbmNlIHlvdSd2ZSBjb25zdW1lZCBhIGBTZXJ2ZXJTdHlsZVNoZWV0YCdzIHN0eWxlcyEgYFNlcnZlclN0eWxlU2hlZXRgIGlzIGEgb25lIG9mZiBpbnN0YW5jZSBmb3IgZWFjaCBzZXJ2ZXItc2lkZSByZW5kZXIgY3ljbGUuXFxuXFxuLSBBcmUgeW91IHRyeWluZyB0byByZXVzZSBpdCBhY3Jvc3MgcmVuZGVycz9cXG4tIEFyZSB5b3UgYWNjaWRlbnRhbGx5IGNhbGxpbmcgY29sbGVjdFN0eWxlcyB0d2ljZT9cXG5cXG5cIixcbiAgXCIzXCI6IFwiU3RyZWFtaW5nIFNTUiBpcyBvbmx5IHN1cHBvcnRlZCBpbiBhIE5vZGUuanMgZW52aXJvbm1lbnQ7IFBsZWFzZSBkbyBub3QgdHJ5IHRvIGNhbGwgdGhpcyBtZXRob2QgaW4gdGhlIGJyb3dzZXIuXFxuXFxuXCIsXG4gIFwiNFwiOiBcIlRoZSBgU3R5bGVTaGVldE1hbmFnZXJgIGV4cGVjdHMgYSB2YWxpZCB0YXJnZXQgb3Igc2hlZXQgcHJvcCFcXG5cXG4tIERvZXMgdGhpcyBlcnJvciBvY2N1ciBvbiB0aGUgY2xpZW50IGFuZCBpcyB5b3VyIHRhcmdldCBmYWxzeT9cXG4tIERvZXMgdGhpcyBlcnJvciBvY2N1ciBvbiB0aGUgc2VydmVyIGFuZCBpcyB0aGUgc2hlZXQgZmFsc3k/XFxuXFxuXCIsXG4gIFwiNVwiOiBcIlRoZSBjbG9uZSBtZXRob2QgY2Fubm90IGJlIHVzZWQgb24gdGhlIGNsaWVudCFcXG5cXG4tIEFyZSB5b3UgcnVubmluZyBpbiBhIGNsaWVudC1saWtlIGVudmlyb25tZW50IG9uIHRoZSBzZXJ2ZXI/XFxuLSBBcmUgeW91IHRyeWluZyB0byBydW4gU1NSIG9uIHRoZSBjbGllbnQ/XFxuXFxuXCIsXG4gIFwiNlwiOiBcIlRyeWluZyB0byBpbnNlcnQgYSBuZXcgc3R5bGUgdGFnLCBidXQgdGhlIGdpdmVuIE5vZGUgaXMgdW5tb3VudGVkIVxcblxcbi0gQXJlIHlvdSB1c2luZyBhIGN1c3RvbSB0YXJnZXQgdGhhdCBpc24ndCBtb3VudGVkP1xcbi0gRG9lcyB5b3VyIGRvY3VtZW50IG5vdCBoYXZlIGEgdmFsaWQgaGVhZCBlbGVtZW50P1xcbi0gSGF2ZSB5b3UgYWNjaWRlbnRhbGx5IHJlbW92ZWQgYSBzdHlsZSB0YWcgbWFudWFsbHk/XFxuXFxuXCIsXG4gIFwiN1wiOiBcIlRoZW1lUHJvdmlkZXI6IFBsZWFzZSByZXR1cm4gYW4gb2JqZWN0IGZyb20geW91ciBcXFwidGhlbWVcXFwiIHByb3AgZnVuY3Rpb24sIGUuZy5cXG5cXG5gYGBqc1xcbnRoZW1lPXsoKSA9PiAoe30pfVxcbmBgYFxcblxcblwiLFxuICBcIjhcIjogXCJUaGVtZVByb3ZpZGVyOiBQbGVhc2UgbWFrZSB5b3VyIFxcXCJ0aGVtZVxcXCIgcHJvcCBhbiBvYmplY3QuXFxuXFxuXCIsXG4gIFwiOVwiOiBcIk1pc3NpbmcgZG9jdW1lbnQgYDxoZWFkPmBcXG5cXG5cIixcbiAgXCIxMFwiOiBcIkNhbm5vdCBmaW5kIGEgU3R5bGVTaGVldCBpbnN0YW5jZS4gVXN1YWxseSB0aGlzIGhhcHBlbnMgaWYgdGhlcmUgYXJlIG11bHRpcGxlIGNvcGllcyBvZiBzdHlsZWQtY29tcG9uZW50cyBsb2FkZWQgYXQgb25jZS4gQ2hlY2sgb3V0IHRoaXMgaXNzdWUgZm9yIGhvdyB0byB0cm91Ymxlc2hvb3QgYW5kIGZpeCB0aGUgY29tbW9uIGNhc2VzIHdoZXJlIHRoaXMgc2l0dWF0aW9uIGNhbiBoYXBwZW46IGh0dHBzOi8vZ2l0aHViLmNvbS9zdHlsZWQtY29tcG9uZW50cy9zdHlsZWQtY29tcG9uZW50cy9pc3N1ZXMvMTk0MSNpc3N1ZWNvbW1lbnQtNDE3ODYyMDIxXFxuXFxuXCIsXG4gIFwiMTFcIjogXCJfVGhpcyBlcnJvciB3YXMgcmVwbGFjZWQgd2l0aCBhIGRldi10aW1lIHdhcm5pbmcsIGl0IHdpbGwgYmUgZGVsZXRlZCBmb3IgdjQgZmluYWwuXyBbY3JlYXRlR2xvYmFsU3R5bGVdIHJlY2VpdmVkIGNoaWxkcmVuIHdoaWNoIHdpbGwgbm90IGJlIHJlbmRlcmVkLiBQbGVhc2UgdXNlIHRoZSBjb21wb25lbnQgd2l0aG91dCBwYXNzaW5nIGNoaWxkcmVuIGVsZW1lbnRzLlxcblxcblwiLFxuICBcIjEyXCI6IFwiSXQgc2VlbXMgeW91IGFyZSBpbnRlcnBvbGF0aW5nIGEga2V5ZnJhbWUgZGVjbGFyYXRpb24gKCVzKSBpbnRvIGFuIHVudGFnZ2VkIHN0cmluZy4gVGhpcyB3YXMgc3VwcG9ydGVkIGluIHN0eWxlZC1jb21wb25lbnRzIHYzLCBidXQgaXMgbm90IGxvbmdlciBzdXBwb3J0ZWQgaW4gdjQgYXMga2V5ZnJhbWVzIGFyZSBub3cgaW5qZWN0ZWQgb24tZGVtYW5kLiBQbGVhc2Ugd3JhcCB5b3VyIHN0cmluZyBpbiB0aGUgY3NzXFxcXGBcXFxcYCBoZWxwZXIgKHNlZSBodHRwczovL3d3dy5zdHlsZWQtY29tcG9uZW50cy5jb20vZG9jcy9hcGkjY3NzKSwgd2hpY2ggZW5zdXJlcyB0aGUgc3R5bGVzIGFyZSBpbmplY3RlZCBjb3JyZWN0bHkuXFxuXFxuXCIsXG4gIFwiMTNcIjogXCIlcyBpcyBub3QgYSBzdHlsZWQgY29tcG9uZW50IGFuZCBjYW5ub3QgYmUgcmVmZXJyZWQgdG8gdmlhIGNvbXBvbmVudCBzZWxlY3Rvci4gU2VlIGh0dHBzOi8vd3d3LnN0eWxlZC1jb21wb25lbnRzLmNvbS9kb2NzL2FkdmFuY2VkI3JlZmVycmluZy10by1vdGhlci1jb21wb25lbnRzIGZvciBtb3JlIGRldGFpbHMuXFxuXCJcbn0gOiB7fTtcblxuLyoqXG4gKiBzdXBlciBiYXNpYyB2ZXJzaW9uIG9mIHNwcmludGZcbiAqL1xuZnVuY3Rpb24gZm9ybWF0KCkge1xuICB2YXIgYSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXTtcbiAgdmFyIGIgPSBbXTtcblxuICBmb3IgKHZhciBjID0gMSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDsgYyA8IGxlbjsgYyArPSAxKSB7XG4gICAgYi5wdXNoKGFyZ3VtZW50cy5sZW5ndGggPD0gYyA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1tjXSk7XG4gIH1cblxuICBiLmZvckVhY2goZnVuY3Rpb24gKGQpIHtcbiAgICBhID0gYS5yZXBsYWNlKC8lW2Etel0vLCBkKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGE7XG59XG5cbi8qKlxuICogQ3JlYXRlIGFuIGVycm9yIGZpbGUgb3V0IG9mIGVycm9ycy5tZCBmb3IgZGV2ZWxvcG1lbnQgYW5kIGEgc2ltcGxlIHdlYiBsaW5rIHRvIHRoZSBmdWxsIGVycm9yc1xuICogaW4gcHJvZHVjdGlvbiBtb2RlLlxuICovXG5cbnZhciBTdHlsZWRDb21wb25lbnRzRXJyb3IgPSBmdW5jdGlvbiAoX0Vycm9yKSB7XG4gIGluaGVyaXRzKFN0eWxlZENvbXBvbmVudHNFcnJvciwgX0Vycm9yKTtcblxuICBmdW5jdGlvbiBTdHlsZWRDb21wb25lbnRzRXJyb3IoY29kZSkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFN0eWxlZENvbXBvbmVudHNFcnJvcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgaW50ZXJwb2xhdGlvbnMgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBpbnRlcnBvbGF0aW9uc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBfdGhpcyA9IHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0Vycm9yLmNhbGwodGhpcywgJ0FuIGVycm9yIG9jY3VycmVkLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3N0eWxlZC1jb21wb25lbnRzL3N0eWxlZC1jb21wb25lbnRzL2Jsb2IvbWFzdGVyL3BhY2thZ2VzL3N0eWxlZC1jb21wb25lbnRzL3NyYy91dGlscy9lcnJvcnMubWQjJyArIGNvZGUgKyAnIGZvciBtb3JlIGluZm9ybWF0aW9uLicgKyAoaW50ZXJwb2xhdGlvbnMubGVuZ3RoID4gMCA/ICcgQWRkaXRpb25hbCBhcmd1bWVudHM6ICcgKyBpbnRlcnBvbGF0aW9ucy5qb2luKCcsICcpIDogJycpKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfdGhpcyA9IHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0Vycm9yLmNhbGwodGhpcywgZm9ybWF0LmFwcGx5KHVuZGVmaW5lZCwgW0VSUk9SU1tjb2RlXV0uY29uY2F0KGludGVycG9sYXRpb25zKSkudHJpbSgpKSk7XG4gICAgfVxuICAgIHJldHVybiBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzKTtcbiAgfVxuXG4gIHJldHVybiBTdHlsZWRDb21wb25lbnRzRXJyb3I7XG59KEVycm9yKTtcblxuLy8gXG52YXIgU0NfQ09NUE9ORU5UX0lEID0gL15bXlxcU1xcbl0qP1xcL1xcKiBzYy1jb21wb25lbnQtaWQ6XFxzKihcXFMrKVxccytcXCpcXC8vZ207XG5cbnZhciBleHRyYWN0Q29tcHMgPSAoZnVuY3Rpb24gKG1heWJlQ1NTKSB7XG4gIHZhciBjc3MgPSAnJyArIChtYXliZUNTUyB8fCAnJyk7IC8vIERlZmluaXRlbHkgYSBzdHJpbmcsIGFuZCBhIGNsb25lXG4gIHZhciBleGlzdGluZ0NvbXBvbmVudHMgPSBbXTtcbiAgY3NzLnJlcGxhY2UoU0NfQ09NUE9ORU5UX0lELCBmdW5jdGlvbiAobWF0Y2gsIGNvbXBvbmVudElkLCBtYXRjaEluZGV4KSB7XG4gICAgZXhpc3RpbmdDb21wb25lbnRzLnB1c2goeyBjb21wb25lbnRJZDogY29tcG9uZW50SWQsIG1hdGNoSW5kZXg6IG1hdGNoSW5kZXggfSk7XG4gICAgcmV0dXJuIG1hdGNoO1xuICB9KTtcbiAgcmV0dXJuIGV4aXN0aW5nQ29tcG9uZW50cy5tYXAoZnVuY3Rpb24gKF9yZWYsIGkpIHtcbiAgICB2YXIgY29tcG9uZW50SWQgPSBfcmVmLmNvbXBvbmVudElkLFxuICAgICAgICBtYXRjaEluZGV4ID0gX3JlZi5tYXRjaEluZGV4O1xuXG4gICAgdmFyIG5leHRDb21wID0gZXhpc3RpbmdDb21wb25lbnRzW2kgKyAxXTtcbiAgICB2YXIgY3NzRnJvbURPTSA9IG5leHRDb21wID8gY3NzLnNsaWNlKG1hdGNoSW5kZXgsIG5leHRDb21wLm1hdGNoSW5kZXgpIDogY3NzLnNsaWNlKG1hdGNoSW5kZXgpO1xuICAgIHJldHVybiB7IGNvbXBvbmVudElkOiBjb21wb25lbnRJZCwgY3NzRnJvbURPTTogY3NzRnJvbURPTSB9O1xuICB9KTtcbn0pO1xuXG4vLyBcblxudmFyIENPTU1FTlRfUkVHRVggPSAvXlxccypcXC9cXC8uKiQvZ207XG5cbi8vIE5PVEU6IFRoaXMgc3R5bGlzIGluc3RhbmNlIGlzIG9ubHkgdXNlZCB0byBzcGxpdCBydWxlcyBmcm9tIFNTUidkIHN0eWxlIHRhZ3NcbnZhciBzdHlsaXNTcGxpdHRlciA9IG5ldyBTdHlsaXMoe1xuICBnbG9iYWw6IGZhbHNlLFxuICBjYXNjYWRlOiB0cnVlLFxuICBrZXlmcmFtZTogZmFsc2UsXG4gIHByZWZpeDogZmFsc2UsXG4gIGNvbXByZXNzOiBmYWxzZSxcbiAgc2VtaWNvbG9uOiB0cnVlXG59KTtcblxudmFyIHN0eWxpcyA9IG5ldyBTdHlsaXMoe1xuICBnbG9iYWw6IGZhbHNlLFxuICBjYXNjYWRlOiB0cnVlLFxuICBrZXlmcmFtZTogZmFsc2UsXG4gIHByZWZpeDogdHJ1ZSxcbiAgY29tcHJlc3M6IGZhbHNlLFxuICBzZW1pY29sb246IGZhbHNlIC8vIE5PVEU6IFRoaXMgbWVhbnMgXCJhdXRvY29tcGxldGUgbWlzc2luZyBzZW1pY29sb25zXCJcbn0pO1xuXG4vLyBXcmFwIGBpbnNlcnRSdWxlUGx1Z2luIHRvIGJ1aWxkIGEgbGlzdCBvZiBydWxlcyxcbi8vIGFuZCB0aGVuIG1ha2Ugb3VyIG93biBwbHVnaW4gdG8gcmV0dXJuIHRoZSBydWxlcy4gVGhpc1xuLy8gbWFrZXMgaXQgZWFzaWVyIHRvIGhvb2sgaW50byB0aGUgZXhpc3RpbmcgU1NSIGFyY2hpdGVjdHVyZVxuXG52YXIgcGFyc2luZ1J1bGVzID0gW107XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxudmFyIHJldHVyblJ1bGVzUGx1Z2luID0gZnVuY3Rpb24gcmV0dXJuUnVsZXNQbHVnaW4oY29udGV4dCkge1xuICBpZiAoY29udGV4dCA9PT0gLTIpIHtcbiAgICB2YXIgcGFyc2VkUnVsZXMgPSBwYXJzaW5nUnVsZXM7XG4gICAgcGFyc2luZ1J1bGVzID0gW107XG4gICAgcmV0dXJuIHBhcnNlZFJ1bGVzO1xuICB9XG59O1xuXG52YXIgcGFyc2VSdWxlc1BsdWdpbiA9IF9pbnNlcnRSdWxlUGx1Z2luKGZ1bmN0aW9uIChydWxlKSB7XG4gIHBhcnNpbmdSdWxlcy5wdXNoKHJ1bGUpO1xufSk7XG5cbnZhciBfY29tcG9uZW50SWQgPSB2b2lkIDA7XG52YXIgX3NlbGVjdG9yID0gdm9pZCAwO1xudmFyIF9zZWxlY3RvclJlZ2V4cCA9IHZvaWQgMDtcblxudmFyIHNlbGZSZWZlcmVuY2VSZXBsYWNlciA9IGZ1bmN0aW9uIHNlbGZSZWZlcmVuY2VSZXBsYWNlcihtYXRjaCwgb2Zmc2V0LCBzdHJpbmcpIHtcbiAgaWYgKFxuICAvLyB0aGUgZmlyc3Qgc2VsZi1yZWYgaXMgYWx3YXlzIHVudG91Y2hlZFxuICBvZmZzZXQgPiAwICYmXG4gIC8vIHRoZXJlIHNob3VsZCBiZSBhdCBsZWFzdCB0d28gc2VsZi1yZWZzIHRvIGRvIGEgcmVwbGFjZW1lbnQgKC5iID4gLmIpXG4gIHN0cmluZy5zbGljZSgwLCBvZmZzZXQpLmluZGV4T2YoX3NlbGVjdG9yKSAhPT0gLTEgJiZcbiAgLy8gbm8gY29uc2VjdXRpdmUgc2VsZiByZWZzICguYi5iKTsgdGhhdCBpcyBhIHByZWNlZGVuY2UgYm9vc3QgYW5kIHRyZWF0ZWQgZGlmZmVyZW50bHlcbiAgc3RyaW5nLnNsaWNlKG9mZnNldCAtIF9zZWxlY3Rvci5sZW5ndGgsIG9mZnNldCkgIT09IF9zZWxlY3Rvcikge1xuICAgIHJldHVybiAnLicgKyBfY29tcG9uZW50SWQ7XG4gIH1cblxuICByZXR1cm4gbWF0Y2g7XG59O1xuXG4vKipcbiAqIFdoZW4gd3JpdGluZyBhIHN0eWxlIGxpa2VcbiAqXG4gKiAmICsgJiB7XG4gKiAgIGNvbG9yOiByZWQ7XG4gKiB9XG4gKlxuICogVGhlIHNlY29uZCBhbXBlcnNhbmQgc2hvdWxkIGJlIGEgcmVmZXJlbmNlIHRvIHRoZSBzdGF0aWMgY29tcG9uZW50IGNsYXNzLiBzdHlsaXNcbiAqIGhhcyBubyBrbm93bGVkZ2Ugb2Ygc3RhdGljIGNsYXNzIHNvIHdlIGhhdmUgdG8gaW50ZWxsaWdlbnRseSByZXBsYWNlIHRoZSBiYXNlIHNlbGVjdG9yLlxuICovXG52YXIgc2VsZlJlZmVyZW5jZVJlcGxhY2VtZW50UGx1Z2luID0gZnVuY3Rpb24gc2VsZlJlZmVyZW5jZVJlcGxhY2VtZW50UGx1Z2luKGNvbnRleHQsIF8sIHNlbGVjdG9ycykge1xuICBpZiAoY29udGV4dCA9PT0gMiAmJiBzZWxlY3RvcnMubGVuZ3RoICYmIHNlbGVjdG9yc1swXS5sYXN0SW5kZXhPZihfc2VsZWN0b3IpID4gMCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHNlbGVjdG9yc1swXSA9IHNlbGVjdG9yc1swXS5yZXBsYWNlKF9zZWxlY3RvclJlZ2V4cCwgc2VsZlJlZmVyZW5jZVJlcGxhY2VyKTtcbiAgfVxufTtcblxuc3R5bGlzLnVzZShbc2VsZlJlZmVyZW5jZVJlcGxhY2VtZW50UGx1Z2luLCBwYXJzZVJ1bGVzUGx1Z2luLCByZXR1cm5SdWxlc1BsdWdpbl0pO1xuc3R5bGlzU3BsaXR0ZXIudXNlKFtwYXJzZVJ1bGVzUGx1Z2luLCByZXR1cm5SdWxlc1BsdWdpbl0pO1xuXG52YXIgc3BsaXRCeVJ1bGVzID0gZnVuY3Rpb24gc3BsaXRCeVJ1bGVzKGNzcykge1xuICByZXR1cm4gc3R5bGlzU3BsaXR0ZXIoJycsIGNzcyk7XG59O1xuXG5mdW5jdGlvbiBzdHJpbmdpZnlSdWxlcyhydWxlcywgc2VsZWN0b3IsIHByZWZpeCkge1xuICB2YXIgY29tcG9uZW50SWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6ICcmJztcblxuICB2YXIgZmxhdENTUyA9IHJ1bGVzLmpvaW4oJycpLnJlcGxhY2UoQ09NTUVOVF9SRUdFWCwgJycpOyAvLyByZXBsYWNlIEpTIGNvbW1lbnRzXG5cbiAgdmFyIGNzc1N0ciA9IHNlbGVjdG9yICYmIHByZWZpeCA/IHByZWZpeCArICcgJyArIHNlbGVjdG9yICsgJyB7ICcgKyBmbGF0Q1NTICsgJyB9JyA6IGZsYXRDU1M7XG5cbiAgLy8gc3R5bGlzIGhhcyBubyBjb25jZXB0IG9mIHN0YXRlIHRvIGJlIHBhc3NlZCB0byBwbHVnaW5zXG4gIC8vIGJ1dCBzaW5jZSBKUyBpcyBzaW5nbGU9dGhyZWFkZWQsIHdlIGNhbiByZWx5IG9uIHRoYXQgdG8gZW5zdXJlXG4gIC8vIHRoZXNlIHByb3BlcnRpZXMgc3RheSBpbiBzeW5jIHdpdGggdGhlIGN1cnJlbnQgc3R5bGlzIHJ1blxuICBfY29tcG9uZW50SWQgPSBjb21wb25lbnRJZDtcbiAgX3NlbGVjdG9yID0gc2VsZWN0b3I7XG4gIF9zZWxlY3RvclJlZ2V4cCA9IG5ldyBSZWdFeHAoJ1xcXFwnICsgX3NlbGVjdG9yICsgJ1xcXFxiJywgJ2cnKTtcblxuICByZXR1cm4gc3R5bGlzKHByZWZpeCB8fCAhc2VsZWN0b3IgPyAnJyA6IHNlbGVjdG9yLCBjc3NTdHIpO1xufVxuXG4vLyBcbi8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSwgbm8tdW5kZWYgKi9cblxudmFyIGdldE5vbmNlID0gKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG59KTtcblxuLy8gXG4vKiBUaGVzZSBhcmUgaGVscGVycyBmb3IgdGhlIFN0eWxlVGFncyB0byBrZWVwIHRyYWNrIG9mIHRoZSBpbmplY3RlZFxuICogcnVsZSBuYW1lcyBmb3IgZWFjaCAoY29tcG9uZW50KSBJRCB0aGF0IHRoZXkncmUga2VlcGluZyB0cmFjayBvZi5cbiAqIFRoZXkncmUgY3J1Y2lhbCBmb3IgZGV0ZWN0aW5nIHdoZXRoZXIgYSBuYW1lIGhhcyBhbHJlYWR5IGJlZW5cbiAqIGluamVjdGVkLlxuICogKFRoaXMgZXhjbHVkZXMgcmVoeWRyYXRlZCBuYW1lcykgKi9cblxuLyogYWRkcyBhIG5ldyBJRDpuYW1lIHBhaXJpbmcgdG8gYSBuYW1lcyBkaWN0aW9uYXJ5ICovXG52YXIgYWRkTmFtZUZvcklkID0gZnVuY3Rpb24gYWRkTmFtZUZvcklkKG5hbWVzLCBpZCwgbmFtZSkge1xuICBpZiAobmFtZSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHZhciBuYW1lc0ZvcklkID0gbmFtZXNbaWRdIHx8IChuYW1lc1tpZF0gPSBPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgICBuYW1lc0ZvcklkW25hbWVdID0gdHJ1ZTtcbiAgfVxufTtcblxuLyogcmVzZXRzIGFuIElEIGVudGlyZWx5IGJ5IG92ZXJ3cml0aW5nIGl0IGluIHRoZSBkaWN0aW9uYXJ5ICovXG52YXIgcmVzZXRJZE5hbWVzID0gZnVuY3Rpb24gcmVzZXRJZE5hbWVzKG5hbWVzLCBpZCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgbmFtZXNbaWRdID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbn07XG5cbi8qIGZhY3RvcnkgZm9yIGEgbmFtZXMgZGljdGlvbmFyeSBjaGVja2luZyB0aGUgZXhpc3RhbmNlIG9mIGFuIElEOm5hbWUgcGFpcmluZyAqL1xudmFyIGhhc05hbWVGb3JJZCA9IGZ1bmN0aW9uIGhhc05hbWVGb3JJZChuYW1lcykge1xuICByZXR1cm4gZnVuY3Rpb24gKGlkLCBuYW1lKSB7XG4gICAgcmV0dXJuIG5hbWVzW2lkXSAhPT0gdW5kZWZpbmVkICYmIG5hbWVzW2lkXVtuYW1lXTtcbiAgfTtcbn07XG5cbi8qIHN0cmluZ2lmaWVzIG5hbWVzIGZvciB0aGUgaHRtbC9lbGVtZW50IG91dHB1dCAqL1xudmFyIHN0cmluZ2lmeU5hbWVzID0gZnVuY3Rpb24gc3RyaW5naWZ5TmFtZXMobmFtZXMpIHtcbiAgdmFyIHN0ciA9ICcnO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluXG4gIGZvciAodmFyIGlkIGluIG5hbWVzKSB7XG4gICAgc3RyICs9IE9iamVjdC5rZXlzKG5hbWVzW2lkXSkuam9pbignICcpICsgJyAnO1xuICB9XG4gIHJldHVybiBzdHIudHJpbSgpO1xufTtcblxuLyogY2xvbmVzIHRoZSBuZXN0ZWQgbmFtZXMgZGljdGlvbmFyeSAqL1xudmFyIGNsb25lTmFtZXMgPSBmdW5jdGlvbiBjbG9uZU5hbWVzKG5hbWVzKSB7XG4gIHZhciBjbG9uZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgZm9yICh2YXIgaWQgaW4gbmFtZXMpIHtcbiAgICBjbG9uZVtpZF0gPSBfZXh0ZW5kcyh7fSwgbmFtZXNbaWRdKTtcbiAgfVxuICByZXR1cm4gY2xvbmU7XG59O1xuXG4vLyBcblxuLyogVGhlc2UgYXJlIGhlbHBlcnMgdGhhdCBkZWFsIHdpdGggdGhlIGluc2VydFJ1bGUgKGFrYSBzcGVlZHkpIEFQSVxuICogVGhleSBhcmUgdXNlZCBpbiB0aGUgU3R5bGVUYWdzIGFuZCBzcGVjaWZpY2FsbHkgdGhlIHNwZWVkeSB0YWdcbiAqL1xuXG4vKiByZXRyaWV2ZSBhIHNoZWV0IGZvciBhIGdpdmVuIHN0eWxlIHRhZyAqL1xudmFyIHNoZWV0Rm9yVGFnID0gZnVuY3Rpb24gc2hlZXRGb3JUYWcodGFnKSB7XG4gIC8vICRGbG93Rml4TWVcbiAgaWYgKHRhZy5zaGVldCkgcmV0dXJuIHRhZy5zaGVldDtcblxuICAvKiBGaXJlZm94IHF1aXJrIHJlcXVpcmVzIHVzIHRvIHN0ZXAgdGhyb3VnaCBhbGwgc3R5bGVzaGVldHMgdG8gZmluZCBvbmUgb3duZWQgYnkgdGhlIGdpdmVuIHRhZyAqL1xuICB2YXIgc2l6ZSA9IGRvY3VtZW50LnN0eWxlU2hlZXRzLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyBpICs9IDEpIHtcbiAgICB2YXIgc2hlZXQgPSBkb2N1bWVudC5zdHlsZVNoZWV0c1tpXTtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgaWYgKHNoZWV0Lm93bmVyTm9kZSA9PT0gdGFnKSByZXR1cm4gc2hlZXQ7XG4gIH1cblxuICAvKiB3ZSBzaG91bGQgYWx3YXlzIGJlIGFibGUgdG8gZmluZCBhIHRhZyAqL1xuICB0aHJvdyBuZXcgU3R5bGVkQ29tcG9uZW50c0Vycm9yKDEwKTtcbn07XG5cbi8qIGluc2VydCBhIHJ1bGUgc2FmZWx5IGFuZCByZXR1cm4gd2hldGhlciBpdCB3YXMgYWN0dWFsbHkgaW5qZWN0ZWQgKi9cbnZhciBzYWZlSW5zZXJ0UnVsZSA9IGZ1bmN0aW9uIHNhZmVJbnNlcnRSdWxlKHNoZWV0LCBjc3NSdWxlLCBpbmRleCkge1xuICAvKiBhYm9ydCBlYXJseSBpZiBjc3NSdWxlIHN0cmluZyBpcyBmYWxzeSAqL1xuICBpZiAoIWNzc1J1bGUpIHJldHVybiBmYWxzZTtcblxuICB2YXIgbWF4SW5kZXggPSBzaGVldC5jc3NSdWxlcy5sZW5ndGg7XG5cbiAgdHJ5IHtcbiAgICAvKiB1c2UgaW5zZXJ0UnVsZSBhbmQgY2FwIHBhc3NlZCBpbmRleCB3aXRoIG1heEluZGV4IChubyBvZiBjc3NSdWxlcykgKi9cbiAgICBzaGVldC5pbnNlcnRSdWxlKGNzc1J1bGUsIGluZGV4IDw9IG1heEluZGV4ID8gaW5kZXggOiBtYXhJbmRleCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8qIGFueSBlcnJvciBpbmRpY2F0ZXMgYW4gaW52YWxpZCBydWxlICovXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vKiBkZWxldGVzIGBzaXplYCBydWxlcyBzdGFydGluZyBmcm9tIGByZW1vdmFsSW5kZXhgICovXG52YXIgZGVsZXRlUnVsZXMgPSBmdW5jdGlvbiBkZWxldGVSdWxlcyhzaGVldCwgcmVtb3ZhbEluZGV4LCBzaXplKSB7XG4gIHZhciBsb3dlckJvdW5kID0gcmVtb3ZhbEluZGV4IC0gc2l6ZTtcbiAgZm9yICh2YXIgaSA9IHJlbW92YWxJbmRleDsgaSA+IGxvd2VyQm91bmQ7IGkgLT0gMSkge1xuICAgIHNoZWV0LmRlbGV0ZVJ1bGUoaSk7XG4gIH1cbn07XG5cbi8vIFxuXG4vKiB0aGlzIG1hcmtlciBzZXBhcmF0ZXMgY29tcG9uZW50IHN0eWxlcyBhbmQgaXMgaW1wb3J0YW50IGZvciByZWh5ZHJhdGlvbiAqL1xudmFyIG1ha2VUZXh0TWFya2VyID0gZnVuY3Rpb24gbWFrZVRleHRNYXJrZXIoaWQpIHtcbiAgcmV0dXJuICdcXG4vKiBzYy1jb21wb25lbnQtaWQ6ICcgKyBpZCArICcgKi9cXG4nO1xufTtcblxuLyogYWRkIHVwIGFsbCBudW1iZXJzIGluIGFycmF5IHVwIHVudGlsIGFuZCBpbmNsdWRpbmcgdGhlIGluZGV4ICovXG52YXIgYWRkVXBVbnRpbEluZGV4ID0gZnVuY3Rpb24gYWRkVXBVbnRpbEluZGV4KHNpemVzLCBpbmRleCkge1xuICB2YXIgdG90YWxVcFRvSW5kZXggPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8PSBpbmRleDsgaSArPSAxKSB7XG4gICAgdG90YWxVcFRvSW5kZXggKz0gc2l6ZXNbaV07XG4gIH1cblxuICByZXR1cm4gdG90YWxVcFRvSW5kZXg7XG59O1xuXG4vKiBjcmVhdGUgYSBuZXcgc3R5bGUgdGFnIGFmdGVyIGxhc3RFbCAqL1xudmFyIG1ha2VTdHlsZVRhZyA9IGZ1bmN0aW9uIG1ha2VTdHlsZVRhZyh0YXJnZXQsIHRhZ0VsLCBpbnNlcnRCZWZvcmUpIHtcbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgZWwuc2V0QXR0cmlidXRlKFNDX0FUVFIsICcnKTtcbiAgZWwuc2V0QXR0cmlidXRlKFNDX1ZFUlNJT05fQVRUUiwgXCI0LjMuMlwiKTtcblxuICB2YXIgbm9uY2UgPSBnZXROb25jZSgpO1xuICBpZiAobm9uY2UpIHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ25vbmNlJywgbm9uY2UpO1xuICB9XG5cbiAgLyogV29yayBhcm91bmQgaW5zZXJ0UnVsZSBxdWlyayBpbiBFZGdlSFRNTCAqL1xuICBlbC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJykpO1xuXG4gIGlmICh0YXJnZXQgJiYgIXRhZ0VsKSB7XG4gICAgLyogQXBwZW5kIHRvIHRhcmdldCB3aGVuIG5vIHByZXZpb3VzIGVsZW1lbnQgd2FzIHBhc3NlZCAqL1xuICAgIHRhcmdldC5hcHBlbmRDaGlsZChlbCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCF0YWdFbCB8fCAhdGFyZ2V0IHx8ICF0YWdFbC5wYXJlbnROb2RlKSB7XG4gICAgICB0aHJvdyBuZXcgU3R5bGVkQ29tcG9uZW50c0Vycm9yKDYpO1xuICAgIH1cblxuICAgIC8qIEluc2VydCBuZXcgc3R5bGUgdGFnIGFmdGVyIHRoZSBwcmV2aW91cyBvbmUgKi9cbiAgICB0YWdFbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlbCwgaW5zZXJ0QmVmb3JlID8gdGFnRWwgOiB0YWdFbC5uZXh0U2libGluZyk7XG4gIH1cblxuICByZXR1cm4gZWw7XG59O1xuXG4vKiB0YWtlcyBhIGNzcyBmYWN0b3J5IGZ1bmN0aW9uIGFuZCBvdXRwdXRzIGFuIGh0bWwgc3R5bGVkIHRhZyBmYWN0b3J5ICovXG52YXIgd3JhcEFzSHRtbFRhZyA9IGZ1bmN0aW9uIHdyYXBBc0h0bWxUYWcoY3NzLCBuYW1lcykge1xuICByZXR1cm4gZnVuY3Rpb24gKGFkZGl0aW9uYWxBdHRycykge1xuICAgIHZhciBub25jZSA9IGdldE5vbmNlKCk7XG4gICAgdmFyIGF0dHJzID0gW25vbmNlICYmICdub25jZT1cIicgKyBub25jZSArICdcIicsIFNDX0FUVFIgKyAnPVwiJyArIHN0cmluZ2lmeU5hbWVzKG5hbWVzKSArICdcIicsIFNDX1ZFUlNJT05fQVRUUiArICc9XCInICsgXCI0LjMuMlwiICsgJ1wiJywgYWRkaXRpb25hbEF0dHJzXTtcblxuICAgIHZhciBodG1sQXR0ciA9IGF0dHJzLmZpbHRlcihCb29sZWFuKS5qb2luKCcgJyk7XG4gICAgcmV0dXJuICc8c3R5bGUgJyArIGh0bWxBdHRyICsgJz4nICsgY3NzKCkgKyAnPC9zdHlsZT4nO1xuICB9O1xufTtcblxuLyogdGFrZXMgYSBjc3MgZmFjdG9yeSBmdW5jdGlvbiBhbmQgb3V0cHV0cyBhbiBlbGVtZW50IGZhY3RvcnkgKi9cbnZhciB3cmFwQXNFbGVtZW50ID0gZnVuY3Rpb24gd3JhcEFzRWxlbWVudChjc3MsIG5hbWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9wcm9wcztcblxuICAgIHZhciBwcm9wcyA9IChfcHJvcHMgPSB7fSwgX3Byb3BzW1NDX0FUVFJdID0gc3RyaW5naWZ5TmFtZXMobmFtZXMpLCBfcHJvcHNbU0NfVkVSU0lPTl9BVFRSXSA9IFwiNC4zLjJcIiwgX3Byb3BzKTtcblxuICAgIHZhciBub25jZSA9IGdldE5vbmNlKCk7XG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICBwcm9wcy5ub25jZSA9IG5vbmNlO1xuICAgIH1cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9uby1kYW5nZXJcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgnc3R5bGUnLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHsgX19odG1sOiBjc3MoKSB9IH0pKTtcbiAgfTtcbn07XG5cbnZhciBnZXRJZHNGcm9tTWFya2Vyc0ZhY3RvcnkgPSBmdW5jdGlvbiBnZXRJZHNGcm9tTWFya2Vyc0ZhY3RvcnkobWFya2Vycykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhtYXJrZXJzKTtcbiAgfTtcbn07XG5cbi8qIHNwZWVkeSB0YWdzIHV0aWxpc2UgaW5zZXJ0UnVsZSAqL1xudmFyIG1ha2VTcGVlZHlUYWcgPSBmdW5jdGlvbiBtYWtlU3BlZWR5VGFnKGVsLCBnZXRJbXBvcnRSdWxlVGFnKSB7XG4gIHZhciBuYW1lcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBtYXJrZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIHNpemVzID0gW107XG5cbiAgdmFyIGV4dHJhY3RJbXBvcnQgPSBnZXRJbXBvcnRSdWxlVGFnICE9PSB1bmRlZmluZWQ7XG4gIC8qIGluZGljYXRlcyB3aGV0aGVyIGdldEltcG9ydFJ1bGVUYWcgd2FzIGNhbGxlZCAqL1xuICB2YXIgdXNlZEltcG9ydFJ1bGVUYWcgPSBmYWxzZTtcblxuICB2YXIgaW5zZXJ0TWFya2VyID0gZnVuY3Rpb24gaW5zZXJ0TWFya2VyKGlkKSB7XG4gICAgdmFyIHByZXYgPSBtYXJrZXJzW2lkXTtcbiAgICBpZiAocHJldiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gcHJldjtcbiAgICB9XG5cbiAgICBtYXJrZXJzW2lkXSA9IHNpemVzLmxlbmd0aDtcbiAgICBzaXplcy5wdXNoKDApO1xuICAgIHJlc2V0SWROYW1lcyhuYW1lcywgaWQpO1xuXG4gICAgcmV0dXJuIG1hcmtlcnNbaWRdO1xuICB9O1xuXG4gIHZhciBpbnNlcnRSdWxlcyA9IGZ1bmN0aW9uIGluc2VydFJ1bGVzKGlkLCBjc3NSdWxlcywgbmFtZSkge1xuICAgIHZhciBtYXJrZXIgPSBpbnNlcnRNYXJrZXIoaWQpO1xuICAgIHZhciBzaGVldCA9IHNoZWV0Rm9yVGFnKGVsKTtcbiAgICB2YXIgaW5zZXJ0SW5kZXggPSBhZGRVcFVudGlsSW5kZXgoc2l6ZXMsIG1hcmtlcik7XG5cbiAgICB2YXIgaW5qZWN0ZWRSdWxlcyA9IDA7XG4gICAgdmFyIGltcG9ydFJ1bGVzID0gW107XG4gICAgdmFyIGNzc1J1bGVzU2l6ZSA9IGNzc1J1bGVzLmxlbmd0aDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY3NzUnVsZXNTaXplOyBpICs9IDEpIHtcbiAgICAgIHZhciBjc3NSdWxlID0gY3NzUnVsZXNbaV07XG4gICAgICB2YXIgbWF5SGF2ZUltcG9ydCA9IGV4dHJhY3RJbXBvcnQ7IC8qIEBpbXBvcnQgcnVsZXMgYXJlIHJlb3JkZXJlZCB0byBhcHBlYXIgZmlyc3QgKi9cbiAgICAgIGlmIChtYXlIYXZlSW1wb3J0ICYmIGNzc1J1bGUuaW5kZXhPZignQGltcG9ydCcpICE9PSAtMSkge1xuICAgICAgICBpbXBvcnRSdWxlcy5wdXNoKGNzc1J1bGUpO1xuICAgICAgfSBlbHNlIGlmIChzYWZlSW5zZXJ0UnVsZShzaGVldCwgY3NzUnVsZSwgaW5zZXJ0SW5kZXggKyBpbmplY3RlZFJ1bGVzKSkge1xuICAgICAgICBtYXlIYXZlSW1wb3J0ID0gZmFsc2U7XG4gICAgICAgIGluamVjdGVkUnVsZXMgKz0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZXh0cmFjdEltcG9ydCAmJiBpbXBvcnRSdWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICB1c2VkSW1wb3J0UnVsZVRhZyA9IHRydWU7XG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICBnZXRJbXBvcnRSdWxlVGFnKCkuaW5zZXJ0UnVsZXMoaWQgKyAnLWltcG9ydCcsIGltcG9ydFJ1bGVzKTtcbiAgICB9XG5cbiAgICBzaXplc1ttYXJrZXJdICs9IGluamVjdGVkUnVsZXM7IC8qIGFkZCB1cCBubyBvZiBpbmplY3RlZCBydWxlcyAqL1xuICAgIGFkZE5hbWVGb3JJZChuYW1lcywgaWQsIG5hbWUpO1xuICB9O1xuXG4gIHZhciByZW1vdmVSdWxlcyA9IGZ1bmN0aW9uIHJlbW92ZVJ1bGVzKGlkKSB7XG4gICAgdmFyIG1hcmtlciA9IG1hcmtlcnNbaWRdO1xuICAgIGlmIChtYXJrZXIgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuXG4gICAgdmFyIHNpemUgPSBzaXplc1ttYXJrZXJdO1xuICAgIHZhciBzaGVldCA9IHNoZWV0Rm9yVGFnKGVsKTtcbiAgICB2YXIgcmVtb3ZhbEluZGV4ID0gYWRkVXBVbnRpbEluZGV4KHNpemVzLCBtYXJrZXIpIC0gMTtcbiAgICBkZWxldGVSdWxlcyhzaGVldCwgcmVtb3ZhbEluZGV4LCBzaXplKTtcbiAgICBzaXplc1ttYXJrZXJdID0gMDtcbiAgICByZXNldElkTmFtZXMobmFtZXMsIGlkKTtcblxuICAgIGlmIChleHRyYWN0SW1wb3J0ICYmIHVzZWRJbXBvcnRSdWxlVGFnKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICBnZXRJbXBvcnRSdWxlVGFnKCkucmVtb3ZlUnVsZXMoaWQgKyAnLWltcG9ydCcpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgY3NzID0gZnVuY3Rpb24gY3NzKCkge1xuICAgIHZhciBfc2hlZXRGb3JUYWcgPSBzaGVldEZvclRhZyhlbCksXG4gICAgICAgIGNzc1J1bGVzID0gX3NoZWV0Rm9yVGFnLmNzc1J1bGVzO1xuXG4gICAgdmFyIHN0ciA9ICcnO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGd1YXJkLWZvci1pblxuICAgIGZvciAodmFyIGlkIGluIG1hcmtlcnMpIHtcbiAgICAgIHN0ciArPSBtYWtlVGV4dE1hcmtlcihpZCk7XG4gICAgICB2YXIgbWFya2VyID0gbWFya2Vyc1tpZF07XG4gICAgICB2YXIgZW5kID0gYWRkVXBVbnRpbEluZGV4KHNpemVzLCBtYXJrZXIpO1xuICAgICAgdmFyIHNpemUgPSBzaXplc1ttYXJrZXJdO1xuICAgICAgZm9yICh2YXIgaSA9IGVuZCAtIHNpemU7IGkgPCBlbmQ7IGkgKz0gMSkge1xuICAgICAgICB2YXIgcnVsZSA9IGNzc1J1bGVzW2ldO1xuICAgICAgICBpZiAocnVsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgc3RyICs9IHJ1bGUuY3NzVGV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzdHI7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBjbG9uZTogZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgICB0aHJvdyBuZXcgU3R5bGVkQ29tcG9uZW50c0Vycm9yKDUpO1xuICAgIH0sXG5cbiAgICBjc3M6IGNzcyxcbiAgICBnZXRJZHM6IGdldElkc0Zyb21NYXJrZXJzRmFjdG9yeShtYXJrZXJzKSxcbiAgICBoYXNOYW1lRm9ySWQ6IGhhc05hbWVGb3JJZChuYW1lcyksXG4gICAgaW5zZXJ0TWFya2VyOiBpbnNlcnRNYXJrZXIsXG4gICAgaW5zZXJ0UnVsZXM6IGluc2VydFJ1bGVzLFxuICAgIHJlbW92ZVJ1bGVzOiByZW1vdmVSdWxlcyxcbiAgICBzZWFsZWQ6IGZhbHNlLFxuICAgIHN0eWxlVGFnOiBlbCxcbiAgICB0b0VsZW1lbnQ6IHdyYXBBc0VsZW1lbnQoY3NzLCBuYW1lcyksXG4gICAgdG9IVE1MOiB3cmFwQXNIdG1sVGFnKGNzcywgbmFtZXMpXG4gIH07XG59O1xuXG52YXIgbWFrZVRleHROb2RlID0gZnVuY3Rpb24gbWFrZVRleHROb2RlKGlkKSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShtYWtlVGV4dE1hcmtlcihpZCkpO1xufTtcblxudmFyIG1ha2VCcm93c2VyVGFnID0gZnVuY3Rpb24gbWFrZUJyb3dzZXJUYWcoZWwsIGdldEltcG9ydFJ1bGVUYWcpIHtcbiAgdmFyIG5hbWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIG1hcmtlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIHZhciBleHRyYWN0SW1wb3J0ID0gZ2V0SW1wb3J0UnVsZVRhZyAhPT0gdW5kZWZpbmVkO1xuXG4gIC8qIGluZGljYXRlcyB3aGV0aGVyIGdldEltcG9ydFJ1bGVUYWcgd2FzIGNhbGxlZCAqL1xuICB2YXIgdXNlZEltcG9ydFJ1bGVUYWcgPSBmYWxzZTtcblxuICB2YXIgaW5zZXJ0TWFya2VyID0gZnVuY3Rpb24gaW5zZXJ0TWFya2VyKGlkKSB7XG4gICAgdmFyIHByZXYgPSBtYXJrZXJzW2lkXTtcbiAgICBpZiAocHJldiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gcHJldjtcbiAgICB9XG5cbiAgICBtYXJrZXJzW2lkXSA9IG1ha2VUZXh0Tm9kZShpZCk7XG4gICAgZWwuYXBwZW5kQ2hpbGQobWFya2Vyc1tpZF0pO1xuICAgIG5hbWVzW2lkXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICByZXR1cm4gbWFya2Vyc1tpZF07XG4gIH07XG5cbiAgdmFyIGluc2VydFJ1bGVzID0gZnVuY3Rpb24gaW5zZXJ0UnVsZXMoaWQsIGNzc1J1bGVzLCBuYW1lKSB7XG4gICAgdmFyIG1hcmtlciA9IGluc2VydE1hcmtlcihpZCk7XG4gICAgdmFyIGltcG9ydFJ1bGVzID0gW107XG4gICAgdmFyIGNzc1J1bGVzU2l6ZSA9IGNzc1J1bGVzLmxlbmd0aDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY3NzUnVsZXNTaXplOyBpICs9IDEpIHtcbiAgICAgIHZhciBydWxlID0gY3NzUnVsZXNbaV07XG4gICAgICB2YXIgbWF5SGF2ZUltcG9ydCA9IGV4dHJhY3RJbXBvcnQ7XG4gICAgICBpZiAobWF5SGF2ZUltcG9ydCAmJiBydWxlLmluZGV4T2YoJ0BpbXBvcnQnKSAhPT0gLTEpIHtcbiAgICAgICAgaW1wb3J0UnVsZXMucHVzaChydWxlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1heUhhdmVJbXBvcnQgPSBmYWxzZTtcbiAgICAgICAgdmFyIHNlcGFyYXRvciA9IGkgPT09IGNzc1J1bGVzU2l6ZSAtIDEgPyAnJyA6ICcgJztcbiAgICAgICAgbWFya2VyLmFwcGVuZERhdGEoJycgKyBydWxlICsgc2VwYXJhdG9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhZGROYW1lRm9ySWQobmFtZXMsIGlkLCBuYW1lKTtcblxuICAgIGlmIChleHRyYWN0SW1wb3J0ICYmIGltcG9ydFJ1bGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIHVzZWRJbXBvcnRSdWxlVGFnID0gdHJ1ZTtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIGdldEltcG9ydFJ1bGVUYWcoKS5pbnNlcnRSdWxlcyhpZCArICctaW1wb3J0JywgaW1wb3J0UnVsZXMpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcmVtb3ZlUnVsZXMgPSBmdW5jdGlvbiByZW1vdmVSdWxlcyhpZCkge1xuICAgIHZhciBtYXJrZXIgPSBtYXJrZXJzW2lkXTtcbiAgICBpZiAobWFya2VyID09PSB1bmRlZmluZWQpIHJldHVybjtcblxuICAgIC8qIGNyZWF0ZSBuZXcgZW1wdHkgdGV4dCBub2RlIGFuZCByZXBsYWNlIHRoZSBjdXJyZW50IG9uZSAqL1xuICAgIHZhciBuZXdNYXJrZXIgPSBtYWtlVGV4dE5vZGUoaWQpO1xuICAgIGVsLnJlcGxhY2VDaGlsZChuZXdNYXJrZXIsIG1hcmtlcik7XG4gICAgbWFya2Vyc1tpZF0gPSBuZXdNYXJrZXI7XG4gICAgcmVzZXRJZE5hbWVzKG5hbWVzLCBpZCk7XG5cbiAgICBpZiAoZXh0cmFjdEltcG9ydCAmJiB1c2VkSW1wb3J0UnVsZVRhZykge1xuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgZ2V0SW1wb3J0UnVsZVRhZygpLnJlbW92ZVJ1bGVzKGlkICsgJy1pbXBvcnQnKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGNzcyA9IGZ1bmN0aW9uIGNzcygpIHtcbiAgICB2YXIgc3RyID0gJyc7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluXG4gICAgZm9yICh2YXIgaWQgaW4gbWFya2Vycykge1xuICAgICAgc3RyICs9IG1hcmtlcnNbaWRdLmRhdGE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0cjtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGNsb25lOiBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgICAgIHRocm93IG5ldyBTdHlsZWRDb21wb25lbnRzRXJyb3IoNSk7XG4gICAgfSxcblxuICAgIGNzczogY3NzLFxuICAgIGdldElkczogZ2V0SWRzRnJvbU1hcmtlcnNGYWN0b3J5KG1hcmtlcnMpLFxuICAgIGhhc05hbWVGb3JJZDogaGFzTmFtZUZvcklkKG5hbWVzKSxcbiAgICBpbnNlcnRNYXJrZXI6IGluc2VydE1hcmtlcixcbiAgICBpbnNlcnRSdWxlczogaW5zZXJ0UnVsZXMsXG4gICAgcmVtb3ZlUnVsZXM6IHJlbW92ZVJ1bGVzLFxuICAgIHNlYWxlZDogZmFsc2UsXG4gICAgc3R5bGVUYWc6IGVsLFxuICAgIHRvRWxlbWVudDogd3JhcEFzRWxlbWVudChjc3MsIG5hbWVzKSxcbiAgICB0b0hUTUw6IHdyYXBBc0h0bWxUYWcoY3NzLCBuYW1lcylcbiAgfTtcbn07XG5cbnZhciBtYWtlU2VydmVyVGFnID0gZnVuY3Rpb24gbWFrZVNlcnZlclRhZyhuYW1lc0FyZywgbWFya2Vyc0FyZykge1xuICB2YXIgbmFtZXMgPSBuYW1lc0FyZyA9PT0gdW5kZWZpbmVkID8gT2JqZWN0LmNyZWF0ZShudWxsKSA6IG5hbWVzQXJnO1xuICB2YXIgbWFya2VycyA9IG1hcmtlcnNBcmcgPT09IHVuZGVmaW5lZCA/IE9iamVjdC5jcmVhdGUobnVsbCkgOiBtYXJrZXJzQXJnO1xuXG4gIHZhciBpbnNlcnRNYXJrZXIgPSBmdW5jdGlvbiBpbnNlcnRNYXJrZXIoaWQpIHtcbiAgICB2YXIgcHJldiA9IG1hcmtlcnNbaWRdO1xuICAgIGlmIChwcmV2ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBwcmV2O1xuICAgIH1cblxuICAgIHJldHVybiBtYXJrZXJzW2lkXSA9IFsnJ107XG4gIH07XG5cbiAgdmFyIGluc2VydFJ1bGVzID0gZnVuY3Rpb24gaW5zZXJ0UnVsZXMoaWQsIGNzc1J1bGVzLCBuYW1lKSB7XG4gICAgdmFyIG1hcmtlciA9IGluc2VydE1hcmtlcihpZCk7XG4gICAgbWFya2VyWzBdICs9IGNzc1J1bGVzLmpvaW4oJyAnKTtcbiAgICBhZGROYW1lRm9ySWQobmFtZXMsIGlkLCBuYW1lKTtcbiAgfTtcblxuICB2YXIgcmVtb3ZlUnVsZXMgPSBmdW5jdGlvbiByZW1vdmVSdWxlcyhpZCkge1xuICAgIHZhciBtYXJrZXIgPSBtYXJrZXJzW2lkXTtcbiAgICBpZiAobWFya2VyID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgICBtYXJrZXJbMF0gPSAnJztcbiAgICByZXNldElkTmFtZXMobmFtZXMsIGlkKTtcbiAgfTtcblxuICB2YXIgY3NzID0gZnVuY3Rpb24gY3NzKCkge1xuICAgIHZhciBzdHIgPSAnJztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluXG4gICAgZm9yICh2YXIgaWQgaW4gbWFya2Vycykge1xuICAgICAgdmFyIGNzc0ZvcklkID0gbWFya2Vyc1tpZF1bMF07XG4gICAgICBpZiAoY3NzRm9ySWQpIHtcbiAgICAgICAgc3RyICs9IG1ha2VUZXh0TWFya2VyKGlkKSArIGNzc0ZvcklkO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3RyO1xuICB9O1xuXG4gIHZhciBjbG9uZSA9IGZ1bmN0aW9uIGNsb25lKCkge1xuICAgIHZhciBuYW1lc0Nsb25lID0gY2xvbmVOYW1lcyhuYW1lcyk7XG4gICAgdmFyIG1hcmtlcnNDbG9uZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluXG4gICAgZm9yICh2YXIgaWQgaW4gbWFya2Vycykge1xuICAgICAgbWFya2Vyc0Nsb25lW2lkXSA9IFttYXJrZXJzW2lkXVswXV07XG4gICAgfVxuXG4gICAgcmV0dXJuIG1ha2VTZXJ2ZXJUYWcobmFtZXNDbG9uZSwgbWFya2Vyc0Nsb25lKTtcbiAgfTtcblxuICB2YXIgdGFnID0ge1xuICAgIGNsb25lOiBjbG9uZSxcbiAgICBjc3M6IGNzcyxcbiAgICBnZXRJZHM6IGdldElkc0Zyb21NYXJrZXJzRmFjdG9yeShtYXJrZXJzKSxcbiAgICBoYXNOYW1lRm9ySWQ6IGhhc05hbWVGb3JJZChuYW1lcyksXG4gICAgaW5zZXJ0TWFya2VyOiBpbnNlcnRNYXJrZXIsXG4gICAgaW5zZXJ0UnVsZXM6IGluc2VydFJ1bGVzLFxuICAgIHJlbW92ZVJ1bGVzOiByZW1vdmVSdWxlcyxcbiAgICBzZWFsZWQ6IGZhbHNlLFxuICAgIHN0eWxlVGFnOiBudWxsLFxuICAgIHRvRWxlbWVudDogd3JhcEFzRWxlbWVudChjc3MsIG5hbWVzKSxcbiAgICB0b0hUTUw6IHdyYXBBc0h0bWxUYWcoY3NzLCBuYW1lcylcbiAgfTtcblxuICByZXR1cm4gdGFnO1xufTtcblxudmFyIG1ha2VUYWcgPSBmdW5jdGlvbiBtYWtlVGFnKHRhcmdldCwgdGFnRWwsIGZvcmNlU2VydmVyLCBpbnNlcnRCZWZvcmUsIGdldEltcG9ydFJ1bGVUYWcpIHtcbiAgaWYgKElTX0JST1dTRVIgJiYgIWZvcmNlU2VydmVyKSB7XG4gICAgdmFyIGVsID0gbWFrZVN0eWxlVGFnKHRhcmdldCwgdGFnRWwsIGluc2VydEJlZm9yZSk7XG5cbiAgICBpZiAoRElTQUJMRV9TUEVFRFkpIHtcbiAgICAgIHJldHVybiBtYWtlQnJvd3NlclRhZyhlbCwgZ2V0SW1wb3J0UnVsZVRhZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBtYWtlU3BlZWR5VGFnKGVsLCBnZXRJbXBvcnRSdWxlVGFnKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWFrZVNlcnZlclRhZygpO1xufTtcblxudmFyIHJlaHlkcmF0ZSA9IGZ1bmN0aW9uIHJlaHlkcmF0ZSh0YWcsIGVscywgZXh0cmFjdGVkKSB7XG4gIC8qIGFkZCBhbGwgZXh0cmFjdGVkIGNvbXBvbmVudHMgdG8gdGhlIG5ldyB0YWcgKi9cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGV4dHJhY3RlZC5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgIHZhciBfZXh0cmFjdGVkJGkgPSBleHRyYWN0ZWRbaV0sXG4gICAgICAgIGNvbXBvbmVudElkID0gX2V4dHJhY3RlZCRpLmNvbXBvbmVudElkLFxuICAgICAgICBjc3NGcm9tRE9NID0gX2V4dHJhY3RlZCRpLmNzc0Zyb21ET007XG5cbiAgICB2YXIgY3NzUnVsZXMgPSBzcGxpdEJ5UnVsZXMoY3NzRnJvbURPTSk7XG4gICAgdGFnLmluc2VydFJ1bGVzKGNvbXBvbmVudElkLCBjc3NSdWxlcyk7XG4gIH1cblxuICAvKiByZW1vdmUgb2xkIEhUTUxTdHlsZUVsZW1lbnRzLCBzaW5jZSB0aGV5IGhhdmUgYmVlbiByZWh5ZHJhdGVkICovXG4gIGZvciAodmFyIF9pID0gMCwgX2xlbiA9IGVscy5sZW5ndGg7IF9pIDwgX2xlbjsgX2kgKz0gMSkge1xuICAgIHZhciBlbCA9IGVsc1tfaV07XG4gICAgaWYgKGVsLnBhcmVudE5vZGUpIHtcbiAgICAgIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpO1xuICAgIH1cbiAgfVxufTtcblxuLy8gXG5cbnZhciBTUExJVF9SRUdFWCA9IC9cXHMrLztcblxuLyogZGV0ZXJtaW5lIHRoZSBtYXhpbXVtIG51bWJlciBvZiBjb21wb25lbnRzIGJlZm9yZSB0YWdzIGFyZSBzaGFyZGVkICovXG52YXIgTUFYX1NJWkUgPSB2b2lkIDA7XG5pZiAoSVNfQlJPV1NFUikge1xuICAvKiBpbiBzcGVlZHkgbW9kZSB3ZSBjYW4ga2VlcCBhIGxvdCBtb3JlIHJ1bGVzIGluIGEgc2hlZXQgYmVmb3JlIGEgc2xvd2Rvd24gY2FuIGJlIGV4cGVjdGVkICovXG4gIE1BWF9TSVpFID0gRElTQUJMRV9TUEVFRFkgPyA0MCA6IDEwMDA7XG59IGVsc2Uge1xuICAvKiBmb3Igc2VydmVycyB3ZSBkbyBub3QgbmVlZCB0byBzaGFyZCBhdCBhbGwgKi9cbiAgTUFYX1NJWkUgPSAtMTtcbn1cblxudmFyIHNoZWV0UnVubmluZ0lkID0gMDtcbnZhciBtYXN0ZXIgPSB2b2lkIDA7XG5cbnZhciBTdHlsZVNoZWV0ID0gZnVuY3Rpb24gKCkge1xuXG4gIC8qIGEgbWFwIGZyb20gaWRzIHRvIHRhZ3MgKi9cblxuICAvKiBkZWZlcnJlZCBydWxlcyBmb3IgYSBnaXZlbiBpZCAqL1xuXG4gIC8qIHRoaXMgaXMgdXNlZCBmb3Igbm90IHJlaW5qZWN0aW5nIHJ1bGVzIHZpYSBoYXNOYW1lRm9ySWQoKSAqL1xuXG4gIC8qIHdoZW4gcnVsZXMgZm9yIGFuIGlkIGFyZSByZW1vdmVkIHVzaW5nIHJlbW92ZSgpIHdlIGhhdmUgdG8gaWdub3JlIHJlaHlkcmF0ZWROYW1lcyBmb3IgaXQgKi9cblxuICAvKiBhIGxpc3Qgb2YgdGFncyBiZWxvbmdpbmcgdG8gdGhpcyBTdHlsZVNoZWV0ICovXG5cbiAgLyogYSB0YWcgZm9yIGltcG9ydCBydWxlcyAqL1xuXG4gIC8qIGN1cnJlbnQgY2FwYWNpdHkgdW50aWwgYSBuZXcgdGFnIG11c3QgYmUgY3JlYXRlZCAqL1xuXG4gIC8qIGNoaWxkcmVuIChha2EgY2xvbmVzKSBvZiB0aGlzIFN0eWxlU2hlZXQgaW5oZXJpdGluZyBhbGwgYW5kIGZ1dHVyZSBpbmplY3Rpb25zICovXG5cbiAgZnVuY3Rpb24gU3R5bGVTaGVldCgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIHRhcmdldCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogSVNfQlJPV1NFUiA/IGRvY3VtZW50LmhlYWQgOiBudWxsO1xuICAgIHZhciBmb3JjZVNlcnZlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgU3R5bGVTaGVldCk7XG5cbiAgICB0aGlzLmdldEltcG9ydFJ1bGVUYWcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgaW1wb3J0UnVsZVRhZyA9IF90aGlzLmltcG9ydFJ1bGVUYWc7XG5cbiAgICAgIGlmIChpbXBvcnRSdWxlVGFnICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGltcG9ydFJ1bGVUYWc7XG4gICAgICB9XG5cbiAgICAgIHZhciBmaXJzdFRhZyA9IF90aGlzLnRhZ3NbMF07XG4gICAgICB2YXIgaW5zZXJ0QmVmb3JlID0gdHJ1ZTtcblxuICAgICAgcmV0dXJuIF90aGlzLmltcG9ydFJ1bGVUYWcgPSBtYWtlVGFnKF90aGlzLnRhcmdldCwgZmlyc3RUYWcgPyBmaXJzdFRhZy5zdHlsZVRhZyA6IG51bGwsIF90aGlzLmZvcmNlU2VydmVyLCBpbnNlcnRCZWZvcmUpO1xuICAgIH07XG5cbiAgICBzaGVldFJ1bm5pbmdJZCArPSAxO1xuICAgIHRoaXMuaWQgPSBzaGVldFJ1bm5pbmdJZDtcbiAgICB0aGlzLmZvcmNlU2VydmVyID0gZm9yY2VTZXJ2ZXI7XG4gICAgdGhpcy50YXJnZXQgPSBmb3JjZVNlcnZlciA/IG51bGwgOiB0YXJnZXQ7XG4gICAgdGhpcy50YWdNYXAgPSB7fTtcbiAgICB0aGlzLmRlZmVycmVkID0ge307XG4gICAgdGhpcy5yZWh5ZHJhdGVkTmFtZXMgPSB7fTtcbiAgICB0aGlzLmlnbm9yZVJlaHlkcmF0ZWROYW1lcyA9IHt9O1xuICAgIHRoaXMudGFncyA9IFtdO1xuICAgIHRoaXMuY2FwYWNpdHkgPSAxO1xuICAgIHRoaXMuY2xvbmVzID0gW107XG4gIH1cblxuICAvKiByZWh5ZHJhdGUgYWxsIFNTUidkIHN0eWxlIHRhZ3MgKi9cblxuXG4gIFN0eWxlU2hlZXQucHJvdG90eXBlLnJlaHlkcmF0ZSA9IGZ1bmN0aW9uIHJlaHlkcmF0ZSQkMSgpIHtcbiAgICBpZiAoIUlTX0JST1dTRVIgfHwgdGhpcy5mb3JjZVNlcnZlcikgcmV0dXJuIHRoaXM7XG5cbiAgICB2YXIgZWxzID0gW107XG4gICAgdmFyIGV4dHJhY3RlZCA9IFtdO1xuICAgIHZhciBpc1N0cmVhbWVkID0gZmFsc2U7XG5cbiAgICAvKiByZXRyaWV2ZSBhbGwgb2Ygb3VyIFNTUiBzdHlsZSBlbGVtZW50cyBmcm9tIHRoZSBET00gKi9cbiAgICB2YXIgbm9kZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdzdHlsZVsnICsgU0NfQVRUUiArICddWycgKyBTQ19WRVJTSU9OX0FUVFIgKyAnPVwiJyArIFwiNC4zLjJcIiArICdcIl0nKTtcblxuICAgIHZhciBub2Rlc1NpemUgPSBub2Rlcy5sZW5ndGg7XG5cbiAgICAvKiBhYm9ydCByZWh5ZHJhdGlvbiBpZiBubyBwcmV2aW91cyBzdHlsZSB0YWdzIHdlcmUgZm91bmQgKi9cbiAgICBpZiAoIW5vZGVzU2l6ZSkgcmV0dXJuIHRoaXM7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzU2l6ZTsgaSArPSAxKSB7XG4gICAgICB2YXIgZWwgPSBub2Rlc1tpXTtcblxuICAgICAgLyogY2hlY2sgaWYgc3R5bGUgdGFnIGlzIGEgc3RyZWFtZWQgdGFnICovXG4gICAgICBpZiAoIWlzU3RyZWFtZWQpIGlzU3RyZWFtZWQgPSAhIWVsLmdldEF0dHJpYnV0ZShTQ19TVFJFQU1fQVRUUik7XG5cbiAgICAgIC8qIHJldHJpZXZlIGFsbCBjb21wb25lbnQgbmFtZXMgKi9cbiAgICAgIHZhciBlbE5hbWVzID0gKGVsLmdldEF0dHJpYnV0ZShTQ19BVFRSKSB8fCAnJykudHJpbSgpLnNwbGl0KFNQTElUX1JFR0VYKTtcbiAgICAgIHZhciBlbE5hbWVzU2l6ZSA9IGVsTmFtZXMubGVuZ3RoO1xuICAgICAgZm9yICh2YXIgaiA9IDAsIG5hbWU7IGogPCBlbE5hbWVzU2l6ZTsgaiArPSAxKSB7XG4gICAgICAgIG5hbWUgPSBlbE5hbWVzW2pdO1xuICAgICAgICAvKiBhZGQgcmVoeWRyYXRlZCBuYW1lIHRvIHNoZWV0IHRvIGF2b2lkIHJlLWFkZGluZyBzdHlsZXMgKi9cbiAgICAgICAgdGhpcy5yZWh5ZHJhdGVkTmFtZXNbbmFtZV0gPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICAvKiBleHRyYWN0IGFsbCBjb21wb25lbnRzIGFuZCB0aGVpciBDU1MgKi9cbiAgICAgIGV4dHJhY3RlZC5wdXNoLmFwcGx5KGV4dHJhY3RlZCwgZXh0cmFjdENvbXBzKGVsLnRleHRDb250ZW50KSk7XG5cbiAgICAgIC8qIHN0b3JlIG9yaWdpbmFsIEhUTUxTdHlsZUVsZW1lbnQgKi9cbiAgICAgIGVscy5wdXNoKGVsKTtcbiAgICB9XG5cbiAgICAvKiBhYm9ydCByZWh5ZHJhdGlvbiBpZiBub3RoaW5nIHdhcyBleHRyYWN0ZWQgKi9cbiAgICB2YXIgZXh0cmFjdGVkU2l6ZSA9IGV4dHJhY3RlZC5sZW5ndGg7XG4gICAgaWYgKCFleHRyYWN0ZWRTaXplKSByZXR1cm4gdGhpcztcblxuICAgIC8qIGNyZWF0ZSBhIHRhZyB0byBiZSB1c2VkIGZvciByZWh5ZHJhdGlvbiAqL1xuICAgIHZhciB0YWcgPSB0aGlzLm1ha2VUYWcobnVsbCk7XG5cbiAgICByZWh5ZHJhdGUodGFnLCBlbHMsIGV4dHJhY3RlZCk7XG5cbiAgICAvKiByZXNldCBjYXBhY2l0eSBhbmQgYWRqdXN0IE1BWF9TSVpFIGJ5IHRoZSBpbml0aWFsIHNpemUgb2YgdGhlIHJlaHlkcmF0aW9uICovXG4gICAgdGhpcy5jYXBhY2l0eSA9IE1hdGgubWF4KDEsIE1BWF9TSVpFIC0gZXh0cmFjdGVkU2l6ZSk7XG4gICAgdGhpcy50YWdzLnB1c2godGFnKTtcblxuICAgIC8qIHJldHJpZXZlIGFsbCBjb21wb25lbnQgaWRzICovXG4gICAgZm9yICh2YXIgX2ogPSAwOyBfaiA8IGV4dHJhY3RlZFNpemU7IF9qICs9IDEpIHtcbiAgICAgIHRoaXMudGFnTWFwW2V4dHJhY3RlZFtfal0uY29tcG9uZW50SWRdID0gdGFnO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8qIHJldHJpZXZlIGEgXCJtYXN0ZXJcIiBpbnN0YW5jZSBvZiBTdHlsZVNoZWV0IHdoaWNoIGlzIHR5cGljYWxseSB1c2VkIHdoZW4gbm8gb3RoZXIgaXMgYXZhaWxhYmxlXG4gICAqIFRoZSBtYXN0ZXIgU3R5bGVTaGVldCBpcyB0YXJnZXRlZCBieSBjcmVhdGVHbG9iYWxTdHlsZSwga2V5ZnJhbWVzLCBhbmQgY29tcG9uZW50cyBvdXRzaWRlIG9mIGFueVxuICAgICogU3R5bGVTaGVldE1hbmFnZXIncyBjb250ZXh0ICovXG5cblxuICAvKiByZXNldCB0aGUgaW50ZXJuYWwgXCJtYXN0ZXJcIiBpbnN0YW5jZSAqL1xuICBTdHlsZVNoZWV0LnJlc2V0ID0gZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgdmFyIGZvcmNlU2VydmVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcblxuICAgIG1hc3RlciA9IG5ldyBTdHlsZVNoZWV0KHVuZGVmaW5lZCwgZm9yY2VTZXJ2ZXIpLnJlaHlkcmF0ZSgpO1xuICB9O1xuXG4gIC8qIGFkZHMgXCJjaGlsZHJlblwiIHRvIHRoZSBTdHlsZVNoZWV0IHRoYXQgaW5oZXJpdCBhbGwgb2YgdGhlIHBhcmVudHMnIHJ1bGVzXG4gICAqIHdoaWxlIHRoZWlyIG93biBydWxlcyBkbyBub3QgYWZmZWN0IHRoZSBwYXJlbnQgKi9cblxuXG4gIFN0eWxlU2hlZXQucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgdmFyIHNoZWV0ID0gbmV3IFN0eWxlU2hlZXQodGhpcy50YXJnZXQsIHRoaXMuZm9yY2VTZXJ2ZXIpO1xuXG4gICAgLyogYWRkIHRvIGNsb25lIGFycmF5ICovXG4gICAgdGhpcy5jbG9uZXMucHVzaChzaGVldCk7XG5cbiAgICAvKiBjbG9uZSBhbGwgdGFncyAqL1xuICAgIHNoZWV0LnRhZ3MgPSB0aGlzLnRhZ3MubWFwKGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgIHZhciBpZHMgPSB0YWcuZ2V0SWRzKCk7XG4gICAgICB2YXIgbmV3VGFnID0gdGFnLmNsb25lKCk7XG5cbiAgICAgIC8qIHJlY29uc3RydWN0IHRhZ01hcCAqL1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpZHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgc2hlZXQudGFnTWFwW2lkc1tpXV0gPSBuZXdUYWc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXdUYWc7XG4gICAgfSk7XG5cbiAgICAvKiBjbG9uZSBvdGhlciBtYXBzICovXG4gICAgc2hlZXQucmVoeWRyYXRlZE5hbWVzID0gX2V4dGVuZHMoe30sIHRoaXMucmVoeWRyYXRlZE5hbWVzKTtcbiAgICBzaGVldC5kZWZlcnJlZCA9IF9leHRlbmRzKHt9LCB0aGlzLmRlZmVycmVkKTtcblxuICAgIHJldHVybiBzaGVldDtcbiAgfTtcblxuICAvKiBmb3JjZSBTdHlsZVNoZWV0IHRvIGNyZWF0ZSBhIG5ldyB0YWcgb24gdGhlIG5leHQgaW5qZWN0aW9uICovXG5cblxuICBTdHlsZVNoZWV0LnByb3RvdHlwZS5zZWFsQWxsVGFncyA9IGZ1bmN0aW9uIHNlYWxBbGxUYWdzKCkge1xuICAgIHRoaXMuY2FwYWNpdHkgPSAxO1xuXG4gICAgdGhpcy50YWdzLmZvckVhY2goZnVuY3Rpb24gKHRhZykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICB0YWcuc2VhbGVkID0gdHJ1ZTtcbiAgICB9KTtcbiAgfTtcblxuICBTdHlsZVNoZWV0LnByb3RvdHlwZS5tYWtlVGFnID0gZnVuY3Rpb24gbWFrZVRhZyQkMSh0YWcpIHtcbiAgICB2YXIgbGFzdEVsID0gdGFnID8gdGFnLnN0eWxlVGFnIDogbnVsbDtcbiAgICB2YXIgaW5zZXJ0QmVmb3JlID0gZmFsc2U7XG5cbiAgICByZXR1cm4gbWFrZVRhZyh0aGlzLnRhcmdldCwgbGFzdEVsLCB0aGlzLmZvcmNlU2VydmVyLCBpbnNlcnRCZWZvcmUsIHRoaXMuZ2V0SW1wb3J0UnVsZVRhZyk7XG4gIH07XG5cbiAgLyogZ2V0IGEgdGFnIGZvciBhIGdpdmVuIGNvbXBvbmVudElkLCBhc3NpZ24gdGhlIGNvbXBvbmVudElkIHRvIG9uZSwgb3Igc2hhcmQgKi9cbiAgU3R5bGVTaGVldC5wcm90b3R5cGUuZ2V0VGFnRm9ySWQgPSBmdW5jdGlvbiBnZXRUYWdGb3JJZChpZCkge1xuICAgIC8qIHNpbXBseSByZXR1cm4gYSB0YWcsIHdoZW4gdGhlIGNvbXBvbmVudElkIHdhcyBhbHJlYWR5IGFzc2lnbmVkIG9uZSAqL1xuICAgIHZhciBwcmV2ID0gdGhpcy50YWdNYXBbaWRdO1xuICAgIGlmIChwcmV2ICE9PSB1bmRlZmluZWQgJiYgIXByZXYuc2VhbGVkKSB7XG4gICAgICByZXR1cm4gcHJldjtcbiAgICB9XG5cbiAgICB2YXIgdGFnID0gdGhpcy50YWdzW3RoaXMudGFncy5sZW5ndGggLSAxXTtcblxuICAgIC8qIHNoYXJkIChjcmVhdGUgYSBuZXcgdGFnKSBpZiB0aGUgdGFnIGlzIGV4aGF1c3RlZCAoU2VlIE1BWF9TSVpFKSAqL1xuICAgIHRoaXMuY2FwYWNpdHkgLT0gMTtcblxuICAgIGlmICh0aGlzLmNhcGFjaXR5ID09PSAwKSB7XG4gICAgICB0aGlzLmNhcGFjaXR5ID0gTUFYX1NJWkU7XG4gICAgICB0YWcgPSB0aGlzLm1ha2VUYWcodGFnKTtcbiAgICAgIHRoaXMudGFncy5wdXNoKHRhZyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudGFnTWFwW2lkXSA9IHRhZztcbiAgfTtcblxuICAvKiBtYWlubHkgZm9yIGNyZWF0ZUdsb2JhbFN0eWxlIHRvIGNoZWNrIGZvciBpdHMgaWQgKi9cblxuXG4gIFN0eWxlU2hlZXQucHJvdG90eXBlLmhhc0lkID0gZnVuY3Rpb24gaGFzSWQoaWQpIHtcbiAgICByZXR1cm4gdGhpcy50YWdNYXBbaWRdICE9PSB1bmRlZmluZWQ7XG4gIH07XG5cbiAgLyogY2FjaGluZyBsYXllciBjaGVja2luZyBpZCtuYW1lIHRvIGFscmVhZHkgaGF2ZSBhIGNvcnJlc3BvbmRpbmcgdGFnIGFuZCBpbmplY3RlZCBydWxlcyAqL1xuXG5cbiAgU3R5bGVTaGVldC5wcm90b3R5cGUuaGFzTmFtZUZvcklkID0gZnVuY3Rpb24gaGFzTmFtZUZvcklkKGlkLCBuYW1lKSB7XG4gICAgLyogZXhjZXB0aW9uIGZvciByZWh5ZHJhdGVkIG5hbWVzIHdoaWNoIGFyZSBjaGVja2VkIHNlcGFyYXRlbHkgKi9cbiAgICBpZiAodGhpcy5pZ25vcmVSZWh5ZHJhdGVkTmFtZXNbaWRdID09PSB1bmRlZmluZWQgJiYgdGhpcy5yZWh5ZHJhdGVkTmFtZXNbbmFtZV0pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciB0YWcgPSB0aGlzLnRhZ01hcFtpZF07XG4gICAgcmV0dXJuIHRhZyAhPT0gdW5kZWZpbmVkICYmIHRhZy5oYXNOYW1lRm9ySWQoaWQsIG5hbWUpO1xuICB9O1xuXG4gIC8qIHJlZ2lzdGVycyBhIGNvbXBvbmVudElkIGFuZCByZWdpc3RlcnMgaXQgb24gaXRzIHRhZyAqL1xuXG5cbiAgU3R5bGVTaGVldC5wcm90b3R5cGUuZGVmZXJyZWRJbmplY3QgPSBmdW5jdGlvbiBkZWZlcnJlZEluamVjdChpZCwgY3NzUnVsZXMpIHtcbiAgICAvKiBkb24ndCBpbmplY3Qgd2hlbiB0aGUgaWQgaXMgYWxyZWFkeSByZWdpc3RlcmVkICovXG4gICAgaWYgKHRoaXMudGFnTWFwW2lkXSAhPT0gdW5kZWZpbmVkKSByZXR1cm47XG5cbiAgICB2YXIgY2xvbmVzID0gdGhpcy5jbG9uZXM7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsb25lcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY2xvbmVzW2ldLmRlZmVycmVkSW5qZWN0KGlkLCBjc3NSdWxlcyk7XG4gICAgfVxuXG4gICAgdGhpcy5nZXRUYWdGb3JJZChpZCkuaW5zZXJ0TWFya2VyKGlkKTtcbiAgICB0aGlzLmRlZmVycmVkW2lkXSA9IGNzc1J1bGVzO1xuICB9O1xuXG4gIC8qIGluamVjdHMgcnVsZXMgZm9yIGEgZ2l2ZW4gaWQgd2l0aCBhIG5hbWUgdGhhdCB3aWxsIG5lZWQgdG8gYmUgY2FjaGVkICovXG5cblxuICBTdHlsZVNoZWV0LnByb3RvdHlwZS5pbmplY3QgPSBmdW5jdGlvbiBpbmplY3QoaWQsIGNzc1J1bGVzLCBuYW1lKSB7XG4gICAgdmFyIGNsb25lcyA9IHRoaXMuY2xvbmVzO1xuXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsb25lcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY2xvbmVzW2ldLmluamVjdChpZCwgY3NzUnVsZXMsIG5hbWUpO1xuICAgIH1cblxuICAgIHZhciB0YWcgPSB0aGlzLmdldFRhZ0ZvcklkKGlkKTtcblxuICAgIC8qIGFkZCBkZWZlcnJlZCBydWxlcyBmb3IgY29tcG9uZW50ICovXG4gICAgaWYgKHRoaXMuZGVmZXJyZWRbaWRdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIENvbWJpbmUgcGFzc2VkIGNzc1J1bGVzIHdpdGggcHJldmlvdXNseSBkZWZlcnJlZCBDU1MgcnVsZXNcbiAgICAgIC8vIE5PVEU6IFdlIGNhbm5vdCBtdXRhdGUgdGhlIGRlZmVycmVkIGFycmF5IGl0c2VsZiBhcyBhbGwgY2xvbmVzXG4gICAgICAvLyBkbyB0aGUgc2FtZSAoc2VlIGNsb25lc1tpXS5pbmplY3QpXG4gICAgICB2YXIgcnVsZXMgPSB0aGlzLmRlZmVycmVkW2lkXS5jb25jYXQoY3NzUnVsZXMpO1xuICAgICAgdGFnLmluc2VydFJ1bGVzKGlkLCBydWxlcywgbmFtZSk7XG5cbiAgICAgIHRoaXMuZGVmZXJyZWRbaWRdID0gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICB0YWcuaW5zZXJ0UnVsZXMoaWQsIGNzc1J1bGVzLCBuYW1lKTtcbiAgICB9XG4gIH07XG5cbiAgLyogcmVtb3ZlcyBhbGwgcnVsZXMgZm9yIGEgZ2l2ZW4gaWQsIHdoaWNoIGRvZXNuJ3QgcmVtb3ZlIGl0cyBtYXJrZXIgYnV0IHJlc2V0cyBpdCAqL1xuXG5cbiAgU3R5bGVTaGVldC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKGlkKSB7XG4gICAgdmFyIHRhZyA9IHRoaXMudGFnTWFwW2lkXTtcbiAgICBpZiAodGFnID09PSB1bmRlZmluZWQpIHJldHVybjtcblxuICAgIHZhciBjbG9uZXMgPSB0aGlzLmNsb25lcztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xvbmVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjbG9uZXNbaV0ucmVtb3ZlKGlkKTtcbiAgICB9XG5cbiAgICAvKiByZW1vdmUgYWxsIHJ1bGVzIGZyb20gdGhlIHRhZyAqL1xuICAgIHRhZy5yZW1vdmVSdWxlcyhpZCk7XG5cbiAgICAvKiBpZ25vcmUgcG9zc2libGUgcmVoeWRyYXRlZCBuYW1lcyAqL1xuICAgIHRoaXMuaWdub3JlUmVoeWRyYXRlZE5hbWVzW2lkXSA9IHRydWU7XG5cbiAgICAvKiBkZWxldGUgcG9zc2libGUgZGVmZXJyZWQgcnVsZXMgKi9cbiAgICB0aGlzLmRlZmVycmVkW2lkXSA9IHVuZGVmaW5lZDtcbiAgfTtcblxuICBTdHlsZVNoZWV0LnByb3RvdHlwZS50b0hUTUwgPSBmdW5jdGlvbiB0b0hUTUwoKSB7XG4gICAgcmV0dXJuIHRoaXMudGFncy5tYXAoZnVuY3Rpb24gKHRhZykge1xuICAgICAgcmV0dXJuIHRhZy50b0hUTUwoKTtcbiAgICB9KS5qb2luKCcnKTtcbiAgfTtcblxuICBTdHlsZVNoZWV0LnByb3RvdHlwZS50b1JlYWN0RWxlbWVudHMgPSBmdW5jdGlvbiB0b1JlYWN0RWxlbWVudHMoKSB7XG4gICAgdmFyIGlkID0gdGhpcy5pZDtcblxuXG4gICAgcmV0dXJuIHRoaXMudGFncy5tYXAoZnVuY3Rpb24gKHRhZywgaSkge1xuICAgICAgdmFyIGtleSA9ICdzYy0nICsgaWQgKyAnLScgKyBpO1xuICAgICAgcmV0dXJuIGNsb25lRWxlbWVudCh0YWcudG9FbGVtZW50KCksIHsga2V5OiBrZXkgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgY3JlYXRlQ2xhc3MoU3R5bGVTaGVldCwgbnVsbCwgW3tcbiAgICBrZXk6ICdtYXN0ZXInLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0JCQxKCkge1xuICAgICAgcmV0dXJuIG1hc3RlciB8fCAobWFzdGVyID0gbmV3IFN0eWxlU2hlZXQoKS5yZWh5ZHJhdGUoKSk7XG4gICAgfVxuXG4gICAgLyogTk9URTogVGhpcyBpcyBqdXN0IGZvciBiYWNrd2FyZHMtY29tcGF0aWJpbGl0eSB3aXRoIGplc3Qtc3R5bGVkLWNvbXBvbmVudHMgKi9cblxuICB9LCB7XG4gICAga2V5OiAnaW5zdGFuY2UnLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0JCQxKCkge1xuICAgICAgcmV0dXJuIFN0eWxlU2hlZXQubWFzdGVyO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gU3R5bGVTaGVldDtcbn0oKTtcblxuLy8gXG5cbnZhciBLZXlmcmFtZXMgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEtleWZyYW1lcyhuYW1lLCBydWxlcykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBLZXlmcmFtZXMpO1xuXG4gICAgdGhpcy5pbmplY3QgPSBmdW5jdGlvbiAoc3R5bGVTaGVldCkge1xuICAgICAgaWYgKCFzdHlsZVNoZWV0Lmhhc05hbWVGb3JJZChfdGhpcy5pZCwgX3RoaXMubmFtZSkpIHtcbiAgICAgICAgc3R5bGVTaGVldC5pbmplY3QoX3RoaXMuaWQsIF90aGlzLnJ1bGVzLCBfdGhpcy5uYW1lKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRocm93IG5ldyBTdHlsZWRDb21wb25lbnRzRXJyb3IoMTIsIFN0cmluZyhfdGhpcy5uYW1lKSk7XG4gICAgfTtcblxuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5ydWxlcyA9IHJ1bGVzO1xuXG4gICAgdGhpcy5pZCA9ICdzYy1rZXlmcmFtZXMtJyArIG5hbWU7XG4gIH1cblxuICBLZXlmcmFtZXMucHJvdG90eXBlLmdldE5hbWUgPSBmdW5jdGlvbiBnZXROYW1lKCkge1xuICAgIHJldHVybiB0aGlzLm5hbWU7XG4gIH07XG5cbiAgcmV0dXJuIEtleWZyYW1lcztcbn0oKTtcblxuLy8gXG5cbi8qKlxuICogaW5saW5lZCB2ZXJzaW9uIG9mXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmJqcy9ibG9iL21hc3Rlci9wYWNrYWdlcy9mYmpzL3NyYy9jb3JlL2h5cGhlbmF0ZVN0eWxlTmFtZS5qc1xuICovXG5cbnZhciB1cHBlcmNhc2VQYXR0ZXJuID0gLyhbQS1aXSkvZztcbnZhciBtc1BhdHRlcm4gPSAvXm1zLS87XG5cbi8qKlxuICogSHlwaGVuYXRlcyBhIGNhbWVsY2FzZWQgQ1NTIHByb3BlcnR5IG5hbWUsIGZvciBleGFtcGxlOlxuICpcbiAqICAgPiBoeXBoZW5hdGVTdHlsZU5hbWUoJ2JhY2tncm91bmRDb2xvcicpXG4gKiAgIDwgXCJiYWNrZ3JvdW5kLWNvbG9yXCJcbiAqICAgPiBoeXBoZW5hdGVTdHlsZU5hbWUoJ01velRyYW5zaXRpb24nKVxuICogICA8IFwiLW1vei10cmFuc2l0aW9uXCJcbiAqICAgPiBoeXBoZW5hdGVTdHlsZU5hbWUoJ21zVHJhbnNpdGlvbicpXG4gKiAgIDwgXCItbXMtdHJhbnNpdGlvblwiXG4gKlxuICogQXMgTW9kZXJuaXpyIHN1Z2dlc3RzIChodHRwOi8vbW9kZXJuaXpyLmNvbS9kb2NzLyNwcmVmaXhlZCksIGFuIGBtc2AgcHJlZml4XG4gKiBpcyBjb252ZXJ0ZWQgdG8gYC1tcy1gLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gaHlwaGVuYXRlU3R5bGVOYW1lKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnJlcGxhY2UodXBwZXJjYXNlUGF0dGVybiwgJy0kMScpLnRvTG93ZXJDYXNlKCkucmVwbGFjZShtc1BhdHRlcm4sICctbXMtJyk7XG59XG5cbi8vIFxuXG4vLyBUYWtlbiBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iL2I4N2FhYmRmZTFiNzQ2MWU3MzMxYWJiMzYwMWQ5ZTZiYjI3NTQ0YmMvcGFja2FnZXMvcmVhY3QtZG9tL3NyYy9zaGFyZWQvZGFuZ2Vyb3VzU3R5bGVWYWx1ZS5qc1xuZnVuY3Rpb24gYWRkVW5pdElmTmVlZGVkKG5hbWUsIHZhbHVlKSB7XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbWlsYWphY2svZXNsaW50LXBsdWdpbi1mbG93dHlwZS1lcnJvcnMvaXNzdWVzLzEzM1xuICAvLyAkRmxvd0ZpeE1lXG4gIGlmICh2YWx1ZSA9PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nIHx8IHZhbHVlID09PSAnJykge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIHZhbHVlICE9PSAwICYmICEobmFtZSBpbiB1bml0bGVzcykpIHtcbiAgICByZXR1cm4gdmFsdWUgKyAncHgnOyAvLyBQcmVzdW1lcyBpbXBsaWNpdCAncHgnIHN1ZmZpeCBmb3IgdW5pdGxlc3MgbnVtYmVyc1xuICB9XG5cbiAgcmV0dXJuIFN0cmluZyh2YWx1ZSkudHJpbSgpO1xufVxuXG4vLyBcblxuLyoqXG4gKiBJdCdzIGZhbHNpc2ggbm90IGZhbHN5IGJlY2F1c2UgMCBpcyBhbGxvd2VkLlxuICovXG52YXIgaXNGYWxzaXNoID0gZnVuY3Rpb24gaXNGYWxzaXNoKGNodW5rKSB7XG4gIHJldHVybiBjaHVuayA9PT0gdW5kZWZpbmVkIHx8IGNodW5rID09PSBudWxsIHx8IGNodW5rID09PSBmYWxzZSB8fCBjaHVuayA9PT0gJyc7XG59O1xuXG52YXIgb2JqVG9Dc3NBcnJheSA9IGZ1bmN0aW9uIG9ialRvQ3NzQXJyYXkob2JqLCBwcmV2S2V5KSB7XG4gIHZhciBydWxlcyA9IFtdO1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG5cbiAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIWlzRmFsc2lzaChvYmpba2V5XSkpIHtcbiAgICAgIGlmIChpc1BsYWluT2JqZWN0KG9ialtrZXldKSkge1xuICAgICAgICBydWxlcy5wdXNoLmFwcGx5KHJ1bGVzLCBvYmpUb0Nzc0FycmF5KG9ialtrZXldLCBrZXkpKTtcblxuICAgICAgICByZXR1cm4gcnVsZXM7XG4gICAgICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24ob2JqW2tleV0pKSB7XG4gICAgICAgIHJ1bGVzLnB1c2goaHlwaGVuYXRlU3R5bGVOYW1lKGtleSkgKyAnOicsIG9ialtrZXldLCAnOycpO1xuXG4gICAgICAgIHJldHVybiBydWxlcztcbiAgICAgIH1cbiAgICAgIHJ1bGVzLnB1c2goaHlwaGVuYXRlU3R5bGVOYW1lKGtleSkgKyAnOiAnICsgYWRkVW5pdElmTmVlZGVkKGtleSwgb2JqW2tleV0pICsgJzsnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJ1bGVzO1xuICB9KTtcblxuICByZXR1cm4gcHJldktleSA/IFtwcmV2S2V5ICsgJyB7J10uY29uY2F0KHJ1bGVzLCBbJ30nXSkgOiBydWxlcztcbn07XG5cbmZ1bmN0aW9uIGZsYXR0ZW4oY2h1bmssIGV4ZWN1dGlvbkNvbnRleHQsIHN0eWxlU2hlZXQpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2h1bmspKSB7XG4gICAgdmFyIHJ1bGVTZXQgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjaHVuay5sZW5ndGgsIHJlc3VsdDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICByZXN1bHQgPSBmbGF0dGVuKGNodW5rW2ldLCBleGVjdXRpb25Db250ZXh0LCBzdHlsZVNoZWV0KTtcblxuICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkgY29udGludWU7ZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZXN1bHQpKSBydWxlU2V0LnB1c2guYXBwbHkocnVsZVNldCwgcmVzdWx0KTtlbHNlIHJ1bGVTZXQucHVzaChyZXN1bHQpO1xuICAgIH1cblxuICAgIHJldHVybiBydWxlU2V0O1xuICB9XG5cbiAgaWYgKGlzRmFsc2lzaChjaHVuaykpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qIEhhbmRsZSBvdGhlciBjb21wb25lbnRzICovXG4gIGlmIChpc1N0eWxlZENvbXBvbmVudChjaHVuaykpIHtcbiAgICByZXR1cm4gJy4nICsgY2h1bmsuc3R5bGVkQ29tcG9uZW50SWQ7XG4gIH1cblxuICAvKiBFaXRoZXIgZXhlY3V0ZSBvciBkZWZlciB0aGUgZnVuY3Rpb24gKi9cbiAgaWYgKGlzRnVuY3Rpb24oY2h1bmspKSB7XG4gICAgaWYgKGlzU3RhdGVsZXNzRnVuY3Rpb24oY2h1bmspICYmIGV4ZWN1dGlvbkNvbnRleHQpIHtcbiAgICAgIHZhciBfcmVzdWx0ID0gY2h1bmsoZXhlY3V0aW9uQ29udGV4dCk7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGlzRWxlbWVudChfcmVzdWx0KSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLndhcm4oZ2V0Q29tcG9uZW50TmFtZShjaHVuaykgKyAnIGlzIG5vdCBhIHN0eWxlZCBjb21wb25lbnQgYW5kIGNhbm5vdCBiZSByZWZlcnJlZCB0byB2aWEgY29tcG9uZW50IHNlbGVjdG9yLiBTZWUgaHR0cHM6Ly93d3cuc3R5bGVkLWNvbXBvbmVudHMuY29tL2RvY3MvYWR2YW5jZWQjcmVmZXJyaW5nLXRvLW90aGVyLWNvbXBvbmVudHMgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZsYXR0ZW4oX3Jlc3VsdCwgZXhlY3V0aW9uQ29udGV4dCwgc3R5bGVTaGVldCk7XG4gICAgfSBlbHNlIHJldHVybiBjaHVuaztcbiAgfVxuXG4gIGlmIChjaHVuayBpbnN0YW5jZW9mIEtleWZyYW1lcykge1xuICAgIGlmIChzdHlsZVNoZWV0KSB7XG4gICAgICBjaHVuay5pbmplY3Qoc3R5bGVTaGVldCk7XG4gICAgICByZXR1cm4gY2h1bmsuZ2V0TmFtZSgpO1xuICAgIH0gZWxzZSByZXR1cm4gY2h1bms7XG4gIH1cblxuICAvKiBIYW5kbGUgb2JqZWN0cyAqL1xuICByZXR1cm4gaXNQbGFpbk9iamVjdChjaHVuaykgPyBvYmpUb0Nzc0FycmF5KGNodW5rKSA6IGNodW5rLnRvU3RyaW5nKCk7XG59XG5cbi8vIFxuXG5mdW5jdGlvbiBjc3Moc3R5bGVzKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBpbnRlcnBvbGF0aW9ucyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBpbnRlcnBvbGF0aW9uc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoaXNGdW5jdGlvbihzdHlsZXMpIHx8IGlzUGxhaW5PYmplY3Qoc3R5bGVzKSkge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICByZXR1cm4gZmxhdHRlbihpbnRlcmxlYXZlKEVNUFRZX0FSUkFZLCBbc3R5bGVzXS5jb25jYXQoaW50ZXJwb2xhdGlvbnMpKSk7XG4gIH1cblxuICAvLyAkRmxvd0ZpeE1lXG4gIHJldHVybiBmbGF0dGVuKGludGVybGVhdmUoc3R5bGVzLCBpbnRlcnBvbGF0aW9ucykpO1xufVxuXG4vLyBcblxuZnVuY3Rpb24gY29uc3RydWN0V2l0aE9wdGlvbnMoY29tcG9uZW50Q29uc3RydWN0b3IsIHRhZykge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogRU1QVFlfT0JKRUNUO1xuXG4gIGlmICghaXNWYWxpZEVsZW1lbnRUeXBlKHRhZykpIHtcbiAgICB0aHJvdyBuZXcgU3R5bGVkQ29tcG9uZW50c0Vycm9yKDEsIFN0cmluZyh0YWcpKTtcbiAgfVxuXG4gIC8qIFRoaXMgaXMgY2FsbGFibGUgZGlyZWN0bHkgYXMgYSB0ZW1wbGF0ZSBmdW5jdGlvbiAqL1xuICAvLyAkRmxvd0ZpeE1lOiBOb3QgdHlwZWQgdG8gYXZvaWQgZGVzdHJ1Y3R1cmluZyBhcmd1bWVudHNcbiAgdmFyIHRlbXBsYXRlRnVuY3Rpb24gPSBmdW5jdGlvbiB0ZW1wbGF0ZUZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb21wb25lbnRDb25zdHJ1Y3Rvcih0YWcsIG9wdGlvbnMsIGNzcy5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cykpO1xuICB9O1xuXG4gIC8qIElmIGNvbmZpZyBtZXRob2RzIGFyZSBjYWxsZWQsIHdyYXAgdXAgYSBuZXcgdGVtcGxhdGUgZnVuY3Rpb24gYW5kIG1lcmdlIG9wdGlvbnMgKi9cbiAgdGVtcGxhdGVGdW5jdGlvbi53aXRoQ29uZmlnID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICAgIHJldHVybiBjb25zdHJ1Y3RXaXRoT3B0aW9ucyhjb21wb25lbnRDb25zdHJ1Y3RvciwgdGFnLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywgY29uZmlnKSk7XG4gIH07XG5cbiAgLyogTW9kaWZ5L2luamVjdCBuZXcgcHJvcHMgYXQgcnVudGltZSAqL1xuICB0ZW1wbGF0ZUZ1bmN0aW9uLmF0dHJzID0gZnVuY3Rpb24gKGF0dHJzKSB7XG4gICAgcmV0dXJuIGNvbnN0cnVjdFdpdGhPcHRpb25zKGNvbXBvbmVudENvbnN0cnVjdG9yLCB0YWcsIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBhdHRyczogQXJyYXkucHJvdG90eXBlLmNvbmNhdChvcHRpb25zLmF0dHJzLCBhdHRycykuZmlsdGVyKEJvb2xlYW4pXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiB0ZW1wbGF0ZUZ1bmN0aW9uO1xufVxuXG4vLyBcbi8vIFNvdXJjZTogaHR0cHM6Ly9naXRodWIuY29tL2dhcnljb3VydC9tdXJtdXJoYXNoLWpzL2Jsb2IvbWFzdGVyL211cm11cmhhc2gyX2djLmpzXG5mdW5jdGlvbiBtdXJtdXJoYXNoKGMpIHtcbiAgZm9yICh2YXIgZSA9IGMubGVuZ3RoIHwgMCwgYSA9IGUgfCAwLCBkID0gMCwgYjsgZSA+PSA0Oykge1xuICAgIGIgPSBjLmNoYXJDb2RlQXQoZCkgJiAyNTUgfCAoYy5jaGFyQ29kZUF0KCsrZCkgJiAyNTUpIDw8IDggfCAoYy5jaGFyQ29kZUF0KCsrZCkgJiAyNTUpIDw8IDE2IHwgKGMuY2hhckNvZGVBdCgrK2QpICYgMjU1KSA8PCAyNCwgYiA9IDE1NDA0ODM0NzcgKiAoYiAmIDY1NTM1KSArICgoMTU0MDQ4MzQ3NyAqIChiID4+PiAxNikgJiA2NTUzNSkgPDwgMTYpLCBiIF49IGIgPj4+IDI0LCBiID0gMTU0MDQ4MzQ3NyAqIChiICYgNjU1MzUpICsgKCgxNTQwNDgzNDc3ICogKGIgPj4+IDE2KSAmIDY1NTM1KSA8PCAxNiksIGEgPSAxNTQwNDgzNDc3ICogKGEgJiA2NTUzNSkgKyAoKDE1NDA0ODM0NzcgKiAoYSA+Pj4gMTYpICYgNjU1MzUpIDw8IDE2KSBeIGIsIGUgLT0gNCwgKytkO1xuICB9XG4gIHN3aXRjaCAoZSkge1xuICAgIGNhc2UgMzpcbiAgICAgIGEgXj0gKGMuY2hhckNvZGVBdChkICsgMikgJiAyNTUpIDw8IDE2O1xuICAgIGNhc2UgMjpcbiAgICAgIGEgXj0gKGMuY2hhckNvZGVBdChkICsgMSkgJiAyNTUpIDw8IDg7XG4gICAgY2FzZSAxOlxuICAgICAgYSBePSBjLmNoYXJDb2RlQXQoZCkgJiAyNTUsIGEgPSAxNTQwNDgzNDc3ICogKGEgJiA2NTUzNSkgKyAoKDE1NDA0ODM0NzcgKiAoYSA+Pj4gMTYpICYgNjU1MzUpIDw8IDE2KTtcbiAgfVxuICBhIF49IGEgPj4+IDEzO1xuICBhID0gMTU0MDQ4MzQ3NyAqIChhICYgNjU1MzUpICsgKCgxNTQwNDgzNDc3ICogKGEgPj4+IDE2KSAmIDY1NTM1KSA8PCAxNik7XG4gIHJldHVybiAoYSBeIGEgPj4+IDE1KSA+Pj4gMDtcbn1cblxuLy8gXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1iaXR3aXNlICovXG5cbi8qIFRoaXMgaXMgdGhlIFwiY2FwYWNpdHlcIiBvZiBvdXIgYWxwaGFiZXQgaS5lLiAyeDI2IGZvciBhbGwgbGV0dGVycyBwbHVzIHRoZWlyIGNhcGl0YWxpc2VkXG4gKiBjb3VudGVycGFydHMgKi9cbnZhciBjaGFyc0xlbmd0aCA9IDUyO1xuXG4vKiBzdGFydCBhdCA3NSBmb3IgJ2EnIHVudGlsICd6JyAoMjUpIGFuZCB0aGVuIHN0YXJ0IGF0IDY1IGZvciBjYXBpdGFsaXNlZCBsZXR0ZXJzICovXG52YXIgZ2V0QWxwaGFiZXRpY0NoYXIgPSBmdW5jdGlvbiBnZXRBbHBoYWJldGljQ2hhcihjb2RlKSB7XG4gIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUgKyAoY29kZSA+IDI1ID8gMzkgOiA5NykpO1xufTtcblxuLyogaW5wdXQgYSBudW1iZXIsIHVzdWFsbHkgYSBoYXNoIGFuZCBjb252ZXJ0IGl0IHRvIGJhc2UtNTIgKi9cbmZ1bmN0aW9uIGdlbmVyYXRlQWxwaGFiZXRpY05hbWUoY29kZSkge1xuICB2YXIgbmFtZSA9ICcnO1xuICB2YXIgeCA9IHZvaWQgMDtcblxuICAvKiBnZXQgYSBjaGFyIGFuZCBkaXZpZGUgYnkgYWxwaGFiZXQtbGVuZ3RoICovXG4gIGZvciAoeCA9IGNvZGU7IHggPiBjaGFyc0xlbmd0aDsgeCA9IE1hdGguZmxvb3IoeCAvIGNoYXJzTGVuZ3RoKSkge1xuICAgIG5hbWUgPSBnZXRBbHBoYWJldGljQ2hhcih4ICUgY2hhcnNMZW5ndGgpICsgbmFtZTtcbiAgfVxuXG4gIHJldHVybiBnZXRBbHBoYWJldGljQ2hhcih4ICUgY2hhcnNMZW5ndGgpICsgbmFtZTtcbn1cblxuLy8gXG5cbmZ1bmN0aW9uIGhhc0Z1bmN0aW9uT2JqZWN0S2V5KG9iaikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluLCBuby1yZXN0cmljdGVkLXN5bnRheFxuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24ob2JqW2tleV0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzU3RhdGljUnVsZXMocnVsZXMsIGF0dHJzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcnVsZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgcnVsZSA9IHJ1bGVzW2ldO1xuXG4gICAgLy8gcmVjdXJzaXZlIGNhc2VcbiAgICBpZiAoQXJyYXkuaXNBcnJheShydWxlKSAmJiAhaXNTdGF0aWNSdWxlcyhydWxlLCBhdHRycykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24ocnVsZSkgJiYgIWlzU3R5bGVkQ29tcG9uZW50KHJ1bGUpKSB7XG4gICAgICAvLyBmdW5jdGlvbnMgYXJlIGFsbG93ZWQgdG8gYmUgc3RhdGljIGlmIHRoZXkncmUganVzdCBiZWluZ1xuICAgICAgLy8gdXNlZCB0byBnZXQgdGhlIGNsYXNzbmFtZSBvZiBhIG5lc3RlZCBzdHlsZWQgY29tcG9uZW50XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgaWYgKGF0dHJzLnNvbWUoZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbih4KSB8fCBoYXNGdW5jdGlvbk9iamVjdEtleSh4KTtcbiAgfSkpIHJldHVybiBmYWxzZTtcblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLy8gXG5cbnZhciBpc0hNUkVuYWJsZWQgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5ob3Q7XG5cbi8qIGNvbWJpbmVzIGhhc2hTdHIgKG11cm11cmhhc2gpIGFuZCBuYW1lR2VuZXJhdG9yIGZvciBjb252ZW5pZW5jZSAqL1xudmFyIGhhc2hlciA9IGZ1bmN0aW9uIGhhc2hlcihzdHIpIHtcbiAgcmV0dXJuIGdlbmVyYXRlQWxwaGFiZXRpY05hbWUobXVybXVyaGFzaChzdHIpKTtcbn07XG5cbi8qXG4gQ29tcG9uZW50U3R5bGUgaXMgYWxsIHRoZSBDU1Mtc3BlY2lmaWMgc3R1ZmYsIG5vdFxuIHRoZSBSZWFjdC1zcGVjaWZpYyBzdHVmZi5cbiAqL1xuXG52YXIgQ29tcG9uZW50U3R5bGUgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIENvbXBvbmVudFN0eWxlKHJ1bGVzLCBhdHRycywgY29tcG9uZW50SWQpIHtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBDb21wb25lbnRTdHlsZSk7XG5cbiAgICB0aGlzLnJ1bGVzID0gcnVsZXM7XG4gICAgdGhpcy5pc1N0YXRpYyA9ICFpc0hNUkVuYWJsZWQgJiYgaXNTdGF0aWNSdWxlcyhydWxlcywgYXR0cnMpO1xuICAgIHRoaXMuY29tcG9uZW50SWQgPSBjb21wb25lbnRJZDtcblxuICAgIGlmICghU3R5bGVTaGVldC5tYXN0ZXIuaGFzSWQoY29tcG9uZW50SWQpKSB7XG4gICAgICBTdHlsZVNoZWV0Lm1hc3Rlci5kZWZlcnJlZEluamVjdChjb21wb25lbnRJZCwgW10pO1xuICAgIH1cbiAgfVxuXG4gIC8qXG4gICAgICogRmxhdHRlbnMgYSBydWxlIHNldCBpbnRvIHZhbGlkIENTU1xuICAgICAqIEhhc2hlcyBpdCwgd3JhcHMgdGhlIHdob2xlIGNodW5rIGluIGEgLmhhc2gxMjM0IHt9XG4gICAgICogUmV0dXJucyB0aGUgaGFzaCB0byBiZSBpbmplY3RlZCBvbiByZW5kZXIoKVxuICAgICAqICovXG5cblxuICBDb21wb25lbnRTdHlsZS5wcm90b3R5cGUuZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXMgPSBmdW5jdGlvbiBnZW5lcmF0ZUFuZEluamVjdFN0eWxlcyhleGVjdXRpb25Db250ZXh0LCBzdHlsZVNoZWV0KSB7XG4gICAgdmFyIGlzU3RhdGljID0gdGhpcy5pc1N0YXRpYyxcbiAgICAgICAgY29tcG9uZW50SWQgPSB0aGlzLmNvbXBvbmVudElkLFxuICAgICAgICBsYXN0Q2xhc3NOYW1lID0gdGhpcy5sYXN0Q2xhc3NOYW1lO1xuXG4gICAgaWYgKElTX0JST1dTRVIgJiYgaXNTdGF0aWMgJiYgdHlwZW9mIGxhc3RDbGFzc05hbWUgPT09ICdzdHJpbmcnICYmIHN0eWxlU2hlZXQuaGFzTmFtZUZvcklkKGNvbXBvbmVudElkLCBsYXN0Q2xhc3NOYW1lKSkge1xuICAgICAgcmV0dXJuIGxhc3RDbGFzc05hbWU7XG4gICAgfVxuXG4gICAgdmFyIGZsYXRDU1MgPSBmbGF0dGVuKHRoaXMucnVsZXMsIGV4ZWN1dGlvbkNvbnRleHQsIHN0eWxlU2hlZXQpO1xuICAgIHZhciBuYW1lID0gaGFzaGVyKHRoaXMuY29tcG9uZW50SWQgKyBmbGF0Q1NTLmpvaW4oJycpKTtcbiAgICBpZiAoIXN0eWxlU2hlZXQuaGFzTmFtZUZvcklkKGNvbXBvbmVudElkLCBuYW1lKSkge1xuICAgICAgc3R5bGVTaGVldC5pbmplY3QodGhpcy5jb21wb25lbnRJZCwgc3RyaW5naWZ5UnVsZXMoZmxhdENTUywgJy4nICsgbmFtZSwgdW5kZWZpbmVkLCBjb21wb25lbnRJZCksIG5hbWUpO1xuICAgIH1cblxuICAgIHRoaXMubGFzdENsYXNzTmFtZSA9IG5hbWU7XG4gICAgcmV0dXJuIG5hbWU7XG4gIH07XG5cbiAgQ29tcG9uZW50U3R5bGUuZ2VuZXJhdGVOYW1lID0gZnVuY3Rpb24gZ2VuZXJhdGVOYW1lKHN0cikge1xuICAgIHJldHVybiBoYXNoZXIoc3RyKTtcbiAgfTtcblxuICByZXR1cm4gQ29tcG9uZW50U3R5bGU7XG59KCk7XG5cbi8vIFxuXG52YXIgTElNSVQgPSAyMDA7XG5cbnZhciBjcmVhdGVXYXJuVG9vTWFueUNsYXNzZXMgPSAoZnVuY3Rpb24gKGRpc3BsYXlOYW1lKSB7XG4gIHZhciBnZW5lcmF0ZWRDbGFzc2VzID0ge307XG4gIHZhciB3YXJuaW5nU2VlbiA9IGZhbHNlO1xuXG4gIHJldHVybiBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgaWYgKCF3YXJuaW5nU2Vlbikge1xuICAgICAgZ2VuZXJhdGVkQ2xhc3Nlc1tjbGFzc05hbWVdID0gdHJ1ZTtcbiAgICAgIGlmIChPYmplY3Qua2V5cyhnZW5lcmF0ZWRDbGFzc2VzKS5sZW5ndGggPj0gTElNSVQpIHtcbiAgICAgICAgLy8gVW5hYmxlIHRvIGZpbmQgbGF0ZXN0UnVsZSBpbiB0ZXN0IGVudmlyb25tZW50LlxuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlLCBwcmVmZXItdGVtcGxhdGUgKi9cbiAgICAgICAgY29uc29sZS53YXJuKCdPdmVyICcgKyBMSU1JVCArICcgY2xhc3NlcyB3ZXJlIGdlbmVyYXRlZCBmb3IgY29tcG9uZW50ICcgKyBkaXNwbGF5TmFtZSArICcuIFxcbicgKyAnQ29uc2lkZXIgdXNpbmcgdGhlIGF0dHJzIG1ldGhvZCwgdG9nZXRoZXIgd2l0aCBhIHN0eWxlIG9iamVjdCBmb3IgZnJlcXVlbnRseSBjaGFuZ2VkIHN0eWxlcy5cXG4nICsgJ0V4YW1wbGU6XFxuJyArICcgIGNvbnN0IENvbXBvbmVudCA9IHN0eWxlZC5kaXYuYXR0cnMoe1xcbicgKyAnICAgIHN0eWxlOiAoeyBiYWNrZ3JvdW5kIH0pID0+ICh7XFxuJyArICcgICAgICBiYWNrZ3JvdW5kLFxcbicgKyAnICAgIH0pLFxcbicgKyAnICB9KWB3aWR0aDogMTAwJTtgXFxuXFxuJyArICcgIDxDb21wb25lbnQgLz4nKTtcbiAgICAgICAgd2FybmluZ1NlZW4gPSB0cnVlO1xuICAgICAgICBnZW5lcmF0ZWRDbGFzc2VzID0ge307XG4gICAgICB9XG4gICAgfVxuICB9O1xufSk7XG5cbi8vIFxuXG52YXIgZGV0ZXJtaW5lVGhlbWUgPSAoZnVuY3Rpb24gKHByb3BzLCBmYWxsYmFja1RoZW1lKSB7XG4gIHZhciBkZWZhdWx0UHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IEVNUFRZX09CSkVDVDtcblxuICAvLyBQcm9wcyBzaG91bGQgdGFrZSBwcmVjZWRlbmNlIG92ZXIgVGhlbWVQcm92aWRlciwgd2hpY2ggc2hvdWxkIHRha2UgcHJlY2VkZW5jZSBvdmVyXG4gIC8vIGRlZmF1bHRQcm9wcywgYnV0IFJlYWN0IGF1dG9tYXRpY2FsbHkgcHV0cyBkZWZhdWx0UHJvcHMgb24gcHJvcHMuXG5cbiAgLyogZXNsaW50LWRpc2FibGUgcmVhY3QvcHJvcC10eXBlcywgZmxvd3R5cGUtZXJyb3JzL3Nob3ctZXJyb3JzICovXG4gIHZhciBpc0RlZmF1bHRUaGVtZSA9IGRlZmF1bHRQcm9wcyA/IHByb3BzLnRoZW1lID09PSBkZWZhdWx0UHJvcHMudGhlbWUgOiBmYWxzZTtcbiAgdmFyIHRoZW1lID0gcHJvcHMudGhlbWUgJiYgIWlzRGVmYXVsdFRoZW1lID8gcHJvcHMudGhlbWUgOiBmYWxsYmFja1RoZW1lIHx8IGRlZmF1bHRQcm9wcy50aGVtZTtcbiAgLyogZXNsaW50LWVuYWJsZSAqL1xuXG4gIHJldHVybiB0aGVtZTtcbn0pO1xuXG4vLyBcbnZhciBlc2NhcGVSZWdleCA9IC9bW1xcXS4jKiQ+PCt+PXxeOigpLFwiJ2AtXSsvZztcbnZhciBkYXNoZXNBdEVuZHMgPSAvKF4tfC0kKS9nO1xuXG4vKipcbiAqIFRPRE86IEV4cGxvcmUgdXNpbmcgQ1NTLmVzY2FwZSB3aGVuIGl0IGJlY29tZXMgbW9yZSBhdmFpbGFibGVcbiAqIGluIGV2ZXJncmVlbiBicm93c2Vycy5cbiAqL1xuZnVuY3Rpb24gZXNjYXBlKHN0cikge1xuICByZXR1cm4gc3RyXG4gIC8vIFJlcGxhY2UgYWxsIHBvc3NpYmxlIENTUyBzZWxlY3RvcnNcbiAgLnJlcGxhY2UoZXNjYXBlUmVnZXgsICctJylcblxuICAvLyBSZW1vdmUgZXh0cmFuZW91cyBoeXBoZW5zIGF0IHRoZSBzdGFydCBhbmQgZW5kXG4gIC5yZXBsYWNlKGRhc2hlc0F0RW5kcywgJycpO1xufVxuXG4vLyBcblxuZnVuY3Rpb24gaXNUYWcodGFyZ2V0KSB7XG4gIHJldHVybiB0eXBlb2YgdGFyZ2V0ID09PSAnc3RyaW5nJyAmJiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHRhcmdldC5jaGFyQXQoMCkgPT09IHRhcmdldC5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSA6IHRydWUpO1xufVxuXG4vLyBcblxuZnVuY3Rpb24gZ2VuZXJhdGVEaXNwbGF5TmFtZSh0YXJnZXQpIHtcbiAgLy8gJEZsb3dGaXhNZVxuICByZXR1cm4gaXNUYWcodGFyZ2V0KSA/ICdzdHlsZWQuJyArIHRhcmdldCA6ICdTdHlsZWQoJyArIGdldENvbXBvbmVudE5hbWUodGFyZ2V0KSArICcpJztcbn1cblxudmFyIF9UWVBFX1NUQVRJQ1M7XG5cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGVzOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcblxudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gIG5hbWU6IHRydWUsXG4gIGxlbmd0aDogdHJ1ZSxcbiAgcHJvdG90eXBlOiB0cnVlLFxuICBjYWxsZXI6IHRydWUsXG4gIGNhbGxlZTogdHJ1ZSxcbiAgYXJndW1lbnRzOiB0cnVlLFxuICBhcml0eTogdHJ1ZVxufTtcblxudmFyIFRZUEVfU1RBVElDUyA9IChfVFlQRV9TVEFUSUNTID0ge30sIF9UWVBFX1NUQVRJQ1NbRm9yd2FyZFJlZl0gPSB7XG4gICQkdHlwZW9mOiB0cnVlLFxuICByZW5kZXI6IHRydWVcbn0sIF9UWVBFX1NUQVRJQ1MpO1xuXG52YXIgZGVmaW5lUHJvcGVydHkkMSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSxcbiAgICBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMsXG4gICAgX09iamVjdCRnZXRPd25Qcm9wZXJ0ID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyxcbiAgICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBfT2JqZWN0JGdldE93blByb3BlcnQgPT09IHVuZGVmaW5lZCA/IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIFtdO1xufSA6IF9PYmplY3QkZ2V0T3duUHJvcGVydCxcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAgIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mLFxuICAgIG9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG52YXIgYXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cblxuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuXG4gICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IGFycmF5UHJvdG90eXBlLmNvbmNhdChnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCksXG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcblxuICAgIHZhciB0YXJnZXRTdGF0aWNzID0gVFlQRV9TVEFUSUNTW3RhcmdldENvbXBvbmVudC4kJHR5cGVvZl0gfHwgUkVBQ1RfU1RBVElDUztcblxuICAgIHZhciBzb3VyY2VTdGF0aWNzID0gVFlQRV9TVEFUSUNTW3NvdXJjZUNvbXBvbmVudC4kJHR5cGVvZl0gfHwgUkVBQ1RfU1RBVElDUztcblxuICAgIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSB2b2lkIDA7XG4gICAgdmFyIGtleSA9IHZvaWQgMDtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wbHVzcGx1c1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmIChcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgICFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShibGFja2xpc3QgJiYgYmxhY2tsaXN0W2tleV0pICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmXG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcblxuICAgICAgICBpZiAoZGVzY3JpcHRvcikge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSQxKHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvKiBmYWlsIHNpbGVudGx5ICovXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbi8vIFxuZnVuY3Rpb24gaXNEZXJpdmVkUmVhY3RDb21wb25lbnQoZm4pIHtcbiAgcmV0dXJuICEhKGZuICYmIGZuLnByb3RvdHlwZSAmJiBmbi5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCk7XG59XG5cbi8vIFxuLy8gSGVscGVyIHRvIGNhbGwgYSBnaXZlbiBmdW5jdGlvbiwgb25seSBvbmNlXG52YXIgb25jZSA9IChmdW5jdGlvbiAoY2IpIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICBjYi5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9O1xufSk7XG5cbi8vIFxuXG52YXIgVGhlbWVDb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuXG52YXIgVGhlbWVDb25zdW1lciA9IFRoZW1lQ29udGV4dC5Db25zdW1lcjtcblxuLyoqXG4gKiBQcm92aWRlIGEgdGhlbWUgdG8gYW4gZW50aXJlIHJlYWN0IGNvbXBvbmVudCB0cmVlIHZpYSBjb250ZXh0XG4gKi9cblxudmFyIFRoZW1lUHJvdmlkZXIgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBpbmhlcml0cyhUaGVtZVByb3ZpZGVyLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUaGVtZVByb3ZpZGVyKHByb3BzKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgVGhlbWVQcm92aWRlcik7XG5cbiAgICB2YXIgX3RoaXMgPSBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9Db21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgX3RoaXMuZ2V0Q29udGV4dCA9IG1lbW9pemUoX3RoaXMuZ2V0Q29udGV4dC5iaW5kKF90aGlzKSk7XG4gICAgX3RoaXMucmVuZGVySW5uZXIgPSBfdGhpcy5yZW5kZXJJbm5lci5iaW5kKF90aGlzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBUaGVtZVByb3ZpZGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgaWYgKCF0aGlzLnByb3BzLmNoaWxkcmVuKSByZXR1cm4gbnVsbDtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgVGhlbWVDb250ZXh0LkNvbnN1bWVyLFxuICAgICAgbnVsbCxcbiAgICAgIHRoaXMucmVuZGVySW5uZXJcbiAgICApO1xuICB9O1xuXG4gIFRoZW1lUHJvdmlkZXIucHJvdG90eXBlLnJlbmRlcklubmVyID0gZnVuY3Rpb24gcmVuZGVySW5uZXIob3V0ZXJUaGVtZSkge1xuICAgIHZhciBjb250ZXh0ID0gdGhpcy5nZXRDb250ZXh0KHRoaXMucHJvcHMudGhlbWUsIG91dGVyVGhlbWUpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBUaGVtZUNvbnRleHQuUHJvdmlkZXIsXG4gICAgICB7IHZhbHVlOiBjb250ZXh0IH0sXG4gICAgICBSZWFjdC5DaGlsZHJlbi5vbmx5KHRoaXMucHJvcHMuY2hpbGRyZW4pXG4gICAgKTtcbiAgfTtcblxuICAvKipcbiAgICogR2V0IHRoZSB0aGVtZSBmcm9tIHRoZSBwcm9wcywgc3VwcG9ydGluZyBib3RoIChvdXRlclRoZW1lKSA9PiB7fVxuICAgKiBhcyB3ZWxsIGFzIG9iamVjdCBub3RhdGlvblxuICAgKi9cblxuXG4gIFRoZW1lUHJvdmlkZXIucHJvdG90eXBlLmdldFRoZW1lID0gZnVuY3Rpb24gZ2V0VGhlbWUodGhlbWUsIG91dGVyVGhlbWUpIHtcbiAgICBpZiAoaXNGdW5jdGlvbih0aGVtZSkpIHtcbiAgICAgIHZhciBtZXJnZWRUaGVtZSA9IHRoZW1lKG91dGVyVGhlbWUpO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAobWVyZ2VkVGhlbWUgPT09IG51bGwgfHwgQXJyYXkuaXNBcnJheShtZXJnZWRUaGVtZSkgfHwgKHR5cGVvZiBtZXJnZWRUaGVtZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YobWVyZ2VkVGhlbWUpKSAhPT0gJ29iamVjdCcpKSB7XG4gICAgICAgIHRocm93IG5ldyBTdHlsZWRDb21wb25lbnRzRXJyb3IoNyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtZXJnZWRUaGVtZTtcbiAgICB9XG5cbiAgICBpZiAodGhlbWUgPT09IG51bGwgfHwgQXJyYXkuaXNBcnJheSh0aGVtZSkgfHwgKHR5cGVvZiB0aGVtZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodGhlbWUpKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBTdHlsZWRDb21wb25lbnRzRXJyb3IoOCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBvdXRlclRoZW1lLCB0aGVtZSk7XG4gIH07XG5cbiAgVGhlbWVQcm92aWRlci5wcm90b3R5cGUuZ2V0Q29udGV4dCA9IGZ1bmN0aW9uIGdldENvbnRleHQodGhlbWUsIG91dGVyVGhlbWUpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRUaGVtZSh0aGVtZSwgb3V0ZXJUaGVtZSk7XG4gIH07XG5cbiAgcmV0dXJuIFRoZW1lUHJvdmlkZXI7XG59KENvbXBvbmVudCk7XG5cbi8vIFxuXG52YXIgQ0xPU0lOR19UQUdfUiA9IC9eXFxzKjxcXC9bYS16XS9pO1xuXG52YXIgU2VydmVyU3R5bGVTaGVldCA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2VydmVyU3R5bGVTaGVldCgpIHtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBTZXJ2ZXJTdHlsZVNoZWV0KTtcblxuICAgIC8qIFRoZSBtYXN0ZXIgc2hlZXQgbWlnaHQgYmUgcmVzZXQsIHNvIGtlZXAgYSByZWZlcmVuY2UgaGVyZSAqL1xuICAgIHRoaXMubWFzdGVyU2hlZXQgPSBTdHlsZVNoZWV0Lm1hc3RlcjtcbiAgICB0aGlzLmluc3RhbmNlID0gdGhpcy5tYXN0ZXJTaGVldC5jbG9uZSgpO1xuICAgIHRoaXMuc2VhbGVkID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogTWFyayB0aGUgU2VydmVyU3R5bGVTaGVldCBhcyBiZWluZyBmdWxseSBlbWl0dGVkIGFuZCBtYW51YWxseSBHQyBpdCBmcm9tIHRoZVxuICAgKiBTdHlsZVNoZWV0IHNpbmdsZXRvbi5cbiAgICovXG5cblxuICBTZXJ2ZXJTdHlsZVNoZWV0LnByb3RvdHlwZS5zZWFsID0gZnVuY3Rpb24gc2VhbCgpIHtcbiAgICBpZiAoIXRoaXMuc2VhbGVkKSB7XG4gICAgICAvKiBSZW1vdmUgc2VhbGVkIFN0eWxlU2hlZXRzIGZyb20gdGhlIG1hc3RlciBzaGVldCAqL1xuICAgICAgdmFyIGluZGV4ID0gdGhpcy5tYXN0ZXJTaGVldC5jbG9uZXMuaW5kZXhPZih0aGlzLmluc3RhbmNlKTtcbiAgICAgIHRoaXMubWFzdGVyU2hlZXQuY2xvbmVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICB0aGlzLnNlYWxlZCA9IHRydWU7XG4gICAgfVxuICB9O1xuXG4gIFNlcnZlclN0eWxlU2hlZXQucHJvdG90eXBlLmNvbGxlY3RTdHlsZXMgPSBmdW5jdGlvbiBjb2xsZWN0U3R5bGVzKGNoaWxkcmVuKSB7XG4gICAgaWYgKHRoaXMuc2VhbGVkKSB7XG4gICAgICB0aHJvdyBuZXcgU3R5bGVkQ29tcG9uZW50c0Vycm9yKDIpO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgU3R5bGVTaGVldE1hbmFnZXIsXG4gICAgICB7IHNoZWV0OiB0aGlzLmluc3RhbmNlIH0sXG4gICAgICBjaGlsZHJlblxuICAgICk7XG4gIH07XG5cbiAgU2VydmVyU3R5bGVTaGVldC5wcm90b3R5cGUuZ2V0U3R5bGVUYWdzID0gZnVuY3Rpb24gZ2V0U3R5bGVUYWdzKCkge1xuICAgIHRoaXMuc2VhbCgpO1xuICAgIHJldHVybiB0aGlzLmluc3RhbmNlLnRvSFRNTCgpO1xuICB9O1xuXG4gIFNlcnZlclN0eWxlU2hlZXQucHJvdG90eXBlLmdldFN0eWxlRWxlbWVudCA9IGZ1bmN0aW9uIGdldFN0eWxlRWxlbWVudCgpIHtcbiAgICB0aGlzLnNlYWwoKTtcbiAgICByZXR1cm4gdGhpcy5pbnN0YW5jZS50b1JlYWN0RWxlbWVudHMoKTtcbiAgfTtcblxuICBTZXJ2ZXJTdHlsZVNoZWV0LnByb3RvdHlwZS5pbnRlcmxlYXZlV2l0aE5vZGVTdHJlYW0gPSBmdW5jdGlvbiBpbnRlcmxlYXZlV2l0aE5vZGVTdHJlYW0ocmVhZGFibGVTdHJlYW0pIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAge1xuICAgICAgdGhyb3cgbmV3IFN0eWxlZENvbXBvbmVudHNFcnJvcigzKTtcbiAgICB9XG5cbiAgICAvKiB0aGUgdGFnIGluZGV4IGtlZXBzIHRyYWNrIG9mIHdoaWNoIHRhZ3MgaGF2ZSBhbHJlYWR5IGJlZW4gZW1pdHRlZCAqL1xuICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuaW5zdGFuY2U7XG5cbiAgICB2YXIgaW5zdGFuY2VUYWdJbmRleCA9IDA7XG5cbiAgICB2YXIgc3RyZWFtQXR0ciA9IFNDX1NUUkVBTV9BVFRSICsgJz1cInRydWVcIic7XG5cbiAgICB2YXIgdHJhbnNmb3JtZXIgPSBuZXcgc3RyZWFtLlRyYW5zZm9ybSh7XG4gICAgICB0cmFuc2Zvcm06IGZ1bmN0aW9uIGFwcGVuZFN0eWxlQ2h1bmtzKGNodW5rLCAvKiBlbmNvZGluZyAqL18sIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciB0YWdzID0gaW5zdGFuY2UudGFncztcblxuICAgICAgICB2YXIgaHRtbCA9ICcnO1xuXG4gICAgICAgIC8qIHJldHJpZXZlIGh0bWwgZm9yIGVhY2ggbmV3IHN0eWxlIHRhZyAqL1xuICAgICAgICBmb3IgKDsgaW5zdGFuY2VUYWdJbmRleCA8IHRhZ3MubGVuZ3RoOyBpbnN0YW5jZVRhZ0luZGV4ICs9IDEpIHtcbiAgICAgICAgICB2YXIgdGFnID0gdGFnc1tpbnN0YW5jZVRhZ0luZGV4XTtcbiAgICAgICAgICBodG1sICs9IHRhZy50b0hUTUwoc3RyZWFtQXR0cik7XG4gICAgICAgIH1cblxuICAgICAgICAvKiBmb3JjZSBvdXIgU3R5bGVTaGVldHMgdG8gZW1pdCBlbnRpcmVseSBuZXcgdGFncyAqL1xuICAgICAgICBpbnN0YW5jZS5zZWFsQWxsVGFncygpO1xuXG4gICAgICAgIHZhciByZW5kZXJlZEh0bWwgPSBjaHVuay50b1N0cmluZygpO1xuXG4gICAgICAgIC8qIHByZXBlbmQgc3R5bGUgaHRtbCB0byBjaHVuaywgdW5sZXNzIHRoZSBzdGFydCBvZiB0aGUgY2h1bmsgaXMgYSBjbG9zaW5nIHRhZyBpbiB3aGljaCBjYXNlIGFwcGVuZCByaWdodCBhZnRlciB0aGF0ICovXG4gICAgICAgIGlmIChDTE9TSU5HX1RBR19SLnRlc3QocmVuZGVyZWRIdG1sKSkge1xuICAgICAgICAgIHZhciBlbmRPZkNsb3NpbmdUYWcgPSByZW5kZXJlZEh0bWwuaW5kZXhPZignPicpO1xuXG4gICAgICAgICAgdGhpcy5wdXNoKHJlbmRlcmVkSHRtbC5zbGljZSgwLCBlbmRPZkNsb3NpbmdUYWcgKyAxKSArIGh0bWwgKyByZW5kZXJlZEh0bWwuc2xpY2UoZW5kT2ZDbG9zaW5nVGFnICsgMSkpO1xuICAgICAgICB9IGVsc2UgdGhpcy5wdXNoKGh0bWwgKyByZW5kZXJlZEh0bWwpO1xuXG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZWFkYWJsZVN0cmVhbS5vbignZW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLnNlYWwoKTtcbiAgICB9KTtcblxuICAgIHJlYWRhYmxlU3RyZWFtLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIF90aGlzLnNlYWwoKTtcblxuICAgICAgLy8gZm9yd2FyZCB0aGUgZXJyb3IgdG8gdGhlIHRyYW5zZm9ybSBzdHJlYW1cbiAgICAgIHRyYW5zZm9ybWVyLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZWFkYWJsZVN0cmVhbS5waXBlKHRyYW5zZm9ybWVyKTtcbiAgfTtcblxuICByZXR1cm4gU2VydmVyU3R5bGVTaGVldDtcbn0oKTtcblxuLy8gXG5cbnZhciBTdHlsZVNoZWV0Q29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcbnZhciBTdHlsZVNoZWV0Q29uc3VtZXIgPSBTdHlsZVNoZWV0Q29udGV4dC5Db25zdW1lcjtcblxudmFyIFN0eWxlU2hlZXRNYW5hZ2VyID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgaW5oZXJpdHMoU3R5bGVTaGVldE1hbmFnZXIsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN0eWxlU2hlZXRNYW5hZ2VyKHByb3BzKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgU3R5bGVTaGVldE1hbmFnZXIpO1xuXG4gICAgdmFyIF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgIF90aGlzLmdldENvbnRleHQgPSBtZW1vaXplKF90aGlzLmdldENvbnRleHQpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIFN0eWxlU2hlZXRNYW5hZ2VyLnByb3RvdHlwZS5nZXRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q29udGV4dChzaGVldCwgdGFyZ2V0KSB7XG4gICAgaWYgKHNoZWV0KSB7XG4gICAgICByZXR1cm4gc2hlZXQ7XG4gICAgfSBlbHNlIGlmICh0YXJnZXQpIHtcbiAgICAgIHJldHVybiBuZXcgU3R5bGVTaGVldCh0YXJnZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgU3R5bGVkQ29tcG9uZW50c0Vycm9yKDQpO1xuICAgIH1cbiAgfTtcblxuICBTdHlsZVNoZWV0TWFuYWdlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgc2hlZXQgPSBfcHJvcHMuc2hlZXQsXG4gICAgICAgIHRhcmdldCA9IF9wcm9wcy50YXJnZXQ7XG5cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgU3R5bGVTaGVldENvbnRleHQuUHJvdmlkZXIsXG4gICAgICB7IHZhbHVlOiB0aGlzLmdldENvbnRleHQoc2hlZXQsIHRhcmdldCkgfSxcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKSA6IGNoaWxkcmVuXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gU3R5bGVTaGVldE1hbmFnZXI7XG59KENvbXBvbmVudCk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdHlsZVNoZWV0TWFuYWdlci5wcm9wVHlwZXMgPSB7XG4gIHNoZWV0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuaW5zdGFuY2VPZihTdHlsZVNoZWV0KSwgUHJvcFR5cGVzLmluc3RhbmNlT2YoU2VydmVyU3R5bGVTaGVldCldKSxcblxuICB0YXJnZXQ6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYXBwZW5kQ2hpbGQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgfSlcbn0gOiB2b2lkIDA7XG5cbi8vIFxuXG52YXIgaWRlbnRpZmllcnMgPSB7fTtcblxuLyogV2UgZGVwZW5kIG9uIGNvbXBvbmVudHMgaGF2aW5nIHVuaXF1ZSBJRHMgKi9cbmZ1bmN0aW9uIGdlbmVyYXRlSWQoX0NvbXBvbmVudFN0eWxlLCBfZGlzcGxheU5hbWUsIHBhcmVudENvbXBvbmVudElkKSB7XG4gIHZhciBkaXNwbGF5TmFtZSA9IHR5cGVvZiBfZGlzcGxheU5hbWUgIT09ICdzdHJpbmcnID8gJ3NjJyA6IGVzY2FwZShfZGlzcGxheU5hbWUpO1xuXG4gIC8qKlxuICAgKiBUaGlzIGVuc3VyZXMgdW5pcXVlbmVzcyBpZiB0d28gY29tcG9uZW50cyBoYXBwZW4gdG8gc2hhcmVcbiAgICogdGhlIHNhbWUgZGlzcGxheU5hbWUuXG4gICAqL1xuICB2YXIgbnIgPSAoaWRlbnRpZmllcnNbZGlzcGxheU5hbWVdIHx8IDApICsgMTtcbiAgaWRlbnRpZmllcnNbZGlzcGxheU5hbWVdID0gbnI7XG5cbiAgdmFyIGNvbXBvbmVudElkID0gZGlzcGxheU5hbWUgKyAnLScgKyBfQ29tcG9uZW50U3R5bGUuZ2VuZXJhdGVOYW1lKGRpc3BsYXlOYW1lICsgbnIpO1xuXG4gIHJldHVybiBwYXJlbnRDb21wb25lbnRJZCA/IHBhcmVudENvbXBvbmVudElkICsgJy0nICsgY29tcG9uZW50SWQgOiBjb21wb25lbnRJZDtcbn1cblxuLy8gJEZsb3dGaXhNZVxuXG52YXIgU3R5bGVkQ29tcG9uZW50ID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgaW5oZXJpdHMoU3R5bGVkQ29tcG9uZW50LCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdHlsZWRDb21wb25lbnQoKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgU3R5bGVkQ29tcG9uZW50KTtcblxuICAgIHZhciBfdGhpcyA9IHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5jYWxsKHRoaXMpKTtcblxuICAgIF90aGlzLmF0dHJzID0ge307XG5cbiAgICBfdGhpcy5yZW5kZXJPdXRlciA9IF90aGlzLnJlbmRlck91dGVyLmJpbmQoX3RoaXMpO1xuICAgIF90aGlzLnJlbmRlcklubmVyID0gX3RoaXMucmVuZGVySW5uZXIuYmluZChfdGhpcyk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgX3RoaXMud2FybklubmVyUmVmID0gb25jZShmdW5jdGlvbiAoZGlzcGxheU5hbWUpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgIGNvbnNvbGUud2FybignVGhlIFwiaW5uZXJSZWZcIiBBUEkgaGFzIGJlZW4gcmVtb3ZlZCBpbiBzdHlsZWQtY29tcG9uZW50cyB2NCBpbiBmYXZvciBvZiBSZWFjdCAxNiByZWYgZm9yd2FyZGluZywgdXNlIFwicmVmXCIgaW5zdGVhZCBsaWtlIGEgdHlwaWNhbCBjb21wb25lbnQuIFwiaW5uZXJSZWZcIiB3YXMgZGV0ZWN0ZWQgb24gY29tcG9uZW50IFwiJyArIGRpc3BsYXlOYW1lICsgJ1wiLicpXG4gICAgICAgICk7XG4gICAgICB9KTtcblxuICAgICAgX3RoaXMud2FybkF0dHJzRm5PYmplY3RLZXlEZXByZWNhdGVkID0gb25jZShmdW5jdGlvbiAoa2V5LCBkaXNwbGF5TmFtZSkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgY29uc29sZS53YXJuKCdGdW5jdGlvbnMgYXMgb2JqZWN0LWZvcm0gYXR0cnMoe30pIGtleXMgYXJlIG5vdyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgdmVyc2lvbiBvZiBzdHlsZWQtY29tcG9uZW50cy4gU3dpdGNoIHRvIHRoZSBuZXcgYXR0cnMocHJvcHMgPT4gKHt9KSkgc3ludGF4IGluc3RlYWQgZm9yIGVhc2llciBhbmQgbW9yZSBwb3dlcmZ1bCBjb21wb3NpdGlvbi4gVGhlIGF0dHJzIGtleSBpbiBxdWVzdGlvbiBpcyBcIicgKyBrZXkgKyAnXCIgb24gY29tcG9uZW50IFwiJyArIGRpc3BsYXlOYW1lICsgJ1wiLicsICdcXG4gJyArIG5ldyBFcnJvcigpLnN0YWNrKVxuICAgICAgICApO1xuICAgICAgfSk7XG5cbiAgICAgIF90aGlzLndhcm5Ob25TdHlsZWRDb21wb25lbnRBdHRyc09iamVjdEtleSA9IG9uY2UoZnVuY3Rpb24gKGtleSwgZGlzcGxheU5hbWUpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgIGNvbnNvbGUud2FybignSXQgbG9va3MgbGlrZSB5b3VcXCd2ZSB1c2VkIGEgbm9uIHN0eWxlZC1jb21wb25lbnQgYXMgdGhlIHZhbHVlIGZvciB0aGUgXCInICsga2V5ICsgJ1wiIHByb3AgaW4gYW4gb2JqZWN0LWZvcm0gYXR0cnMgY29uc3RydWN0b3Igb2YgXCInICsgZGlzcGxheU5hbWUgKyAnXCIuXFxuJyArICdZb3Ugc2hvdWxkIHVzZSB0aGUgbmV3IGZ1bmN0aW9uLWZvcm0gYXR0cnMgY29uc3RydWN0b3Igd2hpY2ggYXZvaWRzIHRoaXMgaXNzdWU6IGF0dHJzKHByb3BzID0+ICh7IHlvdXJTdHVmZiB9KSlcXG4nICsgXCJUbyBjb250aW51ZSB1c2luZyB0aGUgZGVwcmVjYXRlZCBvYmplY3Qgc3ludGF4LCB5b3UnbGwgbmVlZCB0byB3cmFwIHlvdXIgY29tcG9uZW50IHByb3AgaW4gYSBmdW5jdGlvbiB0byBtYWtlIGl0IGF2YWlsYWJsZSBpbnNpZGUgdGhlIHN0eWxlZCBjb21wb25lbnQgKHlvdSdsbCBzdGlsbCBnZXQgdGhlIGRlcHJlY2F0aW9uIHdhcm5pbmcgdGhvdWdoLilcXG5cIiArICgnRm9yIGV4YW1wbGUsIHsgJyArIGtleSArICc6ICgpID0+IElubmVyQ29tcG9uZW50IH0gaW5zdGVhZCBvZiB7ICcgKyBrZXkgKyAnOiBJbm5lckNvbXBvbmVudCB9JykpXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgU3R5bGVkQ29tcG9uZW50LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBTdHlsZVNoZWV0Q29uc3VtZXIsXG4gICAgICBudWxsLFxuICAgICAgdGhpcy5yZW5kZXJPdXRlclxuICAgICk7XG4gIH07XG5cbiAgU3R5bGVkQ29tcG9uZW50LnByb3RvdHlwZS5yZW5kZXJPdXRlciA9IGZ1bmN0aW9uIHJlbmRlck91dGVyKCkge1xuICAgIHZhciBzdHlsZVNoZWV0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBTdHlsZVNoZWV0Lm1hc3RlcjtcblxuICAgIHRoaXMuc3R5bGVTaGVldCA9IHN0eWxlU2hlZXQ7XG5cbiAgICAvLyBObyBuZWVkIHRvIHN1YnNjcmliZSBhIHN0YXRpYyBjb21wb25lbnQgdG8gdGhlbWUgY2hhbmdlcywgaXQgd29uJ3QgY2hhbmdlIGFueXRoaW5nXG4gICAgaWYgKHRoaXMucHJvcHMuZm9yd2FyZGVkQ29tcG9uZW50LmNvbXBvbmVudFN0eWxlLmlzU3RhdGljKSByZXR1cm4gdGhpcy5yZW5kZXJJbm5lcigpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBUaGVtZUNvbnN1bWVyLFxuICAgICAgbnVsbCxcbiAgICAgIHRoaXMucmVuZGVySW5uZXJcbiAgICApO1xuICB9O1xuXG4gIFN0eWxlZENvbXBvbmVudC5wcm90b3R5cGUucmVuZGVySW5uZXIgPSBmdW5jdGlvbiByZW5kZXJJbm5lcih0aGVtZSkge1xuICAgIHZhciBfcHJvcHMkZm9yd2FyZGVkQ29tcG8gPSB0aGlzLnByb3BzLmZvcndhcmRlZENvbXBvbmVudCxcbiAgICAgICAgY29tcG9uZW50U3R5bGUgPSBfcHJvcHMkZm9yd2FyZGVkQ29tcG8uY29tcG9uZW50U3R5bGUsXG4gICAgICAgIGRlZmF1bHRQcm9wcyA9IF9wcm9wcyRmb3J3YXJkZWRDb21wby5kZWZhdWx0UHJvcHMsXG4gICAgICAgIGRpc3BsYXlOYW1lID0gX3Byb3BzJGZvcndhcmRlZENvbXBvLmRpc3BsYXlOYW1lLFxuICAgICAgICBmb2xkZWRDb21wb25lbnRJZHMgPSBfcHJvcHMkZm9yd2FyZGVkQ29tcG8uZm9sZGVkQ29tcG9uZW50SWRzLFxuICAgICAgICBzdHlsZWRDb21wb25lbnRJZCA9IF9wcm9wcyRmb3J3YXJkZWRDb21wby5zdHlsZWRDb21wb25lbnRJZCxcbiAgICAgICAgdGFyZ2V0ID0gX3Byb3BzJGZvcndhcmRlZENvbXBvLnRhcmdldDtcblxuXG4gICAgdmFyIGdlbmVyYXRlZENsYXNzTmFtZSA9IHZvaWQgMDtcbiAgICBpZiAoY29tcG9uZW50U3R5bGUuaXNTdGF0aWMpIHtcbiAgICAgIGdlbmVyYXRlZENsYXNzTmFtZSA9IHRoaXMuZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXMoRU1QVFlfT0JKRUNULCB0aGlzLnByb3BzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuZXJhdGVkQ2xhc3NOYW1lID0gdGhpcy5nZW5lcmF0ZUFuZEluamVjdFN0eWxlcyhkZXRlcm1pbmVUaGVtZSh0aGlzLnByb3BzLCB0aGVtZSwgZGVmYXVsdFByb3BzKSB8fCBFTVBUWV9PQkpFQ1QsIHRoaXMucHJvcHMpO1xuICAgIH1cblxuICAgIHZhciBlbGVtZW50VG9CZUNyZWF0ZWQgPSB0aGlzLnByb3BzLmFzIHx8IHRoaXMuYXR0cnMuYXMgfHwgdGFyZ2V0O1xuICAgIHZhciBpc1RhcmdldFRhZyA9IGlzVGFnKGVsZW1lbnRUb0JlQ3JlYXRlZCk7XG5cbiAgICB2YXIgcHJvcHNGb3JFbGVtZW50ID0ge307XG4gICAgdmFyIGNvbXB1dGVkUHJvcHMgPSBfZXh0ZW5kcyh7fSwgdGhpcy5hdHRycywgdGhpcy5wcm9wcyk7XG5cbiAgICB2YXIga2V5ID0gdm9pZCAwO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgICBmb3IgKGtleSBpbiBjb21wdXRlZFByb3BzKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBrZXkgPT09ICdpbm5lclJlZicgJiYgaXNUYXJnZXRUYWcpIHtcbiAgICAgICAgdGhpcy53YXJuSW5uZXJSZWYoZGlzcGxheU5hbWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoa2V5ID09PSAnZm9yd2FyZGVkQ29tcG9uZW50JyB8fCBrZXkgPT09ICdhcycpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2ZvcndhcmRlZFJlZicpIHByb3BzRm9yRWxlbWVudC5yZWYgPSBjb21wdXRlZFByb3BzW2tleV07ZWxzZSBpZiAoa2V5ID09PSAnZm9yd2FyZGVkQXMnKSBwcm9wc0ZvckVsZW1lbnQuYXMgPSBjb21wdXRlZFByb3BzW2tleV07ZWxzZSBpZiAoIWlzVGFyZ2V0VGFnIHx8IHZhbGlkQXR0cihrZXkpKSB7XG4gICAgICAgIC8vIERvbid0IHBhc3MgdGhyb3VnaCBub24gSFRNTCB0YWdzIHRocm91Z2ggdG8gSFRNTCBlbGVtZW50c1xuICAgICAgICBwcm9wc0ZvckVsZW1lbnRba2V5XSA9IGNvbXB1dGVkUHJvcHNba2V5XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5zdHlsZSAmJiB0aGlzLmF0dHJzLnN0eWxlKSB7XG4gICAgICBwcm9wc0ZvckVsZW1lbnQuc3R5bGUgPSBfZXh0ZW5kcyh7fSwgdGhpcy5hdHRycy5zdHlsZSwgdGhpcy5wcm9wcy5zdHlsZSk7XG4gICAgfVxuXG4gICAgcHJvcHNGb3JFbGVtZW50LmNsYXNzTmFtZSA9IEFycmF5LnByb3RvdHlwZS5jb25jYXQoZm9sZGVkQ29tcG9uZW50SWRzLCB0aGlzLnByb3BzLmNsYXNzTmFtZSwgc3R5bGVkQ29tcG9uZW50SWQsIHRoaXMuYXR0cnMuY2xhc3NOYW1lLCBnZW5lcmF0ZWRDbGFzc05hbWUpLmZpbHRlcihCb29sZWFuKS5qb2luKCcgJyk7XG5cbiAgICByZXR1cm4gY3JlYXRlRWxlbWVudChlbGVtZW50VG9CZUNyZWF0ZWQsIHByb3BzRm9yRWxlbWVudCk7XG4gIH07XG5cbiAgU3R5bGVkQ29tcG9uZW50LnByb3RvdHlwZS5idWlsZEV4ZWN1dGlvbkNvbnRleHQgPSBmdW5jdGlvbiBidWlsZEV4ZWN1dGlvbkNvbnRleHQodGhlbWUsIHByb3BzLCBhdHRycykge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIGNvbnRleHQgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsgdGhlbWU6IHRoZW1lIH0pO1xuXG4gICAgaWYgKCFhdHRycy5sZW5ndGgpIHJldHVybiBjb250ZXh0O1xuXG4gICAgdGhpcy5hdHRycyA9IHt9O1xuXG4gICAgYXR0cnMuZm9yRWFjaChmdW5jdGlvbiAoYXR0ckRlZikge1xuICAgICAgdmFyIHJlc29sdmVkQXR0ckRlZiA9IGF0dHJEZWY7XG4gICAgICB2YXIgYXR0ckRlZldhc0ZuID0gZmFsc2U7XG4gICAgICB2YXIgYXR0ciA9IHZvaWQgMDtcbiAgICAgIHZhciBrZXkgPSB2b2lkIDA7XG5cbiAgICAgIGlmIChpc0Z1bmN0aW9uKHJlc29sdmVkQXR0ckRlZikpIHtcbiAgICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgICByZXNvbHZlZEF0dHJEZWYgPSByZXNvbHZlZEF0dHJEZWYoY29udGV4dCk7XG4gICAgICAgIGF0dHJEZWZXYXNGbiA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIGd1YXJkLWZvci1pbiAqL1xuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgZm9yIChrZXkgaW4gcmVzb2x2ZWRBdHRyRGVmKSB7XG4gICAgICAgIGF0dHIgPSByZXNvbHZlZEF0dHJEZWZba2V5XTtcblxuICAgICAgICBpZiAoIWF0dHJEZWZXYXNGbikge1xuICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGF0dHIpICYmICFpc0Rlcml2ZWRSZWFjdENvbXBvbmVudChhdHRyKSAmJiAhaXNTdHlsZWRDb21wb25lbnQoYXR0cikpIHtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgIF90aGlzMi53YXJuQXR0cnNGbk9iamVjdEtleURlcHJlY2F0ZWQoa2V5LCBwcm9wcy5mb3J3YXJkZWRDb21wb25lbnQuZGlzcGxheU5hbWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhdHRyID0gYXR0cihjb250ZXh0KTtcblxuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgUmVhY3QuaXNWYWxpZEVsZW1lbnQoYXR0cikpIHtcbiAgICAgICAgICAgICAgX3RoaXMyLndhcm5Ob25TdHlsZWRDb21wb25lbnRBdHRyc09iamVjdEtleShrZXksIHByb3BzLmZvcndhcmRlZENvbXBvbmVudC5kaXNwbGF5TmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMyLmF0dHJzW2tleV0gPSBhdHRyO1xuICAgICAgICBjb250ZXh0W2tleV0gPSBhdHRyO1xuICAgICAgfVxuICAgICAgLyogZXNsaW50LWVuYWJsZSAqL1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNvbnRleHQ7XG4gIH07XG5cbiAgU3R5bGVkQ29tcG9uZW50LnByb3RvdHlwZS5nZW5lcmF0ZUFuZEluamVjdFN0eWxlcyA9IGZ1bmN0aW9uIGdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKHRoZW1lLCBwcm9wcykge1xuICAgIHZhciBfcHJvcHMkZm9yd2FyZGVkQ29tcG8yID0gcHJvcHMuZm9yd2FyZGVkQ29tcG9uZW50LFxuICAgICAgICBhdHRycyA9IF9wcm9wcyRmb3J3YXJkZWRDb21wbzIuYXR0cnMsXG4gICAgICAgIGNvbXBvbmVudFN0eWxlID0gX3Byb3BzJGZvcndhcmRlZENvbXBvMi5jb21wb25lbnRTdHlsZSxcbiAgICAgICAgd2FyblRvb01hbnlDbGFzc2VzID0gX3Byb3BzJGZvcndhcmRlZENvbXBvMi53YXJuVG9vTWFueUNsYXNzZXM7XG5cbiAgICAvLyBzdGF0aWNhbGx5IHN0eWxlZC1jb21wb25lbnRzIGRvbid0IG5lZWQgdG8gYnVpbGQgYW4gZXhlY3V0aW9uIGNvbnRleHQgb2JqZWN0LFxuICAgIC8vIGFuZCBzaG91bGRuJ3QgYmUgaW5jcmVhc2luZyB0aGUgbnVtYmVyIG9mIGNsYXNzIG5hbWVzXG5cbiAgICBpZiAoY29tcG9uZW50U3R5bGUuaXNTdGF0aWMgJiYgIWF0dHJzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGNvbXBvbmVudFN0eWxlLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKEVNUFRZX09CSkVDVCwgdGhpcy5zdHlsZVNoZWV0KTtcbiAgICB9XG5cbiAgICB2YXIgY2xhc3NOYW1lID0gY29tcG9uZW50U3R5bGUuZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXModGhpcy5idWlsZEV4ZWN1dGlvbkNvbnRleHQodGhlbWUsIHByb3BzLCBhdHRycyksIHRoaXMuc3R5bGVTaGVldCk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuVG9vTWFueUNsYXNzZXMpIHdhcm5Ub29NYW55Q2xhc3NlcyhjbGFzc05hbWUpO1xuXG4gICAgcmV0dXJuIGNsYXNzTmFtZTtcbiAgfTtcblxuICByZXR1cm4gU3R5bGVkQ29tcG9uZW50O1xufShDb21wb25lbnQpO1xuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZWRDb21wb25lbnQodGFyZ2V0LCBvcHRpb25zLCBydWxlcykge1xuICB2YXIgaXNUYXJnZXRTdHlsZWRDb21wID0gaXNTdHlsZWRDb21wb25lbnQodGFyZ2V0KTtcbiAgdmFyIGlzQ2xhc3MgPSAhaXNUYWcodGFyZ2V0KTtcblxuICB2YXIgX29wdGlvbnMkZGlzcGxheU5hbWUgPSBvcHRpb25zLmRpc3BsYXlOYW1lLFxuICAgICAgZGlzcGxheU5hbWUgPSBfb3B0aW9ucyRkaXNwbGF5TmFtZSA9PT0gdW5kZWZpbmVkID8gZ2VuZXJhdGVEaXNwbGF5TmFtZSh0YXJnZXQpIDogX29wdGlvbnMkZGlzcGxheU5hbWUsXG4gICAgICBfb3B0aW9ucyRjb21wb25lbnRJZCA9IG9wdGlvbnMuY29tcG9uZW50SWQsXG4gICAgICBjb21wb25lbnRJZCA9IF9vcHRpb25zJGNvbXBvbmVudElkID09PSB1bmRlZmluZWQgPyBnZW5lcmF0ZUlkKENvbXBvbmVudFN0eWxlLCBvcHRpb25zLmRpc3BsYXlOYW1lLCBvcHRpb25zLnBhcmVudENvbXBvbmVudElkKSA6IF9vcHRpb25zJGNvbXBvbmVudElkLFxuICAgICAgX29wdGlvbnMkUGFyZW50Q29tcG9uID0gb3B0aW9ucy5QYXJlbnRDb21wb25lbnQsXG4gICAgICBQYXJlbnRDb21wb25lbnQgPSBfb3B0aW9ucyRQYXJlbnRDb21wb24gPT09IHVuZGVmaW5lZCA/IFN0eWxlZENvbXBvbmVudCA6IF9vcHRpb25zJFBhcmVudENvbXBvbixcbiAgICAgIF9vcHRpb25zJGF0dHJzID0gb3B0aW9ucy5hdHRycyxcbiAgICAgIGF0dHJzID0gX29wdGlvbnMkYXR0cnMgPT09IHVuZGVmaW5lZCA/IEVNUFRZX0FSUkFZIDogX29wdGlvbnMkYXR0cnM7XG5cblxuICB2YXIgc3R5bGVkQ29tcG9uZW50SWQgPSBvcHRpb25zLmRpc3BsYXlOYW1lICYmIG9wdGlvbnMuY29tcG9uZW50SWQgPyBlc2NhcGUob3B0aW9ucy5kaXNwbGF5TmFtZSkgKyAnLScgKyBvcHRpb25zLmNvbXBvbmVudElkIDogb3B0aW9ucy5jb21wb25lbnRJZCB8fCBjb21wb25lbnRJZDtcblxuICAvLyBmb2xkIHRoZSB1bmRlcmx5aW5nIFN0eWxlZENvbXBvbmVudCBhdHRycyB1cCAoaW1wbGljaXQgZXh0ZW5kKVxuICB2YXIgZmluYWxBdHRycyA9XG4gIC8vICRGbG93Rml4TWVcbiAgaXNUYXJnZXRTdHlsZWRDb21wICYmIHRhcmdldC5hdHRycyA/IEFycmF5LnByb3RvdHlwZS5jb25jYXQodGFyZ2V0LmF0dHJzLCBhdHRycykuZmlsdGVyKEJvb2xlYW4pIDogYXR0cnM7XG5cbiAgdmFyIGNvbXBvbmVudFN0eWxlID0gbmV3IENvbXBvbmVudFN0eWxlKGlzVGFyZ2V0U3R5bGVkQ29tcCA/IC8vIGZvbGQgdGhlIHVuZGVybHlpbmcgU3R5bGVkQ29tcG9uZW50IHJ1bGVzIHVwIChpbXBsaWNpdCBleHRlbmQpXG4gIC8vICRGbG93Rml4TWVcbiAgdGFyZ2V0LmNvbXBvbmVudFN0eWxlLnJ1bGVzLmNvbmNhdChydWxlcykgOiBydWxlcywgZmluYWxBdHRycywgc3R5bGVkQ29tcG9uZW50SWQpO1xuXG4gIC8qKlxuICAgKiBmb3J3YXJkUmVmIGNyZWF0ZXMgYSBuZXcgaW50ZXJpbSBjb21wb25lbnQsIHdoaWNoIHdlJ2xsIHRha2UgYWR2YW50YWdlIG9mXG4gICAqIGluc3RlYWQgb2YgZXh0ZW5kaW5nIFBhcmVudENvbXBvbmVudCB0byBjcmVhdGUgX2Fub3RoZXJfIGludGVyaW0gY2xhc3NcbiAgICovXG4gIHZhciBXcmFwcGVkU3R5bGVkQ29tcG9uZW50ID0gdm9pZCAwO1xuICB2YXIgZm9yd2FyZFJlZiA9IGZ1bmN0aW9uIGZvcndhcmRSZWYocHJvcHMsIHJlZikge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFBhcmVudENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCB7IGZvcndhcmRlZENvbXBvbmVudDogV3JhcHBlZFN0eWxlZENvbXBvbmVudCwgZm9yd2FyZGVkUmVmOiByZWYgfSkpO1xuICB9O1xuICBmb3J3YXJkUmVmLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gIFdyYXBwZWRTdHlsZWRDb21wb25lbnQgPSBSZWFjdC5mb3J3YXJkUmVmKGZvcndhcmRSZWYpO1xuICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG5cbiAgLy8gJEZsb3dGaXhNZVxuICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LmF0dHJzID0gZmluYWxBdHRycztcbiAgLy8gJEZsb3dGaXhNZVxuICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LmNvbXBvbmVudFN0eWxlID0gY29tcG9uZW50U3R5bGU7XG5cbiAgLy8gJEZsb3dGaXhNZVxuICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LmZvbGRlZENvbXBvbmVudElkcyA9IGlzVGFyZ2V0U3R5bGVkQ29tcCA/IC8vICRGbG93Rml4TWVcbiAgQXJyYXkucHJvdG90eXBlLmNvbmNhdCh0YXJnZXQuZm9sZGVkQ29tcG9uZW50SWRzLCB0YXJnZXQuc3R5bGVkQ29tcG9uZW50SWQpIDogRU1QVFlfQVJSQVk7XG5cbiAgLy8gJEZsb3dGaXhNZVxuICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LnN0eWxlZENvbXBvbmVudElkID0gc3R5bGVkQ29tcG9uZW50SWQ7XG5cbiAgLy8gZm9sZCB0aGUgdW5kZXJseWluZyBTdHlsZWRDb21wb25lbnQgdGFyZ2V0IHVwIHNpbmNlIHdlIGZvbGRlZCB0aGUgc3R5bGVzXG4gIC8vICRGbG93Rml4TWVcbiAgV3JhcHBlZFN0eWxlZENvbXBvbmVudC50YXJnZXQgPSBpc1RhcmdldFN0eWxlZENvbXAgPyB0YXJnZXQudGFyZ2V0IDogdGFyZ2V0O1xuXG4gIC8vICRGbG93Rml4TWVcbiAgV3JhcHBlZFN0eWxlZENvbXBvbmVudC53aXRoQ29tcG9uZW50ID0gZnVuY3Rpb24gd2l0aENvbXBvbmVudCh0YWcpIHtcbiAgICB2YXIgcHJldmlvdXNDb21wb25lbnRJZCA9IG9wdGlvbnMuY29tcG9uZW50SWQsXG4gICAgICAgIG9wdGlvbnNUb0NvcHkgPSBvYmplY3RXaXRob3V0UHJvcGVydGllcyhvcHRpb25zLCBbJ2NvbXBvbmVudElkJ10pO1xuXG5cbiAgICB2YXIgbmV3Q29tcG9uZW50SWQgPSBwcmV2aW91c0NvbXBvbmVudElkICYmIHByZXZpb3VzQ29tcG9uZW50SWQgKyAnLScgKyAoaXNUYWcodGFnKSA/IHRhZyA6IGVzY2FwZShnZXRDb21wb25lbnROYW1lKHRhZykpKTtcblxuICAgIHZhciBuZXdPcHRpb25zID0gX2V4dGVuZHMoe30sIG9wdGlvbnNUb0NvcHksIHtcbiAgICAgIGF0dHJzOiBmaW5hbEF0dHJzLFxuICAgICAgY29tcG9uZW50SWQ6IG5ld0NvbXBvbmVudElkLFxuICAgICAgUGFyZW50Q29tcG9uZW50OiBQYXJlbnRDb21wb25lbnRcbiAgICB9KTtcblxuICAgIHJldHVybiBjcmVhdGVTdHlsZWRDb21wb25lbnQodGFnLCBuZXdPcHRpb25zLCBydWxlcyk7XG4gIH07XG5cbiAgLy8gJEZsb3dGaXhNZVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JhcHBlZFN0eWxlZENvbXBvbmVudCwgJ2RlZmF1bHRQcm9wcycsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCQkMSgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9mb2xkZWREZWZhdWx0UHJvcHM7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCQkMShvYmopIHtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIHRoaXMuX2ZvbGRlZERlZmF1bHRQcm9wcyA9IGlzVGFyZ2V0U3R5bGVkQ29tcCA/IG1lcmdlKHRhcmdldC5kZWZhdWx0UHJvcHMsIG9iaikgOiBvYmo7XG4gICAgfVxuICB9KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50Lndhcm5Ub29NYW55Q2xhc3NlcyA9IGNyZWF0ZVdhcm5Ub29NYW55Q2xhc3NlcyhkaXNwbGF5TmFtZSk7XG4gIH1cblxuICAvLyAkRmxvd0ZpeE1lXG4gIFdyYXBwZWRTdHlsZWRDb21wb25lbnQudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICcuJyArIFdyYXBwZWRTdHlsZWRDb21wb25lbnQuc3R5bGVkQ29tcG9uZW50SWQ7XG4gIH07XG5cbiAgaWYgKGlzQ2xhc3MpIHtcbiAgICBob2lzdE5vblJlYWN0U3RhdGljcyhXcmFwcGVkU3R5bGVkQ29tcG9uZW50LCB0YXJnZXQsIHtcbiAgICAgIC8vIGFsbCBTQy1zcGVjaWZpYyB0aGluZ3Mgc2hvdWxkIG5vdCBiZSBob2lzdGVkXG4gICAgICBhdHRyczogdHJ1ZSxcbiAgICAgIGNvbXBvbmVudFN0eWxlOiB0cnVlLFxuICAgICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgICBmb2xkZWRDb21wb25lbnRJZHM6IHRydWUsXG4gICAgICBzdHlsZWRDb21wb25lbnRJZDogdHJ1ZSxcbiAgICAgIHRhcmdldDogdHJ1ZSxcbiAgICAgIHdpdGhDb21wb25lbnQ6IHRydWVcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBXcmFwcGVkU3R5bGVkQ29tcG9uZW50O1xufVxuXG4vLyBcbi8vIFRoYW5rcyB0byBSZWFjdERPTUZhY3RvcmllcyBmb3IgdGhpcyBoYW5keSBsaXN0IVxuXG52YXIgZG9tRWxlbWVudHMgPSBbJ2EnLCAnYWJicicsICdhZGRyZXNzJywgJ2FyZWEnLCAnYXJ0aWNsZScsICdhc2lkZScsICdhdWRpbycsICdiJywgJ2Jhc2UnLCAnYmRpJywgJ2JkbycsICdiaWcnLCAnYmxvY2txdW90ZScsICdib2R5JywgJ2JyJywgJ2J1dHRvbicsICdjYW52YXMnLCAnY2FwdGlvbicsICdjaXRlJywgJ2NvZGUnLCAnY29sJywgJ2NvbGdyb3VwJywgJ2RhdGEnLCAnZGF0YWxpc3QnLCAnZGQnLCAnZGVsJywgJ2RldGFpbHMnLCAnZGZuJywgJ2RpYWxvZycsICdkaXYnLCAnZGwnLCAnZHQnLCAnZW0nLCAnZW1iZWQnLCAnZmllbGRzZXQnLCAnZmlnY2FwdGlvbicsICdmaWd1cmUnLCAnZm9vdGVyJywgJ2Zvcm0nLCAnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnLCAnaGVhZCcsICdoZWFkZXInLCAnaGdyb3VwJywgJ2hyJywgJ2h0bWwnLCAnaScsICdpZnJhbWUnLCAnaW1nJywgJ2lucHV0JywgJ2lucycsICdrYmQnLCAna2V5Z2VuJywgJ2xhYmVsJywgJ2xlZ2VuZCcsICdsaScsICdsaW5rJywgJ21haW4nLCAnbWFwJywgJ21hcmsnLCAnbWFycXVlZScsICdtZW51JywgJ21lbnVpdGVtJywgJ21ldGEnLCAnbWV0ZXInLCAnbmF2JywgJ25vc2NyaXB0JywgJ29iamVjdCcsICdvbCcsICdvcHRncm91cCcsICdvcHRpb24nLCAnb3V0cHV0JywgJ3AnLCAncGFyYW0nLCAncGljdHVyZScsICdwcmUnLCAncHJvZ3Jlc3MnLCAncScsICdycCcsICdydCcsICdydWJ5JywgJ3MnLCAnc2FtcCcsICdzY3JpcHQnLCAnc2VjdGlvbicsICdzZWxlY3QnLCAnc21hbGwnLCAnc291cmNlJywgJ3NwYW4nLCAnc3Ryb25nJywgJ3N0eWxlJywgJ3N1YicsICdzdW1tYXJ5JywgJ3N1cCcsICd0YWJsZScsICd0Ym9keScsICd0ZCcsICd0ZXh0YXJlYScsICd0Zm9vdCcsICd0aCcsICd0aGVhZCcsICd0aW1lJywgJ3RpdGxlJywgJ3RyJywgJ3RyYWNrJywgJ3UnLCAndWwnLCAndmFyJywgJ3ZpZGVvJywgJ3dicicsXG5cbi8vIFNWR1xuJ2NpcmNsZScsICdjbGlwUGF0aCcsICdkZWZzJywgJ2VsbGlwc2UnLCAnZm9yZWlnbk9iamVjdCcsICdnJywgJ2ltYWdlJywgJ2xpbmUnLCAnbGluZWFyR3JhZGllbnQnLCAnbWFya2VyJywgJ21hc2snLCAncGF0aCcsICdwYXR0ZXJuJywgJ3BvbHlnb24nLCAncG9seWxpbmUnLCAncmFkaWFsR3JhZGllbnQnLCAncmVjdCcsICdzdG9wJywgJ3N2ZycsICd0ZXh0JywgJ3RzcGFuJ107XG5cbi8vIFxuXG52YXIgc3R5bGVkID0gZnVuY3Rpb24gc3R5bGVkKHRhZykge1xuICByZXR1cm4gY29uc3RydWN0V2l0aE9wdGlvbnMoY3JlYXRlU3R5bGVkQ29tcG9uZW50LCB0YWcpO1xufTtcblxuLy8gU2hvcnRoYW5kcyBmb3IgYWxsIHZhbGlkIEhUTUwgRWxlbWVudHNcbmRvbUVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGRvbUVsZW1lbnQpIHtcbiAgc3R5bGVkW2RvbUVsZW1lbnRdID0gc3R5bGVkKGRvbUVsZW1lbnQpO1xufSk7XG5cbi8vIFxuXG52YXIgR2xvYmFsU3R5bGUgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEdsb2JhbFN0eWxlKHJ1bGVzLCBjb21wb25lbnRJZCkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIEdsb2JhbFN0eWxlKTtcblxuICAgIHRoaXMucnVsZXMgPSBydWxlcztcbiAgICB0aGlzLmNvbXBvbmVudElkID0gY29tcG9uZW50SWQ7XG4gICAgdGhpcy5pc1N0YXRpYyA9IGlzU3RhdGljUnVsZXMocnVsZXMsIEVNUFRZX0FSUkFZKTtcblxuICAgIGlmICghU3R5bGVTaGVldC5tYXN0ZXIuaGFzSWQoY29tcG9uZW50SWQpKSB7XG4gICAgICBTdHlsZVNoZWV0Lm1hc3Rlci5kZWZlcnJlZEluamVjdChjb21wb25lbnRJZCwgW10pO1xuICAgIH1cbiAgfVxuXG4gIEdsb2JhbFN0eWxlLnByb3RvdHlwZS5jcmVhdGVTdHlsZXMgPSBmdW5jdGlvbiBjcmVhdGVTdHlsZXMoZXhlY3V0aW9uQ29udGV4dCwgc3R5bGVTaGVldCkge1xuICAgIHZhciBmbGF0Q1NTID0gZmxhdHRlbih0aGlzLnJ1bGVzLCBleGVjdXRpb25Db250ZXh0LCBzdHlsZVNoZWV0KTtcbiAgICB2YXIgY3NzID0gc3RyaW5naWZ5UnVsZXMoZmxhdENTUywgJycpO1xuXG4gICAgc3R5bGVTaGVldC5pbmplY3QodGhpcy5jb21wb25lbnRJZCwgY3NzKTtcbiAgfTtcblxuICBHbG9iYWxTdHlsZS5wcm90b3R5cGUucmVtb3ZlU3R5bGVzID0gZnVuY3Rpb24gcmVtb3ZlU3R5bGVzKHN0eWxlU2hlZXQpIHtcbiAgICB2YXIgY29tcG9uZW50SWQgPSB0aGlzLmNvbXBvbmVudElkO1xuXG4gICAgaWYgKHN0eWxlU2hlZXQuaGFzSWQoY29tcG9uZW50SWQpKSB7XG4gICAgICBzdHlsZVNoZWV0LnJlbW92ZShjb21wb25lbnRJZCk7XG4gICAgfVxuICB9O1xuXG4gIC8vIFRPRE86IG92ZXJ3cml0ZSBpbi1wbGFjZSBpbnN0ZWFkIG9mIHJlbW92ZStjcmVhdGU/XG5cblxuICBHbG9iYWxTdHlsZS5wcm90b3R5cGUucmVuZGVyU3R5bGVzID0gZnVuY3Rpb24gcmVuZGVyU3R5bGVzKGV4ZWN1dGlvbkNvbnRleHQsIHN0eWxlU2hlZXQpIHtcbiAgICB0aGlzLnJlbW92ZVN0eWxlcyhzdHlsZVNoZWV0KTtcbiAgICB0aGlzLmNyZWF0ZVN0eWxlcyhleGVjdXRpb25Db250ZXh0LCBzdHlsZVNoZWV0KTtcbiAgfTtcblxuICByZXR1cm4gR2xvYmFsU3R5bGU7XG59KCk7XG5cbi8vIFxuXG4vLyBwbGFjZSBvdXIgY2FjaGUgaW50byBzaGFyZWQgY29udGV4dCBzbyBpdCdsbCBwZXJzaXN0IGJldHdlZW4gSE1Sc1xuaWYgKElTX0JST1dTRVIpIHtcbiAgd2luZG93LnNjQ0dTSE1SQ2FjaGUgPSB7fTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlR2xvYmFsU3R5bGUoc3RyaW5ncykge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgaW50ZXJwb2xhdGlvbnMgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgaW50ZXJwb2xhdGlvbnNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIHJ1bGVzID0gY3NzLmFwcGx5KHVuZGVmaW5lZCwgW3N0cmluZ3NdLmNvbmNhdChpbnRlcnBvbGF0aW9ucykpO1xuICB2YXIgaWQgPSAnc2MtZ2xvYmFsLScgKyBtdXJtdXJoYXNoKEpTT04uc3RyaW5naWZ5KHJ1bGVzKSk7XG4gIHZhciBzdHlsZSA9IG5ldyBHbG9iYWxTdHlsZShydWxlcywgaWQpO1xuXG4gIHZhciBHbG9iYWxTdHlsZUNvbXBvbmVudCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgaW5oZXJpdHMoR2xvYmFsU3R5bGVDb21wb25lbnQsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gR2xvYmFsU3R5bGVDb21wb25lbnQocHJvcHMpIHtcbiAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIEdsb2JhbFN0eWxlQ29tcG9uZW50KTtcblxuICAgICAgdmFyIF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgICAgdmFyIF90aGlzJGNvbnN0cnVjdG9yID0gX3RoaXMuY29uc3RydWN0b3IsXG4gICAgICAgICAgZ2xvYmFsU3R5bGUgPSBfdGhpcyRjb25zdHJ1Y3Rvci5nbG9iYWxTdHlsZSxcbiAgICAgICAgICBzdHlsZWRDb21wb25lbnRJZCA9IF90aGlzJGNvbnN0cnVjdG9yLnN0eWxlZENvbXBvbmVudElkO1xuXG5cbiAgICAgIGlmIChJU19CUk9XU0VSKSB7XG4gICAgICAgIHdpbmRvdy5zY0NHU0hNUkNhY2hlW3N0eWxlZENvbXBvbmVudElkXSA9ICh3aW5kb3cuc2NDR1NITVJDYWNoZVtzdHlsZWRDb21wb25lbnRJZF0gfHwgMCkgKyAxO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFRoaXMgZml4ZXMgSE1SIGNvbXBhdGliaWxpdHkuIERvbid0IGFzayBtZSB3aHksIGJ1dCB0aGlzIGNvbWJpbmF0aW9uIG9mXG4gICAgICAgKiBjYWNoaW5nIHRoZSBjbG9zdXJlIHZhcmlhYmxlcyB2aWEgc3RhdGljcyBhbmQgdGhlbiBwZXJzaXN0aW5nIHRoZSBzdGF0aWNzIGluXG4gICAgICAgKiBzdGF0ZSB3b3JrcyBhY3Jvc3MgSE1SIHdoZXJlIG5vIG90aGVyIGNvbWJpbmF0aW9uIGRpZC4gwq9cXF8o44OEKV8vwq9cbiAgICAgICAqL1xuICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgIGdsb2JhbFN0eWxlOiBnbG9iYWxTdHlsZSxcbiAgICAgICAgc3R5bGVkQ29tcG9uZW50SWQ6IHN0eWxlZENvbXBvbmVudElkXG4gICAgICB9O1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIEdsb2JhbFN0eWxlQ29tcG9uZW50LnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHdpbmRvdy5zY0NHU0hNUkNhY2hlW3RoaXMuc3RhdGUuc3R5bGVkQ29tcG9uZW50SWRdKSB7XG4gICAgICAgIHdpbmRvdy5zY0NHU0hNUkNhY2hlW3RoaXMuc3RhdGUuc3R5bGVkQ29tcG9uZW50SWRdIC09IDE7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIERlcGVuZGluZyBvbiB0aGUgb3JkZXIgXCJyZW5kZXJcIiBpcyBjYWxsZWQgdGhpcyBjYW4gY2F1c2UgdGhlIHN0eWxlcyB0byBiZSBsb3N0XG4gICAgICAgKiB1bnRpbCB0aGUgbmV4dCByZW5kZXIgcGFzcyBvZiB0aGUgcmVtYWluaW5nIGluc3RhbmNlLCB3aGljaCBtYXlcbiAgICAgICAqIG5vdCBiZSBpbW1lZGlhdGUuXG4gICAgICAgKi9cbiAgICAgIGlmICh3aW5kb3cuc2NDR1NITVJDYWNoZVt0aGlzLnN0YXRlLnN0eWxlZENvbXBvbmVudElkXSA9PT0gMCkge1xuICAgICAgICB0aGlzLnN0YXRlLmdsb2JhbFN0eWxlLnJlbW92ZVN0eWxlcyh0aGlzLnN0eWxlU2hlZXQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBHbG9iYWxTdHlsZUNvbXBvbmVudC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIFJlYWN0LkNoaWxkcmVuLmNvdW50KHRoaXMucHJvcHMuY2hpbGRyZW4pKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybignVGhlIGdsb2JhbCBzdHlsZSBjb21wb25lbnQgJyArIHRoaXMuc3RhdGUuc3R5bGVkQ29tcG9uZW50SWQgKyAnIHdhcyBnaXZlbiBjaGlsZCBKU1guIGNyZWF0ZUdsb2JhbFN0eWxlIGRvZXMgbm90IHJlbmRlciBjaGlsZHJlbi4nKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFN0eWxlU2hlZXRDb25zdW1lcixcbiAgICAgICAgbnVsbCxcbiAgICAgICAgZnVuY3Rpb24gKHN0eWxlU2hlZXQpIHtcbiAgICAgICAgICBfdGhpczIuc3R5bGVTaGVldCA9IHN0eWxlU2hlZXQgfHwgU3R5bGVTaGVldC5tYXN0ZXI7XG5cbiAgICAgICAgICB2YXIgZ2xvYmFsU3R5bGUgPSBfdGhpczIuc3RhdGUuZ2xvYmFsU3R5bGU7XG5cblxuICAgICAgICAgIGlmIChnbG9iYWxTdHlsZS5pc1N0YXRpYykge1xuICAgICAgICAgICAgZ2xvYmFsU3R5bGUucmVuZGVyU3R5bGVzKFNUQVRJQ19FWEVDVVRJT05fQ09OVEVYVCwgX3RoaXMyLnN0eWxlU2hlZXQpO1xuXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgIFRoZW1lQ29uc3VtZXIsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIGZ1bmN0aW9uICh0aGVtZSkge1xuICAgICAgICAgICAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdFByb3BzID0gX3RoaXMyLmNvbnN0cnVjdG9yLmRlZmF1bHRQcm9wcztcblxuXG4gICAgICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBfZXh0ZW5kcyh7fSwgX3RoaXMyLnByb3BzKTtcblxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhlbWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICBjb250ZXh0LnRoZW1lID0gZGV0ZXJtaW5lVGhlbWUoX3RoaXMyLnByb3BzLCB0aGVtZSwgZGVmYXVsdFByb3BzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBnbG9iYWxTdHlsZS5yZW5kZXJTdHlsZXMoY29udGV4dCwgX3RoaXMyLnN0eWxlU2hlZXQpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH07XG5cbiAgICByZXR1cm4gR2xvYmFsU3R5bGVDb21wb25lbnQ7XG4gIH0oUmVhY3QuQ29tcG9uZW50KTtcblxuICBHbG9iYWxTdHlsZUNvbXBvbmVudC5nbG9iYWxTdHlsZSA9IHN0eWxlO1xuICBHbG9iYWxTdHlsZUNvbXBvbmVudC5zdHlsZWRDb21wb25lbnRJZCA9IGlkO1xuXG5cbiAgcmV0dXJuIEdsb2JhbFN0eWxlQ29tcG9uZW50O1xufVxuXG4vLyBcblxudmFyIHJlcGxhY2VXaGl0ZXNwYWNlID0gZnVuY3Rpb24gcmVwbGFjZVdoaXRlc3BhY2Uoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXFxzfFxcXFxuL2csICcnKTtcbn07XG5cbmZ1bmN0aW9uIGtleWZyYW1lcyhzdHJpbmdzKSB7XG4gIC8qIFdhcm5pbmcgaWYgeW91J3ZlIHVzZWQga2V5ZnJhbWVzIG9uIFJlYWN0IE5hdGl2ZSAqL1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS53YXJuKCdga2V5ZnJhbWVzYCBjYW5ub3QgYmUgdXNlZCBvbiBSZWFjdE5hdGl2ZSwgb25seSBvbiB0aGUgd2ViLiBUbyBkbyBhbmltYXRpb24gaW4gUmVhY3ROYXRpdmUgcGxlYXNlIHVzZSBBbmltYXRlZC4nKTtcbiAgfVxuXG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBpbnRlcnBvbGF0aW9ucyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBpbnRlcnBvbGF0aW9uc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgcnVsZXMgPSBjc3MuYXBwbHkodW5kZWZpbmVkLCBbc3RyaW5nc10uY29uY2F0KGludGVycG9sYXRpb25zKSk7XG5cbiAgdmFyIG5hbWUgPSBnZW5lcmF0ZUFscGhhYmV0aWNOYW1lKG11cm11cmhhc2gocmVwbGFjZVdoaXRlc3BhY2UoSlNPTi5zdHJpbmdpZnkocnVsZXMpKSkpO1xuXG4gIHJldHVybiBuZXcgS2V5ZnJhbWVzKG5hbWUsIHN0cmluZ2lmeVJ1bGVzKHJ1bGVzLCBuYW1lLCAnQGtleWZyYW1lcycpKTtcbn1cblxuLy8gXG5cbnZhciB3aXRoVGhlbWUgPSAoZnVuY3Rpb24gKENvbXBvbmVudCQkMSkge1xuICB2YXIgV2l0aFRoZW1lID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAocHJvcHMsIHJlZikge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgVGhlbWVDb25zdW1lcixcbiAgICAgIG51bGwsXG4gICAgICBmdW5jdGlvbiAodGhlbWUpIHtcbiAgICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgICB2YXIgZGVmYXVsdFByb3BzID0gQ29tcG9uZW50JCQxLmRlZmF1bHRQcm9wcztcblxuICAgICAgICB2YXIgdGhlbWVQcm9wID0gZGV0ZXJtaW5lVGhlbWUocHJvcHMsIHRoZW1lLCBkZWZhdWx0UHJvcHMpO1xuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHRoZW1lUHJvcCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ1t3aXRoVGhlbWVdIFlvdSBhcmUgbm90IHVzaW5nIGEgVGhlbWVQcm92aWRlciBub3IgcGFzc2luZyBhIHRoZW1lIHByb3Agb3IgYSB0aGVtZSBpbiBkZWZhdWx0UHJvcHMgaW4gY29tcG9uZW50IGNsYXNzIFwiJyArIGdldENvbXBvbmVudE5hbWUoQ29tcG9uZW50JCQxKSArICdcIicpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50JCQxLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsgdGhlbWU6IHRoZW1lUHJvcCwgcmVmOiByZWYgfSkpO1xuICAgICAgfVxuICAgICk7XG4gIH0pO1xuXG4gIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKFdpdGhUaGVtZSwgQ29tcG9uZW50JCQxKTtcblxuICBXaXRoVGhlbWUuZGlzcGxheU5hbWUgPSAnV2l0aFRoZW1lKCcgKyBnZXRDb21wb25lbnROYW1lKENvbXBvbmVudCQkMSkgKyAnKSc7XG5cbiAgcmV0dXJuIFdpdGhUaGVtZTtcbn0pO1xuXG4vLyBcblxuLyogZXNsaW50LWRpc2FibGUgKi9cbnZhciBfX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfSEFVTlRFRF9CWV9TUE9PS1lfR0hPU1RTID0ge1xuICBTdHlsZVNoZWV0OiBTdHlsZVNoZWV0XG59O1xuXG4vLyBcblxuLyogV2FybmluZyBpZiB5b3UndmUgaW1wb3J0ZWQgdGhpcyBmaWxlIG9uIFJlYWN0IE5hdGl2ZSAqL1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgY29uc29sZS53YXJuKFwiSXQgbG9va3MgbGlrZSB5b3UndmUgaW1wb3J0ZWQgJ3N0eWxlZC1jb21wb25lbnRzJyBvbiBSZWFjdCBOYXRpdmUuXFxuXCIgKyBcIlBlcmhhcHMgeW91J3JlIGxvb2tpbmcgdG8gaW1wb3J0ICdzdHlsZWQtY29tcG9uZW50cy9uYXRpdmUnP1xcblwiICsgJ1JlYWQgbW9yZSBhYm91dCB0aGlzIGF0IGh0dHBzOi8vd3d3LnN0eWxlZC1jb21wb25lbnRzLmNvbS9kb2NzL2Jhc2ljcyNyZWFjdC1uYXRpdmUnKTtcbn1cblxuLyogV2FybmluZyBpZiB0aGVyZSBhcmUgc2V2ZXJhbCBpbnN0YW5jZXMgb2Ygc3R5bGVkLWNvbXBvbmVudHMgKi9cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG5hdmlnYXRvci51c2VyQWdlbnQgPT09ICdzdHJpbmcnICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignTm9kZS5qcycpID09PSAtMSAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ2pzZG9tJykgPT09IC0xKSB7XG4gIHdpbmRvd1snX19zdHlsZWQtY29tcG9uZW50cy1pbml0X18nXSA9IHdpbmRvd1snX19zdHlsZWQtY29tcG9uZW50cy1pbml0X18nXSB8fCAwO1xuXG4gIGlmICh3aW5kb3dbJ19fc3R5bGVkLWNvbXBvbmVudHMtaW5pdF9fJ10gPT09IDEpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUud2FybihcIkl0IGxvb2tzIGxpa2UgdGhlcmUgYXJlIHNldmVyYWwgaW5zdGFuY2VzIG9mICdzdHlsZWQtY29tcG9uZW50cycgaW5pdGlhbGl6ZWQgaW4gdGhpcyBhcHBsaWNhdGlvbi4gXCIgKyAnVGhpcyBtYXkgY2F1c2UgZHluYW1pYyBzdHlsZXMgbm90IHJlbmRlcmluZyBwcm9wZXJseSwgZXJyb3JzIGhhcHBlbmluZyBkdXJpbmcgcmVoeWRyYXRpb24gcHJvY2VzcyAnICsgJ2FuZCBtYWtlcyB5b3VyIGFwcGxpY2F0aW9uIGJpZ2dlciB3aXRob3V0IGEgZ29vZCByZWFzb24uXFxuXFxuJyArICdTZWUgaHR0cHM6Ly9zLWMuc2gvMkJBWHplZCBmb3IgbW9yZSBpbmZvLicpO1xuICB9XG5cbiAgd2luZG93WydfX3N0eWxlZC1jb21wb25lbnRzLWluaXRfXyddICs9IDE7XG59XG5cbi8vXG5cbmV4cG9ydCBkZWZhdWx0IHN0eWxlZDtcbmV4cG9ydCB7IGNyZWF0ZUdsb2JhbFN0eWxlLCBjc3MsIGlzU3R5bGVkQ29tcG9uZW50LCBrZXlmcmFtZXMsIFNlcnZlclN0eWxlU2hlZXQsIFN0eWxlU2hlZXRDb25zdW1lciwgU3R5bGVTaGVldENvbnRleHQsIFN0eWxlU2hlZXRNYW5hZ2VyLCBUaGVtZUNvbnN1bWVyLCBUaGVtZUNvbnRleHQsIFRoZW1lUHJvdmlkZXIsIHdpdGhUaGVtZSwgX19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0hBVU5URURfQllfU1BPT0tZX0dIT1NUUyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3R5bGVkLWNvbXBvbmVudHMuYnJvd3Nlci5lc20uanMubWFwXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSIsImZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgXCJkZWZhdWx0XCI6IG9ialxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ7IiwiaW1wb3J0IGZyZWVHbG9iYWwgZnJvbSAnLi9fZnJlZUdsb2JhbC5qcyc7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuZXhwb3J0IGRlZmF1bHQgcm9vdDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIGlzQnVmZmVyID0gcmVxdWlyZSgnaXMtYnVmZmVyJyk7XG5cbi8qZ2xvYmFsIHRvU3RyaW5nOnRydWUqL1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiAodHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJykgJiYgKHZhbCBpbnN0YW5jZW9mIEZvcm1EYXRhKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAodmFsLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsIGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zO1xufVxuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyovLCAnJykucmVwbGFjZSgvXFxzKiQvLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIChuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTmF0aXZlU2NyaXB0JyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTlMnKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKFxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuICApO1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0eXBlb2YgcmVzdWx0W2tleV0gPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRnVuY3Rpb24gZXF1YWwgdG8gbWVyZ2Ugd2l0aCB0aGUgZGlmZmVyZW5jZSBiZWluZyB0aGF0IG5vIHJlZmVyZW5jZVxuICogdG8gb3JpZ2luYWwgb2JqZWN0cyBpcyBrZXB0LlxuICpcbiAqIEBzZWUgbWVyZ2VcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIGRlZXBNZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0eXBlb2YgcmVzdWx0W2tleV0gPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IGRlZXBNZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IGRlZXBNZXJnZSh7fSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBkZWVwTWVyZ2U6IGRlZXBNZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW1cbn07XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGd1ZCBmcm9tICdndWQnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcblxudmFyIE1BWF9TSUdORURfMzFfQklUX0lOVCA9IDEwNzM3NDE4MjM7XG5cbmZ1bmN0aW9uIG9iamVjdElzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFdmVudEVtaXR0ZXIodmFsdWUpIHtcbiAgdmFyIGhhbmRsZXJzID0gW107XG4gIHJldHVybiB7XG4gICAgb246IGZ1bmN0aW9uIG9uKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgfSxcbiAgICBvZmY6IGZ1bmN0aW9uIG9mZihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycyA9IGhhbmRsZXJzLmZpbHRlcihmdW5jdGlvbiAoaCkge1xuICAgICAgICByZXR1cm4gaCAhPT0gaGFuZGxlcjtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgIHZhbHVlID0gbmV3VmFsdWU7XG4gICAgICBoYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVyKHZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlblswXSA6IGNoaWxkcmVuO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZWFjdENvbnRleHQoZGVmYXVsdFZhbHVlLCBjYWxjdWxhdGVDaGFuZ2VkQml0cykge1xuICB2YXIgX1Byb3ZpZGVyJGNoaWxkQ29udGV4LCBfQ29uc3VtZXIkY29udGV4dFR5cGU7XG5cbiAgdmFyIGNvbnRleHRQcm9wID0gJ19fY3JlYXRlLXJlYWN0LWNvbnRleHQtJyArIGd1ZCgpICsgJ19fJztcblxuICB2YXIgUHJvdmlkZXIgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzTG9vc2UoUHJvdmlkZXIsIF9Db21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gUHJvdmlkZXIoKSB7XG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIF90aGlzID0gX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICBfdGhpcy5lbWl0dGVyID0gY3JlYXRlRXZlbnRFbWl0dGVyKF90aGlzLnByb3BzLnZhbHVlKTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvID0gUHJvdmlkZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICByZXR1cm4gX3JlZiA9IHt9LCBfcmVmW2NvbnRleHRQcm9wXSA9IHRoaXMuZW1pdHRlciwgX3JlZjtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgaWYgKHRoaXMucHJvcHMudmFsdWUgIT09IG5leHRQcm9wcy52YWx1ZSkge1xuICAgICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgbmV3VmFsdWUgPSBuZXh0UHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBjaGFuZ2VkQml0cztcblxuICAgICAgICBpZiAob2JqZWN0SXMob2xkVmFsdWUsIG5ld1ZhbHVlKSkge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IHR5cGVvZiBjYWxjdWxhdGVDaGFuZ2VkQml0cyA9PT0gJ2Z1bmN0aW9uJyA/IGNhbGN1bGF0ZUNoYW5nZWRCaXRzKG9sZFZhbHVlLCBuZXdWYWx1ZSkgOiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQ7XG5cbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgd2FybmluZygoY2hhbmdlZEJpdHMgJiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQpID09PSBjaGFuZ2VkQml0cywgJ2NhbGN1bGF0ZUNoYW5nZWRCaXRzOiBFeHBlY3RlZCB0aGUgcmV0dXJuIHZhbHVlIHRvIGJlIGEgJyArICczMS1iaXQgaW50ZWdlci4gSW5zdGVhZCByZWNlaXZlZDogJyArIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGFuZ2VkQml0cyB8PSAwO1xuXG4gICAgICAgICAgaWYgKGNoYW5nZWRCaXRzICE9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIuc2V0KG5leHRQcm9wcy52YWx1ZSwgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfTtcblxuICAgIHJldHVybiBQcm92aWRlcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIFByb3ZpZGVyLmNoaWxkQ29udGV4dFR5cGVzID0gKF9Qcm92aWRlciRjaGlsZENvbnRleCA9IHt9LCBfUHJvdmlkZXIkY2hpbGRDb250ZXhbY29udGV4dFByb3BdID0gUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLCBfUHJvdmlkZXIkY2hpbGRDb250ZXgpO1xuXG4gIHZhciBDb25zdW1lciA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKF9Db21wb25lbnQyKSB7XG4gICAgX2luaGVyaXRzTG9vc2UoQ29uc3VtZXIsIF9Db21wb25lbnQyKTtcblxuICAgIGZ1bmN0aW9uIENvbnN1bWVyKCkge1xuICAgICAgdmFyIF90aGlzMjtcblxuICAgICAgX3RoaXMyID0gX0NvbXBvbmVudDIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMyLnN0YXRlID0ge1xuICAgICAgICB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKClcbiAgICAgIH07XG5cbiAgICAgIF90aGlzMi5vblVwZGF0ZSA9IGZ1bmN0aW9uIChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgICAgdmFyIG9ic2VydmVkQml0cyA9IF90aGlzMi5vYnNlcnZlZEJpdHMgfCAwO1xuXG4gICAgICAgIGlmICgob2JzZXJ2ZWRCaXRzICYgY2hhbmdlZEJpdHMpICE9PSAwKSB7XG4gICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gX3RoaXMyO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8yID0gQ29uc3VtZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBuZXh0UHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub24odGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSB0aGlzLnByb3BzLm9ic2VydmVkQml0cztcbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9mZih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvMi5nZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0uZ2V0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBvbmx5Q2hpbGQodGhpcy5wcm9wcy5jaGlsZHJlbikodGhpcy5zdGF0ZS52YWx1ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBDb25zdW1lcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIENvbnN1bWVyLmNvbnRleHRUeXBlcyA9IChfQ29uc3VtZXIkY29udGV4dFR5cGUgPSB7fSwgX0NvbnN1bWVyJGNvbnRleHRUeXBlW2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QsIF9Db25zdW1lciRjb250ZXh0VHlwZSk7XG4gIHJldHVybiB7XG4gICAgUHJvdmlkZXI6IFByb3ZpZGVyLFxuICAgIENvbnN1bWVyOiBDb25zdW1lclxuICB9O1xufVxuXG52YXIgaW5kZXggPSBSZWFjdC5jcmVhdGVDb250ZXh0IHx8IGNyZWF0ZVJlYWN0Q29udGV4dDtcblxuZXhwb3J0IGRlZmF1bHQgaW5kZXg7XG4iLCJpbXBvcnQgY3JlYXRlQ29udGV4dCBmcm9tICdtaW5pLWNyZWF0ZS1yZWFjdC1jb250ZXh0JztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCB7IGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCwgY3JlYXRlUGF0aCB9IGZyb20gJ2hpc3RvcnknO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5pbXBvcnQgcGF0aFRvUmVnZXhwIGZyb20gJ3BhdGgtdG8tcmVnZXhwJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50VHlwZSB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuXG4vLyBUT0RPOiBSZXBsYWNlIHdpdGggUmVhY3QuY3JlYXRlQ29udGV4dCBvbmNlIHdlIGNhbiBhc3N1bWUgUmVhY3QgMTYrXG5cbnZhciBjcmVhdGVOYW1lZENvbnRleHQgPSBmdW5jdGlvbiBjcmVhdGVOYW1lZENvbnRleHQobmFtZSkge1xuICB2YXIgY29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcbiAgY29udGV4dC5kaXNwbGF5TmFtZSA9IG5hbWU7XG4gIHJldHVybiBjb250ZXh0O1xufTtcblxudmFyIGNvbnRleHQgPVxuLyojX19QVVJFX18qL1xuY3JlYXRlTmFtZWRDb250ZXh0KFwiUm91dGVyXCIpO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwdXR0aW5nIGhpc3Rvcnkgb24gY29udGV4dC5cbiAqL1xuXG52YXIgUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgUm91dGVyLmNvbXB1dGVSb290TWF0Y2ggPSBmdW5jdGlvbiBjb21wdXRlUm9vdE1hdGNoKHBhdGhuYW1lKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IFwiL1wiLFxuICAgICAgdXJsOiBcIi9cIixcbiAgICAgIHBhcmFtczoge30sXG4gICAgICBpc0V4YWN0OiBwYXRobmFtZSA9PT0gXCIvXCJcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIFJvdXRlcihwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgbG9jYXRpb246IHByb3BzLmhpc3RvcnkubG9jYXRpb25cbiAgICB9OyAvLyBUaGlzIGlzIGEgYml0IG9mIGEgaGFjay4gV2UgaGF2ZSB0byBzdGFydCBsaXN0ZW5pbmcgZm9yIGxvY2F0aW9uXG4gICAgLy8gY2hhbmdlcyBoZXJlIGluIHRoZSBjb25zdHJ1Y3RvciBpbiBjYXNlIHRoZXJlIGFyZSBhbnkgPFJlZGlyZWN0PnNcbiAgICAvLyBvbiB0aGUgaW5pdGlhbCByZW5kZXIuIElmIHRoZXJlIGFyZSwgdGhleSB3aWxsIHJlcGxhY2UvcHVzaCB3aGVuXG4gICAgLy8gdGhleSBtb3VudCBhbmQgc2luY2UgY0RNIGZpcmVzIGluIGNoaWxkcmVuIGJlZm9yZSBwYXJlbnRzLCB3ZSBtYXlcbiAgICAvLyBnZXQgYSBuZXcgbG9jYXRpb24gYmVmb3JlIHRoZSA8Um91dGVyPiBpcyBtb3VudGVkLlxuXG4gICAgX3RoaXMuX2lzTW91bnRlZCA9IGZhbHNlO1xuICAgIF90aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBudWxsO1xuXG4gICAgaWYgKCFwcm9wcy5zdGF0aWNDb250ZXh0KSB7XG4gICAgICBfdGhpcy51bmxpc3RlbiA9IHByb3BzLmhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgICBpZiAoX3RoaXMuX2lzTW91bnRlZCkge1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLl9wZW5kaW5nTG9jYXRpb24pIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBsb2NhdGlvbjogdGhpcy5fcGVuZGluZ0xvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMudW5saXN0ZW4pIHRoaXMudW5saXN0ZW4oKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuIHx8IG51bGwsXG4gICAgICB2YWx1ZToge1xuICAgICAgICBoaXN0b3J5OiB0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICAgIGxvY2F0aW9uOiB0aGlzLnN0YXRlLmxvY2F0aW9uLFxuICAgICAgICBtYXRjaDogUm91dGVyLmNvbXB1dGVSb290TWF0Y2godGhpcy5zdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSksXG4gICAgICAgIHN0YXRpY0NvbnRleHQ6IHRoaXMucHJvcHMuc3RhdGljQ29udGV4dFxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHN0YXRpY0NvbnRleHQ6IFByb3BUeXBlcy5vYmplY3RcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHByZXZQcm9wcy5oaXN0b3J5ID09PSB0aGlzLnByb3BzLmhpc3RvcnksIFwiWW91IGNhbm5vdCBjaGFuZ2UgPFJvdXRlciBoaXN0b3J5PlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHN0b3JlcyBsb2NhdGlvbiBpbiBtZW1vcnkuXG4gKi9cblxudmFyIE1lbW9yeVJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShNZW1vcnlSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1lbW9yeVJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlTWVtb3J5SGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE1lbW9yeVJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIE1lbW9yeVJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBNZW1vcnlSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGluaXRpYWxFbnRyaWVzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgaW5pdGlhbEluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbiAgfTtcblxuICBNZW1vcnlSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8TWVtb3J5Um91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgTWVtb3J5Um91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbnZhciBMaWZlY3ljbGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTGlmZWN5Y2xlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMaWZlY3ljbGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IExpZmVjeWNsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Nb3VudCkgdGhpcy5wcm9wcy5vbk1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVwZGF0ZSkgdGhpcy5wcm9wcy5vblVwZGF0ZS5jYWxsKHRoaXMsIHRoaXMsIHByZXZQcm9wcyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Vbm1vdW50KSB0aGlzLnByb3BzLm9uVW5tb3VudC5jYWxsKHRoaXMsIHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIExpZmVjeWNsZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHJvbXB0aW5nIHRoZSB1c2VyIGJlZm9yZSBuYXZpZ2F0aW5nIGF3YXkgZnJvbSBhIHNjcmVlbi5cbiAqL1xuXG5mdW5jdGlvbiBQcm9tcHQoX3JlZikge1xuICB2YXIgbWVzc2FnZSA9IF9yZWYubWVzc2FnZSxcbiAgICAgIF9yZWYkd2hlbiA9IF9yZWYud2hlbixcbiAgICAgIHdoZW4gPSBfcmVmJHdoZW4gPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmJHdoZW47XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0JCQxKSB7XG4gICAgIWNvbnRleHQkJDEgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxQcm9tcHQ+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgaWYgKCF3aGVuIHx8IGNvbnRleHQkJDEuc3RhdGljQ29udGV4dCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIG1ldGhvZCA9IGNvbnRleHQkJDEuaGlzdG9yeS5ibG9jaztcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMaWZlY3ljbGUsIHtcbiAgICAgIG9uTW91bnQ6IGZ1bmN0aW9uIG9uTW91bnQoc2VsZikge1xuICAgICAgICBzZWxmLnJlbGVhc2UgPSBtZXRob2QobWVzc2FnZSk7XG4gICAgICB9LFxuICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKHNlbGYsIHByZXZQcm9wcykge1xuICAgICAgICBpZiAocHJldlByb3BzLm1lc3NhZ2UgIT09IG1lc3NhZ2UpIHtcbiAgICAgICAgICBzZWxmLnJlbGVhc2UoKTtcbiAgICAgICAgICBzZWxmLnJlbGVhc2UgPSBtZXRob2QobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvblVubW91bnQ6IGZ1bmN0aW9uIG9uVW5tb3VudChzZWxmKSB7XG4gICAgICAgIHNlbGYucmVsZWFzZSgpO1xuICAgICAgfSxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VcbiAgICB9KTtcbiAgfSk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgdmFyIG1lc3NhZ2VUeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zdHJpbmddKTtcbiAgUHJvbXB0LnByb3BUeXBlcyA9IHtcbiAgICB3aGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBtZXNzYWdlOiBtZXNzYWdlVHlwZS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBjYWNoZSA9IHt9O1xudmFyIGNhY2hlTGltaXQgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50ID0gMDtcblxuZnVuY3Rpb24gY29tcGlsZVBhdGgocGF0aCkge1xuICBpZiAoY2FjaGVbcGF0aF0pIHJldHVybiBjYWNoZVtwYXRoXTtcbiAgdmFyIGdlbmVyYXRvciA9IHBhdGhUb1JlZ2V4cC5jb21waWxlKHBhdGgpO1xuXG4gIGlmIChjYWNoZUNvdW50IDwgY2FjaGVMaW1pdCkge1xuICAgIGNhY2hlW3BhdGhdID0gZ2VuZXJhdG9yO1xuICAgIGNhY2hlQ291bnQrKztcbiAgfVxuXG4gIHJldHVybiBnZW5lcmF0b3I7XG59XG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIGdlbmVyYXRpbmcgYSBVUkwgcGF0aG5hbWUgZnJvbSBhIHBhdGggYW5kIHBhcmFtZXRlcnMuXG4gKi9cblxuXG5mdW5jdGlvbiBnZW5lcmF0ZVBhdGgocGF0aCwgcGFyYW1zKSB7XG4gIGlmIChwYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXRoID0gXCIvXCI7XG4gIH1cblxuICBpZiAocGFyYW1zID09PSB2b2lkIDApIHtcbiAgICBwYXJhbXMgPSB7fTtcbiAgfVxuXG4gIHJldHVybiBwYXRoID09PSBcIi9cIiA/IHBhdGggOiBjb21waWxlUGF0aChwYXRoKShwYXJhbXMsIHtcbiAgICBwcmV0dHk6IHRydWVcbiAgfSk7XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG5hdmlnYXRpbmcgcHJvZ3JhbW1hdGljYWxseSB3aXRoIGEgY29tcG9uZW50LlxuICovXG5cbmZ1bmN0aW9uIFJlZGlyZWN0KF9yZWYpIHtcbiAgdmFyIGNvbXB1dGVkTWF0Y2ggPSBfcmVmLmNvbXB1dGVkTWF0Y2gsXG4gICAgICB0byA9IF9yZWYudG8sXG4gICAgICBfcmVmJHB1c2ggPSBfcmVmLnB1c2gsXG4gICAgICBwdXNoID0gX3JlZiRwdXNoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkcHVzaDtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQkJDEpIHtcbiAgICAhY29udGV4dCQkMSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJlZGlyZWN0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBoaXN0b3J5ID0gY29udGV4dCQkMS5oaXN0b3J5LFxuICAgICAgICBzdGF0aWNDb250ZXh0ID0gY29udGV4dCQkMS5zdGF0aWNDb250ZXh0O1xuICAgIHZhciBtZXRob2QgPSBwdXNoID8gaGlzdG9yeS5wdXNoIDogaGlzdG9yeS5yZXBsYWNlO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGNvbXB1dGVkTWF0Y2ggPyB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBnZW5lcmF0ZVBhdGgodG8sIGNvbXB1dGVkTWF0Y2gucGFyYW1zKSA6IF9leHRlbmRzKHt9LCB0bywge1xuICAgICAgcGF0aG5hbWU6IGdlbmVyYXRlUGF0aCh0by5wYXRobmFtZSwgY29tcHV0ZWRNYXRjaC5wYXJhbXMpXG4gICAgfSkgOiB0byk7IC8vIFdoZW4gcmVuZGVyaW5nIGluIGEgc3RhdGljIGNvbnRleHQsXG4gICAgLy8gc2V0IHRoZSBuZXcgbG9jYXRpb24gaW1tZWRpYXRlbHkuXG5cbiAgICBpZiAoc3RhdGljQ29udGV4dCkge1xuICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpZmVjeWNsZSwge1xuICAgICAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudCgpIHtcbiAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoc2VsZiwgcHJldlByb3BzKSB7XG4gICAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwcmV2UHJvcHMudG8pO1xuXG4gICAgICAgIGlmICghbG9jYXRpb25zQXJlRXF1YWwocHJldkxvY2F0aW9uLCBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICAgICAgICBrZXk6IHByZXZMb2NhdGlvbi5rZXlcbiAgICAgICAgfSkpKSB7XG4gICAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRvOiB0b1xuICAgIH0pO1xuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSZWRpcmVjdC5wcm9wVHlwZXMgPSB7XG4gICAgcHVzaDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZnJvbTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0bzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGNhY2hlJDEgPSB7fTtcbnZhciBjYWNoZUxpbWl0JDEgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50JDEgPSAwO1xuXG5mdW5jdGlvbiBjb21waWxlUGF0aCQxKHBhdGgsIG9wdGlvbnMpIHtcbiAgdmFyIGNhY2hlS2V5ID0gXCJcIiArIG9wdGlvbnMuZW5kICsgb3B0aW9ucy5zdHJpY3QgKyBvcHRpb25zLnNlbnNpdGl2ZTtcbiAgdmFyIHBhdGhDYWNoZSA9IGNhY2hlJDFbY2FjaGVLZXldIHx8IChjYWNoZSQxW2NhY2hlS2V5XSA9IHt9KTtcbiAgaWYgKHBhdGhDYWNoZVtwYXRoXSkgcmV0dXJuIHBhdGhDYWNoZVtwYXRoXTtcbiAgdmFyIGtleXMgPSBbXTtcbiAgdmFyIHJlZ2V4cCA9IHBhdGhUb1JlZ2V4cChwYXRoLCBrZXlzLCBvcHRpb25zKTtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICByZWdleHA6IHJlZ2V4cCxcbiAgICBrZXlzOiBrZXlzXG4gIH07XG5cbiAgaWYgKGNhY2hlQ291bnQkMSA8IGNhY2hlTGltaXQkMSkge1xuICAgIHBhdGhDYWNoZVtwYXRoXSA9IHJlc3VsdDtcbiAgICBjYWNoZUNvdW50JDErKztcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgVVJMIHBhdGhuYW1lIHRvIGEgcGF0aC5cbiAqL1xuXG5cbmZ1bmN0aW9uIG1hdGNoUGF0aChwYXRobmFtZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiKSBvcHRpb25zID0ge1xuICAgIHBhdGg6IG9wdGlvbnNcbiAgfTtcbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIHBhdGggPSBfb3B0aW9ucy5wYXRoLFxuICAgICAgX29wdGlvbnMkZXhhY3QgPSBfb3B0aW9ucy5leGFjdCxcbiAgICAgIGV4YWN0ID0gX29wdGlvbnMkZXhhY3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkZXhhY3QsXG4gICAgICBfb3B0aW9ucyRzdHJpY3QgPSBfb3B0aW9ucy5zdHJpY3QsXG4gICAgICBzdHJpY3QgPSBfb3B0aW9ucyRzdHJpY3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkc3RyaWN0LFxuICAgICAgX29wdGlvbnMkc2Vuc2l0aXZlID0gX29wdGlvbnMuc2Vuc2l0aXZlLFxuICAgICAgc2Vuc2l0aXZlID0gX29wdGlvbnMkc2Vuc2l0aXZlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHNlbnNpdGl2ZTtcbiAgdmFyIHBhdGhzID0gW10uY29uY2F0KHBhdGgpO1xuICByZXR1cm4gcGF0aHMucmVkdWNlKGZ1bmN0aW9uIChtYXRjaGVkLCBwYXRoKSB7XG4gICAgaWYgKCFwYXRoKSByZXR1cm4gbnVsbDtcbiAgICBpZiAobWF0Y2hlZCkgcmV0dXJuIG1hdGNoZWQ7XG5cbiAgICB2YXIgX2NvbXBpbGVQYXRoID0gY29tcGlsZVBhdGgkMShwYXRoLCB7XG4gICAgICBlbmQ6IGV4YWN0LFxuICAgICAgc3RyaWN0OiBzdHJpY3QsXG4gICAgICBzZW5zaXRpdmU6IHNlbnNpdGl2ZVxuICAgIH0pLFxuICAgICAgICByZWdleHAgPSBfY29tcGlsZVBhdGgucmVnZXhwLFxuICAgICAgICBrZXlzID0gX2NvbXBpbGVQYXRoLmtleXM7XG5cbiAgICB2YXIgbWF0Y2ggPSByZWdleHAuZXhlYyhwYXRobmFtZSk7XG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIHVybCA9IG1hdGNoWzBdLFxuICAgICAgICB2YWx1ZXMgPSBtYXRjaC5zbGljZSgxKTtcbiAgICB2YXIgaXNFeGFjdCA9IHBhdGhuYW1lID09PSB1cmw7XG4gICAgaWYgKGV4YWN0ICYmICFpc0V4YWN0KSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogcGF0aCxcbiAgICAgIC8vIHRoZSBwYXRoIHVzZWQgdG8gbWF0Y2hcbiAgICAgIHVybDogcGF0aCA9PT0gXCIvXCIgJiYgdXJsID09PSBcIlwiID8gXCIvXCIgOiB1cmwsXG4gICAgICAvLyB0aGUgbWF0Y2hlZCBwb3J0aW9uIG9mIHRoZSBVUkxcbiAgICAgIGlzRXhhY3Q6IGlzRXhhY3QsXG4gICAgICAvLyB3aGV0aGVyIG9yIG5vdCB3ZSBtYXRjaGVkIGV4YWN0bHlcbiAgICAgIHBhcmFtczoga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGtleSwgaW5kZXgpIHtcbiAgICAgICAgbWVtb1trZXkubmFtZV0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgICAgICByZXR1cm4gbWVtbztcbiAgICAgIH0sIHt9KVxuICAgIH07XG4gIH0sIG51bGwpO1xufVxuXG5mdW5jdGlvbiBpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMDtcbn1cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgc2luZ2xlIHBhdGggYW5kIHJlbmRlcmluZy5cbiAqL1xuXG5cbnZhciBSb3V0ZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShSb3V0ZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm91dGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJvdXRlLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCQkMSkge1xuICAgICAgIWNvbnRleHQkJDEgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZT4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF90aGlzLnByb3BzLmxvY2F0aW9uIHx8IGNvbnRleHQkJDEubG9jYXRpb247XG4gICAgICB2YXIgbWF0Y2ggPSBfdGhpcy5wcm9wcy5jb21wdXRlZE1hdGNoID8gX3RoaXMucHJvcHMuY29tcHV0ZWRNYXRjaCAvLyA8U3dpdGNoPiBhbHJlYWR5IGNvbXB1dGVkIHRoZSBtYXRjaCBmb3IgdXNcbiAgICAgIDogX3RoaXMucHJvcHMucGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgX3RoaXMucHJvcHMpIDogY29udGV4dCQkMS5tYXRjaDtcblxuICAgICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIGNvbnRleHQkJDEsIHtcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBtYXRjaDogbWF0Y2hcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGNvbXBvbmVudCA9IF90aGlzJHByb3BzLmNvbXBvbmVudCxcbiAgICAgICAgICByZW5kZXIgPSBfdGhpcyRwcm9wcy5yZW5kZXI7IC8vIFByZWFjdCB1c2VzIGFuIGVtcHR5IGFycmF5IGFzIGNoaWxkcmVuIGJ5XG4gICAgICAvLyBkZWZhdWx0LCBzbyB1c2UgbnVsbCBpZiB0aGF0J3MgdGhlIGNhc2UuXG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSAmJiBjaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY2hpbGRyZW4gPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlbihwcm9wcyk7XG5cbiAgICAgICAgaWYgKGNoaWxkcmVuID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICB2YXIgcGF0aCA9IF90aGlzLnByb3BzLnBhdGg7XG4gICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIllvdSByZXR1cm5lZCBgdW5kZWZpbmVkYCBmcm9tIHRoZSBgY2hpbGRyZW5gIGZ1bmN0aW9uIG9mIFwiICsgKFwiPFJvdXRlXCIgKyAocGF0aCA/IFwiIHBhdGg9XFxcIlwiICsgcGF0aCArIFwiXFxcIlwiIDogXCJcIikgKyBcIj4sIGJ1dCB5b3UgXCIpICsgXCJzaG91bGQgaGF2ZSByZXR1cm5lZCBhIFJlYWN0IGVsZW1lbnQgb3IgYG51bGxgXCIpIDogdm9pZCAwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoaWxkcmVuID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBwcm9wc1xuICAgICAgfSwgY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikgPyBjaGlsZHJlbiA6IHByb3BzLm1hdGNoID8gY29tcG9uZW50ID8gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKSA6IHJlbmRlciA/IHJlbmRlcihwcm9wcykgOiBudWxsIDogbnVsbCk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJvdXRlLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5ub2RlXSksXG4gICAgY29tcG9uZW50OiBmdW5jdGlvbiBjb21wb25lbnQocHJvcHMsIHByb3BOYW1lKSB7XG4gICAgICBpZiAocHJvcHNbcHJvcE5hbWVdICYmICFpc1ZhbGlkRWxlbWVudFR5cGUocHJvcHNbcHJvcE5hbWVdKSkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFwiSW52YWxpZCBwcm9wICdjb21wb25lbnQnIHN1cHBsaWVkIHRvICdSb3V0ZSc6IHRoZSBwcm9wIGlzIG5vdCBhIHZhbGlkIFJlYWN0IGNvbXBvbmVudFwiKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBwYXRoOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKV0pLFxuICAgIHJlbmRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgc2Vuc2l0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sXG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikgJiYgdGhpcy5wcm9wcy5jb21wb25lbnQpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIGNvbXBvbmVudD4gd2lsbCBiZSBpZ25vcmVkXCIpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgcmVuZGVyPiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIHJlbmRlcj4gd2lsbCBiZSBpZ25vcmVkXCIpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmNvbXBvbmVudCAmJiB0aGlzLnByb3BzLnJlbmRlciksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgcmVuZGVyPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIHJlbmRlcj4gd2lsbCBiZSBpZ25vcmVkXCIpIDogdm9pZCAwO1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMubG9jYXRpb24gJiYgIXByZXZQcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKCF0aGlzLnByb3BzLmxvY2F0aW9uICYmIHByZXZQcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSBcIi9cIiA/IHBhdGggOiBcIi9cIiArIHBhdGg7XG59XG5cbmZ1bmN0aW9uIGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKSArIGxvY2F0aW9uLnBhdGhuYW1lXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG4gIHZhciBiYXNlID0gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKTtcbiAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmluZGV4T2YoYmFzZSkgIT09IDApIHJldHVybiBsb2NhdGlvbjtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZS5zdWJzdHIoYmFzZS5sZW5ndGgpXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVVUkwobG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiBsb2NhdGlvbiA9PT0gXCJzdHJpbmdcIiA/IGxvY2F0aW9uIDogY3JlYXRlUGF0aChsb2NhdGlvbik7XG59XG5cbmZ1bmN0aW9uIHN0YXRpY0hhbmRsZXIobWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgY2Fubm90ICVzIHdpdGggPFN0YXRpY1JvdXRlcj5cIiwgbWV0aG9kTmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cbi8qKlxuICogVGhlIHB1YmxpYyB0b3AtbGV2ZWwgQVBJIGZvciBhIFwic3RhdGljXCIgPFJvdXRlcj4sIHNvLWNhbGxlZCBiZWNhdXNlIGl0XG4gKiBjYW4ndCBhY3R1YWxseSBjaGFuZ2UgdGhlIGN1cnJlbnQgbG9jYXRpb24uIEluc3RlYWQsIGl0IGp1c3QgcmVjb3Jkc1xuICogbG9jYXRpb24gY2hhbmdlcyBpbiBhIGNvbnRleHQgb2JqZWN0LiBVc2VmdWwgbWFpbmx5IGluIHRlc3RpbmcgYW5kXG4gKiBzZXJ2ZXItcmVuZGVyaW5nIHNjZW5hcmlvcy5cbiAqL1xuXG5cbnZhciBTdGF0aWNSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3RhdGljUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdGF0aWNSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVQdXNoID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJQVVNIXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVSZXBsYWNlID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJSRVBMQUNFXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVMaXN0ZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQmxvY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN0YXRpY1JvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLm5hdmlnYXRlVG8gPSBmdW5jdGlvbiBuYXZpZ2F0ZVRvKGxvY2F0aW9uLCBhY3Rpb24pIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wcyRiYXNlbmFtZSA9IF90aGlzJHByb3BzLmJhc2VuYW1lLFxuICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMkYmFzZW5hbWUsXG4gICAgICAgIF90aGlzJHByb3BzJGNvbnRleHQgPSBfdGhpcyRwcm9wcy5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMkY29udGV4dCA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRwcm9wcyRjb250ZXh0O1xuICAgIGNvbnRleHQuYWN0aW9uID0gYWN0aW9uO1xuICAgIGNvbnRleHQubG9jYXRpb24gPSBhZGRCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wczIkYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIuYmFzZW5hbWUsXG4gICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMyJGJhc2VuYW1lLFxuICAgICAgICBfdGhpcyRwcm9wczIkY29udGV4dCA9IF90aGlzJHByb3BzMi5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMyJGNvbnRleHQgPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkcHJvcHMyJGNvbnRleHQsXG4gICAgICAgIF90aGlzJHByb3BzMiRsb2NhdGlvbiA9IF90aGlzJHByb3BzMi5sb2NhdGlvbixcbiAgICAgICAgbG9jYXRpb24gPSBfdGhpcyRwcm9wczIkbG9jYXRpb24gPT09IHZvaWQgMCA/IFwiL1wiIDogX3RoaXMkcHJvcHMyJGxvY2F0aW9uLFxuICAgICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMyLCBbXCJiYXNlbmFtZVwiLCBcImNvbnRleHRcIiwgXCJsb2NhdGlvblwiXSk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IHtcbiAgICAgIGNyZWF0ZUhyZWY6IGZ1bmN0aW9uIGNyZWF0ZUhyZWYocGF0aCkge1xuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lICsgY3JlYXRlVVJMKHBhdGgpKTtcbiAgICAgIH0sXG4gICAgICBhY3Rpb246IFwiUE9QXCIsXG4gICAgICBsb2NhdGlvbjogc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKSxcbiAgICAgIHB1c2g6IHRoaXMuaGFuZGxlUHVzaCxcbiAgICAgIHJlcGxhY2U6IHRoaXMuaGFuZGxlUmVwbGFjZSxcbiAgICAgIGdvOiBzdGF0aWNIYW5kbGVyKFwiZ29cIiksXG4gICAgICBnb0JhY2s6IHN0YXRpY0hhbmRsZXIoXCJnb0JhY2tcIiksXG4gICAgICBnb0ZvcndhcmQ6IHN0YXRpY0hhbmRsZXIoXCJnb0ZvcndhcmRcIiksXG4gICAgICBsaXN0ZW46IHRoaXMuaGFuZGxlTGlzdGVuLFxuICAgICAgYmxvY2s6IHRoaXMuaGFuZGxlQmxvY2tcbiAgICB9O1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGhpc3Rvcnk6IGhpc3RvcnksXG4gICAgICBzdGF0aWNDb250ZXh0OiBjb250ZXh0XG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBTdGF0aWNSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgU3RhdGljUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgfTtcblxuICBTdGF0aWNSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8U3RhdGljUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgU3RhdGljUm91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyB0aGUgZmlyc3QgPFJvdXRlPiB0aGF0IG1hdGNoZXMuXG4gKi9cblxudmFyIFN3aXRjaCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShTd2l0Y2gsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN3aXRjaCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3dpdGNoLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCQkMSkge1xuICAgICAgIWNvbnRleHQkJDEgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxTd2l0Y2g+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgbG9jYXRpb24gPSBfdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCBjb250ZXh0JCQxLmxvY2F0aW9uO1xuICAgICAgdmFyIGVsZW1lbnQsIG1hdGNoOyAvLyBXZSB1c2UgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaCBpbnN0ZWFkIG9mIFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoKS5maW5kKClcbiAgICAgIC8vIGhlcmUgYmVjYXVzZSB0b0FycmF5IGFkZHMga2V5cyB0byBhbGwgY2hpbGQgZWxlbWVudHMgYW5kIHdlIGRvIG5vdCB3YW50XG4gICAgICAvLyB0byB0cmlnZ2VyIGFuIHVubW91bnQvcmVtb3VudCBmb3IgdHdvIDxSb3V0ZT5zIHRoYXQgcmVuZGVyIHRoZSBzYW1lXG4gICAgICAvLyBjb21wb25lbnQgYXQgZGlmZmVyZW50IFVSTHMuXG5cbiAgICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goX3RoaXMucHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAobWF0Y2ggPT0gbnVsbCAmJiBSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgICBlbGVtZW50ID0gY2hpbGQ7XG4gICAgICAgICAgdmFyIHBhdGggPSBjaGlsZC5wcm9wcy5wYXRoIHx8IGNoaWxkLnByb3BzLmZyb207XG4gICAgICAgICAgbWF0Y2ggPSBwYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBfZXh0ZW5kcyh7fSwgY2hpbGQucHJvcHMsIHtcbiAgICAgICAgICAgIHBhdGg6IHBhdGhcbiAgICAgICAgICB9KSkgOiBjb250ZXh0JCQxLm1hdGNoO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBtYXRjaCA/IFJlYWN0LmNsb25lRWxlbWVudChlbGVtZW50LCB7XG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgY29tcHV0ZWRNYXRjaDogbWF0Y2hcbiAgICAgIH0pIDogbnVsbDtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gU3dpdGNoO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFN3aXRjaC5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0XG4gIH07XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMubG9jYXRpb24gJiYgIXByZXZQcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIEEgcHVibGljIGhpZ2hlci1vcmRlciBjb21wb25lbnQgdG8gYWNjZXNzIHRoZSBpbXBlcmF0aXZlIEFQSVxuICovXG5cbmZ1bmN0aW9uIHdpdGhSb3V0ZXIoQ29tcG9uZW50KSB7XG4gIHZhciBkaXNwbGF5TmFtZSA9IFwid2l0aFJvdXRlcihcIiArIChDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUpICsgXCIpXCI7XG5cbiAgdmFyIEMgPSBmdW5jdGlvbiBDKHByb3BzKSB7XG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnRSZWYgPSBwcm9wcy53cmFwcGVkQ29tcG9uZW50UmVmLFxuICAgICAgICByZW1haW5pbmdQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBbXCJ3cmFwcGVkQ29tcG9uZW50UmVmXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0JCQxKSB7XG4gICAgICAhY29udGV4dCQkMSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFwiICsgZGlzcGxheU5hbWUgKyBcIiAvPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcmVtYWluaW5nUHJvcHMsIGNvbnRleHQkJDEsIHtcbiAgICAgICAgcmVmOiB3cmFwcGVkQ29tcG9uZW50UmVmXG4gICAgICB9KSk7XG4gICAgfSk7XG4gIH07XG5cbiAgQy5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICBDLldyYXBwZWRDb21wb25lbnQgPSBDb21wb25lbnQ7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIEMucHJvcFR5cGVzID0ge1xuICAgICAgd3JhcHBlZENvbXBvbmVudFJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICAgIH07XG4gIH1cblxuICByZXR1cm4gaG9pc3RTdGF0aWNzKEMsIENvbXBvbmVudCk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgZ2xvYmFsID0gd2luZG93O1xuICAgIHZhciBrZXkgPSBcIl9fcmVhY3Rfcm91dGVyX2J1aWxkX19cIjtcbiAgICB2YXIgYnVpbGROYW1lcyA9IHtcbiAgICAgIGNqczogXCJDb21tb25KU1wiLFxuICAgICAgZXNtOiBcIkVTIG1vZHVsZXNcIixcbiAgICAgIHVtZDogXCJVTURcIlxuICAgIH07XG5cbiAgICBpZiAoZ2xvYmFsW2tleV0gJiYgZ2xvYmFsW2tleV0gIT09IFwiZXNtXCIpIHtcbiAgICAgIHZhciBpbml0aWFsQnVpbGROYW1lID0gYnVpbGROYW1lc1tnbG9iYWxba2V5XV07XG4gICAgICB2YXIgc2Vjb25kYXJ5QnVpbGROYW1lID0gYnVpbGROYW1lc1tcImVzbVwiXTsgLy8gVE9ETzogQWRkIGxpbmsgdG8gYXJ0aWNsZSB0aGF0IGV4cGxhaW5zIGluIGRldGFpbCBob3cgdG8gYXZvaWRcbiAgICAgIC8vIGxvYWRpbmcgMiBkaWZmZXJlbnQgYnVpbGRzLlxuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgYXJlIGxvYWRpbmcgdGhlIFwiICsgc2Vjb25kYXJ5QnVpbGROYW1lICsgXCIgYnVpbGQgb2YgUmVhY3QgUm91dGVyIFwiICsgKFwib24gYSBwYWdlIHRoYXQgaXMgYWxyZWFkeSBydW5uaW5nIHRoZSBcIiArIGluaXRpYWxCdWlsZE5hbWUgKyBcIiBcIikgKyBcImJ1aWxkLCBzbyB0aGluZ3Mgd29uJ3Qgd29yayByaWdodC5cIik7XG4gICAgfVxuXG4gICAgZ2xvYmFsW2tleV0gPSBcImVzbVwiO1xuICB9XG59XG5cbmV4cG9ydCB7IE1lbW9yeVJvdXRlciwgUHJvbXB0LCBSZWRpcmVjdCwgUm91dGUsIFJvdXRlciwgU3RhdGljUm91dGVyLCBTd2l0Y2gsIGdlbmVyYXRlUGF0aCwgbWF0Y2hQYXRoLCB3aXRoUm91dGVyLCBjb250ZXh0IGFzIF9fUm91dGVyQ29udGV4dCB9O1xuIiwidmFyIGlzUHJvZHVjdGlvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbic7XG52YXIgcHJlZml4ID0gJ0ludmFyaWFudCBmYWlsZWQnO1xuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICBpZiAoY29uZGl0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGlzUHJvZHVjdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXgpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXggKyBcIjogXCIgKyAobWVzc2FnZSB8fCAnJykpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGludmFyaWFudDtcbiIsImZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aG5hbWUpIHtcbiAgcmV0dXJuIHBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nO1xufVxuXG4vLyBBYm91dCAxLjV4IGZhc3RlciB0aGFuIHRoZSB0d28tYXJnIHZlcnNpb24gb2YgQXJyYXkjc3BsaWNlKClcbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gaW5kZXgsIGsgPSBpICsgMSwgbiA9IGxpc3QubGVuZ3RoOyBrIDwgbjsgaSArPSAxLCBrICs9IDEpIHtcbiAgICBsaXN0W2ldID0gbGlzdFtrXTtcbiAgfVxuXG4gIGxpc3QucG9wKCk7XG59XG5cbi8vIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgaGVhdmlseSBvbiBub2RlJ3MgdXJsLnBhcnNlXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUodG8sIGZyb20pIHtcbiAgaWYgKGZyb20gPT09IHVuZGVmaW5lZCkgZnJvbSA9ICcnO1xuXG4gIHZhciB0b1BhcnRzID0gKHRvICYmIHRvLnNwbGl0KCcvJykpIHx8IFtdO1xuICB2YXIgZnJvbVBhcnRzID0gKGZyb20gJiYgZnJvbS5zcGxpdCgnLycpKSB8fCBbXTtcblxuICB2YXIgaXNUb0FicyA9IHRvICYmIGlzQWJzb2x1dGUodG8pO1xuICB2YXIgaXNGcm9tQWJzID0gZnJvbSAmJiBpc0Fic29sdXRlKGZyb20pO1xuICB2YXIgbXVzdEVuZEFicyA9IGlzVG9BYnMgfHwgaXNGcm9tQWJzO1xuXG4gIGlmICh0byAmJiBpc0Fic29sdXRlKHRvKSkge1xuICAgIC8vIHRvIGlzIGFic29sdXRlXG4gICAgZnJvbVBhcnRzID0gdG9QYXJ0cztcbiAgfSBlbHNlIGlmICh0b1BhcnRzLmxlbmd0aCkge1xuICAgIC8vIHRvIGlzIHJlbGF0aXZlLCBkcm9wIHRoZSBmaWxlbmFtZVxuICAgIGZyb21QYXJ0cy5wb3AoKTtcbiAgICBmcm9tUGFydHMgPSBmcm9tUGFydHMuY29uY2F0KHRvUGFydHMpO1xuICB9XG5cbiAgaWYgKCFmcm9tUGFydHMubGVuZ3RoKSByZXR1cm4gJy8nO1xuXG4gIHZhciBoYXNUcmFpbGluZ1NsYXNoO1xuICBpZiAoZnJvbVBhcnRzLmxlbmd0aCkge1xuICAgIHZhciBsYXN0ID0gZnJvbVBhcnRzW2Zyb21QYXJ0cy5sZW5ndGggLSAxXTtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gbGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicgfHwgbGFzdCA9PT0gJyc7XG4gIH0gZWxzZSB7XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IGZyb21QYXJ0cy5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHBhcnQgPSBmcm9tUGFydHNbaV07XG5cbiAgICBpZiAocGFydCA9PT0gJy4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgaWYgKCFtdXN0RW5kQWJzKSBmb3IgKDsgdXAtLTsgdXApIGZyb21QYXJ0cy51bnNoaWZ0KCcuLicpO1xuXG4gIGlmIChcbiAgICBtdXN0RW5kQWJzICYmXG4gICAgZnJvbVBhcnRzWzBdICE9PSAnJyAmJlxuICAgICghZnJvbVBhcnRzWzBdIHx8ICFpc0Fic29sdXRlKGZyb21QYXJ0c1swXSkpXG4gIClcbiAgICBmcm9tUGFydHMudW5zaGlmdCgnJyk7XG5cbiAgdmFyIHJlc3VsdCA9IGZyb21QYXJ0cy5qb2luKCcvJyk7XG5cbiAgaWYgKGhhc1RyYWlsaW5nU2xhc2ggJiYgcmVzdWx0LnN1YnN0cigtMSkgIT09ICcvJykgcmVzdWx0ICs9ICcvJztcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCByZXNvbHZlUGF0aG5hbWU7XG4iLCJmdW5jdGlvbiB2YWx1ZU9mKG9iaikge1xuICByZXR1cm4gb2JqLnZhbHVlT2YgPyBvYmoudmFsdWVPZigpIDogT2JqZWN0LnByb3RvdHlwZS52YWx1ZU9mLmNhbGwob2JqKTtcbn1cblxuZnVuY3Rpb24gdmFsdWVFcXVhbChhLCBiKSB7XG4gIC8vIFRlc3QgZm9yIHN0cmljdCBlcXVhbGl0eSBmaXJzdC5cbiAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xuXG4gIC8vIE90aGVyd2lzZSwgaWYgZWl0aGVyIG9mIHRoZW0gPT0gbnVsbCB0aGV5IGFyZSBub3QgZXF1YWwuXG4gIGlmIChhID09IG51bGwgfHwgYiA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcbiAgICByZXR1cm4gKFxuICAgICAgQXJyYXkuaXNBcnJheShiKSAmJlxuICAgICAgYS5sZW5ndGggPT09IGIubGVuZ3RoICYmXG4gICAgICBhLmV2ZXJ5KGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgIHJldHVybiB2YWx1ZUVxdWFsKGl0ZW0sIGJbaW5kZXhdKTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIGIgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIGFWYWx1ZSA9IHZhbHVlT2YoYSk7XG4gICAgdmFyIGJWYWx1ZSA9IHZhbHVlT2YoYik7XG5cbiAgICBpZiAoYVZhbHVlICE9PSBhIHx8IGJWYWx1ZSAhPT0gYikgcmV0dXJuIHZhbHVlRXF1YWwoYVZhbHVlLCBiVmFsdWUpO1xuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIGEsIGIpKS5ldmVyeShmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiB2YWx1ZUVxdWFsKGFba2V5XSwgYltrZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdmFsdWVFcXVhbDtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCByZXNvbHZlUGF0aG5hbWUgZnJvbSAncmVzb2x2ZS1wYXRobmFtZSc7XG5pbXBvcnQgdmFsdWVFcXVhbCBmcm9tICd2YWx1ZS1lcXVhbCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aCA6ICcvJyArIHBhdGg7XG59XG5mdW5jdGlvbiBzdHJpcExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xufVxuZnVuY3Rpb24gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBwYXRoLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihwcmVmaXgudG9Mb3dlckNhc2UoKSkgPT09IDAgJiYgJy8/IycuaW5kZXhPZihwYXRoLmNoYXJBdChwcmVmaXgubGVuZ3RoKSkgIT09IC0xO1xufVxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkgPyBwYXRoLnN1YnN0cihwcmVmaXgubGVuZ3RoKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBzdHJpcFRyYWlsaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQocGF0aC5sZW5ndGggLSAxKSA9PT0gJy8nID8gcGF0aC5zbGljZSgwLCAtMSkgOiBwYXRoO1xufVxuZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgdmFyIHBhdGhuYW1lID0gcGF0aCB8fCAnLyc7XG4gIHZhciBzZWFyY2ggPSAnJztcbiAgdmFyIGhhc2ggPSAnJztcbiAgdmFyIGhhc2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJyMnKTtcblxuICBpZiAoaGFzaEluZGV4ICE9PSAtMSkge1xuICAgIGhhc2ggPSBwYXRobmFtZS5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICB9XG5cbiAgdmFyIHNlYXJjaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignPycpO1xuXG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVBhdGgobG9jYXRpb24pIHtcbiAgdmFyIHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBzZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2gsXG4gICAgICBoYXNoID0gbG9jYXRpb24uaGFzaDtcbiAgdmFyIHBhdGggPSBwYXRobmFtZSB8fCAnLyc7XG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSAnPycpIHBhdGggKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gJz8nID8gc2VhcmNoIDogXCI/XCIgKyBzZWFyY2g7XG4gIGlmIChoYXNoICYmIGhhc2ggIT09ICcjJykgcGF0aCArPSBoYXNoLmNoYXJBdCgwKSA9PT0gJyMnID8gaGFzaCA6IFwiI1wiICsgaGFzaDtcbiAgcmV0dXJuIHBhdGg7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXksIGN1cnJlbnRMb2NhdGlvbikge1xuICB2YXIgbG9jYXRpb247XG5cbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIC8vIFR3by1hcmcgZm9ybTogcHVzaChwYXRoLCBzdGF0ZSlcbiAgICBsb2NhdGlvbiA9IHBhcnNlUGF0aChwYXRoKTtcbiAgICBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9IGVsc2Uge1xuICAgIC8vIE9uZS1hcmcgZm9ybTogcHVzaChsb2NhdGlvbilcbiAgICBsb2NhdGlvbiA9IF9leHRlbmRzKHt9LCBwYXRoKTtcbiAgICBpZiAobG9jYXRpb24ucGF0aG5hbWUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24ucGF0aG5hbWUgPSAnJztcblxuICAgIGlmIChsb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5zZWFyY2guY2hhckF0KDApICE9PSAnPycpIGxvY2F0aW9uLnNlYXJjaCA9ICc/JyArIGxvY2F0aW9uLnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uc2VhcmNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5oYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBsb2NhdGlvbi5oYXNoID0gJyMnICsgbG9jYXRpb24uaGFzaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uaGFzaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZSAhPT0gdW5kZWZpbmVkICYmIGxvY2F0aW9uLnN0YXRlID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH1cblxuICB0cnkge1xuICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gZGVjb2RlVVJJKGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgVVJJRXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBVUklFcnJvcignUGF0aG5hbWUgXCInICsgbG9jYXRpb24ucGF0aG5hbWUgKyAnXCIgY291bGQgbm90IGJlIGRlY29kZWQuICcgKyAnVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGFuIGludmFsaWQgcGVyY2VudC1lbmNvZGluZy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBpZiAoa2V5KSBsb2NhdGlvbi5rZXkgPSBrZXk7XG5cbiAgaWYgKGN1cnJlbnRMb2NhdGlvbikge1xuICAgIC8vIFJlc29sdmUgaW5jb21wbGV0ZS9yZWxhdGl2ZSBwYXRobmFtZSByZWxhdGl2ZSB0byBjdXJyZW50IGxvY2F0aW9uLlxuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gY3VycmVudExvY2F0aW9uLnBhdGhuYW1lO1xuICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gcmVzb2x2ZVBhdGhuYW1lKGxvY2F0aW9uLnBhdGhuYW1lLCBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIHByaW9yIGxvY2F0aW9uIGFuZCBwYXRobmFtZSBpcyBlbXB0eSwgc2V0IGl0IHRvIC9cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICcvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbG9jYXRpb247XG59XG5mdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaCAmJiBhLmtleSA9PT0gYi5rZXkgJiYgdmFsdWVFcXVhbChhLnN0YXRlLCBiLnN0YXRlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKSB7XG4gIHZhciBwcm9tcHQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIHNldFByb21wdChuZXh0UHJvbXB0KSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwcm9tcHQgPT0gbnVsbCwgJ0EgaGlzdG9yeSBzdXBwb3J0cyBvbmx5IG9uZSBwcm9tcHQgYXQgYSB0aW1lJykgOiB2b2lkIDA7XG4gICAgcHJvbXB0ID0gbmV4dFByb21wdDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHByb21wdCA9PT0gbmV4dFByb21wdCkgcHJvbXB0ID0gbnVsbDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBjYWxsYmFjaykge1xuICAgIC8vIFRPRE86IElmIGFub3RoZXIgdHJhbnNpdGlvbiBzdGFydHMgd2hpbGUgd2UncmUgc3RpbGwgY29uZmlybWluZ1xuICAgIC8vIHRoZSBwcmV2aW91cyBvbmUsIHdlIG1heSBlbmQgdXAgaW4gYSB3ZWlyZCBzdGF0ZS4gRmlndXJlIG91dCB0aGVcbiAgICAvLyBiZXN0IHdheSB0byBoYW5kbGUgdGhpcy5cbiAgICBpZiAocHJvbXB0ICE9IG51bGwpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0eXBlb2YgcHJvbXB0ID09PSAnZnVuY3Rpb24nID8gcHJvbXB0KGxvY2F0aW9uLCBhY3Rpb24pIDogcHJvbXB0O1xuXG4gICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBnZXRVc2VyQ29uZmlybWF0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbihyZXN1bHQsIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnQSBoaXN0b3J5IG5lZWRzIGEgZ2V0VXNlckNvbmZpcm1hdGlvbiBmdW5jdGlvbiBpbiBvcmRlciB0byB1c2UgYSBwcm9tcHQgbWVzc2FnZScpIDogdm9pZCAwO1xuICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZXR1cm4gZmFsc2UgZnJvbSBhIHRyYW5zaXRpb24gaG9vayB0byBjYW5jZWwgdGhlIHRyYW5zaXRpb24uXG4gICAgICAgIGNhbGxiYWNrKHJlc3VsdCAhPT0gZmFsc2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgZnVuY3Rpb24gYXBwZW5kTGlzdGVuZXIoZm4pIHtcbiAgICB2YXIgaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgZnVuY3Rpb24gbGlzdGVuZXIoKSB7XG4gICAgICBpZiAoaXNBY3RpdmUpIGZuLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlzQWN0aXZlID0gZmFsc2U7XG4gICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICE9PSBsaXN0ZW5lcjtcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBub3RpZnlMaXN0ZW5lcnMoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHNldFByb21wdDogc2V0UHJvbXB0LFxuICAgIGNvbmZpcm1UcmFuc2l0aW9uVG86IGNvbmZpcm1UcmFuc2l0aW9uVG8sXG4gICAgYXBwZW5kTGlzdGVuZXI6IGFwcGVuZExpc3RlbmVyLFxuICAgIG5vdGlmeUxpc3RlbmVyczogbm90aWZ5TGlzdGVuZXJzXG4gIH07XG59XG5cbnZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuZnVuY3Rpb24gZ2V0Q29uZmlybWF0aW9uKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrKHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1hbGVydFxufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGlzIHN1cHBvcnRlZC4gVGFrZW4gZnJvbSBNb2Rlcm5penIuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvZmVhdHVyZS1kZXRlY3RzL2hpc3RvcnkuanNcbiAqIGNoYW5nZWQgdG8gYXZvaWQgZmFsc2UgbmVnYXRpdmVzIGZvciBXaW5kb3dzIFBob25lczogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3Qtcm91dGVyL2lzc3Vlcy81ODZcbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c0hpc3RvcnkoKSB7XG4gIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICBpZiAoKHVhLmluZGV4T2YoJ0FuZHJvaWQgMi4nKSAhPT0gLTEgfHwgdWEuaW5kZXhPZignQW5kcm9pZCA0LjAnKSAhPT0gLTEpICYmIHVhLmluZGV4T2YoJ01vYmlsZSBTYWZhcmknKSAhPT0gLTEgJiYgdWEuaW5kZXhPZignQ2hyb21lJykgPT09IC0xICYmIHVhLmluZGV4T2YoJ1dpbmRvd3MgUGhvbmUnKSA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5ICYmICdwdXNoU3RhdGUnIGluIHdpbmRvdy5oaXN0b3J5O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYnJvd3NlciBmaXJlcyBwb3BzdGF0ZSBvbiBoYXNoIGNoYW5nZS5cbiAqIElFMTAgYW5kIElFMTEgZG8gbm90LlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgPT09IC0xO1xufVxuLyoqXG4gKiBSZXR1cm5zIGZhbHNlIGlmIHVzaW5nIGdvKG4pIHdpdGggaGFzaCBoaXN0b3J5IGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQuXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgPT09IC0xO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBnaXZlbiBwb3BzdGF0ZSBldmVudCBpcyBhbiBleHRyYW5lb3VzIFdlYktpdCBldmVudC5cbiAqIEFjY291bnRzIGZvciB0aGUgZmFjdCB0aGF0IENocm9tZSBvbiBpT1MgZmlyZXMgcmVhbCBwb3BzdGF0ZSBldmVudHNcbiAqIGNvbnRhaW5pbmcgdW5kZWZpbmVkIHN0YXRlIHdoZW4gcHJlc3NpbmcgdGhlIGJhY2sgYnV0dG9uLlxuICovXG5cbmZ1bmN0aW9uIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIGV2ZW50LnN0YXRlID09PSB1bmRlZmluZWQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDcmlPUycpID09PSAtMTtcbn1cblxudmFyIFBvcFN0YXRlRXZlbnQgPSAncG9wc3RhdGUnO1xudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxuZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cuaGlzdG9yeS5zdGF0ZSB8fCB7fTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElFIDExIHNvbWV0aW1lcyB0aHJvd3Mgd2hlbiBhY2Nlc3Npbmcgd2luZG93Lmhpc3Rvcnkuc3RhdGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0VHJhaW5pbmcvaGlzdG9yeS9wdWxsLzI4OVxuICAgIHJldHVybiB7fTtcbiAgfVxufVxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCB1c2VzIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpbmNsdWRpbmdcbiAqIHB1c2hTdGF0ZSwgcmVwbGFjZVN0YXRlLCBhbmQgdGhlIHBvcHN0YXRlIGV2ZW50LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Jyb3dzZXIgaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhblVzZUhpc3RvcnkgPSBzdXBwb3J0c0hpc3RvcnkoKTtcbiAgdmFyIG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyID0gIXN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKTtcbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgX3Byb3BzJGZvcmNlUmVmcmVzaCA9IF9wcm9wcy5mb3JjZVJlZnJlc2gsXG4gICAgICBmb3JjZVJlZnJlc2ggPSBfcHJvcHMkZm9yY2VSZWZyZXNoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmb3JjZVJlZnJlc2gsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHZvaWQgMCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBfcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdm9pZCAwID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oaGlzdG9yeVN0YXRlKSB7XG4gICAgdmFyIF9yZWYgPSBoaXN0b3J5U3RhdGUgfHwge30sXG4gICAgICAgIGtleSA9IF9yZWYua2V5LFxuICAgICAgICBzdGF0ZSA9IF9yZWYuc3RhdGU7XG5cbiAgICB2YXIgX3dpbmRvdyRsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbixcbiAgICAgICAgcGF0aG5hbWUgPSBfd2luZG93JGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2ggPSBfd2luZG93JGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgICAgaGFzaCA9IF93aW5kb3ckbG9jYXRpb24uaGFzaDtcbiAgICB2YXIgcGF0aCA9IHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpIDogdm9pZCAwO1xuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQb3BTdGF0ZShldmVudCkge1xuICAgIC8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXG4gICAgaWYgKGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpKSByZXR1cm47XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGV2ZW50LnN0YXRlKSk7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSkpO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uOyAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIGtleXMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3Iga2V5cyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxLZXlzLmluZGV4T2YodG9Mb2NhdGlvbi5rZXkpO1xuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG4gICAgdmFyIGZyb21JbmRleCA9IGFsbEtleXMuaW5kZXhPZihmcm9tTG9jYXRpb24ua2V5KTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSk7XG4gIHZhciBhbGxLZXlzID0gW2luaXRpYWxMb2NhdGlvbi5rZXldOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiBiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICB2YXIgbmV4dEtleXMgPSBhbGxLZXlzLnNsaWNlKDAsIHByZXZJbmRleCArIDEpO1xuICAgICAgICAgIG5leHRLZXlzLnB1c2gobG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBhbGxLZXlzID0gbmV4dEtleXM7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoe1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHN0YXRlOiBzdGF0ZVxuICAgICAgICB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbEtleXNbcHJldkluZGV4XSA9IGxvY2F0aW9uLmtleTtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5JykgOiB2b2lkIDA7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG52YXIgSGFzaENoYW5nZUV2ZW50JDEgPSAnaGFzaGNoYW5nZSc7XG52YXIgSGFzaFBhdGhDb2RlcnMgPSB7XG4gIGhhc2hiYW5nOiB7XG4gICAgZW5jb2RlUGF0aDogZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGggOiAnIS8nICsgc3RyaXBMZWFkaW5nU2xhc2gocGF0aCk7XG4gICAgfSxcbiAgICBkZWNvZGVQYXRoOiBmdW5jdGlvbiBkZWNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xuICAgIH1cbiAgfSxcbiAgbm9zbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IHN0cmlwTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9LFxuICBzbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfVxufTtcblxuZnVuY3Rpb24gc3RyaXBIYXNoKHVybCkge1xuICB2YXIgaGFzaEluZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyB1cmwgOiB1cmwuc2xpY2UoMCwgaGFzaEluZGV4KTtcbn1cblxuZnVuY3Rpb24gZ2V0SGFzaFBhdGgoKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB3aW5kb3cubG9jYXRpb24uaGFzaCBoZXJlIGJlY2F1c2UgaXQncyBub3RcbiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGhhc2hJbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/ICcnIDogaHJlZi5zdWJzdHJpbmcoaGFzaEluZGV4ICsgMSk7XG59XG5cbmZ1bmN0aW9uIHB1c2hIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbn1cblxuZnVuY3Rpb24gcmVwbGFjZUhhc2hQYXRoKHBhdGgpIHtcbiAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2Uoc3RyaXBIYXNoKHdpbmRvdy5sb2NhdGlvbi5ocmVmKSArICcjJyArIHBhdGgpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVIYXNoSGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICAhY2FuVXNlRE9NID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnSGFzaCBoaXN0b3J5IG5lZWRzIGEgRE9NJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuR29XaXRob3V0UmVsb2FkID0gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKTtcbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMkaGFzaFR5cGUgPSBfcHJvcHMuaGFzaFR5cGUsXG4gICAgICBoYXNoVHlwZSA9IF9wcm9wcyRoYXNoVHlwZSA9PT0gdm9pZCAwID8gJ3NsYXNoJyA6IF9wcm9wcyRoYXNoVHlwZTtcbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcbiAgdmFyIF9IYXNoUGF0aENvZGVycyRoYXNoVCA9IEhhc2hQYXRoQ29kZXJzW2hhc2hUeXBlXSxcbiAgICAgIGVuY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZW5jb2RlUGF0aCxcbiAgICAgIGRlY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZGVjb2RlUGF0aDtcblxuICBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbigpIHtcbiAgICB2YXIgcGF0aCA9IGRlY29kZVBhdGgoZ2V0SGFzaFBhdGgoKSk7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCk7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gIHZhciBpZ25vcmVQYXRoID0gbnVsbDtcblxuICBmdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbCQkMShhLCBiKSB7XG4gICAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICAgIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkge1xuICAgICAgLy8gRW5zdXJlIHdlIGFsd2F5cyBoYXZlIGEgcHJvcGVybHktZW5jb2RlZCBoYXNoLlxuICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuICAgICAgaWYgKCFmb3JjZU5leHRQb3AgJiYgbG9jYXRpb25zQXJlRXF1YWwkJDEocHJldkxvY2F0aW9uLCBsb2NhdGlvbikpIHJldHVybjsgLy8gQSBoYXNoY2hhbmdlIGRvZXNuJ3QgYWx3YXlzID09IGxvY2F0aW9uIGNoYW5nZS5cblxuICAgICAgaWYgKGlnbm9yZVBhdGggPT09IGNyZWF0ZVBhdGgobG9jYXRpb24pKSByZXR1cm47IC8vIElnbm9yZSB0aGlzIGNoYW5nZTsgd2UgYWxyZWFkeSBzZXRTdGF0ZSBpbiBwdXNoL3JlcGxhY2UuXG5cbiAgICAgIGlnbm9yZVBhdGggPSBudWxsO1xuICAgICAgaGFuZGxlUG9wKGxvY2F0aW9uKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBwYXRocyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBwYXRocyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKHRvTG9jYXRpb24pKTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGZyb21Mb2NhdGlvbikpO1xuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9IC8vIEVuc3VyZSB0aGUgaGFzaCBpcyBlbmNvZGVkIHByb3Blcmx5IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlLlxuXG5cbiAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICB2YXIgYWxsUGF0aHMgPSBbY3JlYXRlUGF0aChpbml0aWFsTG9jYXRpb24pXTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICB2YXIgYmFzZVRhZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Jhc2UnKTtcbiAgICB2YXIgaHJlZiA9ICcnO1xuXG4gICAgaWYgKGJhc2VUYWcgJiYgYmFzZVRhZy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkge1xuICAgICAgaHJlZiA9IHN0cmlwSGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhyZWYgKyAnIycgKyBlbmNvZGVQYXRoKGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbikpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFBVU0gsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHB1c2hIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcbiAgICAgICAgdmFyIG5leHRQYXRocyA9IGFsbFBhdGhzLnNsaWNlKDAsIHByZXZJbmRleCArIDEpO1xuICAgICAgICBuZXh0UGF0aHMucHVzaChwYXRoKTtcbiAgICAgICAgYWxsUGF0aHMgPSBuZXh0UGF0aHM7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBQVVNIIHRoZSBzYW1lIHBhdGg7IGEgbmV3IGVudHJ5IHdpbGwgbm90IGJlIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrJykgOiB2b2lkIDA7XG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUkVQTEFDRSwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsUGF0aHNbcHJldkluZGV4XSA9IHBhdGg7XG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoY2FuR29XaXRob3V0UmVsb2FkLCAnSGFzaCBoaXN0b3J5IGdvKG4pIGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQgaW4gdGhpcyBicm93c2VyJykgOiB2b2lkIDA7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEgJiYgZGVsdGEgPT09IDEpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCQxLCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCQxLCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmZ1bmN0aW9uIGNsYW1wKG4sIGxvd2VyQm91bmQsIHVwcGVyQm91bmQpIHtcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG4sIGxvd2VyQm91bmQpLCB1cHBlckJvdW5kKTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgc3RvcmVzIGxvY2F0aW9ucyBpbiBtZW1vcnkuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIF9wcm9wcyRpbml0aWFsRW50cmllcyA9IF9wcm9wcy5pbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxFbnRyaWVzID0gX3Byb3BzJGluaXRpYWxFbnRyaWVzID09PSB2b2lkIDAgPyBbJy8nXSA6IF9wcm9wcyRpbml0aWFsRW50cmllcyxcbiAgICAgIF9wcm9wcyRpbml0aWFsSW5kZXggPSBfcHJvcHMuaW5pdGlhbEluZGV4LFxuICAgICAgaW5pdGlhbEluZGV4ID0gX3Byb3BzJGluaXRpYWxJbmRleCA9PT0gdm9pZCAwID8gMCA6IF9wcm9wcyRpbml0aWFsSW5kZXgsXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH1cblxuICB2YXIgaW5kZXggPSBjbGFtcChpbml0aWFsSW5kZXgsIDAsIGluaXRpYWxFbnRyaWVzLmxlbmd0aCAtIDEpO1xuICB2YXIgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJyA/IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGNyZWF0ZUtleSgpKSA6IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGVudHJ5LmtleSB8fCBjcmVhdGVLZXkoKSk7XG4gIH0pOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBjcmVhdGVQYXRoO1xuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcHJldkluZGV4ID0gaGlzdG9yeS5pbmRleDtcbiAgICAgIHZhciBuZXh0SW5kZXggPSBwcmV2SW5kZXggKyAxO1xuICAgICAgdmFyIG5leHRFbnRyaWVzID0gaGlzdG9yeS5lbnRyaWVzLnNsaWNlKDApO1xuXG4gICAgICBpZiAobmV4dEVudHJpZXMubGVuZ3RoID4gbmV4dEluZGV4KSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnNwbGljZShuZXh0SW5kZXgsIG5leHRFbnRyaWVzLmxlbmd0aCAtIG5leHRJbmRleCwgbG9jYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dEVudHJpZXMucHVzaChsb2NhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgaW5kZXg6IG5leHRJbmRleCxcbiAgICAgICAgZW50cmllczogbmV4dEVudHJpZXNcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIGhpc3RvcnkuZW50cmllc1toaXN0b3J5LmluZGV4XSA9IGxvY2F0aW9uO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gY2xhbXAoaGlzdG9yeS5pbmRleCArIG4sIDAsIGhpc3RvcnkuZW50cmllcy5sZW5ndGggLSAxKTtcbiAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgdmFyIGxvY2F0aW9uID0gaGlzdG9yeS5lbnRyaWVzW25leHRJbmRleF07XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmIChvaykge1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICAgIGluZGV4OiBuZXh0SW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBNaW1pYyB0aGUgYmVoYXZpb3Igb2YgRE9NIGhpc3RvcmllcyBieVxuICAgICAgICAvLyBjYXVzaW5nIGEgcmVuZGVyIGFmdGVyIGEgY2FuY2VsbGVkIFBPUC5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5HbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGhpc3RvcnkuaW5kZXggKyBuO1xuICAgIHJldHVybiBuZXh0SW5kZXggPj0gMCAmJiBuZXh0SW5kZXggPCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICB9XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBlbnRyaWVzLmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBlbnRyaWVzW2luZGV4XSxcbiAgICBpbmRleDogaW5kZXgsXG4gICAgZW50cmllczogZW50cmllcyxcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgY2FuR286IGNhbkdvLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwsIHBhcnNlUGF0aCwgY3JlYXRlUGF0aCB9O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufSIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJyYXk7XG4iLCJ2YXIgZnJlZUdsb2JhbCA9IHJlcXVpcmUoJy4vX2ZyZWVHbG9iYWwnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJvb3Q7XG4iLCJpbXBvcnQgZnJlZUdsb2JhbCBmcm9tICcuL19mcmVlR2xvYmFsLmpzJztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlUHJvY2VzcyA9IG1vZHVsZUV4cG9ydHMgJiYgZnJlZUdsb2JhbC5wcm9jZXNzO1xuXG4vKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbnZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICB2YXIgdHlwZXMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUucmVxdWlyZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUoJ3V0aWwnKS50eXBlcztcblxuICAgIGlmICh0eXBlcykge1xuICAgICAgcmV0dXJuIHR5cGVzO1xuICAgIH1cblxuICAgIC8vIExlZ2FjeSBgcHJvY2Vzcy5iaW5kaW5nKCd1dGlsJylgIGZvciBOb2RlLmpzIDwgMTAuXG4gICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxuZXhwb3J0IGRlZmF1bHQgbm9kZVV0aWw7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdExpa2U7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBTY2hlbWFUeXBlO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9oYXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJsb2Rhc2gvaGFzXCIpKTtcblxudmFyIF9jbG9uZURlZXBXaXRoID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibG9kYXNoL2Nsb25lRGVlcFdpdGhcIikpO1xuXG52YXIgX3RvQXJyYXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibG9kYXNoL3RvQXJyYXlcIikpO1xuXG52YXIgX2xvY2FsZSA9IHJlcXVpcmUoXCIuL2xvY2FsZVwiKTtcblxudmFyIF9Db25kaXRpb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0NvbmRpdGlvblwiKSk7XG5cbnZhciBfcnVuVmFsaWRhdGlvbnMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvcnVuVmFsaWRhdGlvbnNcIikpO1xuXG52YXIgX3ByZXBlbmREZWVwID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL3ByZXBlbmREZWVwXCIpKTtcblxudmFyIF9pc1NjaGVtYSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9pc1NjaGVtYVwiKSk7XG5cbnZhciBfY3JlYXRlVmFsaWRhdGlvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9jcmVhdGVWYWxpZGF0aW9uXCIpKTtcblxudmFyIF9wcmludFZhbHVlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL3ByaW50VmFsdWVcIikpO1xuXG52YXIgX1JlZmVyZW5jZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vUmVmZXJlbmNlXCIpKTtcblxudmFyIF9yZWFjaCA9IHJlcXVpcmUoXCIuL3V0aWwvcmVhY2hcIik7XG5cbnZhciBSZWZTZXQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBSZWZTZXQoKSB7XG4gICAgdGhpcy5saXN0ID0gbmV3IFNldCgpO1xuICAgIHRoaXMucmVmcyA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSZWZTZXQucHJvdG90eXBlO1xuXG4gIF9wcm90by50b0FycmF5ID0gZnVuY3Rpb24gdG9BcnJheSgpIHtcbiAgICByZXR1cm4gKDAsIF90b0FycmF5Mi5kZWZhdWx0KSh0aGlzLmxpc3QpLmNvbmNhdCgoMCwgX3RvQXJyYXkyLmRlZmF1bHQpKHRoaXMucmVmcy52YWx1ZXMoKSkpO1xuICB9O1xuXG4gIF9wcm90by5hZGQgPSBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICBfUmVmZXJlbmNlLmRlZmF1bHQuaXNSZWYodmFsdWUpID8gdGhpcy5yZWZzLnNldCh2YWx1ZS5rZXksIHZhbHVlKSA6IHRoaXMubGlzdC5hZGQodmFsdWUpO1xuICB9O1xuXG4gIF9wcm90by5kZWxldGUgPSBmdW5jdGlvbiBfZGVsZXRlKHZhbHVlKSB7XG4gICAgX1JlZmVyZW5jZS5kZWZhdWx0LmlzUmVmKHZhbHVlKSA/IHRoaXMucmVmcy5kZWxldGUodmFsdWUua2V5LCB2YWx1ZSkgOiB0aGlzLmxpc3QuZGVsZXRlKHZhbHVlKTtcbiAgfTtcblxuICBfcHJvdG8uaGFzID0gZnVuY3Rpb24gaGFzKHZhbHVlLCByZXNvbHZlKSB7XG4gICAgaWYgKHRoaXMubGlzdC5oYXModmFsdWUpKSByZXR1cm4gdHJ1ZTtcbiAgICB2YXIgaXRlbSxcbiAgICAgICAgdmFsdWVzID0gdGhpcy5yZWZzLnZhbHVlcygpO1xuXG4gICAgd2hpbGUgKGl0ZW0gPSB2YWx1ZXMubmV4dCgpLCAhaXRlbS5kb25lKSB7XG4gICAgICBpZiAocmVzb2x2ZShpdGVtLnZhbHVlKSA9PT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICByZXR1cm4gUmVmU2V0O1xufSgpO1xuXG5mdW5jdGlvbiBTY2hlbWFUeXBlKG9wdGlvbnMpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNjaGVtYVR5cGUpKSByZXR1cm4gbmV3IFNjaGVtYVR5cGUoKTtcbiAgdGhpcy5fZGVwcyA9IFtdO1xuICB0aGlzLl9jb25kaXRpb25zID0gW107XG4gIHRoaXMuX29wdGlvbnMgPSB7XG4gICAgYWJvcnRFYXJseTogdHJ1ZSxcbiAgICByZWN1cnNpdmU6IHRydWVcbiAgfTtcbiAgdGhpcy5fZXhjbHVzaXZlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5fd2hpdGVsaXN0ID0gbmV3IFJlZlNldCgpO1xuICB0aGlzLl9ibGFja2xpc3QgPSBuZXcgUmVmU2V0KCk7XG4gIHRoaXMudGVzdHMgPSBbXTtcbiAgdGhpcy50cmFuc2Zvcm1zID0gW107XG4gIHRoaXMud2l0aE11dGF0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICBfdGhpcy50eXBlRXJyb3IoX2xvY2FsZS5taXhlZC5ub3RUeXBlKTtcbiAgfSk7XG4gIGlmICgoMCwgX2hhcy5kZWZhdWx0KShvcHRpb25zLCAnZGVmYXVsdCcpKSB0aGlzLl9kZWZhdWx0RGVmYXVsdCA9IG9wdGlvbnMuZGVmYXVsdDtcbiAgdGhpcy5fdHlwZSA9IG9wdGlvbnMudHlwZSB8fCAnbWl4ZWQnO1xufVxuXG52YXIgcHJvdG8gPSBTY2hlbWFUeXBlLnByb3RvdHlwZSA9IHtcbiAgX19pc1l1cFNjaGVtYV9fOiB0cnVlLFxuICBjb25zdHJ1Y3RvcjogU2NoZW1hVHlwZSxcbiAgY2xvbmU6IGZ1bmN0aW9uIGNsb25lKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMuX211dGF0ZSkgcmV0dXJuIHRoaXM7IC8vIGlmIHRoZSBuZXN0ZWQgdmFsdWUgaXMgYSBzY2hlbWEgd2UgY2FuIHNraXAgY2xvbmluZywgc2luY2VcbiAgICAvLyB0aGV5IGFyZSBhbHJlYWR5IGltbXV0YWJsZVxuXG4gICAgcmV0dXJuICgwLCBfY2xvbmVEZWVwV2l0aC5kZWZhdWx0KSh0aGlzLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICgoMCwgX2lzU2NoZW1hLmRlZmF1bHQpKHZhbHVlKSAmJiB2YWx1ZSAhPT0gX3RoaXMyKSByZXR1cm4gdmFsdWU7XG4gICAgfSk7XG4gIH0sXG4gIGxhYmVsOiBmdW5jdGlvbiBsYWJlbChfbGFiZWwpIHtcbiAgICB2YXIgbmV4dCA9IHRoaXMuY2xvbmUoKTtcbiAgICBuZXh0Ll9sYWJlbCA9IF9sYWJlbDtcbiAgICByZXR1cm4gbmV4dDtcbiAgfSxcbiAgbWV0YTogZnVuY3Rpb24gbWV0YShvYmopIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHRoaXMuX21ldGE7XG4gICAgdmFyIG5leHQgPSB0aGlzLmNsb25lKCk7XG4gICAgbmV4dC5fbWV0YSA9ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkobmV4dC5fbWV0YSB8fCB7fSwgb2JqKTtcbiAgICByZXR1cm4gbmV4dDtcbiAgfSxcbiAgd2l0aE11dGF0aW9uOiBmdW5jdGlvbiB3aXRoTXV0YXRpb24oZm4pIHtcbiAgICB2YXIgYmVmb3JlID0gdGhpcy5fbXV0YXRlO1xuICAgIHRoaXMuX211dGF0ZSA9IHRydWU7XG4gICAgdmFyIHJlc3VsdCA9IGZuKHRoaXMpO1xuICAgIHRoaXMuX211dGF0ZSA9IGJlZm9yZTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LFxuICBjb25jYXQ6IGZ1bmN0aW9uIGNvbmNhdChzY2hlbWEpIHtcbiAgICBpZiAoIXNjaGVtYSB8fCBzY2hlbWEgPT09IHRoaXMpIHJldHVybiB0aGlzO1xuICAgIGlmIChzY2hlbWEuX3R5cGUgIT09IHRoaXMuX3R5cGUgJiYgdGhpcy5fdHlwZSAhPT0gJ21peGVkJykgdGhyb3cgbmV3IFR5cGVFcnJvcihcIllvdSBjYW5ub3QgYGNvbmNhdCgpYCBzY2hlbWEncyBvZiBkaWZmZXJlbnQgdHlwZXM6IFwiICsgdGhpcy5fdHlwZSArIFwiIGFuZCBcIiArIHNjaGVtYS5fdHlwZSk7XG4gICAgdmFyIG5leHQgPSAoMCwgX3ByZXBlbmREZWVwLmRlZmF1bHQpKHNjaGVtYS5jbG9uZSgpLCB0aGlzKTsgLy8gbmV3IHVuZGVmaW5lZCBkZWZhdWx0IGlzIG92ZXJyaWRlbiBieSBvbGQgbm9uLXVuZGVmaW5lZCBvbmUsIHJldmVydFxuXG4gICAgaWYgKCgwLCBfaGFzLmRlZmF1bHQpKHNjaGVtYSwgJ19kZWZhdWx0JykpIG5leHQuX2RlZmF1bHQgPSBzY2hlbWEuX2RlZmF1bHQ7XG4gICAgbmV4dC50ZXN0cyA9IHRoaXMudGVzdHM7XG4gICAgbmV4dC5fZXhjbHVzaXZlID0gdGhpcy5fZXhjbHVzaXZlOyAvLyBtYW51YWxseSBhZGQgdGhlIG5ldyB0ZXN0cyB0byBlbnN1cmVcbiAgICAvLyB0aGUgZGVkdXBpbmcgbG9naWMgaXMgY29uc2lzdGVudFxuXG4gICAgbmV4dC53aXRoTXV0YXRpb24oZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHNjaGVtYS50ZXN0cy5mb3JFYWNoKGZ1bmN0aW9uIChmbikge1xuICAgICAgICBuZXh0LnRlc3QoZm4uT1BUSU9OUyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gbmV4dDtcbiAgfSxcbiAgaXNUeXBlOiBmdW5jdGlvbiBpc1R5cGUodikge1xuICAgIGlmICh0aGlzLl9udWxsYWJsZSAmJiB2ID09PSBudWxsKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gIXRoaXMuX3R5cGVDaGVjayB8fCB0aGlzLl90eXBlQ2hlY2sodik7XG4gIH0sXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUob3B0aW9ucykge1xuICAgIHZhciBzY2hlbWEgPSB0aGlzO1xuXG4gICAgaWYgKHNjaGVtYS5fY29uZGl0aW9ucy5sZW5ndGgpIHtcbiAgICAgIHZhciBjb25kaXRpb25zID0gc2NoZW1hLl9jb25kaXRpb25zO1xuICAgICAgc2NoZW1hID0gc2NoZW1hLmNsb25lKCk7XG4gICAgICBzY2hlbWEuX2NvbmRpdGlvbnMgPSBbXTtcbiAgICAgIHNjaGVtYSA9IGNvbmRpdGlvbnMucmVkdWNlKGZ1bmN0aW9uIChzY2hlbWEsIGNvbmRpdGlvbikge1xuICAgICAgICByZXR1cm4gY29uZGl0aW9uLnJlc29sdmUoc2NoZW1hLCBvcHRpb25zKTtcbiAgICAgIH0sIHNjaGVtYSk7XG4gICAgICBzY2hlbWEgPSBzY2hlbWEucmVzb2x2ZShvcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2NoZW1hO1xuICB9LFxuICBjYXN0OiBmdW5jdGlvbiBjYXN0KHZhbHVlLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHZhciByZXNvbHZlZFNjaGVtYSA9IHRoaXMucmVzb2x2ZSgoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBvcHRpb25zLCB7XG4gICAgICB2YWx1ZTogdmFsdWVcbiAgICB9KSk7XG5cbiAgICB2YXIgcmVzdWx0ID0gcmVzb2x2ZWRTY2hlbWEuX2Nhc3QodmFsdWUsIG9wdGlvbnMpO1xuXG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgb3B0aW9ucy5hc3NlcnQgIT09IGZhbHNlICYmIHJlc29sdmVkU2NoZW1hLmlzVHlwZShyZXN1bHQpICE9PSB0cnVlKSB7XG4gICAgICB2YXIgZm9ybWF0dGVkVmFsdWUgPSAoMCwgX3ByaW50VmFsdWUuZGVmYXVsdCkodmFsdWUpO1xuICAgICAgdmFyIGZvcm1hdHRlZFJlc3VsdCA9ICgwLCBfcHJpbnRWYWx1ZS5kZWZhdWx0KShyZXN1bHQpO1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlRoZSB2YWx1ZSBvZiBcIiArIChvcHRpb25zLnBhdGggfHwgJ2ZpZWxkJykgKyBcIiBjb3VsZCBub3QgYmUgY2FzdCB0byBhIHZhbHVlIFwiICsgKFwidGhhdCBzYXRpc2ZpZXMgdGhlIHNjaGVtYSB0eXBlOiBcXFwiXCIgKyByZXNvbHZlZFNjaGVtYS5fdHlwZSArIFwiXFxcIi4gXFxuXFxuXCIpICsgKFwiYXR0ZW1wdGVkIHZhbHVlOiBcIiArIGZvcm1hdHRlZFZhbHVlICsgXCIgXFxuXCIpICsgKGZvcm1hdHRlZFJlc3VsdCAhPT0gZm9ybWF0dGVkVmFsdWUgPyBcInJlc3VsdCBvZiBjYXN0OiBcIiArIGZvcm1hdHRlZFJlc3VsdCA6ICcnKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSxcbiAgX2Nhc3Q6IGZ1bmN0aW9uIF9jYXN0KHJhd1ZhbHVlKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB2YXIgdmFsdWUgPSByYXdWYWx1ZSA9PT0gdW5kZWZpbmVkID8gcmF3VmFsdWUgOiB0aGlzLnRyYW5zZm9ybXMucmVkdWNlKGZ1bmN0aW9uICh2YWx1ZSwgZm4pIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKF90aGlzMywgdmFsdWUsIHJhd1ZhbHVlKTtcbiAgICB9LCByYXdWYWx1ZSk7XG5cbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAoMCwgX2hhcy5kZWZhdWx0KSh0aGlzLCAnX2RlZmF1bHQnKSkge1xuICAgICAgdmFsdWUgPSB0aGlzLmRlZmF1bHQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH0sXG4gIF92YWxpZGF0ZTogZnVuY3Rpb24gX3ZhbGlkYXRlKF92YWx1ZSwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHZhciB2YWx1ZSA9IF92YWx1ZTtcbiAgICB2YXIgb3JpZ2luYWxWYWx1ZSA9IG9wdGlvbnMub3JpZ2luYWxWYWx1ZSAhPSBudWxsID8gb3B0aW9ucy5vcmlnaW5hbFZhbHVlIDogX3ZhbHVlO1xuXG4gICAgdmFyIGlzU3RyaWN0ID0gdGhpcy5fb3B0aW9uKCdzdHJpY3QnLCBvcHRpb25zKTtcblxuICAgIHZhciBlbmRFYXJseSA9IHRoaXMuX29wdGlvbignYWJvcnRFYXJseScsIG9wdGlvbnMpO1xuXG4gICAgdmFyIHN5bmMgPSBvcHRpb25zLnN5bmM7XG4gICAgdmFyIHBhdGggPSBvcHRpb25zLnBhdGg7XG4gICAgdmFyIGxhYmVsID0gdGhpcy5fbGFiZWw7XG5cbiAgICBpZiAoIWlzU3RyaWN0KSB7XG4gICAgICB2YWx1ZSA9IHRoaXMuX2Nhc3QodmFsdWUsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICBhc3NlcnQ6IGZhbHNlXG4gICAgICB9LCBvcHRpb25zKSk7XG4gICAgfSAvLyB2YWx1ZSBpcyBjYXN0LCB3ZSBjYW4gY2hlY2sgaWYgaXQgbWVldHMgdHlwZSByZXF1aXJlbWVudHNcblxuXG4gICAgdmFyIHZhbGlkYXRpb25QYXJhbXMgPSB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBwYXRoOiBwYXRoLFxuICAgICAgc2NoZW1hOiB0aGlzLFxuICAgICAgb3B0aW9uczogb3B0aW9ucyxcbiAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgIG9yaWdpbmFsVmFsdWU6IG9yaWdpbmFsVmFsdWUsXG4gICAgICBzeW5jOiBzeW5jXG4gICAgfTtcbiAgICB2YXIgaW5pdGlhbFRlc3RzID0gW107XG4gICAgaWYgKHRoaXMuX3R5cGVFcnJvcikgaW5pdGlhbFRlc3RzLnB1c2godGhpcy5fdHlwZUVycm9yKHZhbGlkYXRpb25QYXJhbXMpKTtcbiAgICBpZiAodGhpcy5fd2hpdGVsaXN0RXJyb3IpIGluaXRpYWxUZXN0cy5wdXNoKHRoaXMuX3doaXRlbGlzdEVycm9yKHZhbGlkYXRpb25QYXJhbXMpKTtcbiAgICBpZiAodGhpcy5fYmxhY2tsaXN0RXJyb3IpIGluaXRpYWxUZXN0cy5wdXNoKHRoaXMuX2JsYWNrbGlzdEVycm9yKHZhbGlkYXRpb25QYXJhbXMpKTtcbiAgICByZXR1cm4gKDAsIF9ydW5WYWxpZGF0aW9ucy5kZWZhdWx0KSh7XG4gICAgICB2YWxpZGF0aW9uczogaW5pdGlhbFRlc3RzLFxuICAgICAgZW5kRWFybHk6IGVuZEVhcmx5LFxuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgcGF0aDogcGF0aCxcbiAgICAgIHN5bmM6IHN5bmNcbiAgICB9KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuICgwLCBfcnVuVmFsaWRhdGlvbnMuZGVmYXVsdCkoe1xuICAgICAgICBwYXRoOiBwYXRoLFxuICAgICAgICBzeW5jOiBzeW5jLFxuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIGVuZEVhcmx5OiBlbmRFYXJseSxcbiAgICAgICAgdmFsaWRhdGlvbnM6IF90aGlzNC50ZXN0cy5tYXAoZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgICAgcmV0dXJuIGZuKHZhbGlkYXRpb25QYXJhbXMpO1xuICAgICAgICB9KVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0sXG4gIHZhbGlkYXRlOiBmdW5jdGlvbiB2YWxpZGF0ZSh2YWx1ZSwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgc2NoZW1hID0gdGhpcy5yZXNvbHZlKCgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIG9wdGlvbnMsIHtcbiAgICAgIHZhbHVlOiB2YWx1ZVxuICAgIH0pKTtcbiAgICByZXR1cm4gc2NoZW1hLl92YWxpZGF0ZSh2YWx1ZSwgb3B0aW9ucyk7XG4gIH0sXG4gIHZhbGlkYXRlU3luYzogZnVuY3Rpb24gdmFsaWRhdGVTeW5jKHZhbHVlLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHZhciBzY2hlbWEgPSB0aGlzLnJlc29sdmUoKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgb3B0aW9ucywge1xuICAgICAgdmFsdWU6IHZhbHVlXG4gICAgfSkpO1xuICAgIHZhciByZXN1bHQsIGVycjtcblxuICAgIHNjaGVtYS5fdmFsaWRhdGUodmFsdWUsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIG9wdGlvbnMsIHtcbiAgICAgIHN5bmM6IHRydWVcbiAgICB9KSkudGhlbihmdW5jdGlvbiAocikge1xuICAgICAgcmV0dXJuIHJlc3VsdCA9IHI7XG4gICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBlcnIgPSBlO1xuICAgIH0pO1xuXG4gICAgaWYgKGVycikgdGhyb3cgZXJyO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sXG4gIGlzVmFsaWQ6IGZ1bmN0aW9uIGlzVmFsaWQodmFsdWUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy52YWxpZGF0ZSh2YWx1ZSwgb3B0aW9ucykudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBpZiAoZXJyLm5hbWUgPT09ICdWYWxpZGF0aW9uRXJyb3InKSByZXR1cm4gZmFsc2U7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfSk7XG4gIH0sXG4gIGlzVmFsaWRTeW5jOiBmdW5jdGlvbiBpc1ZhbGlkU3luYyh2YWx1ZSwgb3B0aW9ucykge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLnZhbGlkYXRlU3luYyh2YWx1ZSwgb3B0aW9ucyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGlmIChlcnIubmFtZSA9PT0gJ1ZhbGlkYXRpb25FcnJvcicpIHJldHVybiBmYWxzZTtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gIH0sXG4gIGdldERlZmF1bHQ6IGZ1bmN0aW9uIGdldERlZmF1bHQob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgc2NoZW1hID0gdGhpcy5yZXNvbHZlKG9wdGlvbnMpO1xuICAgIHJldHVybiBzY2hlbWEuZGVmYXVsdCgpO1xuICB9LFxuICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdChkZWYpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdmFyIGRlZmF1bHRWYWx1ZSA9ICgwLCBfaGFzLmRlZmF1bHQpKHRoaXMsICdfZGVmYXVsdCcpID8gdGhpcy5fZGVmYXVsdCA6IHRoaXMuX2RlZmF1bHREZWZhdWx0O1xuICAgICAgcmV0dXJuIHR5cGVvZiBkZWZhdWx0VmFsdWUgPT09ICdmdW5jdGlvbicgPyBkZWZhdWx0VmFsdWUuY2FsbCh0aGlzKSA6ICgwLCBfY2xvbmVEZWVwV2l0aC5kZWZhdWx0KShkZWZhdWx0VmFsdWUpO1xuICAgIH1cblxuICAgIHZhciBuZXh0ID0gdGhpcy5jbG9uZSgpO1xuICAgIG5leHQuX2RlZmF1bHQgPSBkZWY7XG4gICAgcmV0dXJuIG5leHQ7XG4gIH0sXG4gIHN0cmljdDogZnVuY3Rpb24gc3RyaWN0KGlzU3RyaWN0KSB7XG4gICAgaWYgKGlzU3RyaWN0ID09PSB2b2lkIDApIHtcbiAgICAgIGlzU3RyaWN0ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgbmV4dCA9IHRoaXMuY2xvbmUoKTtcbiAgICBuZXh0Ll9vcHRpb25zLnN0cmljdCA9IGlzU3RyaWN0O1xuICAgIHJldHVybiBuZXh0O1xuICB9LFxuICBfaXNQcmVzZW50OiBmdW5jdGlvbiBfaXNQcmVzZW50KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9IG51bGw7XG4gIH0sXG4gIHJlcXVpcmVkOiBmdW5jdGlvbiByZXF1aXJlZChtZXNzYWdlKSB7XG4gICAgaWYgKG1lc3NhZ2UgPT09IHZvaWQgMCkge1xuICAgICAgbWVzc2FnZSA9IF9sb2NhbGUubWl4ZWQucmVxdWlyZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudGVzdCh7XG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgbmFtZTogJ3JlcXVpcmVkJyxcbiAgICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcbiAgICAgIHRlc3Q6IGZ1bmN0aW9uIHRlc3QodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2NoZW1hLl9pc1ByZXNlbnQodmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuICBub3RSZXF1aXJlZDogZnVuY3Rpb24gbm90UmVxdWlyZWQoKSB7XG4gICAgdmFyIG5leHQgPSB0aGlzLmNsb25lKCk7XG4gICAgbmV4dC50ZXN0cyA9IG5leHQudGVzdHMuZmlsdGVyKGZ1bmN0aW9uICh0ZXN0KSB7XG4gICAgICByZXR1cm4gdGVzdC5PUFRJT05TLm5hbWUgIT09ICdyZXF1aXJlZCc7XG4gICAgfSk7XG4gICAgcmV0dXJuIG5leHQ7XG4gIH0sXG4gIG51bGxhYmxlOiBmdW5jdGlvbiBudWxsYWJsZShpc051bGxhYmxlKSB7XG4gICAgaWYgKGlzTnVsbGFibGUgPT09IHZvaWQgMCkge1xuICAgICAgaXNOdWxsYWJsZSA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIG5leHQgPSB0aGlzLmNsb25lKCk7XG4gICAgbmV4dC5fbnVsbGFibGUgPSBpc051bGxhYmxlO1xuICAgIHJldHVybiBuZXh0O1xuICB9LFxuICB0cmFuc2Zvcm06IGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIHZhciBuZXh0ID0gdGhpcy5jbG9uZSgpO1xuICAgIG5leHQudHJhbnNmb3Jtcy5wdXNoKGZuKTtcbiAgICByZXR1cm4gbmV4dDtcbiAgfSxcblxuICAvKipcbiAgICogQWRkcyBhIHRlc3QgZnVuY3Rpb24gdG8gdGhlIHNjaGVtYSdzIHF1ZXVlIG9mIHRlc3RzLlxuICAgKiB0ZXN0cyBjYW4gYmUgZXhjbHVzaXZlIG9yIG5vbi1leGNsdXNpdmUuXG4gICAqXG4gICAqIC0gZXhjbHVzaXZlIHRlc3RzLCB3aWxsIHJlcGxhY2UgYW55IGV4aXN0aW5nIHRlc3RzIG9mIHRoZSBzYW1lIG5hbWUuXG4gICAqIC0gbm9uLWV4Y2x1c2l2ZTogY2FuIGJlIHN0YWNrZWRcbiAgICpcbiAgICogSWYgYSBub24tZXhjbHVzaXZlIHRlc3QgaXMgYWRkZWQgdG8gYSBzY2hlbWEgd2l0aCBhbiBleGNsdXNpdmUgdGVzdCBvZiB0aGUgc2FtZSBuYW1lXG4gICAqIHRoZSBleGNsdXNpdmUgdGVzdCBpcyByZW1vdmVkIGFuZCBmdXJ0aGVyIHRlc3RzIG9mIHRoZSBzYW1lIG5hbWUgd2lsbCBiZSBzdGFja2VkLlxuICAgKlxuICAgKiBJZiBhbiBleGNsdXNpdmUgdGVzdCBpcyBhZGRlZCB0byBhIHNjaGVtYSB3aXRoIG5vbi1leGNsdXNpdmUgdGVzdHMgb2YgdGhlIHNhbWUgbmFtZVxuICAgKiB0aGUgcHJldmlvdXMgdGVzdHMgYXJlIHJlbW92ZWQgYW5kIGZ1cnRoZXIgdGVzdHMgb2YgdGhlIHNhbWUgbmFtZSB3aWxsIHJlcGxhY2UgZWFjaCBvdGhlci5cbiAgICovXG4gIHRlc3Q6IGZ1bmN0aW9uIHRlc3QoKSB7XG4gICAgdmFyIG9wdHM7XG5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgaWYgKHR5cGVvZiAoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBvcHRzID0ge1xuICAgICAgICAgIHRlc3Q6IGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3B0cyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICAgIG9wdHMgPSB7XG4gICAgICAgIG5hbWU6IGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSxcbiAgICAgICAgdGVzdDogYXJndW1lbnRzLmxlbmd0aCA8PSAxID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzFdXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBvcHRzID0ge1xuICAgICAgICBuYW1lOiBhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0sXG4gICAgICAgIG1lc3NhZ2U6IGFyZ3VtZW50cy5sZW5ndGggPD0gMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXSxcbiAgICAgICAgdGVzdDogYXJndW1lbnRzLmxlbmd0aCA8PSAyID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzJdXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChvcHRzLm1lc3NhZ2UgPT09IHVuZGVmaW5lZCkgb3B0cy5tZXNzYWdlID0gX2xvY2FsZS5taXhlZC5kZWZhdWx0O1xuICAgIGlmICh0eXBlb2Ygb3B0cy50ZXN0ICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdgdGVzdGAgaXMgYSByZXF1aXJlZCBwYXJhbWV0ZXJzJyk7XG4gICAgdmFyIG5leHQgPSB0aGlzLmNsb25lKCk7XG4gICAgdmFyIHZhbGlkYXRlID0gKDAsIF9jcmVhdGVWYWxpZGF0aW9uLmRlZmF1bHQpKG9wdHMpO1xuICAgIHZhciBpc0V4Y2x1c2l2ZSA9IG9wdHMuZXhjbHVzaXZlIHx8IG9wdHMubmFtZSAmJiBuZXh0Ll9leGNsdXNpdmVbb3B0cy5uYW1lXSA9PT0gdHJ1ZTtcblxuICAgIGlmIChvcHRzLmV4Y2x1c2l2ZSAmJiAhb3B0cy5uYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeGNsdXNpdmUgdGVzdHMgbXVzdCBwcm92aWRlIGEgdW5pcXVlIGBuYW1lYCBpZGVudGlmeWluZyB0aGUgdGVzdCcpO1xuICAgIH1cblxuICAgIG5leHQuX2V4Y2x1c2l2ZVtvcHRzLm5hbWVdID0gISFvcHRzLmV4Y2x1c2l2ZTtcbiAgICBuZXh0LnRlc3RzID0gbmV4dC50ZXN0cy5maWx0ZXIoZnVuY3Rpb24gKGZuKSB7XG4gICAgICBpZiAoZm4uT1BUSU9OUy5uYW1lID09PSBvcHRzLm5hbWUpIHtcbiAgICAgICAgaWYgKGlzRXhjbHVzaXZlKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChmbi5PUFRJT05TLnRlc3QgPT09IHZhbGlkYXRlLk9QVElPTlMudGVzdCkgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgICBuZXh0LnRlc3RzLnB1c2godmFsaWRhdGUpO1xuICAgIHJldHVybiBuZXh0O1xuICB9LFxuICB3aGVuOiBmdW5jdGlvbiB3aGVuKGtleXMsIG9wdGlvbnMpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgb3B0aW9ucyA9IGtleXM7XG4gICAgICBrZXlzID0gJy4nO1xuICAgIH1cblxuICAgIHZhciBuZXh0ID0gdGhpcy5jbG9uZSgpLFxuICAgICAgICBkZXBzID0gW10uY29uY2F0KGtleXMpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gbmV3IF9SZWZlcmVuY2UuZGVmYXVsdChrZXkpO1xuICAgIH0pO1xuICAgIGRlcHMuZm9yRWFjaChmdW5jdGlvbiAoZGVwKSB7XG4gICAgICBpZiAoZGVwLmlzU2libGluZykgbmV4dC5fZGVwcy5wdXNoKGRlcC5rZXkpO1xuICAgIH0pO1xuXG4gICAgbmV4dC5fY29uZGl0aW9ucy5wdXNoKG5ldyBfQ29uZGl0aW9uLmRlZmF1bHQoZGVwcywgb3B0aW9ucykpO1xuXG4gICAgcmV0dXJuIG5leHQ7XG4gIH0sXG4gIHR5cGVFcnJvcjogZnVuY3Rpb24gdHlwZUVycm9yKG1lc3NhZ2UpIHtcbiAgICB2YXIgbmV4dCA9IHRoaXMuY2xvbmUoKTtcbiAgICBuZXh0Ll90eXBlRXJyb3IgPSAoMCwgX2NyZWF0ZVZhbGlkYXRpb24uZGVmYXVsdCkoe1xuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG5hbWU6ICd0eXBlRXJyb3InLFxuICAgICAgdGVzdDogZnVuY3Rpb24gdGVzdCh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhdGhpcy5zY2hlbWEuaXNUeXBlKHZhbHVlKSkgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3Ioe1xuICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgdHlwZTogdGhpcy5zY2hlbWEuX3R5cGVcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbmV4dDtcbiAgfSxcbiAgb25lT2Y6IGZ1bmN0aW9uIG9uZU9mKGVudW1zLCBtZXNzYWdlKSB7XG4gICAgaWYgKG1lc3NhZ2UgPT09IHZvaWQgMCkge1xuICAgICAgbWVzc2FnZSA9IF9sb2NhbGUubWl4ZWQub25lT2Y7XG4gICAgfVxuXG4gICAgdmFyIG5leHQgPSB0aGlzLmNsb25lKCk7XG4gICAgZW51bXMuZm9yRWFjaChmdW5jdGlvbiAodmFsKSB7XG4gICAgICBuZXh0Ll93aGl0ZWxpc3QuYWRkKHZhbCk7XG5cbiAgICAgIG5leHQuX2JsYWNrbGlzdC5kZWxldGUodmFsKTtcbiAgICB9KTtcbiAgICBuZXh0Ll93aGl0ZWxpc3RFcnJvciA9ICgwLCBfY3JlYXRlVmFsaWRhdGlvbi5kZWZhdWx0KSh7XG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgbmFtZTogJ29uZU9mJyxcbiAgICAgIHRlc3Q6IGZ1bmN0aW9uIHRlc3QodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHJldHVybiB0cnVlO1xuICAgICAgICB2YXIgdmFsaWRzID0gdGhpcy5zY2hlbWEuX3doaXRlbGlzdDtcbiAgICAgICAgcmV0dXJuIHZhbGlkcy5oYXModmFsdWUsIHRoaXMucmVzb2x2ZSkgPyB0cnVlIDogdGhpcy5jcmVhdGVFcnJvcih7XG4gICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICB2YWx1ZXM6IHZhbGlkcy50b0FycmF5KCkuam9pbignLCAnKVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG5leHQ7XG4gIH0sXG4gIG5vdE9uZU9mOiBmdW5jdGlvbiBub3RPbmVPZihlbnVtcywgbWVzc2FnZSkge1xuICAgIGlmIChtZXNzYWdlID09PSB2b2lkIDApIHtcbiAgICAgIG1lc3NhZ2UgPSBfbG9jYWxlLm1peGVkLm5vdE9uZU9mO1xuICAgIH1cblxuICAgIHZhciBuZXh0ID0gdGhpcy5jbG9uZSgpO1xuICAgIGVudW1zLmZvckVhY2goZnVuY3Rpb24gKHZhbCkge1xuICAgICAgbmV4dC5fYmxhY2tsaXN0LmFkZCh2YWwpO1xuXG4gICAgICBuZXh0Ll93aGl0ZWxpc3QuZGVsZXRlKHZhbCk7XG4gICAgfSk7XG4gICAgbmV4dC5fYmxhY2tsaXN0RXJyb3IgPSAoMCwgX2NyZWF0ZVZhbGlkYXRpb24uZGVmYXVsdCkoe1xuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG5hbWU6ICdub3RPbmVPZicsXG4gICAgICB0ZXN0OiBmdW5jdGlvbiB0ZXN0KHZhbHVlKSB7XG4gICAgICAgIHZhciBpbnZhbGlkcyA9IHRoaXMuc2NoZW1hLl9ibGFja2xpc3Q7XG4gICAgICAgIGlmIChpbnZhbGlkcy5oYXModmFsdWUsIHRoaXMucmVzb2x2ZSkpIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKHtcbiAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgIHZhbHVlczogaW52YWxpZHMudG9BcnJheSgpLmpvaW4oJywgJylcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbmV4dDtcbiAgfSxcbiAgc3RyaXA6IGZ1bmN0aW9uIHN0cmlwKF9zdHJpcCkge1xuICAgIGlmIChfc3RyaXAgPT09IHZvaWQgMCkge1xuICAgICAgX3N0cmlwID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgbmV4dCA9IHRoaXMuY2xvbmUoKTtcbiAgICBuZXh0Ll9zdHJpcCA9IF9zdHJpcDtcbiAgICByZXR1cm4gbmV4dDtcbiAgfSxcbiAgX29wdGlvbjogZnVuY3Rpb24gX29wdGlvbihrZXksIG92ZXJyaWRlcykge1xuICAgIHJldHVybiAoMCwgX2hhcy5kZWZhdWx0KShvdmVycmlkZXMsIGtleSkgPyBvdmVycmlkZXNba2V5XSA6IHRoaXMuX29wdGlvbnNba2V5XTtcbiAgfSxcbiAgZGVzY3JpYmU6IGZ1bmN0aW9uIGRlc2NyaWJlKCkge1xuICAgIHZhciBuZXh0ID0gdGhpcy5jbG9uZSgpO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBuZXh0Ll90eXBlLFxuICAgICAgbWV0YTogbmV4dC5fbWV0YSxcbiAgICAgIGxhYmVsOiBuZXh0Ll9sYWJlbCxcbiAgICAgIHRlc3RzOiBuZXh0LnRlc3RzLm1hcChmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBuYW1lOiBmbi5PUFRJT05TLm5hbWUsXG4gICAgICAgICAgcGFyYW1zOiBmbi5PUFRJT05TLnBhcmFtc1xuICAgICAgICB9O1xuICAgICAgfSkuZmlsdGVyKGZ1bmN0aW9uIChuLCBpZHgsIGxpc3QpIHtcbiAgICAgICAgcmV0dXJuIGxpc3QuZmluZEluZGV4KGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgcmV0dXJuIGMubmFtZSA9PT0gbi5uYW1lO1xuICAgICAgICB9KSA9PT0gaWR4O1xuICAgICAgfSlcbiAgICB9O1xuICB9XG59O1xudmFyIF9hcnIgPSBbJ3ZhbGlkYXRlJywgJ3ZhbGlkYXRlU3luYyddO1xuXG52YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcCgpIHtcbiAgdmFyIG1ldGhvZCA9IF9hcnJbX2ldO1xuXG4gIHByb3RvW21ldGhvZCArIFwiQXRcIl0gPSBmdW5jdGlvbiAocGF0aCwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgdmFyIF9nZXRJbiA9ICgwLCBfcmVhY2guZ2V0SW4pKHRoaXMsIHBhdGgsIHZhbHVlLCBvcHRpb25zLmNvbnRleHQpLFxuICAgICAgICBwYXJlbnQgPSBfZ2V0SW4ucGFyZW50LFxuICAgICAgICBwYXJlbnRQYXRoID0gX2dldEluLnBhcmVudFBhdGgsXG4gICAgICAgIHNjaGVtYSA9IF9nZXRJbi5zY2hlbWE7XG5cbiAgICByZXR1cm4gc2NoZW1hW21ldGhvZF0ocGFyZW50ICYmIHBhcmVudFtwYXJlbnRQYXRoXSwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgb3B0aW9ucywge1xuICAgICAgcGFyZW50OiBwYXJlbnQsXG4gICAgICBwYXRoOiBwYXRoXG4gICAgfSkpO1xuICB9O1xufTtcblxuZm9yICh2YXIgX2kgPSAwOyBfaSA8IF9hcnIubGVuZ3RoOyBfaSsrKSB7XG4gIF9sb29wKCk7XG59XG5cbnZhciBfYXJyMiA9IFsnZXF1YWxzJywgJ2lzJ107XG5cbmZvciAodmFyIF9pMiA9IDA7IF9pMiA8IF9hcnIyLmxlbmd0aDsgX2kyKyspIHtcbiAgdmFyIGFsaWFzID0gX2FycjJbX2kyXTtcbiAgcHJvdG9bYWxpYXNdID0gcHJvdG8ub25lT2Y7XG59XG5cbnZhciBfYXJyMyA9IFsnbm90JywgJ25vcGUnXTtcblxuZm9yICh2YXIgX2kzID0gMDsgX2kzIDwgX2FycjMubGVuZ3RoOyBfaTMrKykge1xuICB2YXIgX2FsaWFzID0gX2FycjNbX2kzXTtcbiAgcHJvdG9bX2FsaWFzXSA9IHByb3RvLm5vdE9uZU9mO1xufVxuXG5wcm90by5vcHRpb25hbCA9IHByb3RvLm5vdFJlcXVpcmVkO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJ2YXIgYmFzZUlzTmF0aXZlID0gcmVxdWlyZSgnLi9fYmFzZUlzTmF0aXZlJyksXG4gICAgZ2V0VmFsdWUgPSByZXF1aXJlKCcuL19nZXRWYWx1ZScpO1xuXG4vKipcbiAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICovXG5mdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE5hdGl2ZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuYXJyYXkgPSBleHBvcnRzLm9iamVjdCA9IGV4cG9ydHMuYm9vbGVhbiA9IGV4cG9ydHMuZGF0ZSA9IGV4cG9ydHMubnVtYmVyID0gZXhwb3J0cy5zdHJpbmcgPSBleHBvcnRzLm1peGVkID0gdm9pZCAwO1xuXG52YXIgX3ByaW50VmFsdWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvcHJpbnRWYWx1ZVwiKSk7XG5cbnZhciBtaXhlZCA9IHtcbiAgZGVmYXVsdDogJyR7cGF0aH0gaXMgaW52YWxpZCcsXG4gIHJlcXVpcmVkOiAnJHtwYXRofSBpcyBhIHJlcXVpcmVkIGZpZWxkJyxcbiAgb25lT2Y6ICcke3BhdGh9IG11c3QgYmUgb25lIG9mIHRoZSBmb2xsb3dpbmcgdmFsdWVzOiAke3ZhbHVlc30nLFxuICBub3RPbmVPZjogJyR7cGF0aH0gbXVzdCBub3QgYmUgb25lIG9mIHRoZSBmb2xsb3dpbmcgdmFsdWVzOiAke3ZhbHVlc30nLFxuICBub3RUeXBlOiBmdW5jdGlvbiBub3RUeXBlKF9yZWYpIHtcbiAgICB2YXIgcGF0aCA9IF9yZWYucGF0aCxcbiAgICAgICAgdHlwZSA9IF9yZWYudHlwZSxcbiAgICAgICAgdmFsdWUgPSBfcmVmLnZhbHVlLFxuICAgICAgICBvcmlnaW5hbFZhbHVlID0gX3JlZi5vcmlnaW5hbFZhbHVlO1xuICAgIHZhciBpc0Nhc3QgPSBvcmlnaW5hbFZhbHVlICE9IG51bGwgJiYgb3JpZ2luYWxWYWx1ZSAhPT0gdmFsdWU7XG4gICAgdmFyIG1zZyA9IHBhdGggKyBcIiBtdXN0IGJlIGEgYFwiICsgdHlwZSArIFwiYCB0eXBlLCBcIiArIChcImJ1dCB0aGUgZmluYWwgdmFsdWUgd2FzOiBgXCIgKyAoMCwgX3ByaW50VmFsdWUuZGVmYXVsdCkodmFsdWUsIHRydWUpICsgXCJgXCIpICsgKGlzQ2FzdCA/IFwiIChjYXN0IGZyb20gdGhlIHZhbHVlIGBcIiArICgwLCBfcHJpbnRWYWx1ZS5kZWZhdWx0KShvcmlnaW5hbFZhbHVlLCB0cnVlKSArIFwiYCkuXCIgOiAnLicpO1xuXG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICBtc2cgKz0gXCJcXG4gSWYgXFxcIm51bGxcXFwiIGlzIGludGVuZGVkIGFzIGFuIGVtcHR5IHZhbHVlIGJlIHN1cmUgdG8gbWFyayB0aGUgc2NoZW1hIGFzIGAubnVsbGFibGUoKWBcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gbXNnO1xuICB9XG59O1xuZXhwb3J0cy5taXhlZCA9IG1peGVkO1xudmFyIHN0cmluZyA9IHtcbiAgbGVuZ3RoOiAnJHtwYXRofSBtdXN0IGJlIGV4YWN0bHkgJHtsZW5ndGh9IGNoYXJhY3RlcnMnLFxuICBtaW46ICcke3BhdGh9IG11c3QgYmUgYXQgbGVhc3QgJHttaW59IGNoYXJhY3RlcnMnLFxuICBtYXg6ICcke3BhdGh9IG11c3QgYmUgYXQgbW9zdCAke21heH0gY2hhcmFjdGVycycsXG4gIG1hdGNoZXM6ICcke3BhdGh9IG11c3QgbWF0Y2ggdGhlIGZvbGxvd2luZzogXCIke3JlZ2V4fVwiJyxcbiAgZW1haWw6ICcke3BhdGh9IG11c3QgYmUgYSB2YWxpZCBlbWFpbCcsXG4gIHVybDogJyR7cGF0aH0gbXVzdCBiZSBhIHZhbGlkIFVSTCcsXG4gIHRyaW06ICcke3BhdGh9IG11c3QgYmUgYSB0cmltbWVkIHN0cmluZycsXG4gIGxvd2VyY2FzZTogJyR7cGF0aH0gbXVzdCBiZSBhIGxvd2VyY2FzZSBzdHJpbmcnLFxuICB1cHBlcmNhc2U6ICcke3BhdGh9IG11c3QgYmUgYSB1cHBlciBjYXNlIHN0cmluZydcbn07XG5leHBvcnRzLnN0cmluZyA9IHN0cmluZztcbnZhciBudW1iZXIgPSB7XG4gIG1pbjogJyR7cGF0aH0gbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gJHttaW59JyxcbiAgbWF4OiAnJHtwYXRofSBtdXN0IGJlIGxlc3MgdGhhbiBvciBlcXVhbCB0byAke21heH0nLFxuICBsZXNzVGhhbjogJyR7cGF0aH0gbXVzdCBiZSBsZXNzIHRoYW4gJHtsZXNzfScsXG4gIG1vcmVUaGFuOiAnJHtwYXRofSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAke21vcmV9JyxcbiAgbm90RXF1YWw6ICcke3BhdGh9IG11c3QgYmUgbm90IGVxdWFsIHRvICR7bm90RXF1YWx9JyxcbiAgcG9zaXRpdmU6ICcke3BhdGh9IG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXInLFxuICBuZWdhdGl2ZTogJyR7cGF0aH0gbXVzdCBiZSBhIG5lZ2F0aXZlIG51bWJlcicsXG4gIGludGVnZXI6ICcke3BhdGh9IG11c3QgYmUgYW4gaW50ZWdlcidcbn07XG5leHBvcnRzLm51bWJlciA9IG51bWJlcjtcbnZhciBkYXRlID0ge1xuICBtaW46ICcke3BhdGh9IGZpZWxkIG11c3QgYmUgbGF0ZXIgdGhhbiAke21pbn0nLFxuICBtYXg6ICcke3BhdGh9IGZpZWxkIG11c3QgYmUgYXQgZWFybGllciB0aGFuICR7bWF4fSdcbn07XG5leHBvcnRzLmRhdGUgPSBkYXRlO1xudmFyIGJvb2xlYW4gPSB7fTtcbmV4cG9ydHMuYm9vbGVhbiA9IGJvb2xlYW47XG52YXIgb2JqZWN0ID0ge1xuICBub1Vua25vd246ICcke3BhdGh9IGZpZWxkIGNhbm5vdCBoYXZlIGtleXMgbm90IHNwZWNpZmllZCBpbiB0aGUgb2JqZWN0IHNoYXBlJ1xufTtcbmV4cG9ydHMub2JqZWN0ID0gb2JqZWN0O1xudmFyIGFycmF5ID0ge1xuICBtaW46ICcke3BhdGh9IGZpZWxkIG11c3QgaGF2ZSBhdCBsZWFzdCAke21pbn0gaXRlbXMnLFxuICBtYXg6ICcke3BhdGh9IGZpZWxkIG11c3QgaGF2ZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gJHttYXh9IGl0ZW1zJ1xufTtcbmV4cG9ydHMuYXJyYXkgPSBhcnJheTtcbnZhciBfZGVmYXVsdCA9IHtcbiAgbWl4ZWQ6IG1peGVkLFxuICBzdHJpbmc6IHN0cmluZyxcbiAgbnVtYmVyOiBudW1iZXIsXG4gIGRhdGU6IGRhdGUsXG4gIG9iamVjdDogb2JqZWN0LFxuICBhcnJheTogYXJyYXksXG4gIGJvb2xlYW46IGJvb2xlYW5cbn07XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9kZWZhdWx0ID0gZnVuY3Rpb24gX2RlZmF1bHQob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9faXNZdXBTY2hlbWFfXztcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKFJlYWN0SXMuaXNFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2V4dGVuZHM7IiwidmFyIGJhc2VIYXMgPSByZXF1aXJlKCcuL19iYXNlSGFzJyksXG4gICAgaGFzUGF0aCA9IHJlcXVpcmUoJy4vX2hhc1BhdGgnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IHByb3BlcnR5IG9mIGBvYmplY3RgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiB7ICdiJzogMiB9IH07XG4gKiB2YXIgb3RoZXIgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gKlxuICogXy5oYXMob2JqZWN0LCAnYScpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzKG9iamVjdCwgJ2EuYicpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzKG9iamVjdCwgWydhJywgJ2InXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXMob3RoZXIsICdhJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBoYXMob2JqZWN0LCBwYXRoKSB7XG4gIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgYmFzZUhhcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGdldFJhd1RhZyA9IHJlcXVpcmUoJy4vX2dldFJhd1RhZycpLFxuICAgIG9iamVjdFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fb2JqZWN0VG9TdHJpbmcnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldFRhZztcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW1ib2w7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdDtcbiIsInZhciBhcnJheUxpa2VLZXlzID0gcmVxdWlyZSgnLi9fYXJyYXlMaWtlS2V5cycpLFxuICAgIGJhc2VLZXlzID0gcmVxdWlyZSgnLi9fYmFzZUtleXMnKSxcbiAgICBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy4gU2VlIHRoZVxuICogW0VTIHNwZWNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICogZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmtleXMobmV3IEZvbyk7XG4gKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKlxuICogXy5rZXlzKCdoaScpO1xuICogLy8gPT4gWycwJywgJzEnXVxuICovXG5mdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0KSA6IGJhc2VLZXlzKG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5cztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGluaGVyaXRzO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxuZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yLCBzcGVjKSB7XG4gIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoY3Rvci5wcm90b3R5cGUsIHNwZWMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuYWRkTWV0aG9kID0gYWRkTWV0aG9kO1xuZXhwb3J0cy5sYXp5ID0gZXhwb3J0cy5yZWYgPSBleHBvcnRzLmJvb2xlYW4gPSB2b2lkIDA7XG5cbnZhciBfbWl4ZWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL21peGVkXCIpKTtcblxuZXhwb3J0cy5taXhlZCA9IF9taXhlZC5kZWZhdWx0O1xuXG52YXIgX2Jvb2xlYW4gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2Jvb2xlYW5cIikpO1xuXG5leHBvcnRzLmJvb2wgPSBfYm9vbGVhbi5kZWZhdWx0O1xuXG52YXIgX3N0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vc3RyaW5nXCIpKTtcblxuZXhwb3J0cy5zdHJpbmcgPSBfc3RyaW5nLmRlZmF1bHQ7XG5cbnZhciBfbnVtYmVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9udW1iZXJcIikpO1xuXG5leHBvcnRzLm51bWJlciA9IF9udW1iZXIuZGVmYXVsdDtcblxudmFyIF9kYXRlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9kYXRlXCIpKTtcblxuZXhwb3J0cy5kYXRlID0gX2RhdGUuZGVmYXVsdDtcblxudmFyIF9vYmplY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL29iamVjdFwiKSk7XG5cbmV4cG9ydHMub2JqZWN0ID0gX29iamVjdC5kZWZhdWx0O1xuXG52YXIgX2FycmF5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9hcnJheVwiKSk7XG5cbmV4cG9ydHMuYXJyYXkgPSBfYXJyYXkuZGVmYXVsdDtcblxudmFyIF9SZWZlcmVuY2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1JlZmVyZW5jZVwiKSk7XG5cbnZhciBfTGF6eSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTGF6eVwiKSk7XG5cbnZhciBfVmFsaWRhdGlvbkVycm9yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9WYWxpZGF0aW9uRXJyb3JcIikpO1xuXG5leHBvcnRzLlZhbGlkYXRpb25FcnJvciA9IF9WYWxpZGF0aW9uRXJyb3IuZGVmYXVsdDtcblxudmFyIF9yZWFjaCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9yZWFjaFwiKSk7XG5cbmV4cG9ydHMucmVhY2ggPSBfcmVhY2guZGVmYXVsdDtcblxudmFyIF9pc1NjaGVtYSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9pc1NjaGVtYVwiKSk7XG5cbmV4cG9ydHMuaXNTY2hlbWEgPSBfaXNTY2hlbWEuZGVmYXVsdDtcblxudmFyIF9zZXRMb2NhbGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3NldExvY2FsZVwiKSk7XG5cbmV4cG9ydHMuc2V0TG9jYWxlID0gX3NldExvY2FsZS5kZWZhdWx0O1xudmFyIGJvb2xlYW4gPSBfYm9vbGVhbi5kZWZhdWx0O1xuZXhwb3J0cy5ib29sZWFuID0gYm9vbGVhbjtcblxudmFyIHJlZiA9IGZ1bmN0aW9uIHJlZihrZXksIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBfUmVmZXJlbmNlLmRlZmF1bHQoa2V5LCBvcHRpb25zKTtcbn07XG5cbmV4cG9ydHMucmVmID0gcmVmO1xuXG52YXIgbGF6eSA9IGZ1bmN0aW9uIGxhenkoZm4pIHtcbiAgcmV0dXJuIG5ldyBfTGF6eS5kZWZhdWx0KGZuKTtcbn07XG5cbmV4cG9ydHMubGF6eSA9IGxhenk7XG5cbmZ1bmN0aW9uIGFkZE1ldGhvZChzY2hlbWFUeXBlLCBuYW1lLCBmbikge1xuICBpZiAoIXNjaGVtYVR5cGUgfHwgISgwLCBfaXNTY2hlbWEuZGVmYXVsdCkoc2NoZW1hVHlwZS5wcm90b3R5cGUpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdZb3UgbXVzdCBwcm92aWRlIGEgeXVwIHNjaGVtYSBjb25zdHJ1Y3RvciBmdW5jdGlvbicpO1xuICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBIE1ldGhvZCBuYW1lIG11c3QgYmUgcHJvdmlkZWQnKTtcbiAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykgdGhyb3cgbmV3IFR5cGVFcnJvcignTWV0aG9kIGZ1bmN0aW9uIG11c3QgYmUgcHJvdmlkZWQnKTtcbiAgc2NoZW1hVHlwZS5wcm90b3R5cGVbbmFtZV0gPSBmbjtcbn0iLCJ2YXIgYmFzZVRvU3RyaW5nID0gcmVxdWlyZSgnLi9fYmFzZVRvU3RyaW5nJyk7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZy4gQW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkIGZvciBgbnVsbGBcbiAqIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZXMuIFRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b1N0cmluZyhudWxsKTtcbiAqIC8vID0+ICcnXG4gKlxuICogXy50b1N0cmluZygtMCk7XG4gKiAvLyA9PiAnLTAnXG4gKlxuICogXy50b1N0cmluZyhbMSwgMiwgM10pO1xuICogLy8gPT4gJzEsMiwzJ1xuICovXG5mdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogYmFzZVRvU3RyaW5nKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1N0cmluZztcbiIsInZhciBEYXRhVmlldyA9IHJlcXVpcmUoJy4vX0RhdGFWaWV3JyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyksXG4gICAgUHJvbWlzZSA9IHJlcXVpcmUoJy4vX1Byb21pc2UnKSxcbiAgICBTZXQgPSByZXF1aXJlKCcuL19TZXQnKSxcbiAgICBXZWFrTWFwID0gcmVxdWlyZSgnLi9fV2Vha01hcCcpLFxuICAgIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgdG9Tb3VyY2UgPSByZXF1aXJlKCcuL190b1NvdXJjZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWFwcywgc2V0cywgYW5kIHdlYWttYXBzLiAqL1xudmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IHRvU291cmNlKERhdGFWaWV3KSxcbiAgICBtYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoTWFwKSxcbiAgICBwcm9taXNlQ3RvclN0cmluZyA9IHRvU291cmNlKFByb21pc2UpLFxuICAgIHNldEN0b3JTdHJpbmcgPSB0b1NvdXJjZShTZXQpLFxuICAgIHdlYWtNYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoV2Vha01hcCk7XG5cbi8qKlxuICogR2V0cyB0aGUgYHRvU3RyaW5nVGFnYCBvZiBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbnZhciBnZXRUYWcgPSBiYXNlR2V0VGFnO1xuXG4vLyBGYWxsYmFjayBmb3IgZGF0YSB2aWV3cywgbWFwcywgc2V0cywgYW5kIHdlYWsgbWFwcyBpbiBJRSAxMSBhbmQgcHJvbWlzZXMgaW4gTm9kZS5qcyA8IDYuXG5pZiAoKERhdGFWaWV3ICYmIGdldFRhZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSkgIT0gZGF0YVZpZXdUYWcpIHx8XG4gICAgKE1hcCAmJiBnZXRUYWcobmV3IE1hcCkgIT0gbWFwVGFnKSB8fFxuICAgIChQcm9taXNlICYmIGdldFRhZyhQcm9taXNlLnJlc29sdmUoKSkgIT0gcHJvbWlzZVRhZykgfHxcbiAgICAoU2V0ICYmIGdldFRhZyhuZXcgU2V0KSAhPSBzZXRUYWcpIHx8XG4gICAgKFdlYWtNYXAgJiYgZ2V0VGFnKG5ldyBXZWFrTWFwKSAhPSB3ZWFrTWFwVGFnKSkge1xuICBnZXRUYWcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciByZXN1bHQgPSBiYXNlR2V0VGFnKHZhbHVlKSxcbiAgICAgICAgQ3RvciA9IHJlc3VsdCA9PSBvYmplY3RUYWcgPyB2YWx1ZS5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgY3RvclN0cmluZyA9IEN0b3IgPyB0b1NvdXJjZShDdG9yKSA6ICcnO1xuXG4gICAgaWYgKGN0b3JTdHJpbmcpIHtcbiAgICAgIHN3aXRjaCAoY3RvclN0cmluZykge1xuICAgICAgICBjYXNlIGRhdGFWaWV3Q3RvclN0cmluZzogcmV0dXJuIGRhdGFWaWV3VGFnO1xuICAgICAgICBjYXNlIG1hcEN0b3JTdHJpbmc6IHJldHVybiBtYXBUYWc7XG4gICAgICAgIGNhc2UgcHJvbWlzZUN0b3JTdHJpbmc6IHJldHVybiBwcm9taXNlVGFnO1xuICAgICAgICBjYXNlIHNldEN0b3JTdHJpbmc6IHJldHVybiBzZXRUYWc7XG4gICAgICAgIGNhc2Ugd2Vha01hcEN0b3JTdHJpbmc6IHJldHVybiB3ZWFrTWFwVGFnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFRhZztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfcHJvcGVydHlFeHByID0gcmVxdWlyZShcInByb3BlcnR5LWV4cHJcIik7XG5cbnZhciBwcmVmaXhlcyA9IHtcbiAgY29udGV4dDogJyQnLFxuICB2YWx1ZTogJy4nXG59O1xuXG52YXIgUmVmZXJlbmNlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUmVmZXJlbmNlKGtleSwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGtleSAhPT0gJ3N0cmluZycpIHRocm93IG5ldyBUeXBlRXJyb3IoJ3JlZiBtdXN0IGJlIGEgc3RyaW5nLCBnb3Q6ICcgKyBrZXkpO1xuICAgIHRoaXMua2V5ID0ga2V5LnRyaW0oKTtcbiAgICBpZiAoa2V5ID09PSAnJykgdGhyb3cgbmV3IFR5cGVFcnJvcigncmVmIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nJyk7XG4gICAgdGhpcy5pc0NvbnRleHQgPSB0aGlzLmtleVswXSA9PT0gcHJlZml4ZXMuY29udGV4dDtcbiAgICB0aGlzLmlzVmFsdWUgPSB0aGlzLmtleVswXSA9PT0gcHJlZml4ZXMudmFsdWU7XG4gICAgdGhpcy5pc1NpYmxpbmcgPSAhdGhpcy5pc0NvbnRleHQgJiYgIXRoaXMuaXNWYWx1ZTtcbiAgICB2YXIgcHJlZml4ID0gdGhpcy5pc0NvbnRleHQgPyBwcmVmaXhlcy5jb250ZXh0IDogdGhpcy5pc1ZhbHVlID8gcHJlZml4ZXMudmFsdWUgOiAnJztcbiAgICB0aGlzLnBhdGggPSB0aGlzLmtleS5zbGljZShwcmVmaXgubGVuZ3RoKTtcbiAgICB0aGlzLmdldHRlciA9IHRoaXMucGF0aCAmJiAoMCwgX3Byb3BlcnR5RXhwci5nZXR0ZXIpKHRoaXMucGF0aCwgdHJ1ZSk7XG4gICAgdGhpcy5tYXAgPSBvcHRpb25zLm1hcDtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSZWZlcmVuY2UucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKG9wdGlvbnMpIHtcbiAgICB2YXIgcmVzdWx0ID0gdGhpcy5pc0NvbnRleHQgPyBvcHRpb25zLmNvbnRleHQgOiB0aGlzLmlzVmFsdWUgPyBvcHRpb25zLnZhbHVlIDogb3B0aW9ucy5wYXJlbnQ7XG4gICAgaWYgKHRoaXMuZ2V0dGVyKSByZXN1bHQgPSB0aGlzLmdldHRlcihyZXN1bHQgfHwge30pO1xuICAgIGlmICh0aGlzLm1hcCkgcmVzdWx0ID0gdGhpcy5tYXAocmVzdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIF9wcm90by5jYXN0ID0gZnVuY3Rpb24gY2FzdCh2YWx1ZSwgb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLmdldFZhbHVlKCgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIG9wdGlvbnMsIHtcbiAgICAgIHZhbHVlOiB2YWx1ZVxuICAgIH0pKTtcbiAgfTtcblxuICBfcHJvdG8ucmVzb2x2ZSA9IGZ1bmN0aW9uIHJlc29sdmUoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLmRlc2NyaWJlID0gZnVuY3Rpb24gZGVzY3JpYmUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdyZWYnLFxuICAgICAga2V5OiB0aGlzLmtleVxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIFwiUmVmKFwiICsgdGhpcy5rZXkgKyBcIilcIjtcbiAgfTtcblxuICBSZWZlcmVuY2UuaXNSZWYgPSBmdW5jdGlvbiBpc1JlZih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiB2YWx1ZS5fX2lzWXVwUmVmO1xuICB9O1xuXG4gIHJldHVybiBSZWZlcmVuY2U7XG59KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFJlZmVyZW5jZTtcblJlZmVyZW5jZS5wcm90b3R5cGUuX19pc1l1cFJlZiA9IHRydWU7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgICBjb250ZXh0VHlwZTogdHJ1ZSxcbiAgICBjb250ZXh0VHlwZXM6IHRydWUsXG4gICAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIGRpc3BsYXlOYW1lOiB0cnVlLFxuICAgIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gICAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICAgIG1peGluczogdHJ1ZSxcbiAgICBwcm9wVHlwZXM6IHRydWUsXG4gICAgdHlwZTogdHJ1ZVxufTtcblxudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gICAgbmFtZTogdHJ1ZSxcbiAgICBsZW5ndGg6IHRydWUsXG4gICAgcHJvdG90eXBlOiB0cnVlLFxuICAgIGNhbGxlcjogdHJ1ZSxcbiAgICBjYWxsZWU6IHRydWUsXG4gICAgYXJndW1lbnRzOiB0cnVlLFxuICAgIGFyaXR5OiB0cnVlXG59O1xuXG52YXIgRk9SV0FSRF9SRUZfU1RBVElDUyA9IHtcbiAgICAnJCR0eXBlb2YnOiB0cnVlLFxuICAgIHJlbmRlcjogdHJ1ZSxcbiAgICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgcHJvcFR5cGVzOiB0cnVlXG59O1xuXG52YXIgTUVNT19TVEFUSUNTID0ge1xuICAgICckJHR5cGVvZic6IHRydWUsXG4gICAgY29tcGFyZTogdHJ1ZSxcbiAgICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgcHJvcFR5cGVzOiB0cnVlLFxuICAgIHR5cGU6IHRydWVcbn07XG5cbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tSZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblxuZnVuY3Rpb24gZ2V0U3RhdGljcyhjb21wb25lbnQpIHtcbiAgICBpZiAoUmVhY3RJcy5pc01lbW8oY29tcG9uZW50KSkge1xuICAgICAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICAgIH1cbiAgICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcblxuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICAgIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuXG4gICAgICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuICAgICAgICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAgICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0YXJnZXRTdGF0aWNzID0gZ2V0U3RhdGljcyh0YXJnZXRDb21wb25lbnQpO1xuICAgICAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgaWYgKCFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShibGFja2xpc3QgJiYgYmxhY2tsaXN0W2tleV0pICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmICEodGFyZ2V0U3RhdGljcyAmJiB0YXJnZXRTdGF0aWNzW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF0aXZlQ3JlYXRlO1xuIiwidmFyIGxpc3RDYWNoZUNsZWFyID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlQ2xlYXInKSxcbiAgICBsaXN0Q2FjaGVEZWxldGUgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVEZWxldGUnKSxcbiAgICBsaXN0Q2FjaGVHZXQgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVHZXQnKSxcbiAgICBsaXN0Q2FjaGVIYXMgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVIYXMnKSxcbiAgICBsaXN0Q2FjaGVTZXQgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbkxpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbkxpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbkxpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpc3RDYWNoZTtcbiIsInZhciBlcSA9IHJlcXVpcmUoJy4vZXEnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhc3NvY0luZGV4T2Y7XG4iLCJ2YXIgaXNLZXlhYmxlID0gcmVxdWlyZSgnLi9faXNLZXlhYmxlJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgZGF0YSBmb3IgYG1hcGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHJlZmVyZW5jZSBrZXkuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWFwIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGdldE1hcERhdGEobWFwLCBrZXkpIHtcbiAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gIHJldHVybiBpc0tleWFibGUoa2V5KVxuICAgID8gZGF0YVt0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8gJ3N0cmluZycgOiAnaGFzaCddXG4gICAgOiBkYXRhLm1hcDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRNYXBEYXRhO1xuIiwidmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcga2V5IGlmIGl0J3Mgbm90IGEgc3RyaW5nIG9yIHN5bWJvbC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtzdHJpbmd8c3ltYm9sfSBSZXR1cm5zIHRoZSBrZXkuXG4gKi9cbmZ1bmN0aW9uIHRvS2V5KHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b0tleTtcbiIsInZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2RlZmluZVByb3BlcnR5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGFzc2lnblZhbHVlYCBhbmQgYGFzc2lnbk1lcmdlVmFsdWVgIHdpdGhvdXRcbiAqIHZhbHVlIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgPT0gJ19fcHJvdG9fXycgJiYgZGVmaW5lUHJvcGVydHkpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgICAnZW51bWVyYWJsZSc6IHRydWUsXG4gICAgICAndmFsdWUnOiB2YWx1ZSxcbiAgICAgICd3cml0YWJsZSc6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUFzc2lnblZhbHVlO1xuIiwidmFyIGFzc2lnblZhbHVlID0gcmVxdWlyZSgnLi9fYXNzaWduVmFsdWUnKSxcbiAgICBiYXNlQXNzaWduVmFsdWUgPSByZXF1aXJlKCcuL19iYXNlQXNzaWduVmFsdWUnKTtcblxuLyoqXG4gKiBDb3BpZXMgcHJvcGVydGllcyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tLlxuICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzIHRvIGNvcHkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb3BpZWQgdmFsdWVzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weU9iamVjdChzb3VyY2UsIHByb3BzLCBvYmplY3QsIGN1c3RvbWl6ZXIpIHtcbiAgdmFyIGlzTmV3ID0gIW9iamVjdDtcbiAgb2JqZWN0IHx8IChvYmplY3QgPSB7fSk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuXG4gICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgPyBjdXN0b21pemVyKG9iamVjdFtrZXldLCBzb3VyY2Vba2V5XSwga2V5LCBvYmplY3QsIHNvdXJjZSlcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG5ld1ZhbHVlID0gc291cmNlW2tleV07XG4gICAgfVxuICAgIGlmIChpc05ldykge1xuICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmplY3Q7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29weU9iamVjdDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gcHJpbnRWYWx1ZTtcbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgZXJyb3JUb1N0cmluZyA9IEVycm9yLnByb3RvdHlwZS50b1N0cmluZztcbnZhciByZWdFeHBUb1N0cmluZyA9IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgc3ltYm9sVG9TdHJpbmcgPSB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyA/IFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmcgOiBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAnJztcbn07XG52YXIgU1lNQk9MX1JFR0VYUCA9IC9eU3ltYm9sXFwoKC4qKVxcKSguKikkLztcblxuZnVuY3Rpb24gcHJpbnROdW1iZXIodmFsKSB7XG4gIGlmICh2YWwgIT0gK3ZhbCkgcmV0dXJuICdOYU4nO1xuICB2YXIgaXNOZWdhdGl2ZVplcm8gPSB2YWwgPT09IDAgJiYgMSAvIHZhbCA8IDA7XG4gIHJldHVybiBpc05lZ2F0aXZlWmVybyA/ICctMCcgOiAnJyArIHZhbDtcbn1cblxuZnVuY3Rpb24gcHJpbnRTaW1wbGVWYWx1ZSh2YWwsIHF1b3RlU3RyaW5ncykge1xuICBpZiAocXVvdGVTdHJpbmdzID09PSB2b2lkIDApIHtcbiAgICBxdW90ZVN0cmluZ3MgPSBmYWxzZTtcbiAgfVxuXG4gIGlmICh2YWwgPT0gbnVsbCB8fCB2YWwgPT09IHRydWUgfHwgdmFsID09PSBmYWxzZSkgcmV0dXJuICcnICsgdmFsO1xuICB2YXIgdHlwZU9mID0gdHlwZW9mIHZhbDtcbiAgaWYgKHR5cGVPZiA9PT0gJ251bWJlcicpIHJldHVybiBwcmludE51bWJlcih2YWwpO1xuICBpZiAodHlwZU9mID09PSAnc3RyaW5nJykgcmV0dXJuIHF1b3RlU3RyaW5ncyA/IFwiXFxcIlwiICsgdmFsICsgXCJcXFwiXCIgOiB2YWw7XG4gIGlmICh0eXBlT2YgPT09ICdmdW5jdGlvbicpIHJldHVybiAnW0Z1bmN0aW9uICcgKyAodmFsLm5hbWUgfHwgJ2Fub255bW91cycpICsgJ10nO1xuICBpZiAodHlwZU9mID09PSAnc3ltYm9sJykgcmV0dXJuIHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsKS5yZXBsYWNlKFNZTUJPTF9SRUdFWFAsICdTeW1ib2woJDEpJyk7XG4gIHZhciB0YWcgPSB0b1N0cmluZy5jYWxsKHZhbCkuc2xpY2UoOCwgLTEpO1xuICBpZiAodGFnID09PSAnRGF0ZScpIHJldHVybiBpc05hTih2YWwuZ2V0VGltZSgpKSA/ICcnICsgdmFsIDogdmFsLnRvSVNPU3RyaW5nKHZhbCk7XG4gIGlmICh0YWcgPT09ICdFcnJvcicgfHwgdmFsIGluc3RhbmNlb2YgRXJyb3IpIHJldHVybiAnWycgKyBlcnJvclRvU3RyaW5nLmNhbGwodmFsKSArICddJztcbiAgaWYgKHRhZyA9PT0gJ1JlZ0V4cCcpIHJldHVybiByZWdFeHBUb1N0cmluZy5jYWxsKHZhbCk7XG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBwcmludFZhbHVlKHZhbHVlLCBxdW90ZVN0cmluZ3MpIHtcbiAgdmFyIHJlc3VsdCA9IHByaW50U2ltcGxlVmFsdWUodmFsdWUsIHF1b3RlU3RyaW5ncyk7XG4gIGlmIChyZXN1bHQgIT09IG51bGwpIHJldHVybiByZXN1bHQ7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZSwgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICB2YXIgcmVzdWx0ID0gcHJpbnRTaW1wbGVWYWx1ZSh0aGlzW2tleV0sIHF1b3RlU3RyaW5ncyk7XG4gICAgaWYgKHJlc3VsdCAhPT0gbnVsbCkgcmV0dXJuIHJlc3VsdDtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH0sIDIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIi8qKlxuICogQmFzZWQgb24gS2VuZG8gVUkgQ29yZSBleHByZXNzaW9uIGNvZGUgPGh0dHBzOi8vZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLXVpLWNvcmUjbGljZW5zZS1pbmZvcm1hdGlvbj5cbiAqL1xuJ3VzZSBzdHJpY3QnXG5cbmZ1bmN0aW9uIENhY2hlKG1heFNpemUpIHtcbiAgdGhpcy5fbWF4U2l6ZSA9IG1heFNpemVcbiAgdGhpcy5jbGVhcigpXG59XG5DYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fc2l6ZSA9IDBcbiAgdGhpcy5fdmFsdWVzID0ge31cbn1cbkNhY2hlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX3ZhbHVlc1trZXldXG59XG5DYWNoZS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICB0aGlzLl9zaXplID49IHRoaXMuX21heFNpemUgJiYgdGhpcy5jbGVhcigpXG4gIGlmICghdGhpcy5fdmFsdWVzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICB0aGlzLl9zaXplKytcbiAgfVxuICByZXR1cm4gdGhpcy5fdmFsdWVzW2tleV0gPSB2YWx1ZVxufVxuXG52YXIgU1BMSVRfUkVHRVggPSAvW14uXlxcXV5bXSt8KD89XFxbXFxdfFxcLlxcLikvZyxcbiAgRElHSVRfUkVHRVggPSAvXlxcZCskLyxcbiAgTEVBRF9ESUdJVF9SRUdFWCA9IC9eXFxkLyxcbiAgU1BFQ19DSEFSX1JFR0VYID0gL1t+YCEjJCVcXF4mKis9XFwtXFxbXFxdXFxcXCc7LC97fXxcXFxcXCI6PD5cXD9dL2csXG4gIENMRUFOX1FVT1RFU19SRUdFWCA9IC9eXFxzKihbJ1wiXT8pKC4qPykoXFwxKVxccyokLyxcbiAgTUFYX0NBQ0hFX1NJWkUgPSA1MTJcblxudmFyIGNvbnRlbnRTZWN1cml0eVBvbGljeSA9IGZhbHNlLFxuICBwYXRoQ2FjaGUgPSBuZXcgQ2FjaGUoTUFYX0NBQ0hFX1NJWkUpLFxuICBzZXRDYWNoZSA9IG5ldyBDYWNoZShNQVhfQ0FDSEVfU0laRSksXG4gIGdldENhY2hlID0gbmV3IENhY2hlKE1BWF9DQUNIRV9TSVpFKVxuXG50cnkge1xuICBuZXcgRnVuY3Rpb24oJycpXG59IGNhdGNoIChlcnJvcikge1xuICBjb250ZW50U2VjdXJpdHlQb2xpY3kgPSB0cnVlXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBDYWNoZTogQ2FjaGUsXG5cbiAgZXhwcjogZXhwcixcblxuICBzcGxpdDogc3BsaXQsXG5cbiAgbm9ybWFsaXplUGF0aDogbm9ybWFsaXplUGF0aCxcblxuICBzZXR0ZXI6IGNvbnRlbnRTZWN1cml0eVBvbGljeVxuICAgID8gZnVuY3Rpb24ocGF0aCkge1xuICAgICAgdmFyIHBhcnRzID0gbm9ybWFsaXplUGF0aChwYXRoKVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGRhdGEsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBzZXR0ZXJGYWxsYmFjayhwYXJ0cywgZGF0YSwgdmFsdWUpXG4gICAgICB9XG4gICAgfVxuICAgIDogZnVuY3Rpb24ocGF0aCkge1xuICAgICAgcmV0dXJuIHNldENhY2hlLmdldChwYXRoKSB8fCBzZXRDYWNoZS5zZXQoXG4gICAgICAgIHBhdGgsXG4gICAgICAgIG5ldyBGdW5jdGlvbihcbiAgICAgICAgICAnZGF0YSwgdmFsdWUnLFxuICAgICAgICAgIGV4cHIocGF0aCwgJ2RhdGEnKSArICcgPSB2YWx1ZSdcbiAgICAgICAgKVxuICAgICAgKVxuICAgIH0sXG5cbiAgZ2V0dGVyOiBjb250ZW50U2VjdXJpdHlQb2xpY3lcbiAgICA/IGZ1bmN0aW9uKHBhdGgsIHNhZmUpIHtcbiAgICAgIHZhciBwYXJ0cyA9IG5vcm1hbGl6ZVBhdGgocGF0aClcbiAgICAgIHJldHVybiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgIHJldHVybiBnZXR0ZXJGYWxsYmFjayhwYXJ0cywgc2FmZSwgZGF0YSlcbiAgICAgIH1cbiAgICB9XG4gICAgOiBmdW5jdGlvbihwYXRoLCBzYWZlKSB7XG4gICAgICB2YXIga2V5ID0gcGF0aCArICdfJyArIHNhZmVcbiAgICAgIHJldHVybiBnZXRDYWNoZS5nZXQoa2V5KSB8fCBnZXRDYWNoZS5zZXQoXG4gICAgICAgIGtleSxcbiAgICAgICAgbmV3IEZ1bmN0aW9uKCdkYXRhJywgJ3JldHVybiAnICsgZXhwcihwYXRoLCBzYWZlLCAnZGF0YScpKVxuICAgICAgKVxuICAgIH0sXG5cbiAgam9pbjogZnVuY3Rpb24oc2VnbWVudHMpIHtcbiAgICByZXR1cm4gc2VnbWVudHMucmVkdWNlKGZ1bmN0aW9uKHBhdGgsIHBhcnQpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHBhdGggK1xuICAgICAgICAoaXNRdW90ZWQocGFydCkgfHwgRElHSVRfUkVHRVgudGVzdChwYXJ0KVxuICAgICAgICAgID8gJ1snICsgcGFydCArICddJ1xuICAgICAgICAgIDogKHBhdGggPyAnLicgOiAnJykgKyBwYXJ0KVxuICAgICAgKVxuICAgIH0sICcnKVxuICB9LFxuXG4gIGZvckVhY2g6IGZ1bmN0aW9uKHBhdGgsIGNiLCB0aGlzQXJnKSB7XG4gICAgZm9yRWFjaChzcGxpdChwYXRoKSwgY2IsIHRoaXNBcmcpXG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0dGVyRmFsbGJhY2socGFydHMsIGRhdGEsIHZhbHVlKSB7XG4gIHZhciBpbmRleCA9IDAsXG4gICAgbGVuID0gcGFydHMubGVuZ3RoXG4gIHdoaWxlIChpbmRleCA8IGxlbiAtIDEpIHtcbiAgICBkYXRhID0gZGF0YVtwYXJ0c1tpbmRleCsrXV1cbiAgfVxuICBkYXRhW3BhcnRzW2luZGV4XV0gPSB2YWx1ZVxufVxuXG5mdW5jdGlvbiBnZXR0ZXJGYWxsYmFjayhwYXJ0cywgc2FmZSwgZGF0YSkge1xuICB2YXIgaW5kZXggPSAwLFxuICAgIGxlbiA9IHBhcnRzLmxlbmd0aFxuICB3aGlsZSAoaW5kZXggPCBsZW4pIHtcbiAgICBpZiAoZGF0YSAhPSBudWxsIHx8ICFzYWZlKSB7XG4gICAgICBkYXRhID0gZGF0YVtwYXJ0c1tpbmRleCsrXV1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVBhdGgocGF0aCkge1xuICByZXR1cm4gcGF0aENhY2hlLmdldChwYXRoKSB8fCBwYXRoQ2FjaGUuc2V0KFxuICAgIHBhdGgsXG4gICAgc3BsaXQocGF0aCkubWFwKGZ1bmN0aW9uKHBhcnQpIHtcbiAgICAgIHJldHVybiBwYXJ0LnJlcGxhY2UoQ0xFQU5fUVVPVEVTX1JFR0VYLCAnJDInKVxuICAgIH0pXG4gIClcbn1cblxuZnVuY3Rpb24gc3BsaXQocGF0aCkge1xuICByZXR1cm4gcGF0aC5tYXRjaChTUExJVF9SRUdFWClcbn1cblxuZnVuY3Rpb24gZXhwcihleHByZXNzaW9uLCBzYWZlLCBwYXJhbSkge1xuICBleHByZXNzaW9uID0gZXhwcmVzc2lvbiB8fCAnJ1xuXG4gIGlmICh0eXBlb2Ygc2FmZSA9PT0gJ3N0cmluZycpIHtcbiAgICBwYXJhbSA9IHNhZmVcbiAgICBzYWZlID0gZmFsc2VcbiAgfVxuXG4gIHBhcmFtID0gcGFyYW0gfHwgJ2RhdGEnXG5cbiAgaWYgKGV4cHJlc3Npb24gJiYgZXhwcmVzc2lvbi5jaGFyQXQoMCkgIT09ICdbJykgZXhwcmVzc2lvbiA9ICcuJyArIGV4cHJlc3Npb25cblxuICByZXR1cm4gc2FmZSA/IG1ha2VTYWZlKGV4cHJlc3Npb24sIHBhcmFtKSA6IHBhcmFtICsgZXhwcmVzc2lvblxufVxuXG5mdW5jdGlvbiBmb3JFYWNoKHBhcnRzLCBpdGVyLCB0aGlzQXJnKSB7XG4gIHZhciBsZW4gPSBwYXJ0cy5sZW5ndGgsXG4gICAgcGFydCxcbiAgICBpZHgsXG4gICAgaXNBcnJheSxcbiAgICBpc0JyYWNrZXRcblxuICBmb3IgKGlkeCA9IDA7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICBwYXJ0ID0gcGFydHNbaWR4XVxuXG4gICAgaWYgKHBhcnQpIHtcbiAgICAgIGlmIChzaG91bGRCZVF1b3RlZChwYXJ0KSkge1xuICAgICAgICBwYXJ0ID0gJ1wiJyArIHBhcnQgKyAnXCInXG4gICAgICB9XG5cbiAgICAgIGlzQnJhY2tldCA9IGlzUXVvdGVkKHBhcnQpXG4gICAgICBpc0FycmF5ID0gIWlzQnJhY2tldCAmJiAvXlxcZCskLy50ZXN0KHBhcnQpXG5cbiAgICAgIGl0ZXIuY2FsbCh0aGlzQXJnLCBwYXJ0LCBpc0JyYWNrZXQsIGlzQXJyYXksIGlkeCwgcGFydHMpXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzUXVvdGVkKHN0cikge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnICYmIHN0ciAmJiBbXCInXCIsICdcIiddLmluZGV4T2Yoc3RyLmNoYXJBdCgwKSkgIT09IC0xXG4gIClcbn1cblxuZnVuY3Rpb24gbWFrZVNhZmUocGF0aCwgcGFyYW0pIHtcbiAgdmFyIHJlc3VsdCA9IHBhcmFtLFxuICAgIHBhcnRzID0gc3BsaXQocGF0aCksXG4gICAgaXNMYXN0XG5cbiAgZm9yRWFjaChwYXJ0cywgZnVuY3Rpb24ocGFydCwgaXNCcmFja2V0LCBpc0FycmF5LCBpZHgsIHBhcnRzKSB7XG4gICAgaXNMYXN0ID0gaWR4ID09PSBwYXJ0cy5sZW5ndGggLSAxXG5cbiAgICBwYXJ0ID0gaXNCcmFja2V0IHx8IGlzQXJyYXkgPyAnWycgKyBwYXJ0ICsgJ10nIDogJy4nICsgcGFydFxuXG4gICAgcmVzdWx0ICs9IHBhcnQgKyAoIWlzTGFzdCA/ICcgfHwge30pJyA6ICcpJylcbiAgfSlcblxuICByZXR1cm4gbmV3IEFycmF5KHBhcnRzLmxlbmd0aCArIDEpLmpvaW4oJygnKSArIHJlc3VsdFxufVxuXG5mdW5jdGlvbiBoYXNMZWFkaW5nTnVtYmVyKHBhcnQpIHtcbiAgcmV0dXJuIHBhcnQubWF0Y2goTEVBRF9ESUdJVF9SRUdFWCkgJiYgIXBhcnQubWF0Y2goRElHSVRfUkVHRVgpXG59XG5cbmZ1bmN0aW9uIGhhc1NwZWNpYWxDaGFycyhwYXJ0KSB7XG4gIHJldHVybiBTUEVDX0NIQVJfUkVHRVgudGVzdChwYXJ0KVxufVxuXG5mdW5jdGlvbiBzaG91bGRCZVF1b3RlZChwYXJ0KSB7XG4gIHJldHVybiAhaXNRdW90ZWQocGFydCkgJiYgKGhhc0xlYWRpbmdOdW1iZXIocGFydCkgfHwgaGFzU3BlY2lhbENoYXJzKHBhcnQpKVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZGVmYXVsdCA9IGZ1bmN0aW9uIF9kZWZhdWx0KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbmV4cG9ydCBkZWZhdWx0IGZyZWVHbG9iYWw7XG4iLCJpbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcbmltcG9ydCBzdHViRmFsc2UgZnJvbSAnLi9zdHViRmFsc2UuanMnO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyByb290LkJ1ZmZlciA6IHVuZGVmaW5lZDtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUlzQnVmZmVyID0gQnVmZmVyID8gQnVmZmVyLmlzQnVmZmVyIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNCdWZmZXIgPSBuYXRpdmVJc0J1ZmZlciB8fCBzdHViRmFsc2U7XG5cbmV4cG9ydCBkZWZhdWx0IGlzQnVmZmVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG52YXIga2V5TGlzdCA9IE9iamVjdC5rZXlzO1xudmFyIGhhc1Byb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIGhhc0VsZW1lbnRUeXBlID0gdHlwZW9mIEVsZW1lbnQgIT09ICd1bmRlZmluZWQnO1xuXG5mdW5jdGlvbiBlcXVhbChhLCBiKSB7XG4gIC8vIGZhc3QtZGVlcC1lcXVhbCBpbmRleC5qcyAyLjAuMVxuICBpZiAoYSA9PT0gYikgcmV0dXJuIHRydWU7XG5cbiAgaWYgKGEgJiYgYiAmJiB0eXBlb2YgYSA9PSAnb2JqZWN0JyAmJiB0eXBlb2YgYiA9PSAnb2JqZWN0Jykge1xuICAgIHZhciBhcnJBID0gaXNBcnJheShhKVxuICAgICAgLCBhcnJCID0gaXNBcnJheShiKVxuICAgICAgLCBpXG4gICAgICAsIGxlbmd0aFxuICAgICAgLCBrZXk7XG5cbiAgICBpZiAoYXJyQSAmJiBhcnJCKSB7XG4gICAgICBsZW5ndGggPSBhLmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGggIT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOylcbiAgICAgICAgaWYgKCFlcXVhbChhW2ldLCBiW2ldKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGFyckEgIT0gYXJyQikgcmV0dXJuIGZhbHNlO1xuXG4gICAgdmFyIGRhdGVBID0gYSBpbnN0YW5jZW9mIERhdGVcbiAgICAgICwgZGF0ZUIgPSBiIGluc3RhbmNlb2YgRGF0ZTtcbiAgICBpZiAoZGF0ZUEgIT0gZGF0ZUIpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZGF0ZUEgJiYgZGF0ZUIpIHJldHVybiBhLmdldFRpbWUoKSA9PSBiLmdldFRpbWUoKTtcblxuICAgIHZhciByZWdleHBBID0gYSBpbnN0YW5jZW9mIFJlZ0V4cFxuICAgICAgLCByZWdleHBCID0gYiBpbnN0YW5jZW9mIFJlZ0V4cDtcbiAgICBpZiAocmVnZXhwQSAhPSByZWdleHBCKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHJlZ2V4cEEgJiYgcmVnZXhwQikgcmV0dXJuIGEudG9TdHJpbmcoKSA9PSBiLnRvU3RyaW5nKCk7XG5cbiAgICB2YXIga2V5cyA9IGtleUxpc3QoYSk7XG4gICAgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG5cbiAgICBpZiAobGVuZ3RoICE9PSBrZXlMaXN0KGIpLmxlbmd0aClcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOylcbiAgICAgIGlmICghaGFzUHJvcC5jYWxsKGIsIGtleXNbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gZW5kIGZhc3QtZGVlcC1lcXVhbFxuXG4gICAgLy8gc3RhcnQgcmVhY3QtZmFzdC1jb21wYXJlXG4gICAgLy8gY3VzdG9tIGhhbmRsaW5nIGZvciBET00gZWxlbWVudHNcbiAgICBpZiAoaGFzRWxlbWVudFR5cGUgJiYgYSBpbnN0YW5jZW9mIEVsZW1lbnQgJiYgYiBpbnN0YW5jZW9mIEVsZW1lbnQpXG4gICAgICByZXR1cm4gYSA9PT0gYjtcblxuICAgIC8vIGN1c3RvbSBoYW5kbGluZyBmb3IgUmVhY3RcbiAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSAhPT0gMDspIHtcbiAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICBpZiAoa2V5ID09PSAnX293bmVyJyAmJiBhLiQkdHlwZW9mKSB7XG4gICAgICAgIC8vIFJlYWN0LXNwZWNpZmljOiBhdm9pZCB0cmF2ZXJzaW5nIFJlYWN0IGVsZW1lbnRzJyBfb3duZXIuXG4gICAgICAgIC8vICBfb3duZXIgY29udGFpbnMgY2lyY3VsYXIgcmVmZXJlbmNlc1xuICAgICAgICAvLyBhbmQgaXMgbm90IG5lZWRlZCB3aGVuIGNvbXBhcmluZyB0aGUgYWN0dWFsIGVsZW1lbnRzIChhbmQgbm90IHRoZWlyIG93bmVycylcbiAgICAgICAgLy8gLiQkdHlwZW9mIGFuZCAuX3N0b3JlIG9uIGp1c3QgcmVhc29uYWJsZSBtYXJrZXJzIG9mIGEgcmVhY3QgZWxlbWVudFxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGFsbCBvdGhlciBwcm9wZXJ0aWVzIHNob3VsZCBiZSB0cmF2ZXJzZWQgYXMgdXN1YWxcbiAgICAgICAgaWYgKCFlcXVhbChhW2tleV0sIGJba2V5XSkpIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gZW5kIHJlYWN0LWZhc3QtY29tcGFyZVxuXG4gICAgLy8gZmFzdC1kZWVwLWVxdWFsIGluZGV4LmpzIDIuMC4xXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gYSAhPT0gYSAmJiBiICE9PSBiO1xufVxuLy8gZW5kIGZhc3QtZGVlcC1lcXVhbFxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGV4cG9ydGVkRXF1YWwoYSwgYikge1xuICB0cnkge1xuICAgIHJldHVybiBlcXVhbChhLCBiKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAoKGVycm9yLm1lc3NhZ2UgJiYgZXJyb3IubWVzc2FnZS5tYXRjaCgvc3RhY2t8cmVjdXJzaW9uL2kpKSB8fCAoZXJyb3IubnVtYmVyID09PSAtMjE0NjgyODI2MCkpIHtcbiAgICAgIC8vIHdhcm4gb24gY2lyY3VsYXIgcmVmZXJlbmNlcywgZG9uJ3QgY3Jhc2hcbiAgICAgIC8vIGJyb3dzZXJzIGdpdmUgdGhpcyBkaWZmZXJlbnQgZXJyb3JzIG5hbWUgYW5kIG1lc3NhZ2VzOlxuICAgICAgLy8gY2hyb21lL3NhZmFyaTogXCJSYW5nZUVycm9yXCIsIFwiTWF4aW11bSBjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIlxuICAgICAgLy8gZmlyZWZveDogXCJJbnRlcm5hbEVycm9yXCIsIHRvbyBtdWNoIHJlY3Vyc2lvblwiXG4gICAgICAvLyBlZGdlOiBcIkVycm9yXCIsIFwiT3V0IG9mIHN0YWNrIHNwYWNlXCJcbiAgICAgIGNvbnNvbGUud2FybignV2FybmluZzogcmVhY3QtZmFzdC1jb21wYXJlIGRvZXMgbm90IGhhbmRsZSBjaXJjdWxhciByZWZlcmVuY2VzLicsIGVycm9yLm5hbWUsIGVycm9yLm1lc3NhZ2UpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBzb21lIG90aGVyIGVycm9yLiB3ZSBzaG91bGQgZGVmaW5pdGVseSBrbm93IGFib3V0IHRoZXNlXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsTW9kdWxlKSB7XG5cdGlmICghb3JpZ2luYWxNb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0dmFyIG1vZHVsZSA9IE9iamVjdC5jcmVhdGUob3JpZ2luYWxNb2R1bGUpO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImV4cG9ydHNcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwidmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlSXNEZWVwUHJvcCA9IC9cXC58XFxbKD86W15bXFxdXSp8KFtcIiddKSg/Oig/IVxcMSlbXlxcXFxdfFxcXFwuKSo/XFwxKVxcXS8sXG4gICAgcmVJc1BsYWluUHJvcCA9IC9eXFx3KiQvO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSBhbmQgbm90IGEgcHJvcGVydHkgcGF0aC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5KHZhbHVlLCBvYmplY3QpIHtcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICBpZiAodHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nIHx8XG4gICAgICB2YWx1ZSA9PSBudWxsIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiByZUlzUGxhaW5Qcm9wLnRlc3QodmFsdWUpIHx8ICFyZUlzRGVlcFByb3AudGVzdCh2YWx1ZSkgfHxcbiAgICAob2JqZWN0ICE9IG51bGwgJiYgdmFsdWUgaW4gT2JqZWN0KG9iamVjdCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzS2V5O1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU3ltYm9sO1xuIiwidmFyIG1hcENhY2hlQ2xlYXIgPSByZXF1aXJlKCcuL19tYXBDYWNoZUNsZWFyJyksXG4gICAgbWFwQ2FjaGVEZWxldGUgPSByZXF1aXJlKCcuL19tYXBDYWNoZURlbGV0ZScpLFxuICAgIG1hcENhY2hlR2V0ID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVHZXQnKSxcbiAgICBtYXBDYWNoZUhhcyA9IHJlcXVpcmUoJy4vX21hcENhY2hlSGFzJyksXG4gICAgbWFwQ2FjaGVTZXQgPSByZXF1aXJlKCcuL19tYXBDYWNoZVNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbk1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbk1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbk1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbk1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXBDYWNoZTtcbiIsIi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKCdhJywgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKE5hTiwgTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBNYXAgPSBnZXROYXRpdmUocm9vdCwgJ01hcCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcDtcbiIsIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0xlbmd0aCgzKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKEluZmluaXR5KTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aCgnMycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJlxuICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0xlbmd0aDtcbiIsInZhciBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKSxcbiAgICBzdGFja0NsZWFyID0gcmVxdWlyZSgnLi9fc3RhY2tDbGVhcicpLFxuICAgIHN0YWNrRGVsZXRlID0gcmVxdWlyZSgnLi9fc3RhY2tEZWxldGUnKSxcbiAgICBzdGFja0dldCA9IHJlcXVpcmUoJy4vX3N0YWNrR2V0JyksXG4gICAgc3RhY2tIYXMgPSByZXF1aXJlKCcuL19zdGFja0hhcycpLFxuICAgIHN0YWNrU2V0ID0gcmVxdWlyZSgnLi9fc3RhY2tTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlKGVudHJpZXMpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuXG5TdGFjay5wcm90b3R5cGUuY2xlYXIgPSBzdGFja0NsZWFyO1xuU3RhY2sucHJvdG90eXBlWydkZWxldGUnXSA9IHN0YWNrRGVsZXRlO1xuU3RhY2sucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0O1xuU3RhY2sucHJvdG90eXBlLmhhcyA9IHN0YWNrSGFzO1xuU3RhY2sucHJvdG90eXBlLnNldCA9IHN0YWNrU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0YWNrO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290JyksXG4gICAgc3R1YkZhbHNlID0gcmVxdWlyZSgnLi9zdHViRmFsc2UnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gcm9vdC5CdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVJc0J1ZmZlciA9IEJ1ZmZlciA/IEJ1ZmZlci5pc0J1ZmZlciA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQnVmZmVyO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmFyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBzdG9yaW5nIG1ldGFkYXRhLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVVuYXJ5KGZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VVbmFyeTtcbiIsInZhciBmcmVlR2xvYmFsID0gcmVxdWlyZSgnLi9fZnJlZUdsb2JhbCcpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVQcm9jZXNzID0gbW9kdWxlRXhwb3J0cyAmJiBmcmVlR2xvYmFsLnByb2Nlc3M7XG5cbi8qKiBVc2VkIHRvIGFjY2VzcyBmYXN0ZXIgTm9kZS5qcyBoZWxwZXJzLiAqL1xudmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIC8vIFVzZSBgdXRpbC50eXBlc2AgZm9yIE5vZGUuanMgMTArLlxuICAgIHZhciB0eXBlcyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlICYmIGZyZWVNb2R1bGUucmVxdWlyZSgndXRpbCcpLnR5cGVzO1xuXG4gICAgaWYgKHR5cGVzKSB7XG4gICAgICByZXR1cm4gdHlwZXM7XG4gICAgfVxuXG4gICAgLy8gTGVnYWN5IGBwcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKWAgZm9yIE5vZGUuanMgPCAxMC5cbiAgICByZXR1cm4gZnJlZVByb2Nlc3MgJiYgZnJlZVByb2Nlc3MuYmluZGluZyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nKCd1dGlsJyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5vZGVVdGlsO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzUHJvdG90eXBlO1xuIiwidmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlKCcuL2lzRnVuY3Rpb24nKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheUxpa2U7XG4iLCJ2YXIgYXJyYXlGaWx0ZXIgPSByZXF1aXJlKCcuL19hcnJheUZpbHRlcicpLFxuICAgIHN0dWJBcnJheSA9IHJlcXVpcmUoJy4vc3R1YkFycmF5Jyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVHZXRTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gKi9cbnZhciBnZXRTeW1ib2xzID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICByZXR1cm4gYXJyYXlGaWx0ZXIobmF0aXZlR2V0U3ltYm9scyhvYmplY3QpLCBmdW5jdGlvbihzeW1ib2wpIHtcbiAgICByZXR1cm4gcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmplY3QsIHN5bWJvbCk7XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRTeW1ib2xzO1xuIiwidmFyIFVpbnQ4QXJyYXkgPSByZXF1aXJlKCcuL19VaW50OEFycmF5Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGBhcnJheUJ1ZmZlcmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGFycmF5QnVmZmVyIFRoZSBhcnJheSBidWZmZXIgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7QXJyYXlCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBhcnJheSBidWZmZXIuXG4gKi9cbmZ1bmN0aW9uIGNsb25lQXJyYXlCdWZmZXIoYXJyYXlCdWZmZXIpIHtcbiAgdmFyIHJlc3VsdCA9IG5ldyBhcnJheUJ1ZmZlci5jb25zdHJ1Y3RvcihhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgbmV3IFVpbnQ4QXJyYXkocmVzdWx0KS5zZXQobmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZUFycmF5QnVmZmVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5wcm9wYWdhdGVFcnJvcnMgPSBwcm9wYWdhdGVFcnJvcnM7XG5leHBvcnRzLnNldHRsZWQgPSBzZXR0bGVkO1xuZXhwb3J0cy5jb2xsZWN0RXJyb3JzID0gY29sbGVjdEVycm9ycztcbmV4cG9ydHMuZGVmYXVsdCA9IHJ1blZhbGlkYXRpb25zO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKTtcblxudmFyIF9zeW5jaHJvbm91c1Byb21pc2UgPSByZXF1aXJlKFwic3luY2hyb25vdXMtcHJvbWlzZVwiKTtcblxudmFyIF9WYWxpZGF0aW9uRXJyb3IgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9WYWxpZGF0aW9uRXJyb3JcIikpO1xuXG52YXIgcHJvbWlzZSA9IGZ1bmN0aW9uIHByb21pc2Uoc3luYykge1xuICByZXR1cm4gc3luYyA/IF9zeW5jaHJvbm91c1Byb21pc2UuU3luY2hyb25vdXNQcm9taXNlIDogUHJvbWlzZTtcbn07XG5cbnZhciB1bndyYXBFcnJvciA9IGZ1bmN0aW9uIHVud3JhcEVycm9yKGVycm9ycykge1xuICBpZiAoZXJyb3JzID09PSB2b2lkIDApIHtcbiAgICBlcnJvcnMgPSBbXTtcbiAgfVxuXG4gIHJldHVybiBlcnJvcnMuaW5uZXIgJiYgZXJyb3JzLmlubmVyLmxlbmd0aCA/IGVycm9ycy5pbm5lciA6IFtdLmNvbmNhdChlcnJvcnMpO1xufTtcblxuZnVuY3Rpb24gc2NvcGVUb1ZhbHVlKHByb21pc2VzLCB2YWx1ZSwgc3luYykge1xuICAvL2NvbnNvbGUubG9nKCdzY29wZVRvVmFsdWUnLCBwcm9taXNlcywgdmFsdWUpXG4gIHZhciBwID0gcHJvbWlzZShzeW5jKS5hbGwocHJvbWlzZXMpOyAvL2NvbnNvbGUubG9nKCdzY29wZVRvVmFsdWUgQicsIHApXG5cbiAgdmFyIGIgPSBwLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoZXJyLm5hbWUgPT09ICdWYWxpZGF0aW9uRXJyb3InKSBlcnIudmFsdWUgPSB2YWx1ZTtcbiAgICB0aHJvdyBlcnI7XG4gIH0pOyAvL2NvbnNvbGUubG9nKCdzY29wZVRvVmFsdWUgYycsIGIpXG5cbiAgdmFyIGMgPSBiLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSk7IC8vY29uc29sZS5sb2coJ3Njb3BlVG9WYWx1ZSBkJywgYylcblxuICByZXR1cm4gYztcbn1cbi8qKlxuICogSWYgbm90IGZhaWxpbmcgb24gdGhlIGZpcnN0IGVycm9yLCBjYXRjaCB0aGUgZXJyb3JzXG4gKiBhbmQgY29sbGVjdCB0aGVtIGluIGFuIGFycmF5XG4gKi9cblxuXG5mdW5jdGlvbiBwcm9wYWdhdGVFcnJvcnMoZW5kRWFybHksIGVycm9ycykge1xuICByZXR1cm4gZW5kRWFybHkgPyBudWxsIDogZnVuY3Rpb24gKGVycikge1xuICAgIGVycm9ycy5wdXNoKGVycik7XG4gICAgcmV0dXJuIGVyci52YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc2V0dGxlZChwcm9taXNlcywgc3luYykge1xuICB2YXIgUHJvbWlzZSA9IHByb21pc2Uoc3luYyk7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcy5tYXAoZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHApLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmdWxmaWxsZWQ6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfTtcbiAgICB9LCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGZ1bGZpbGxlZDogZmFsc2UsXG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfTtcbiAgICB9KTtcbiAgfSkpO1xufVxuXG5mdW5jdGlvbiBjb2xsZWN0RXJyb3JzKF9yZWYpIHtcbiAgdmFyIHZhbGlkYXRpb25zID0gX3JlZi52YWxpZGF0aW9ucyxcbiAgICAgIHZhbHVlID0gX3JlZi52YWx1ZSxcbiAgICAgIHBhdGggPSBfcmVmLnBhdGgsXG4gICAgICBzeW5jID0gX3JlZi5zeW5jLFxuICAgICAgZXJyb3JzID0gX3JlZi5lcnJvcnMsXG4gICAgICBzb3J0ID0gX3JlZi5zb3J0O1xuICBlcnJvcnMgPSB1bndyYXBFcnJvcihlcnJvcnMpO1xuICByZXR1cm4gc2V0dGxlZCh2YWxpZGF0aW9ucywgc3luYykudGhlbihmdW5jdGlvbiAocmVzdWx0cykge1xuICAgIHZhciBuZXN0ZWRFcnJvcnMgPSByZXN1bHRzLmZpbHRlcihmdW5jdGlvbiAocikge1xuICAgICAgcmV0dXJuICFyLmZ1bGZpbGxlZDtcbiAgICB9KS5yZWR1Y2UoZnVuY3Rpb24gKGFyciwgX3JlZjIpIHtcbiAgICAgIHZhciBlcnJvciA9IF9yZWYyLnZhbHVlO1xuXG4gICAgICAvLyB3ZSBhcmUgb25seSBjb2xsZWN0aW5nIHZhbGlkYXRpb24gZXJyb3JzXG4gICAgICBpZiAoIV9WYWxpZGF0aW9uRXJyb3IuZGVmYXVsdC5pc0Vycm9yKGVycm9yKSkge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFyci5jb25jYXQoZXJyb3IpO1xuICAgIH0sIFtdKTtcbiAgICBpZiAoc29ydCkgbmVzdGVkRXJyb3JzLnNvcnQoc29ydCk7IC8vc2hvdyBwYXJlbnQgZXJyb3JzIGFmdGVyIHRoZSBuZXN0ZWQgb25lczogbmFtZS5maXJzdCwgbmFtZVxuXG4gICAgZXJyb3JzID0gbmVzdGVkRXJyb3JzLmNvbmNhdChlcnJvcnMpO1xuICAgIGlmIChlcnJvcnMubGVuZ3RoKSB0aHJvdyBuZXcgX1ZhbGlkYXRpb25FcnJvci5kZWZhdWx0KGVycm9ycywgdmFsdWUsIHBhdGgpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJ1blZhbGlkYXRpb25zKF9yZWYzKSB7XG4gIHZhciBlbmRFYXJseSA9IF9yZWYzLmVuZEVhcmx5LFxuICAgICAgb3B0aW9ucyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoX3JlZjMsIFtcImVuZEVhcmx5XCJdKTtcbiAgaWYgKGVuZEVhcmx5KSByZXR1cm4gc2NvcGVUb1ZhbHVlKG9wdGlvbnMudmFsaWRhdGlvbnMsIG9wdGlvbnMudmFsdWUsIG9wdGlvbnMuc3luYyk7XG4gIHJldHVybiBjb2xsZWN0RXJyb3JzKG9wdGlvbnMpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IFZhbGlkYXRpb25FcnJvcjtcblxudmFyIF9wcmludFZhbHVlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL3ByaW50VmFsdWVcIikpO1xuXG52YXIgc3RyUmVnID0gL1xcJFxce1xccyooXFx3KylcXHMqXFx9L2c7XG5cbnZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShzdHIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2Uoc3RyUmVnLCBmdW5jdGlvbiAoXywga2V5KSB7XG4gICAgICByZXR1cm4gKDAsIF9wcmludFZhbHVlLmRlZmF1bHQpKHBhcmFtc1trZXldKTtcbiAgICB9KTtcbiAgfTtcbn07XG5cbmZ1bmN0aW9uIFZhbGlkYXRpb25FcnJvcihlcnJvcnMsIHZhbHVlLCBmaWVsZCwgdHlwZSkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHRoaXMubmFtZSA9ICdWYWxpZGF0aW9uRXJyb3InO1xuICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIHRoaXMucGF0aCA9IGZpZWxkO1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLmVycm9ycyA9IFtdO1xuICB0aGlzLmlubmVyID0gW107XG4gIGlmIChlcnJvcnMpIFtdLmNvbmNhdChlcnJvcnMpLmZvckVhY2goZnVuY3Rpb24gKGVycikge1xuICAgIF90aGlzLmVycm9ycyA9IF90aGlzLmVycm9ycy5jb25jYXQoZXJyLmVycm9ycyB8fCBlcnIpO1xuICAgIGlmIChlcnIuaW5uZXIpIF90aGlzLmlubmVyID0gX3RoaXMuaW5uZXIuY29uY2F0KGVyci5pbm5lci5sZW5ndGggPyBlcnIuaW5uZXIgOiBlcnIpO1xuICB9KTtcbiAgdGhpcy5tZXNzYWdlID0gdGhpcy5lcnJvcnMubGVuZ3RoID4gMSA/IHRoaXMuZXJyb3JzLmxlbmd0aCArIFwiIGVycm9ycyBvY2N1cnJlZFwiIDogdGhpcy5lcnJvcnNbMF07XG4gIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgVmFsaWRhdGlvbkVycm9yKTtcbn1cblxuVmFsaWRhdGlvbkVycm9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcblZhbGlkYXRpb25FcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBWYWxpZGF0aW9uRXJyb3I7XG5cblZhbGlkYXRpb25FcnJvci5pc0Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICByZXR1cm4gZXJyICYmIGVyci5uYW1lID09PSAnVmFsaWRhdGlvbkVycm9yJztcbn07XG5cblZhbGlkYXRpb25FcnJvci5mb3JtYXRFcnJvciA9IGZ1bmN0aW9uIChtZXNzYWdlLCBwYXJhbXMpIHtcbiAgaWYgKHR5cGVvZiBtZXNzYWdlID09PSAnc3RyaW5nJykgbWVzc2FnZSA9IHJlcGxhY2UobWVzc2FnZSk7XG5cbiAgdmFyIGZuID0gZnVuY3Rpb24gZm4ocGFyYW1zKSB7XG4gICAgcGFyYW1zLnBhdGggPSBwYXJhbXMubGFiZWwgfHwgcGFyYW1zLnBhdGggfHwgJ3RoaXMnO1xuICAgIHJldHVybiB0eXBlb2YgbWVzc2FnZSA9PT0gJ2Z1bmN0aW9uJyA/IG1lc3NhZ2UocGFyYW1zKSA6IG1lc3NhZ2U7XG4gIH07XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBmbiA6IGZuKHBhcmFtcyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIi8vIEBmbG93XG4ndXNlIHN0cmljdCc7XG5cbnZhciBrZXkgPSAnX19nbG9iYWxfdW5pcXVlX2lkX18nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZ2xvYmFsW2tleV0gPSAoZ2xvYmFsW2tleV0gfHwgMCkgKyAxO1xufTtcbiIsImltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSb3V0ZXIsIF9fUm91dGVyQ29udGV4dCwgbWF0Y2hQYXRoIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmV4cG9ydCAqIGZyb20gJ3JlYWN0LXJvdXRlcic7XG5pbXBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyBIVE1MNSBoaXN0b3J5LlxuICovXG5cbnZhciBCcm93c2VyUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEJyb3dzZXJSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQnJvd3NlclJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEJyb3dzZXJSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgQnJvd3NlclJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGZvcmNlUmVmcmVzaDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyXG4gIH07XG5cbiAgQnJvd3NlclJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxCcm93c2VyUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyB3aW5kb3cubG9jYXRpb24uaGFzaC5cbiAqL1xuXG52YXIgSGFzaFJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShIYXNoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBIYXNoUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVIYXNoSGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEhhc2hSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBIYXNoUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEhhc2hSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBoYXNoVHlwZTogUHJvcFR5cGVzLm9uZU9mKFtcImhhc2hiYW5nXCIsIFwibm9zbGFzaFwiLCBcInNsYXNoXCJdKVxuICB9O1xuXG4gIEhhc2hSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8SGFzaFJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEhhc2hSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn1cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LlxuICovXG5cblxudmFyIExpbmsgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTGluaywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTGluaygpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTGluay5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZlbnQsIGhpc3RvcnkpIHtcbiAgICB0cnkge1xuICAgICAgaWYgKHRoaXMucHJvcHMub25DbGljaykgdGhpcy5wcm9wcy5vbkNsaWNrKGV2ZW50KTtcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRocm93IGV4O1xuICAgIH1cblxuICAgIGlmICghZXZlbnQuZGVmYXVsdFByZXZlbnRlZCAmJiAvLyBvbkNsaWNrIHByZXZlbnRlZCBkZWZhdWx0XG4gICAgZXZlbnQuYnV0dG9uID09PSAwICYmICggLy8gaWdub3JlIGV2ZXJ5dGhpbmcgYnV0IGxlZnQgY2xpY2tzXG4gICAgIXRoaXMucHJvcHMudGFyZ2V0IHx8IHRoaXMucHJvcHMudGFyZ2V0ID09PSBcIl9zZWxmXCIpICYmIC8vIGxldCBicm93c2VyIGhhbmRsZSBcInRhcmdldD1fYmxhbmtcIiBldGMuXG4gICAgIWlzTW9kaWZpZWRFdmVudChldmVudCkgLy8gaWdub3JlIGNsaWNrcyB3aXRoIG1vZGlmaWVyIGtleXNcbiAgICApIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdmFyIG1ldGhvZCA9IHRoaXMucHJvcHMucmVwbGFjZSA/IGhpc3RvcnkucmVwbGFjZSA6IGhpc3RvcnkucHVzaDtcbiAgICAgICAgbWV0aG9kKHRoaXMucHJvcHMudG8pO1xuICAgICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGlubmVyUmVmID0gX3RoaXMkcHJvcHMuaW5uZXJSZWYsXG4gICAgICAgIHJlcGxhY2UgPSBfdGhpcyRwcm9wcy5yZXBsYWNlLFxuICAgICAgICB0byA9IF90aGlzJHByb3BzLnRvLFxuICAgICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImlubmVyUmVmXCIsIFwicmVwbGFjZVwiLCBcInRvXCJdKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfX1JvdXRlckNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPExpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgbG9jYXRpb24gPSB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBjcmVhdGVMb2NhdGlvbih0bywgbnVsbCwgbnVsbCwgY29udGV4dC5sb2NhdGlvbikgOiB0bztcbiAgICAgIHZhciBocmVmID0gbG9jYXRpb24gPyBjb250ZXh0Lmhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbikgOiBcIlwiO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMuaGFuZGxlQ2xpY2soZXZlbnQsIGNvbnRleHQuaGlzdG9yeSk7XG4gICAgICAgIH0sXG4gICAgICAgIGhyZWY6IGhyZWYsXG4gICAgICAgIHJlZjogaW5uZXJSZWZcbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gTGluaztcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICB2YXIgdG9UeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pO1xuICB2YXIgaW5uZXJSZWZUeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY3VycmVudDogUHJvcFR5cGVzLmFueVxuICB9KV0pO1xuICBMaW5rLnByb3BUeXBlcyA9IHtcbiAgICBpbm5lclJlZjogaW5uZXJSZWZUeXBlLFxuICAgIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAgIHJlcGxhY2U6IFByb3BUeXBlcy5ib29sLFxuICAgIHRhcmdldDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0bzogdG9UeXBlLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxuZnVuY3Rpb24gam9pbkNsYXNzbmFtZXMoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBjbGFzc25hbWVzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGNsYXNzbmFtZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gY2xhc3NuYW1lcy5maWx0ZXIoZnVuY3Rpb24gKGkpIHtcbiAgICByZXR1cm4gaTtcbiAgfSkuam9pbihcIiBcIik7XG59XG4vKipcbiAqIEEgPExpbms+IHdyYXBwZXIgdGhhdCBrbm93cyBpZiBpdCdzIFwiYWN0aXZlXCIgb3Igbm90LlxuICovXG5cblxuZnVuY3Rpb24gTmF2TGluayhfcmVmKSB7XG4gIHZhciBfcmVmJGFyaWFDdXJyZW50ID0gX3JlZltcImFyaWEtY3VycmVudFwiXSxcbiAgICAgIGFyaWFDdXJyZW50ID0gX3JlZiRhcmlhQ3VycmVudCA9PT0gdm9pZCAwID8gXCJwYWdlXCIgOiBfcmVmJGFyaWFDdXJyZW50LFxuICAgICAgX3JlZiRhY3RpdmVDbGFzc05hbWUgPSBfcmVmLmFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYkYWN0aXZlQ2xhc3NOYW1lID09PSB2b2lkIDAgPyBcImFjdGl2ZVwiIDogX3JlZiRhY3RpdmVDbGFzc05hbWUsXG4gICAgICBhY3RpdmVTdHlsZSA9IF9yZWYuYWN0aXZlU3R5bGUsXG4gICAgICBjbGFzc05hbWVQcm9wID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBleGFjdCA9IF9yZWYuZXhhY3QsXG4gICAgICBpc0FjdGl2ZVByb3AgPSBfcmVmLmlzQWN0aXZlLFxuICAgICAgbG9jYXRpb25Qcm9wID0gX3JlZi5sb2NhdGlvbixcbiAgICAgIHN0cmljdCA9IF9yZWYuc3RyaWN0LFxuICAgICAgc3R5bGVQcm9wID0gX3JlZi5zdHlsZSxcbiAgICAgIHRvID0gX3JlZi50byxcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJhcmlhLWN1cnJlbnRcIiwgXCJhY3RpdmVDbGFzc05hbWVcIiwgXCJhY3RpdmVTdHlsZVwiLCBcImNsYXNzTmFtZVwiLCBcImV4YWN0XCIsIFwiaXNBY3RpdmVcIiwgXCJsb2NhdGlvblwiLCBcInN0cmljdFwiLCBcInN0eWxlXCIsIFwidG9cIl0pO1xuXG4gIHZhciBwYXRoID0gdHlwZW9mIHRvID09PSBcIm9iamVjdFwiID8gdG8ucGF0aG5hbWUgOiB0bzsgLy8gUmVnZXggdGFrZW4gZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL3BpbGxhcmpzL3BhdGgtdG8tcmVnZXhwL2Jsb2IvbWFzdGVyL2luZGV4LmpzI0wyMDJcblxuICB2YXIgZXNjYXBlZFBhdGggPSBwYXRoICYmIHBhdGgucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXwvXFxcXF0pL2csIFwiXFxcXCQxXCIpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfX1JvdXRlckNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxOYXZMaW5rPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBwYXRoVG9NYXRjaCA9IGxvY2F0aW9uUHJvcCA/IGxvY2F0aW9uUHJvcC5wYXRobmFtZSA6IGNvbnRleHQubG9jYXRpb24ucGF0aG5hbWU7XG4gICAgdmFyIG1hdGNoID0gZXNjYXBlZFBhdGggPyBtYXRjaFBhdGgocGF0aFRvTWF0Y2gsIHtcbiAgICAgIHBhdGg6IGVzY2FwZWRQYXRoLFxuICAgICAgZXhhY3Q6IGV4YWN0LFxuICAgICAgc3RyaWN0OiBzdHJpY3RcbiAgICB9KSA6IG51bGw7XG4gICAgdmFyIGlzQWN0aXZlID0gISEoaXNBY3RpdmVQcm9wID8gaXNBY3RpdmVQcm9wKG1hdGNoLCBjb250ZXh0LmxvY2F0aW9uKSA6IG1hdGNoKTtcbiAgICB2YXIgY2xhc3NOYW1lID0gaXNBY3RpdmUgPyBqb2luQ2xhc3NuYW1lcyhjbGFzc05hbWVQcm9wLCBhY3RpdmVDbGFzc05hbWUpIDogY2xhc3NOYW1lUHJvcDtcbiAgICB2YXIgc3R5bGUgPSBpc0FjdGl2ZSA/IF9leHRlbmRzKHt9LCBzdHlsZVByb3AsIGFjdGl2ZVN0eWxlKSA6IHN0eWxlUHJvcDtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMaW5rLCBfZXh0ZW5kcyh7XG4gICAgICBcImFyaWEtY3VycmVudFwiOiBpc0FjdGl2ZSAmJiBhcmlhQ3VycmVudCB8fCBudWxsLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICBzdHlsZTogc3R5bGUsXG4gICAgICB0bzogdG9cbiAgICB9LCByZXN0KSk7XG4gIH0pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIHZhciBhcmlhQ3VycmVudFR5cGUgPSBQcm9wVHlwZXMub25lT2YoW1wicGFnZVwiLCBcInN0ZXBcIiwgXCJsb2NhdGlvblwiLCBcImRhdGVcIiwgXCJ0aW1lXCIsIFwidHJ1ZVwiXSk7XG4gIE5hdkxpbmsucHJvcFR5cGVzID0gX2V4dGVuZHMoe30sIExpbmsucHJvcFR5cGVzLCB7XG4gICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnRUeXBlLFxuICAgIGFjdGl2ZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhY3RpdmVTdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzQWN0aXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pO1xufVxuXG5leHBvcnQgeyBCcm93c2VyUm91dGVyLCBIYXNoUm91dGVyLCBMaW5rLCBOYXZMaW5rIH07XG4iLCIhZnVuY3Rpb24oZSl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9ZShudWxsKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKGUobnVsbCkpOndpbmRvdy5zdHlsaXM9ZShudWxsKX0oZnVuY3Rpb24gZShhKXtcInVzZSBzdHJpY3RcIjt2YXIgcj0vXlxcMCsvZyxjPS9bXFwwXFxyXFxmXS9nLHM9LzogKi9nLHQ9L3pvb3xncmEvLGk9LyhbLDogXSkodHJhbnNmb3JtKS9nLGY9LywrXFxzKig/IVteKF0qWyldKS9nLG49LyArXFxzKig/IVteKF0qWyldKS9nLGw9LyAqW1xcMF0gKi9nLG89LyxcXHIrPy9nLGg9LyhbXFx0XFxyXFxuIF0pKlxcZj8mL2csdT0vOmdsb2JhbFxcKCgoPzpbXlxcKFxcKVxcW1xcXV0qfFxcWy4qXFxdfFxcKFteXFwoXFwpXSpcXCkpKilcXCkvZyxkPS9cXFcrL2csYj0vQChrXFx3KylcXHMqKFxcUyopXFxzKi8scD0vOjoocGxhY2UpL2csaz0vOihyZWFkLW9ubHkpL2csZz0vXFxzKyg/PVt7XFxdOz06Pl0pL2csQT0vKFtbfT06Pl0pXFxzKy9nLEM9LyhcXHtbXntdKz8pOyg/PVxcfSkvZyx3PS9cXHN7Mix9L2csdj0vKFteXFwoXSkoOispICovZyxtPS9bc3ZoXVxcdystW3RibHJdezJ9Lyx4PS9cXChcXHMqKC4qKVxccypcXCkvZywkPS8oW1xcc1xcU10qPyk7L2cseT0vLXNlbGZ8ZmxleC0vZyxPPS9bXl0qPyg6W3JwXVtlbF1hW1xcdy1dKylbXl0qLyxqPS9zdHJldGNofDpcXHMqXFx3K1xcLSg/OmNvbnRlfGF2YWlsKS8sej0vKFteLV0pKGltYWdlLXNldFxcKCkvLE49XCItd2Via2l0LVwiLFM9XCItbW96LVwiLEY9XCItbXMtXCIsVz01OSxxPTEyNSxCPTEyMyxEPTQwLEU9NDEsRz05MSxIPTkzLEk9MTAsSj0xMyxLPTksTD02NCxNPTMyLFA9MzgsUT00NSxSPTk1LFQ9NDIsVT00NCxWPTU4LFg9MzksWT0zNCxaPTQ3LF89NjIsZWU9NDMsYWU9MTI2LHJlPTAsY2U9MTIsc2U9MTEsdGU9MTA3LGllPTEwOSxmZT0xMTUsbmU9MTEyLGxlPTExMSxvZT0xMDUsaGU9OTksdWU9MTAwLGRlPTExMixiZT0xLHBlPTEsa2U9MCxnZT0xLEFlPTEsQ2U9MSx3ZT0wLHZlPTAsbWU9MCx4ZT1bXSwkZT1bXSx5ZT0wLE9lPW51bGwsamU9LTIsemU9LTEsTmU9MCxTZT0xLEZlPTIsV2U9MyxxZT0wLEJlPTEsRGU9XCJcIixFZT1cIlwiLEdlPVwiXCI7ZnVuY3Rpb24gSGUoZSxhLHMsdCxpKXtmb3IodmFyIGYsbixvPTAsaD0wLHU9MCxkPTAsZz0wLEE9MCxDPTAsdz0wLG09MCwkPTAseT0wLE89MCxqPTAsej0wLFI9MCx3ZT0wLCRlPTAsT2U9MCxqZT0wLHplPXMubGVuZ3RoLEplPXplLTEsUmU9XCJcIixUZT1cIlwiLFVlPVwiXCIsVmU9XCJcIixYZT1cIlwiLFllPVwiXCI7Ujx6ZTspe2lmKEM9cy5jaGFyQ29kZUF0KFIpLFI9PT1KZSlpZihoK2QrdStvIT09MCl7aWYoMCE9PWgpQz1oPT09Wj9JOlo7ZD11PW89MCx6ZSsrLEplKyt9aWYoaCtkK3Urbz09PTApe2lmKFI9PT1KZSl7aWYod2U+MClUZT1UZS5yZXBsYWNlKGMsXCJcIik7aWYoVGUudHJpbSgpLmxlbmd0aD4wKXtzd2l0Y2goQyl7Y2FzZSBNOmNhc2UgSzpjYXNlIFc6Y2FzZSBKOmNhc2UgSTpicmVhaztkZWZhdWx0OlRlKz1zLmNoYXJBdChSKX1DPVd9fWlmKDE9PT0kZSlzd2l0Y2goQyl7Y2FzZSBCOmNhc2UgcTpjYXNlIFc6Y2FzZSBZOmNhc2UgWDpjYXNlIEQ6Y2FzZSBFOmNhc2UgVTokZT0wO2Nhc2UgSzpjYXNlIEo6Y2FzZSBJOmNhc2UgTTpicmVhaztkZWZhdWx0OmZvcigkZT0wLGplPVIsZz1DLFItLSxDPVc7amU8emU7KXN3aXRjaChzLmNoYXJDb2RlQXQoamUrKykpe2Nhc2UgSTpjYXNlIEo6Y2FzZSBXOisrUixDPWcsamU9emU7YnJlYWs7Y2FzZSBWOmlmKHdlPjApKytSLEM9ZztjYXNlIEI6amU9emV9fXN3aXRjaChDKXtjYXNlIEI6Zm9yKGc9KFRlPVRlLnRyaW0oKSkuY2hhckNvZGVBdCgwKSx5PTEsamU9KytSO1I8emU7KXtzd2l0Y2goQz1zLmNoYXJDb2RlQXQoUikpe2Nhc2UgQjp5Kys7YnJlYWs7Y2FzZSBxOnktLTticmVhaztjYXNlIFo6c3dpdGNoKEE9cy5jaGFyQ29kZUF0KFIrMSkpe2Nhc2UgVDpjYXNlIFo6Uj1RZShBLFIsSmUscyl9YnJlYWs7Y2FzZSBHOkMrKztjYXNlIEQ6QysrO2Nhc2UgWTpjYXNlIFg6Zm9yKDtSKys8SmUmJnMuY2hhckNvZGVBdChSKSE9PUM7KTt9aWYoMD09PXkpYnJlYWs7UisrfWlmKFVlPXMuc3Vic3RyaW5nKGplLFIpLGc9PT1yZSlnPShUZT1UZS5yZXBsYWNlKHIsXCJcIikudHJpbSgpKS5jaGFyQ29kZUF0KDApO3N3aXRjaChnKXtjYXNlIEw6aWYod2U+MClUZT1UZS5yZXBsYWNlKGMsXCJcIik7c3dpdGNoKEE9VGUuY2hhckNvZGVBdCgxKSl7Y2FzZSB1ZTpjYXNlIGllOmNhc2UgZmU6Y2FzZSBROmY9YTticmVhaztkZWZhdWx0OmY9eGV9aWYoamU9KFVlPUhlKGEsZixVZSxBLGkrMSkpLmxlbmd0aCxtZT4wJiYwPT09amUpamU9VGUubGVuZ3RoO2lmKHllPjApaWYoZj1JZSh4ZSxUZSxPZSksbj1QZShXZSxVZSxmLGEscGUsYmUsamUsQSxpLHQpLFRlPWYuam9pbihcIlwiKSx2b2lkIDAhPT1uKWlmKDA9PT0oamU9KFVlPW4udHJpbSgpKS5sZW5ndGgpKUE9MCxVZT1cIlwiO2lmKGplPjApc3dpdGNoKEEpe2Nhc2UgZmU6VGU9VGUucmVwbGFjZSh4LE1lKTtjYXNlIHVlOmNhc2UgaWU6Y2FzZSBROlVlPVRlK1wie1wiK1VlK1wifVwiO2JyZWFrO2Nhc2UgdGU6aWYoVWU9KFRlPVRlLnJlcGxhY2UoYixcIiQxICQyXCIrKEJlPjA/RGU6XCJcIikpKStcIntcIitVZStcIn1cIiwxPT09QWV8fDI9PT1BZSYmTGUoXCJAXCIrVWUsMykpVWU9XCJAXCIrTitVZStcIkBcIitVZTtlbHNlIFVlPVwiQFwiK1VlO2JyZWFrO2RlZmF1bHQ6aWYoVWU9VGUrVWUsdD09PWRlKVZlKz1VZSxVZT1cIlwifWVsc2UgVWU9XCJcIjticmVhaztkZWZhdWx0OlVlPUhlKGEsSWUoYSxUZSxPZSksVWUsdCxpKzEpfVhlKz1VZSxPPTAsJGU9MCx6PTAsd2U9MCxPZT0wLGo9MCxUZT1cIlwiLFVlPVwiXCIsQz1zLmNoYXJDb2RlQXQoKytSKTticmVhaztjYXNlIHE6Y2FzZSBXOmlmKChqZT0oVGU9KHdlPjA/VGUucmVwbGFjZShjLFwiXCIpOlRlKS50cmltKCkpLmxlbmd0aCk+MSl7aWYoMD09PXopaWYoKGc9VGUuY2hhckNvZGVBdCgwKSk9PT1RfHxnPjk2JiZnPDEyMylqZT0oVGU9VGUucmVwbGFjZShcIiBcIixcIjpcIikpLmxlbmd0aDtpZih5ZT4wKWlmKHZvaWQgMCE9PShuPVBlKFNlLFRlLGEsZSxwZSxiZSxWZS5sZW5ndGgsdCxpLHQpKSlpZigwPT09KGplPShUZT1uLnRyaW0oKSkubGVuZ3RoKSlUZT1cIlxcMFxcMFwiO3N3aXRjaChnPVRlLmNoYXJDb2RlQXQoMCksQT1UZS5jaGFyQ29kZUF0KDEpLGcpe2Nhc2UgcmU6YnJlYWs7Y2FzZSBMOmlmKEE9PT1vZXx8QT09PWhlKXtZZSs9VGUrcy5jaGFyQXQoUik7YnJlYWt9ZGVmYXVsdDppZihUZS5jaGFyQ29kZUF0KGplLTEpPT09VilicmVhaztWZSs9S2UoVGUsZyxBLFRlLmNoYXJDb2RlQXQoMikpfX1PPTAsJGU9MCx6PTAsd2U9MCxPZT0wLFRlPVwiXCIsQz1zLmNoYXJDb2RlQXQoKytSKX19c3dpdGNoKEMpe2Nhc2UgSjpjYXNlIEk6aWYoaCtkK3Urbyt2ZT09PTApc3dpdGNoKCQpe2Nhc2UgRTpjYXNlIFg6Y2FzZSBZOmNhc2UgTDpjYXNlIGFlOmNhc2UgXzpjYXNlIFQ6Y2FzZSBlZTpjYXNlIFo6Y2FzZSBROmNhc2UgVjpjYXNlIFU6Y2FzZSBXOmNhc2UgQjpjYXNlIHE6YnJlYWs7ZGVmYXVsdDppZih6PjApJGU9MX1pZihoPT09WiloPTA7ZWxzZSBpZihnZStPPT09MCYmdCE9PXRlJiZUZS5sZW5ndGg+MCl3ZT0xLFRlKz1cIlxcMFwiO2lmKHllKnFlPjApUGUoTmUsVGUsYSxlLHBlLGJlLFZlLmxlbmd0aCx0LGksdCk7YmU9MSxwZSsrO2JyZWFrO2Nhc2UgVzpjYXNlIHE6aWYoaCtkK3Urbz09PTApe2JlKys7YnJlYWt9ZGVmYXVsdDpzd2l0Y2goYmUrKyxSZT1zLmNoYXJBdChSKSxDKXtjYXNlIEs6Y2FzZSBNOmlmKGQrbytoPT09MClzd2l0Y2godyl7Y2FzZSBVOmNhc2UgVjpjYXNlIEs6Y2FzZSBNOlJlPVwiXCI7YnJlYWs7ZGVmYXVsdDppZihDIT09TSlSZT1cIiBcIn1icmVhaztjYXNlIHJlOlJlPVwiXFxcXDBcIjticmVhaztjYXNlIGNlOlJlPVwiXFxcXGZcIjticmVhaztjYXNlIHNlOlJlPVwiXFxcXHZcIjticmVhaztjYXNlIFA6aWYoZCtoK289PT0wJiZnZT4wKU9lPTEsd2U9MSxSZT1cIlxcZlwiK1JlO2JyZWFrO2Nhc2UgMTA4OmlmKGQraCtvK2tlPT09MCYmej4wKXN3aXRjaChSLXope2Nhc2UgMjppZih3PT09bmUmJnMuY2hhckNvZGVBdChSLTMpPT09VilrZT13O2Nhc2UgODppZihtPT09bGUpa2U9bX1icmVhaztjYXNlIFY6aWYoZCtoK289PT0wKXo9UjticmVhaztjYXNlIFU6aWYoaCt1K2Qrbz09PTApd2U9MSxSZSs9XCJcXHJcIjticmVhaztjYXNlIFk6Y2FzZSBYOmlmKDA9PT1oKWQ9ZD09PUM/MDowPT09ZD9DOmQ7YnJlYWs7Y2FzZSBHOmlmKGQraCt1PT09MClvKys7YnJlYWs7Y2FzZSBIOmlmKGQraCt1PT09MClvLS07YnJlYWs7Y2FzZSBFOmlmKGQraCtvPT09MCl1LS07YnJlYWs7Y2FzZSBEOmlmKGQraCtvPT09MCl7aWYoMD09PU8pc3dpdGNoKDIqdyszKm0pe2Nhc2UgNTMzOmJyZWFrO2RlZmF1bHQ6eT0wLE89MX11Kyt9YnJlYWs7Y2FzZSBMOmlmKGgrdStkK28reitqPT09MClqPTE7YnJlYWs7Y2FzZSBUOmNhc2UgWjppZihkK28rdT4wKWJyZWFrO3N3aXRjaChoKXtjYXNlIDA6c3dpdGNoKDIqQyszKnMuY2hhckNvZGVBdChSKzEpKXtjYXNlIDIzNTpoPVo7YnJlYWs7Y2FzZSAyMjA6amU9UixoPVR9YnJlYWs7Y2FzZSBUOmlmKEM9PT1aJiZ3PT09VCYmamUrMiE9PVIpe2lmKDMzPT09cy5jaGFyQ29kZUF0KGplKzIpKVZlKz1zLnN1YnN0cmluZyhqZSxSKzEpO1JlPVwiXCIsaD0wfX19aWYoMD09PWgpe2lmKGdlK2QrbytqPT09MCYmdCE9PXRlJiZDIT09Vylzd2l0Y2goQyl7Y2FzZSBVOmNhc2UgYWU6Y2FzZSBfOmNhc2UgZWU6Y2FzZSBFOmNhc2UgRDppZigwPT09Tyl7c3dpdGNoKHcpe2Nhc2UgSzpjYXNlIE06Y2FzZSBJOmNhc2UgSjpSZSs9XCJcXDBcIjticmVhaztkZWZhdWx0OlJlPVwiXFwwXCIrUmUrKEM9PT1VP1wiXCI6XCJcXDBcIil9d2U9MX1lbHNlIHN3aXRjaChDKXtjYXNlIEQ6aWYoeis3PT09UiYmMTA4PT09dyl6PTA7Tz0rK3k7YnJlYWs7Y2FzZSBFOmlmKDA9PShPPS0teSkpd2U9MSxSZSs9XCJcXDBcIn1icmVhaztjYXNlIEs6Y2FzZSBNOnN3aXRjaCh3KXtjYXNlIHJlOmNhc2UgQjpjYXNlIHE6Y2FzZSBXOmNhc2UgVTpjYXNlIGNlOmNhc2UgSzpjYXNlIE06Y2FzZSBJOmNhc2UgSjpicmVhaztkZWZhdWx0OmlmKDA9PT1PKXdlPTEsUmUrPVwiXFwwXCJ9fWlmKFRlKz1SZSxDIT09TSYmQyE9PUspJD1DfX1tPXcsdz1DLFIrK31pZihqZT1WZS5sZW5ndGgsbWU+MClpZigwPT09amUmJjA9PT1YZS5sZW5ndGgmJjA9PT1hWzBdLmxlbmd0aD09ZmFsc2UpaWYodCE9PWllfHwxPT09YS5sZW5ndGgmJihnZT4wP0VlOkdlKT09PWFbMF0pamU9YS5qb2luKFwiLFwiKS5sZW5ndGgrMjtpZihqZT4wKXtpZihmPTA9PT1nZSYmdCE9PXRlP2Z1bmN0aW9uKGUpe2Zvcih2YXIgYSxyLHM9MCx0PWUubGVuZ3RoLGk9QXJyYXkodCk7czx0Oysrcyl7Zm9yKHZhciBmPWVbc10uc3BsaXQobCksbj1cIlwiLG89MCxoPTAsdT0wLGQ9MCxiPWYubGVuZ3RoO288YjsrK28pe2lmKDA9PT0oaD0ocj1mW29dKS5sZW5ndGgpJiZiPjEpY29udGludWU7aWYodT1uLmNoYXJDb2RlQXQobi5sZW5ndGgtMSksZD1yLmNoYXJDb2RlQXQoMCksYT1cIlwiLDAhPT1vKXN3aXRjaCh1KXtjYXNlIFQ6Y2FzZSBhZTpjYXNlIF86Y2FzZSBlZTpjYXNlIE06Y2FzZSBEOmJyZWFrO2RlZmF1bHQ6YT1cIiBcIn1zd2l0Y2goZCl7Y2FzZSBQOnI9YStFZTtjYXNlIGFlOmNhc2UgXzpjYXNlIGVlOmNhc2UgTTpjYXNlIEU6Y2FzZSBEOmJyZWFrO2Nhc2UgRzpyPWErcitFZTticmVhaztjYXNlIFY6c3dpdGNoKDIqci5jaGFyQ29kZUF0KDEpKzMqci5jaGFyQ29kZUF0KDIpKXtjYXNlIDUzMDppZihDZT4wKXtyPWErci5zdWJzdHJpbmcoOCxoLTEpO2JyZWFrfWRlZmF1bHQ6aWYobzwxfHxmW28tMV0ubGVuZ3RoPDEpcj1hK0VlK3J9YnJlYWs7Y2FzZSBVOmE9XCJcIjtkZWZhdWx0OmlmKGg+MSYmci5pbmRleE9mKFwiOlwiKT4wKXI9YStyLnJlcGxhY2UodixcIiQxXCIrRWUrXCIkMlwiKTtlbHNlIHI9YStyK0VlfW4rPXJ9aVtzXT1uLnJlcGxhY2UoYyxcIlwiKS50cmltKCl9cmV0dXJuIGl9KGEpOmEseWU+MClpZih2b2lkIDAhPT0obj1QZShGZSxWZSxmLGUscGUsYmUsamUsdCxpLHQpKSYmMD09PShWZT1uKS5sZW5ndGgpcmV0dXJuIFllK1ZlK1hlO2lmKFZlPWYuam9pbihcIixcIikrXCJ7XCIrVmUrXCJ9XCIsQWUqa2UhPTApe2lmKDI9PT1BZSYmIUxlKFZlLDIpKWtlPTA7c3dpdGNoKGtlKXtjYXNlIGxlOlZlPVZlLnJlcGxhY2UoayxcIjpcIitTK1wiJDFcIikrVmU7YnJlYWs7Y2FzZSBuZTpWZT1WZS5yZXBsYWNlKHAsXCI6OlwiK04rXCJpbnB1dC0kMVwiKStWZS5yZXBsYWNlKHAsXCI6OlwiK1MrXCIkMVwiKStWZS5yZXBsYWNlKHAsXCI6XCIrRitcImlucHV0LSQxXCIpK1ZlfWtlPTB9fXJldHVybiBZZStWZStYZX1mdW5jdGlvbiBJZShlLGEscil7dmFyIGM9YS50cmltKCkuc3BsaXQobykscz1jLHQ9Yy5sZW5ndGgsaT1lLmxlbmd0aDtzd2l0Y2goaSl7Y2FzZSAwOmNhc2UgMTpmb3IodmFyIGY9MCxuPTA9PT1pP1wiXCI6ZVswXStcIiBcIjtmPHQ7KytmKXNbZl09SmUobixzW2ZdLHIsaSkudHJpbSgpO2JyZWFrO2RlZmF1bHQ6Zj0wO3ZhciBsPTA7Zm9yKHM9W107Zjx0OysrZilmb3IodmFyIGg9MDtoPGk7KytoKXNbbCsrXT1KZShlW2hdK1wiIFwiLGNbZl0scixpKS50cmltKCl9cmV0dXJuIHN9ZnVuY3Rpb24gSmUoZSxhLHIsYyl7dmFyIHM9YSx0PXMuY2hhckNvZGVBdCgwKTtpZih0PDMzKXQ9KHM9cy50cmltKCkpLmNoYXJDb2RlQXQoMCk7c3dpdGNoKHQpe2Nhc2UgUDpzd2l0Y2goZ2UrYyl7Y2FzZSAwOmNhc2UgMTppZigwPT09ZS50cmltKCkubGVuZ3RoKWJyZWFrO2RlZmF1bHQ6cmV0dXJuIHMucmVwbGFjZShoLFwiJDFcIitlLnRyaW0oKSl9YnJlYWs7Y2FzZSBWOnN3aXRjaChzLmNoYXJDb2RlQXQoMSkpe2Nhc2UgMTAzOmlmKENlPjAmJmdlPjApcmV0dXJuIHMucmVwbGFjZSh1LFwiJDFcIikucmVwbGFjZShoLFwiJDFcIitHZSk7YnJlYWs7ZGVmYXVsdDpyZXR1cm4gZS50cmltKCkrcy5yZXBsYWNlKGgsXCIkMVwiK2UudHJpbSgpKX1kZWZhdWx0OmlmKHIqZ2U+MCYmcy5pbmRleE9mKFwiXFxmXCIpPjApcmV0dXJuIHMucmVwbGFjZShoLChlLmNoYXJDb2RlQXQoMCk9PT1WP1wiXCI6XCIkMVwiKStlLnRyaW0oKSl9cmV0dXJuIGUrc31mdW5jdGlvbiBLZShlLGEscixjKXt2YXIgbCxvPTAsaD1lK1wiO1wiLHU9MiphKzMqcis0KmM7aWYoOTQ0PT09dSlyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIGE9ZS5sZW5ndGgscj1lLmluZGV4T2YoXCI6XCIsOSkrMSxjPWUuc3Vic3RyaW5nKDAscikudHJpbSgpLHM9ZS5zdWJzdHJpbmcocixhLTEpLnRyaW0oKTtzd2l0Y2goZS5jaGFyQ29kZUF0KDkpKkJlKXtjYXNlIDA6YnJlYWs7Y2FzZSBROmlmKDExMCE9PWUuY2hhckNvZGVBdCgxMCkpYnJlYWs7ZGVmYXVsdDpmb3IodmFyIHQ9cy5zcGxpdCgocz1cIlwiLGYpKSxpPTAscj0wLGE9dC5sZW5ndGg7aTxhO3I9MCwrK2kpe2Zvcih2YXIgbD10W2ldLG89bC5zcGxpdChuKTtsPW9bcl07KXt2YXIgaD1sLmNoYXJDb2RlQXQoMCk7aWYoMT09PUJlJiYoaD5MJiZoPDkwfHxoPjk2JiZoPDEyM3x8aD09PVJ8fGg9PT1RJiZsLmNoYXJDb2RlQXQoMSkhPT1RKSlzd2l0Y2goaXNOYU4ocGFyc2VGbG9hdChsKSkrKC0xIT09bC5pbmRleE9mKFwiKFwiKSkpe2Nhc2UgMTpzd2l0Y2gobCl7Y2FzZVwiaW5maW5pdGVcIjpjYXNlXCJhbHRlcm5hdGVcIjpjYXNlXCJiYWNrd2FyZHNcIjpjYXNlXCJydW5uaW5nXCI6Y2FzZVwibm9ybWFsXCI6Y2FzZVwiZm9yd2FyZHNcIjpjYXNlXCJib3RoXCI6Y2FzZVwibm9uZVwiOmNhc2VcImxpbmVhclwiOmNhc2VcImVhc2VcIjpjYXNlXCJlYXNlLWluXCI6Y2FzZVwiZWFzZS1vdXRcIjpjYXNlXCJlYXNlLWluLW91dFwiOmNhc2VcInBhdXNlZFwiOmNhc2VcInJldmVyc2VcIjpjYXNlXCJhbHRlcm5hdGUtcmV2ZXJzZVwiOmNhc2VcImluaGVyaXRcIjpjYXNlXCJpbml0aWFsXCI6Y2FzZVwidW5zZXRcIjpjYXNlXCJzdGVwLXN0YXJ0XCI6Y2FzZVwic3RlcC1lbmRcIjpicmVhaztkZWZhdWx0OmwrPURlfX1vW3IrK109bH1zKz0oMD09PWk/XCJcIjpcIixcIikrby5qb2luKFwiIFwiKX19aWYocz1jK3MrXCI7XCIsMT09PUFlfHwyPT09QWUmJkxlKHMsMSkpcmV0dXJuIE4rcytzO3JldHVybiBzfShoKTtlbHNlIGlmKDA9PT1BZXx8Mj09PUFlJiYhTGUoaCwxKSlyZXR1cm4gaDtzd2l0Y2godSl7Y2FzZSAxMDE1OnJldHVybiA5Nz09PWguY2hhckNvZGVBdCgxMCk/TitoK2g6aDtjYXNlIDk1MTpyZXR1cm4gMTE2PT09aC5jaGFyQ29kZUF0KDMpP04raCtoOmg7Y2FzZSA5NjM6cmV0dXJuIDExMD09PWguY2hhckNvZGVBdCg1KT9OK2graDpoO2Nhc2UgMTAwOTppZigxMDAhPT1oLmNoYXJDb2RlQXQoNCkpYnJlYWs7Y2FzZSA5Njk6Y2FzZSA5NDI6cmV0dXJuIE4raCtoO2Nhc2UgOTc4OnJldHVybiBOK2grUytoK2g7Y2FzZSAxMDE5OmNhc2UgOTgzOnJldHVybiBOK2grUytoK0YraCtoO2Nhc2UgODgzOmlmKGguY2hhckNvZGVBdCg4KT09PVEpcmV0dXJuIE4raCtoO2lmKGguaW5kZXhPZihcImltYWdlLXNldChcIiwxMSk+MClyZXR1cm4gaC5yZXBsYWNlKHosXCIkMVwiK04rXCIkMlwiKStoO3JldHVybiBoO2Nhc2UgOTMyOmlmKGguY2hhckNvZGVBdCg0KT09PVEpc3dpdGNoKGguY2hhckNvZGVBdCg1KSl7Y2FzZSAxMDM6cmV0dXJuIE4rXCJib3gtXCIraC5yZXBsYWNlKFwiLWdyb3dcIixcIlwiKStOK2grRitoLnJlcGxhY2UoXCJncm93XCIsXCJwb3NpdGl2ZVwiKStoO2Nhc2UgMTE1OnJldHVybiBOK2grRitoLnJlcGxhY2UoXCJzaHJpbmtcIixcIm5lZ2F0aXZlXCIpK2g7Y2FzZSA5ODpyZXR1cm4gTitoK0YraC5yZXBsYWNlKFwiYmFzaXNcIixcInByZWZlcnJlZC1zaXplXCIpK2h9cmV0dXJuIE4raCtGK2graDtjYXNlIDk2NDpyZXR1cm4gTitoK0YrXCJmbGV4LVwiK2graDtjYXNlIDEwMjM6aWYoOTkhPT1oLmNoYXJDb2RlQXQoOCkpYnJlYWs7cmV0dXJuIGw9aC5zdWJzdHJpbmcoaC5pbmRleE9mKFwiOlwiLDE1KSkucmVwbGFjZShcImZsZXgtXCIsXCJcIikucmVwbGFjZShcInNwYWNlLWJldHdlZW5cIixcImp1c3RpZnlcIiksTitcImJveC1wYWNrXCIrbCtOK2grRitcImZsZXgtcGFja1wiK2wraDtjYXNlIDEwMDU6cmV0dXJuIHQudGVzdChoKT9oLnJlcGxhY2UocyxcIjpcIitOKStoLnJlcGxhY2UocyxcIjpcIitTKStoOmg7Y2FzZSAxZTM6c3dpdGNoKG89KGw9aC5zdWJzdHJpbmcoMTMpLnRyaW0oKSkuaW5kZXhPZihcIi1cIikrMSxsLmNoYXJDb2RlQXQoMCkrbC5jaGFyQ29kZUF0KG8pKXtjYXNlIDIyNjpsPWgucmVwbGFjZShtLFwidGJcIik7YnJlYWs7Y2FzZSAyMzI6bD1oLnJlcGxhY2UobSxcInRiLXJsXCIpO2JyZWFrO2Nhc2UgMjIwOmw9aC5yZXBsYWNlKG0sXCJsclwiKTticmVhaztkZWZhdWx0OnJldHVybiBofXJldHVybiBOK2grRitsK2g7Y2FzZSAxMDE3OmlmKC0xPT09aC5pbmRleE9mKFwic3RpY2t5XCIsOSkpcmV0dXJuIGg7Y2FzZSA5NzU6c3dpdGNoKG89KGg9ZSkubGVuZ3RoLTEwLHU9KGw9KDMzPT09aC5jaGFyQ29kZUF0KG8pP2guc3Vic3RyaW5nKDAsbyk6aCkuc3Vic3RyaW5nKGUuaW5kZXhPZihcIjpcIiw3KSsxKS50cmltKCkpLmNoYXJDb2RlQXQoMCkrKDB8bC5jaGFyQ29kZUF0KDcpKSl7Y2FzZSAyMDM6aWYobC5jaGFyQ29kZUF0KDgpPDExMSlicmVhaztjYXNlIDExNTpoPWgucmVwbGFjZShsLE4rbCkrXCI7XCIraDticmVhaztjYXNlIDIwNzpjYXNlIDEwMjpoPWgucmVwbGFjZShsLE4rKHU+MTAyP1wiaW5saW5lLVwiOlwiXCIpK1wiYm94XCIpK1wiO1wiK2gucmVwbGFjZShsLE4rbCkrXCI7XCIraC5yZXBsYWNlKGwsRitsK1wiYm94XCIpK1wiO1wiK2h9cmV0dXJuIGgrXCI7XCI7Y2FzZSA5Mzg6aWYoaC5jaGFyQ29kZUF0KDUpPT09USlzd2l0Y2goaC5jaGFyQ29kZUF0KDYpKXtjYXNlIDEwNTpyZXR1cm4gbD1oLnJlcGxhY2UoXCItaXRlbXNcIixcIlwiKSxOK2grTitcImJveC1cIitsK0YrXCJmbGV4LVwiK2wraDtjYXNlIDExNTpyZXR1cm4gTitoK0YrXCJmbGV4LWl0ZW0tXCIraC5yZXBsYWNlKHksXCJcIikraDtkZWZhdWx0OnJldHVybiBOK2grRitcImZsZXgtbGluZS1wYWNrXCIraC5yZXBsYWNlKFwiYWxpZ24tY29udGVudFwiLFwiXCIpLnJlcGxhY2UoeSxcIlwiKStofWJyZWFrO2Nhc2UgOTczOmNhc2UgOTg5OmlmKGguY2hhckNvZGVBdCgzKSE9PVF8fDEyMj09PWguY2hhckNvZGVBdCg0KSlicmVhaztjYXNlIDkzMTpjYXNlIDk1MzppZih0cnVlPT09ai50ZXN0KGUpKWlmKDExNT09PShsPWUuc3Vic3RyaW5nKGUuaW5kZXhPZihcIjpcIikrMSkpLmNoYXJDb2RlQXQoMCkpcmV0dXJuIEtlKGUucmVwbGFjZShcInN0cmV0Y2hcIixcImZpbGwtYXZhaWxhYmxlXCIpLGEscixjKS5yZXBsYWNlKFwiOmZpbGwtYXZhaWxhYmxlXCIsXCI6c3RyZXRjaFwiKTtlbHNlIHJldHVybiBoLnJlcGxhY2UobCxOK2wpK2gucmVwbGFjZShsLFMrbC5yZXBsYWNlKFwiZmlsbC1cIixcIlwiKSkraDticmVhaztjYXNlIDk2MjppZihoPU4raCsoMTAyPT09aC5jaGFyQ29kZUF0KDUpP0YraDpcIlwiKStoLHIrYz09PTIxMSYmMTA1PT09aC5jaGFyQ29kZUF0KDEzKSYmaC5pbmRleE9mKFwidHJhbnNmb3JtXCIsMTApPjApcmV0dXJuIGguc3Vic3RyaW5nKDAsaC5pbmRleE9mKFwiO1wiLDI3KSsxKS5yZXBsYWNlKGksXCIkMVwiK04rXCIkMlwiKStofXJldHVybiBofWZ1bmN0aW9uIExlKGUsYSl7dmFyIHI9ZS5pbmRleE9mKDE9PT1hP1wiOlwiOlwie1wiKSxjPWUuc3Vic3RyaW5nKDAsMyE9PWE/cjoxMCkscz1lLnN1YnN0cmluZyhyKzEsZS5sZW5ndGgtMSk7cmV0dXJuIE9lKDIhPT1hP2M6Yy5yZXBsYWNlKE8sXCIkMVwiKSxzLGEpfWZ1bmN0aW9uIE1lKGUsYSl7dmFyIHI9S2UoYSxhLmNoYXJDb2RlQXQoMCksYS5jaGFyQ29kZUF0KDEpLGEuY2hhckNvZGVBdCgyKSk7cmV0dXJuIHIhPT1hK1wiO1wiP3IucmVwbGFjZSgkLFwiIG9yICgkMSlcIikuc3Vic3RyaW5nKDQpOlwiKFwiK2ErXCIpXCJ9ZnVuY3Rpb24gUGUoZSxhLHIsYyxzLHQsaSxmLG4sbCl7Zm9yKHZhciBvLGg9MCx1PWE7aDx5ZTsrK2gpc3dpdGNoKG89JGVbaF0uY2FsbChUZSxlLHUscixjLHMsdCxpLGYsbixsKSl7Y2FzZSB2b2lkIDA6Y2FzZSBmYWxzZTpjYXNlIHRydWU6Y2FzZSBudWxsOmJyZWFrO2RlZmF1bHQ6dT1vfWlmKHUhPT1hKXJldHVybiB1fWZ1bmN0aW9uIFFlKGUsYSxyLGMpe2Zvcih2YXIgcz1hKzE7czxyOysrcylzd2l0Y2goYy5jaGFyQ29kZUF0KHMpKXtjYXNlIFo6aWYoZT09PVQpaWYoYy5jaGFyQ29kZUF0KHMtMSk9PT1UJiZhKzIhPT1zKXJldHVybiBzKzE7YnJlYWs7Y2FzZSBJOmlmKGU9PT1aKXJldHVybiBzKzF9cmV0dXJuIHN9ZnVuY3Rpb24gUmUoZSl7Zm9yKHZhciBhIGluIGUpe3ZhciByPWVbYV07c3dpdGNoKGEpe2Nhc2VcImtleWZyYW1lXCI6QmU9MHxyO2JyZWFrO2Nhc2VcImdsb2JhbFwiOkNlPTB8cjticmVhaztjYXNlXCJjYXNjYWRlXCI6Z2U9MHxyO2JyZWFrO2Nhc2VcImNvbXByZXNzXCI6d2U9MHxyO2JyZWFrO2Nhc2VcInNlbWljb2xvblwiOnZlPTB8cjticmVhaztjYXNlXCJwcmVzZXJ2ZVwiOm1lPTB8cjticmVhaztjYXNlXCJwcmVmaXhcIjppZihPZT1udWxsLCFyKUFlPTA7ZWxzZSBpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiByKUFlPTE7ZWxzZSBBZT0yLE9lPXJ9fXJldHVybiBSZX1mdW5jdGlvbiBUZShhLHIpe2lmKHZvaWQgMCE9PXRoaXMmJnRoaXMuY29uc3RydWN0b3I9PT1UZSlyZXR1cm4gZShhKTt2YXIgcz1hLHQ9cy5jaGFyQ29kZUF0KDApO2lmKHQ8MzMpdD0ocz1zLnRyaW0oKSkuY2hhckNvZGVBdCgwKTtpZihCZT4wKURlPXMucmVwbGFjZShkLHQ9PT1HP1wiXCI6XCItXCIpO2lmKHQ9MSwxPT09Z2UpR2U9cztlbHNlIEVlPXM7dmFyIGksZj1bR2VdO2lmKHllPjApaWYodm9pZCAwIT09KGk9UGUoemUscixmLGYscGUsYmUsMCwwLDAsMCkpJiZcInN0cmluZ1wiPT10eXBlb2YgaSlyPWk7dmFyIG49SGUoeGUsZixyLDAsMCk7aWYoeWU+MClpZih2b2lkIDAhPT0oaT1QZShqZSxuLGYsZixwZSxiZSxuLmxlbmd0aCwwLDAsMCkpJiZcInN0cmluZ1wiIT10eXBlb2Yobj1pKSl0PTA7cmV0dXJuIERlPVwiXCIsR2U9XCJcIixFZT1cIlwiLGtlPTAscGU9MSxiZT0xLHdlKnQ9PTA/bjpuLnJlcGxhY2UoYyxcIlwiKS5yZXBsYWNlKGcsXCJcIikucmVwbGFjZShBLFwiJDFcIikucmVwbGFjZShDLFwiJDFcIikucmVwbGFjZSh3LFwiIFwiKX1pZihUZS51c2U9ZnVuY3Rpb24gZShhKXtzd2l0Y2goYSl7Y2FzZSB2b2lkIDA6Y2FzZSBudWxsOnllPSRlLmxlbmd0aD0wO2JyZWFrO2RlZmF1bHQ6aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgYSkkZVt5ZSsrXT1hO2Vsc2UgaWYoXCJvYmplY3RcIj09dHlwZW9mIGEpZm9yKHZhciByPTAsYz1hLmxlbmd0aDtyPGM7KytyKWUoYVtyXSk7ZWxzZSBxZT0wfCEhYX1yZXR1cm4gZX0sVGUuc2V0PVJlLHZvaWQgMCE9PWEpUmUoYSk7cmV0dXJuIFRlfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHlsaXMubWluLmpzLm1hcCIsImZ1bmN0aW9uIGFyZUlucHV0c0VxdWFsKG5ld0lucHV0cywgbGFzdElucHV0cykge1xuICAgIGlmIChuZXdJbnB1dHMubGVuZ3RoICE9PSBsYXN0SW5wdXRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3SW5wdXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChuZXdJbnB1dHNbaV0gIT09IGxhc3RJbnB1dHNbaV0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gbWVtb2l6ZU9uZShyZXN1bHRGbiwgaXNFcXVhbCkge1xuICAgIGlmIChpc0VxdWFsID09PSB2b2lkIDApIHsgaXNFcXVhbCA9IGFyZUlucHV0c0VxdWFsOyB9XG4gICAgdmFyIGxhc3RUaGlzO1xuICAgIHZhciBsYXN0QXJncyA9IFtdO1xuICAgIHZhciBsYXN0UmVzdWx0O1xuICAgIHZhciBjYWxsZWRPbmNlID0gZmFsc2U7XG4gICAgZnVuY3Rpb24gbWVtb2l6ZWQoKSB7XG4gICAgICAgIHZhciBuZXdBcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBuZXdBcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhbGxlZE9uY2UgJiYgbGFzdFRoaXMgPT09IHRoaXMgJiYgaXNFcXVhbChuZXdBcmdzLCBsYXN0QXJncykpIHtcbiAgICAgICAgICAgIHJldHVybiBsYXN0UmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGxhc3RSZXN1bHQgPSByZXN1bHRGbi5hcHBseSh0aGlzLCBuZXdBcmdzKTtcbiAgICAgICAgY2FsbGVkT25jZSA9IHRydWU7XG4gICAgICAgIGxhc3RUaGlzID0gdGhpcztcbiAgICAgICAgbGFzdEFyZ3MgPSBuZXdBcmdzO1xuICAgICAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtZW1vaXplT25lO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsImZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW5oZXJpdHNMb29zZTsiLCJ2YXIgaXNhcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG4vKipcbiAqIEV4cG9zZSBgcGF0aFRvUmVnZXhwYC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBwYXRoVG9SZWdleHBcbm1vZHVsZS5leHBvcnRzLnBhcnNlID0gcGFyc2Vcbm1vZHVsZS5leHBvcnRzLmNvbXBpbGUgPSBjb21waWxlXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb0Z1bmN0aW9uID0gdG9rZW5zVG9GdW5jdGlvblxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9SZWdFeHAgPSB0b2tlbnNUb1JlZ0V4cFxuXG4vKipcbiAqIFRoZSBtYWluIHBhdGggbWF0Y2hpbmcgcmVnZXhwIHV0aWxpdHkuXG4gKlxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xudmFyIFBBVEhfUkVHRVhQID0gbmV3IFJlZ0V4cChbXG4gIC8vIE1hdGNoIGVzY2FwZWQgY2hhcmFjdGVycyB0aGF0IHdvdWxkIG90aGVyd2lzZSBhcHBlYXIgaW4gZnV0dXJlIG1hdGNoZXMuXG4gIC8vIFRoaXMgYWxsb3dzIHRoZSB1c2VyIHRvIGVzY2FwZSBzcGVjaWFsIGNoYXJhY3RlcnMgdGhhdCB3b24ndCB0cmFuc2Zvcm0uXG4gICcoXFxcXFxcXFwuKScsXG4gIC8vIE1hdGNoIEV4cHJlc3Mtc3R5bGUgcGFyYW1ldGVycyBhbmQgdW4tbmFtZWQgcGFyYW1ldGVycyB3aXRoIGEgcHJlZml4XG4gIC8vIGFuZCBvcHRpb25hbCBzdWZmaXhlcy4gTWF0Y2hlcyBhcHBlYXIgYXM6XG4gIC8vXG4gIC8vIFwiLzp0ZXN0KFxcXFxkKyk/XCIgPT4gW1wiL1wiLCBcInRlc3RcIiwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgXCI/XCIsIHVuZGVmaW5lZF1cbiAgLy8gXCIvcm91dGUoXFxcXGQrKVwiICA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAvLyBcIi8qXCIgICAgICAgICAgICA9PiBbXCIvXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCIqXCJdXG4gICcoW1xcXFwvLl0pPyg/Oig/OlxcXFw6KFxcXFx3KykoPzpcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKT98XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSkoWysqP10pP3woXFxcXCopKSdcbl0uam9pbignfCcpLCAnZycpXG5cbi8qKlxuICogUGFyc2UgYSBzdHJpbmcgZm9yIHRoZSByYXcgdG9rZW5zLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gb3B0aW9uc1xuICogQHJldHVybiB7IUFycmF5fVxuICovXG5mdW5jdGlvbiBwYXJzZSAoc3RyLCBvcHRpb25zKSB7XG4gIHZhciB0b2tlbnMgPSBbXVxuICB2YXIga2V5ID0gMFxuICB2YXIgaW5kZXggPSAwXG4gIHZhciBwYXRoID0gJydcbiAgdmFyIGRlZmF1bHREZWxpbWl0ZXIgPSBvcHRpb25zICYmIG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJ1xuICB2YXIgcmVzXG5cbiAgd2hpbGUgKChyZXMgPSBQQVRIX1JFR0VYUC5leGVjKHN0cikpICE9IG51bGwpIHtcbiAgICB2YXIgbSA9IHJlc1swXVxuICAgIHZhciBlc2NhcGVkID0gcmVzWzFdXG4gICAgdmFyIG9mZnNldCA9IHJlcy5pbmRleFxuICAgIHBhdGggKz0gc3RyLnNsaWNlKGluZGV4LCBvZmZzZXQpXG4gICAgaW5kZXggPSBvZmZzZXQgKyBtLmxlbmd0aFxuXG4gICAgLy8gSWdub3JlIGFscmVhZHkgZXNjYXBlZCBzZXF1ZW5jZXMuXG4gICAgaWYgKGVzY2FwZWQpIHtcbiAgICAgIHBhdGggKz0gZXNjYXBlZFsxXVxuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICB2YXIgbmV4dCA9IHN0cltpbmRleF1cbiAgICB2YXIgcHJlZml4ID0gcmVzWzJdXG4gICAgdmFyIG5hbWUgPSByZXNbM11cbiAgICB2YXIgY2FwdHVyZSA9IHJlc1s0XVxuICAgIHZhciBncm91cCA9IHJlc1s1XVxuICAgIHZhciBtb2RpZmllciA9IHJlc1s2XVxuICAgIHZhciBhc3RlcmlzayA9IHJlc1s3XVxuXG4gICAgLy8gUHVzaCB0aGUgY3VycmVudCBwYXRoIG9udG8gdGhlIHRva2Vucy5cbiAgICBpZiAocGF0aCkge1xuICAgICAgdG9rZW5zLnB1c2gocGF0aClcbiAgICAgIHBhdGggPSAnJ1xuICAgIH1cblxuICAgIHZhciBwYXJ0aWFsID0gcHJlZml4ICE9IG51bGwgJiYgbmV4dCAhPSBudWxsICYmIG5leHQgIT09IHByZWZpeFxuICAgIHZhciByZXBlYXQgPSBtb2RpZmllciA9PT0gJysnIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgb3B0aW9uYWwgPSBtb2RpZmllciA9PT0gJz8nIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgZGVsaW1pdGVyID0gcmVzWzJdIHx8IGRlZmF1bHREZWxpbWl0ZXJcbiAgICB2YXIgcGF0dGVybiA9IGNhcHR1cmUgfHwgZ3JvdXBcblxuICAgIHRva2Vucy5wdXNoKHtcbiAgICAgIG5hbWU6IG5hbWUgfHwga2V5KyssXG4gICAgICBwcmVmaXg6IHByZWZpeCB8fCAnJyxcbiAgICAgIGRlbGltaXRlcjogZGVsaW1pdGVyLFxuICAgICAgb3B0aW9uYWw6IG9wdGlvbmFsLFxuICAgICAgcmVwZWF0OiByZXBlYXQsXG4gICAgICBwYXJ0aWFsOiBwYXJ0aWFsLFxuICAgICAgYXN0ZXJpc2s6ICEhYXN0ZXJpc2ssXG4gICAgICBwYXR0ZXJuOiBwYXR0ZXJuID8gZXNjYXBlR3JvdXAocGF0dGVybikgOiAoYXN0ZXJpc2sgPyAnLionIDogJ1teJyArIGVzY2FwZVN0cmluZyhkZWxpbWl0ZXIpICsgJ10rPycpXG4gICAgfSlcbiAgfVxuXG4gIC8vIE1hdGNoIGFueSBjaGFyYWN0ZXJzIHN0aWxsIHJlbWFpbmluZy5cbiAgaWYgKGluZGV4IDwgc3RyLmxlbmd0aCkge1xuICAgIHBhdGggKz0gc3RyLnN1YnN0cihpbmRleClcbiAgfVxuXG4gIC8vIElmIHRoZSBwYXRoIGV4aXN0cywgcHVzaCBpdCBvbnRvIHRoZSBlbmQuXG4gIGlmIChwYXRoKSB7XG4gICAgdG9rZW5zLnB1c2gocGF0aClcbiAgfVxuXG4gIHJldHVybiB0b2tlbnNcbn1cblxuLyoqXG4gKiBDb21waWxlIGEgc3RyaW5nIHRvIGEgdGVtcGxhdGUgZnVuY3Rpb24gZm9yIHRoZSBwYXRoLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgICAgICAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFmdW5jdGlvbihPYmplY3Q9LCBPYmplY3Q9KX1cbiAqL1xuZnVuY3Rpb24gY29tcGlsZSAoc3RyLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb0Z1bmN0aW9uKHBhcnNlKHN0ciwgb3B0aW9ucykpXG59XG5cbi8qKlxuICogUHJldHRpZXIgZW5jb2Rpbmcgb2YgVVJJIHBhdGggc2VnbWVudHMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvW1xcLz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFbmNvZGUgdGhlIGFzdGVyaXNrIHBhcmFtZXRlci4gU2ltaWxhciB0byBgcHJldHR5YCwgYnV0IGFsbG93cyBzbGFzaGVzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlQXN0ZXJpc2sgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvWz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBtZXRob2QgZm9yIHRyYW5zZm9ybWluZyB0b2tlbnMgaW50byB0aGUgcGF0aCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9GdW5jdGlvbiAodG9rZW5zKSB7XG4gIC8vIENvbXBpbGUgYWxsIHRoZSB0b2tlbnMgaW50byByZWdleHBzLlxuICB2YXIgbWF0Y2hlcyA9IG5ldyBBcnJheSh0b2tlbnMubGVuZ3RoKVxuXG4gIC8vIENvbXBpbGUgYWxsIHRoZSBwYXR0ZXJucyBiZWZvcmUgY29tcGlsYXRpb24uXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHR5cGVvZiB0b2tlbnNbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICBtYXRjaGVzW2ldID0gbmV3IFJlZ0V4cCgnXig/OicgKyB0b2tlbnNbaV0ucGF0dGVybiArICcpJCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmosIG9wdHMpIHtcbiAgICB2YXIgcGF0aCA9ICcnXG4gICAgdmFyIGRhdGEgPSBvYmogfHwge31cbiAgICB2YXIgb3B0aW9ucyA9IG9wdHMgfHwge31cbiAgICB2YXIgZW5jb2RlID0gb3B0aW9ucy5wcmV0dHkgPyBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgOiBlbmNvZGVVUklDb21wb25lbnRcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGF0aCArPSB0b2tlblxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHZhciB2YWx1ZSA9IGRhdGFbdG9rZW4ubmFtZV1cbiAgICAgIHZhciBzZWdtZW50XG5cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgIC8vIFByZXBlbmQgcGFydGlhbCBzZWdtZW50IHByZWZpeGVzLlxuICAgICAgICAgIGlmICh0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgICBwYXRoICs9IHRva2VuLnByZWZpeFxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBiZSBkZWZpbmVkJylcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaXNhcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCByZXBlYXQsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKSArICdgJylcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IGJlIGVtcHR5JylcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbHVlLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgc2VnbWVudCA9IGVuY29kZSh2YWx1ZVtqXSlcblxuICAgICAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhbGwgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeShzZWdtZW50KSArICdgJylcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXRoICs9IChqID09PSAwID8gdG9rZW4ucHJlZml4IDogdG9rZW4uZGVsaW1pdGVyKSArIHNlZ21lbnRcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHNlZ21lbnQgPSB0b2tlbi5hc3RlcmlzayA/IGVuY29kZUFzdGVyaXNrKHZhbHVlKSA6IGVuY29kZSh2YWx1ZSlcblxuICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgXCInICsgc2VnbWVudCArICdcIicpXG4gICAgICB9XG5cbiAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4ICsgc2VnbWVudFxuICAgIH1cblxuICAgIHJldHVybiBwYXRoXG4gIH1cbn1cblxuLyoqXG4gKiBFc2NhcGUgYSByZWd1bGFyIGV4cHJlc3Npb24gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVN0cmluZyAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXxcXC9cXFxcXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogRXNjYXBlIHRoZSBjYXB0dXJpbmcgZ3JvdXAgYnkgZXNjYXBpbmcgc3BlY2lhbCBjaGFyYWN0ZXJzIGFuZCBtZWFuaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gZ3JvdXBcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlR3JvdXAgKGdyb3VwKSB7XG4gIHJldHVybiBncm91cC5yZXBsYWNlKC8oWz0hOiRcXC8oKV0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEF0dGFjaCB0aGUga2V5cyBhcyBhIHByb3BlcnR5IG9mIHRoZSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcmVcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGF0dGFjaEtleXMgKHJlLCBrZXlzKSB7XG4gIHJlLmtleXMgPSBrZXlzXG4gIHJldHVybiByZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZmxhZ3MgZm9yIGEgcmVnZXhwIGZyb20gdGhlIG9wdGlvbnMuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGZsYWdzIChvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zLnNlbnNpdGl2ZSA/ICcnIDogJ2knXG59XG5cbi8qKlxuICogUHVsbCBvdXQga2V5cyBmcm9tIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHJlZ2V4cFRvUmVnZXhwIChwYXRoLCBrZXlzKSB7XG4gIC8vIFVzZSBhIG5lZ2F0aXZlIGxvb2thaGVhZCB0byBtYXRjaCBvbmx5IGNhcHR1cmluZyBncm91cHMuXG4gIHZhciBncm91cHMgPSBwYXRoLnNvdXJjZS5tYXRjaCgvXFwoKD8hXFw/KS9nKVxuXG4gIGlmIChncm91cHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5cy5wdXNoKHtcbiAgICAgICAgbmFtZTogaSxcbiAgICAgICAgcHJlZml4OiBudWxsLFxuICAgICAgICBkZWxpbWl0ZXI6IG51bGwsXG4gICAgICAgIG9wdGlvbmFsOiBmYWxzZSxcbiAgICAgICAgcmVwZWF0OiBmYWxzZSxcbiAgICAgICAgcGFydGlhbDogZmFsc2UsXG4gICAgICAgIGFzdGVyaXNrOiBmYWxzZSxcbiAgICAgICAgcGF0dGVybjogbnVsbFxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhwYXRoLCBrZXlzKVxufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBhbiBhcnJheSBpbnRvIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gIHBhdGhcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgdmFyIHBhcnRzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICBwYXJ0cy5wdXNoKHBhdGhUb1JlZ2V4cChwYXRoW2ldLCBrZXlzLCBvcHRpb25zKS5zb3VyY2UpXG4gIH1cblxuICB2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cCgnKD86JyArIHBhcnRzLmpvaW4oJ3wnKSArICcpJywgZmxhZ3Mob3B0aW9ucykpXG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocmVnZXhwLCBrZXlzKVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIHBhdGggcmVnZXhwIGZyb20gc3RyaW5nIGlucHV0LlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHN0cmluZ1RvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb1JlZ0V4cChwYXJzZShwYXRoLCBvcHRpb25zKSwga2V5cywgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBmdW5jdGlvbiBmb3IgdGFraW5nIHRva2VucyBhbmQgcmV0dXJuaW5nIGEgUmVnRXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gICAgICAgICAgdG9rZW5zXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19IGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9SZWdFeHAgKHRva2Vucywga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICB2YXIgc3RyaWN0ID0gb3B0aW9ucy5zdHJpY3RcbiAgdmFyIGVuZCA9IG9wdGlvbnMuZW5kICE9PSBmYWxzZVxuICB2YXIgcm91dGUgPSAnJ1xuXG4gIC8vIEl0ZXJhdGUgb3ZlciB0aGUgdG9rZW5zIGFuZCBjcmVhdGUgb3VyIHJlZ2V4cCBzdHJpbmcuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgcm91dGUgKz0gZXNjYXBlU3RyaW5nKHRva2VuKVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcHJlZml4ID0gZXNjYXBlU3RyaW5nKHRva2VuLnByZWZpeClcbiAgICAgIHZhciBjYXB0dXJlID0gJyg/OicgKyB0b2tlbi5wYXR0ZXJuICsgJyknXG5cbiAgICAgIGtleXMucHVzaCh0b2tlbilcblxuICAgICAgaWYgKHRva2VuLnJlcGVhdCkge1xuICAgICAgICBjYXB0dXJlICs9ICcoPzonICsgcHJlZml4ICsgY2FwdHVyZSArICcpKidcbiAgICAgIH1cblxuICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgIGlmICghdG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgIGNhcHR1cmUgPSAnKD86JyArIHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSk/J1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyk/J1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpJ1xuICAgICAgfVxuXG4gICAgICByb3V0ZSArPSBjYXB0dXJlXG4gICAgfVxuICB9XG5cbiAgdmFyIGRlbGltaXRlciA9IGVzY2FwZVN0cmluZyhvcHRpb25zLmRlbGltaXRlciB8fCAnLycpXG4gIHZhciBlbmRzV2l0aERlbGltaXRlciA9IHJvdXRlLnNsaWNlKC1kZWxpbWl0ZXIubGVuZ3RoKSA9PT0gZGVsaW1pdGVyXG5cbiAgLy8gSW4gbm9uLXN0cmljdCBtb2RlIHdlIGFsbG93IGEgc2xhc2ggYXQgdGhlIGVuZCBvZiBtYXRjaC4gSWYgdGhlIHBhdGggdG9cbiAgLy8gbWF0Y2ggYWxyZWFkeSBlbmRzIHdpdGggYSBzbGFzaCwgd2UgcmVtb3ZlIGl0IGZvciBjb25zaXN0ZW5jeS4gVGhlIHNsYXNoXG4gIC8vIGlzIHZhbGlkIGF0IHRoZSBlbmQgb2YgYSBwYXRoIG1hdGNoLCBub3QgaW4gdGhlIG1pZGRsZS4gVGhpcyBpcyBpbXBvcnRhbnRcbiAgLy8gaW4gbm9uLWVuZGluZyBtb2RlLCB3aGVyZSBcIi90ZXN0L1wiIHNob3VsZG4ndCBtYXRjaCBcIi90ZXN0Ly9yb3V0ZVwiLlxuICBpZiAoIXN0cmljdCkge1xuICAgIHJvdXRlID0gKGVuZHNXaXRoRGVsaW1pdGVyID8gcm91dGUuc2xpY2UoMCwgLWRlbGltaXRlci5sZW5ndGgpIDogcm91dGUpICsgJyg/OicgKyBkZWxpbWl0ZXIgKyAnKD89JCkpPydcbiAgfVxuXG4gIGlmIChlbmQpIHtcbiAgICByb3V0ZSArPSAnJCdcbiAgfSBlbHNlIHtcbiAgICAvLyBJbiBub24tZW5kaW5nIG1vZGUsIHdlIG5lZWQgdGhlIGNhcHR1cmluZyBncm91cHMgdG8gbWF0Y2ggYXMgbXVjaCBhc1xuICAgIC8vIHBvc3NpYmxlIGJ5IHVzaW5nIGEgcG9zaXRpdmUgbG9va2FoZWFkIHRvIHRoZSBlbmQgb3IgbmV4dCBwYXRoIHNlZ21lbnQuXG4gICAgcm91dGUgKz0gc3RyaWN0ICYmIGVuZHNXaXRoRGVsaW1pdGVyID8gJycgOiAnKD89JyArIGRlbGltaXRlciArICd8JCknXG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhuZXcgUmVnRXhwKCdeJyArIHJvdXRlLCBmbGFncyhvcHRpb25zKSksIGtleXMpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIHRoZSBnaXZlbiBwYXRoIHN0cmluZywgcmV0dXJuaW5nIGEgcmVndWxhciBleHByZXNzaW9uLlxuICpcbiAqIEFuIGVtcHR5IGFycmF5IGNhbiBiZSBwYXNzZWQgaW4gZm9yIHRoZSBrZXlzLCB3aGljaCB3aWxsIGhvbGQgdGhlXG4gKiBwbGFjZWhvbGRlciBrZXkgZGVzY3JpcHRpb25zLiBGb3IgZXhhbXBsZSwgdXNpbmcgYC91c2VyLzppZGAsIGBrZXlzYCB3aWxsXG4gKiBjb250YWluIGBbeyBuYW1lOiAnaWQnLCBkZWxpbWl0ZXI6ICcvJywgb3B0aW9uYWw6IGZhbHNlLCByZXBlYXQ6IGZhbHNlIH1dYC5cbiAqXG4gKiBAcGFyYW0gIHsoc3RyaW5nfFJlZ0V4cHxBcnJheSl9IHBhdGhcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0gICAgICAga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBwYXRoVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgaWYgKHBhdGggaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICByZXR1cm4gcmVnZXhwVG9SZWdleHAocGF0aCwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSlcbiAgfVxuXG4gIGlmIChpc2FycmF5KHBhdGgpKSB7XG4gICAgcmV0dXJuIGFycmF5VG9SZWdleHAoLyoqIEB0eXBlIHshQXJyYXl9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbiAgfVxuXG4gIHJldHVybiBzdHJpbmdUb1JlZ2V4cCgvKiogQHR5cGUge3N0cmluZ30gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxufVxuIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTQwL2dpLCAnQCcpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHZhciBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG5cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG5cbnZhciBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG5mdW5jdGlvbiBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgdmFsdWUpIHtcbiAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzKSAmJiB1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzWydDb250ZW50LVR5cGUnXSkpIHtcbiAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBZGFwdGVyKCkge1xuICB2YXIgYWRhcHRlcjtcbiAgLy8gT25seSBOb2RlLkpTIGhhcyBhIHByb2Nlc3MgdmFyaWFibGUgdGhhdCBpcyBvZiBbW0NsYXNzXV0gcHJvY2Vzc1xuICBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL2h0dHAnKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL3hocicpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0FjY2VwdCcpO1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIHBhcnNlSGVhZGVycyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9wYXJzZUhlYWRlcnMnKTtcbnZhciBpc1VSTFNhbWVPcmlnaW4gPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luJyk7XG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2NyZWF0ZUVycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKHJlcXVlc3REYXRhKSkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkIHx8ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGVcbiAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIWNvbmZpZy5yZXNwb25zZVR5cGUgfHwgY29uZmlnLnJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnID8gcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcigndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICB2YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG5cbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihjb25maWcudXJsKSkgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lID9cbiAgICAgICAgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSkgOlxuICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRXhwZWN0ZWQgRE9NRXhjZXB0aW9uIHRocm93biBieSBicm93c2VycyBub3QgY29tcGF0aWJsZSBYTUxIdHRwUmVxdWVzdCBMZXZlbCAyLlxuICAgICAgICAvLyBCdXQsIHRoaXMgY2FuIGJlIHN1cHByZXNzZWQgZm9yICdqc29uJyB0eXBlIGFzIGl0IGNhbiBiZSBwYXJzZWQgYnkgZGVmYXVsdCAndHJhbnNmb3JtUmVzcG9uc2UnIGZ1bmN0aW9uLlxuICAgICAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICogQHJldHVybnMge09iamVjdH0gTmV3IG9iamVjdCByZXN1bHRpbmcgZnJvbSBtZXJnaW5nIGNvbmZpZzIgdG8gY29uZmlnMVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1lcmdlQ29uZmlnKGNvbmZpZzEsIGNvbmZpZzIpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGNvbmZpZzIgPSBjb25maWcyIHx8IHt9O1xuICB2YXIgY29uZmlnID0ge307XG5cbiAgdXRpbHMuZm9yRWFjaChbJ3VybCcsICdtZXRob2QnLCAncGFyYW1zJywgJ2RhdGEnXSwgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2goWydoZWFkZXJzJywgJ2F1dGgnLCAncHJveHknXSwgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhwcm9wKSB7XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSB1dGlscy5kZWVwTWVyZ2UoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdChjb25maWcxW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gdXRpbHMuZGVlcE1lcmdlKGNvbmZpZzFbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZzFbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcxW3Byb3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChbXG4gICAgJ2Jhc2VVUkwnLCAndHJhbnNmb3JtUmVxdWVzdCcsICd0cmFuc2Zvcm1SZXNwb25zZScsICdwYXJhbXNTZXJpYWxpemVyJyxcbiAgICAndGltZW91dCcsICd3aXRoQ3JlZGVudGlhbHMnLCAnYWRhcHRlcicsICdyZXNwb25zZVR5cGUnLCAneHNyZkNvb2tpZU5hbWUnLFxuICAgICd4c3JmSGVhZGVyTmFtZScsICdvblVwbG9hZFByb2dyZXNzJywgJ29uRG93bmxvYWRQcm9ncmVzcycsICdtYXhDb250ZW50TGVuZ3RoJyxcbiAgICAndmFsaWRhdGVTdGF0dXMnLCAnbWF4UmVkaXJlY3RzJywgJ2h0dHBBZ2VudCcsICdodHRwc0FnZW50JywgJ2NhbmNlbFRva2VuJyxcbiAgICAnc29ja2V0UGF0aCdcbiAgXSwgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcxW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMVtwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBjb25maWc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG4iLCJ2YXIgY2FzdFBhdGggPSByZXF1aXJlKCcuL19jYXN0UGF0aCcpLFxuICAgIGlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9pc0FyZ3VtZW50cycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0luZGV4ID0gcmVxdWlyZSgnLi9faXNJbmRleCcpLFxuICAgIGlzTGVuZ3RoID0gcmVxdWlyZSgnLi9pc0xlbmd0aCcpLFxuICAgIHRvS2V5ID0gcmVxdWlyZSgnLi9fdG9LZXknKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHBhdGhgIGV4aXN0cyBvbiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYXNGdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjayBwcm9wZXJ0aWVzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzUGF0aChvYmplY3QsIHBhdGgsIGhhc0Z1bmMpIHtcbiAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKTtcbiAgICBpZiAoIShyZXN1bHQgPSBvYmplY3QgIT0gbnVsbCAmJiBoYXNGdW5jKG9iamVjdCwga2V5KSkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBvYmplY3QgPSBvYmplY3Rba2V5XTtcbiAgfVxuICBpZiAocmVzdWx0IHx8ICsraW5kZXggIT0gbGVuZ3RoKSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBsZW5ndGggPSBvYmplY3QgPT0gbnVsbCA/IDAgOiBvYmplY3QubGVuZ3RoO1xuICByZXR1cm4gISFsZW5ndGggJiYgaXNMZW5ndGgobGVuZ3RoKSAmJiBpc0luZGV4KGtleSwgbGVuZ3RoKSAmJlxuICAgIChpc0FycmF5KG9iamVjdCkgfHwgaXNBcmd1bWVudHMob2JqZWN0KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzUGF0aDtcbiIsInZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNLZXkgPSByZXF1aXJlKCcuL19pc0tleScpLFxuICAgIHN0cmluZ1RvUGF0aCA9IHJlcXVpcmUoJy4vX3N0cmluZ1RvUGF0aCcpLFxuICAgIHRvU3RyaW5nID0gcmVxdWlyZSgnLi90b1N0cmluZycpO1xuXG4vKipcbiAqIENhc3RzIGB2YWx1ZWAgdG8gYSBwYXRoIGFycmF5IGlmIGl0J3Mgbm90IG9uZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3QgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gY2FzdFBhdGgodmFsdWUsIG9iamVjdCkge1xuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIGlzS2V5KHZhbHVlLCBvYmplY3QpID8gW3ZhbHVlXSA6IHN0cmluZ1RvUGF0aCh0b1N0cmluZyh2YWx1ZSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhc3RQYXRoO1xuIiwiLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxubW9kdWxlLmV4cG9ydHMgPSBmcmVlR2xvYmFsO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oXyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGdW5jdGlvbjtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICovXG5mdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiAnJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1NvdXJjZTtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gKiBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheU1hcChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlNYXA7XG4iLCJ2YXIgYmFzZUlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9fYmFzZUlzQXJndW1lbnRzJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJndW1lbnRzID0gYmFzZUlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID8gYmFzZUlzQXJndW1lbnRzIDogZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcmd1bWVudHM7XG4iLCIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLiAqL1xudmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcblxuICByZXR1cm4gISFsZW5ndGggJiZcbiAgICAodHlwZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgKHR5cGUgIT0gJ3N5bWJvbCcgJiYgcmVJc1VpbnQudGVzdCh2YWx1ZSkpKSAmJlxuICAgICAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNJbmRleDtcbiIsInZhciBiYXNlQXNzaWduVmFsdWUgPSByZXF1aXJlKCcuL19iYXNlQXNzaWduVmFsdWUnKSxcbiAgICBlcSA9IHJlcXVpcmUoJy4vZXEnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBc3NpZ25zIGB2YWx1ZWAgdG8gYGtleWAgb2YgYG9iamVjdGAgaWYgdGhlIGV4aXN0aW5nIHZhbHVlIGlzIG5vdCBlcXVpdmFsZW50XG4gKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XTtcbiAgaWYgKCEoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYgZXEob2JqVmFsdWUsIHZhbHVlKSkgfHxcbiAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhc3NpZ25WYWx1ZTtcbiIsInZhciBiYXNlVGltZXMgPSByZXF1aXJlKCcuL19iYXNlVGltZXMnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vX2lzSW5kZXgnKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyKHZhbHVlKSxcbiAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpIDogW10sXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICgoaW5oZXJpdGVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aClcbiAgICAgICAgKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlMaWtlS2V5cztcbiIsInZhciBiYXNlSXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9fYmFzZUlzVHlwZWRBcnJheScpLFxuICAgIGJhc2VVbmFyeSA9IHJlcXVpcmUoJy4vX2Jhc2VVbmFyeScpLFxuICAgIG5vZGVVdGlsID0gcmVxdWlyZSgnLi9fbm9kZVV0aWwnKTtcblxuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbnZhciBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KG5ldyBVaW50OEFycmF5KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShbXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNUeXBlZEFycmF5ID0gbm9kZUlzVHlwZWRBcnJheSA/IGJhc2VVbmFyeShub2RlSXNUeXBlZEFycmF5KSA6IGJhc2VJc1R5cGVkQXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNUeXBlZEFycmF5O1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb3ZlckFyZztcbiIsInZhciBhcnJheUxpa2VLZXlzID0gcmVxdWlyZSgnLi9fYXJyYXlMaWtlS2V5cycpLFxuICAgIGJhc2VLZXlzSW4gPSByZXF1aXJlKCcuL19iYXNlS2V5c0luJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmtleXNJbihuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJywgJ2MnXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICovXG5mdW5jdGlvbiBrZXlzSW4ob2JqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QsIHRydWUpIDogYmFzZUtleXNJbihvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleXNJbjtcbiIsIi8qKlxuICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgYHNvdXJjZWAgdG8gYGFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gc291cmNlIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyBmcm9tLlxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5PVtdXSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgdG8uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gY29weUFycmF5KHNvdXJjZSwgYXJyYXkpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBzb3VyY2UubGVuZ3RoO1xuXG4gIGFycmF5IHx8IChhcnJheSA9IEFycmF5KGxlbmd0aCkpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFycmF5W2luZGV4XSA9IHNvdXJjZVtpbmRleF07XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcHlBcnJheTtcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgYXJyYXlzID0gXy50aW1lcygyLCBfLnN0dWJBcnJheSk7XG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzKTtcbiAqIC8vID0+IFtbXSwgW11dXG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzWzBdID09PSBhcnJheXNbMV0pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gc3R1YkFycmF5KCkge1xuICByZXR1cm4gW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R1YkFycmF5O1xuIiwidmFyIGFycmF5UHVzaCA9IHJlcXVpcmUoJy4vX2FycmF5UHVzaCcpLFxuICAgIGdldFByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2dldFByb3RvdHlwZScpLFxuICAgIGdldFN5bWJvbHMgPSByZXF1aXJlKCcuL19nZXRTeW1ib2xzJyksXG4gICAgc3R1YkFycmF5ID0gcmVxdWlyZSgnLi9zdHViQXJyYXknKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUdldFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICovXG52YXIgZ2V0U3ltYm9sc0luID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB3aGlsZSAob2JqZWN0KSB7XG4gICAgYXJyYXlQdXNoKHJlc3VsdCwgZ2V0U3ltYm9scyhvYmplY3QpKTtcbiAgICBvYmplY3QgPSBnZXRQcm90b3R5cGUob2JqZWN0KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRTeW1ib2xzSW47XG4iLCIvKipcbiAqIEFwcGVuZHMgdGhlIGVsZW1lbnRzIG9mIGB2YWx1ZXNgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhcHBlbmQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlQdXNoKGFycmF5LCB2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgb2Zmc2V0ID0gYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYXJyYXlbb2Zmc2V0ICsgaW5kZXhdID0gdmFsdWVzW2luZGV4XTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlQdXNoO1xuIiwidmFyIG92ZXJBcmcgPSByZXF1aXJlKCcuL19vdmVyQXJnJyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIGdldFByb3RvdHlwZSA9IG92ZXJBcmcoT2JqZWN0LmdldFByb3RvdHlwZU9mLCBPYmplY3QpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFByb3RvdHlwZTtcbiIsInZhciBiYXNlR2V0QWxsS2V5cyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRBbGxLZXlzJyksXG4gICAgZ2V0U3ltYm9scyA9IHJlcXVpcmUoJy4vX2dldFN5bWJvbHMnKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gZ2V0QWxsS2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5cywgZ2V0U3ltYm9scyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QWxsS2V5cztcbiIsInZhciBhcnJheVB1c2ggPSByZXF1aXJlKCcuL19hcnJheVB1c2gnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldEFsbEtleXNgIGFuZCBgZ2V0QWxsS2V5c0luYCB3aGljaCB1c2VzXG4gKiBga2V5c0Z1bmNgIGFuZCBgc3ltYm9sc0Z1bmNgIHRvIGdldCB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzeW1ib2xzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzRnVuYywgc3ltYm9sc0Z1bmMpIHtcbiAgdmFyIHJlc3VsdCA9IGtleXNGdW5jKG9iamVjdCk7XG4gIHJldHVybiBpc0FycmF5KG9iamVjdCkgPyByZXN1bHQgOiBhcnJheVB1c2gocmVzdWx0LCBzeW1ib2xzRnVuYyhvYmplY3QpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlR2V0QWxsS2V5cztcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBVaW50OEFycmF5ID0gcm9vdC5VaW50OEFycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVpbnQ4QXJyYXk7XG4iLCIvKipcbiAqIENvbnZlcnRzIGBtYXBgIHRvIGl0cyBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gKi9cbmZ1bmN0aW9uIG1hcFRvQXJyYXkobWFwKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobWFwLnNpemUpO1xuXG4gIG1hcC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSBba2V5LCB2YWx1ZV07XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcFRvQXJyYXk7XG4iLCIvKipcbiAqIENvbnZlcnRzIGBzZXRgIHRvIGFuIGFycmF5IG9mIGl0cyB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIHNldFRvQXJyYXkoc2V0KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldFRvQXJyYXk7XG4iLCJ2YXIgYXNjaWlUb0FycmF5ID0gcmVxdWlyZSgnLi9fYXNjaWlUb0FycmF5JyksXG4gICAgaGFzVW5pY29kZSA9IHJlcXVpcmUoJy4vX2hhc1VuaWNvZGUnKSxcbiAgICB1bmljb2RlVG9BcnJheSA9IHJlcXVpcmUoJy4vX3VuaWNvZGVUb0FycmF5Jyk7XG5cbi8qKlxuICogQ29udmVydHMgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHN0cmluZ1RvQXJyYXkoc3RyaW5nKSB7XG4gIHJldHVybiBoYXNVbmljb2RlKHN0cmluZylcbiAgICA/IHVuaWNvZGVUb0FycmF5KHN0cmluZylcbiAgICA6IGFzY2lpVG9BcnJheShzdHJpbmcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0cmluZ1RvQXJyYXk7XG4iLCIvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2hhcmFjdGVyIGNsYXNzZXMuICovXG52YXIgcnNBc3RyYWxSYW5nZSA9ICdcXFxcdWQ4MDAtXFxcXHVkZmZmJyxcbiAgICByc0NvbWJvTWFya3NSYW5nZSA9ICdcXFxcdTAzMDAtXFxcXHUwMzZmJyxcbiAgICByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgPSAnXFxcXHVmZTIwLVxcXFx1ZmUyZicsXG4gICAgcnNDb21ib1N5bWJvbHNSYW5nZSA9ICdcXFxcdTIwZDAtXFxcXHUyMGZmJyxcbiAgICByc0NvbWJvUmFuZ2UgPSByc0NvbWJvTWFya3NSYW5nZSArIHJlQ29tYm9IYWxmTWFya3NSYW5nZSArIHJzQ29tYm9TeW1ib2xzUmFuZ2UsXG4gICAgcnNWYXJSYW5nZSA9ICdcXFxcdWZlMGVcXFxcdWZlMGYnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG52YXIgcnNaV0ogPSAnXFxcXHUyMDBkJztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IHN0cmluZ3Mgd2l0aCBbemVyby13aWR0aCBqb2luZXJzIG9yIGNvZGUgcG9pbnRzIGZyb20gdGhlIGFzdHJhbCBwbGFuZXNdKGh0dHA6Ly9lZXYuZWUvYmxvZy8yMDE1LzA5LzEyL2RhcmstY29ybmVycy1vZi11bmljb2RlLykuICovXG52YXIgcmVIYXNVbmljb2RlID0gUmVnRXhwKCdbJyArIHJzWldKICsgcnNBc3RyYWxSYW5nZSAgKyByc0NvbWJvUmFuZ2UgKyByc1ZhclJhbmdlICsgJ10nKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHN0cmluZ2AgY29udGFpbnMgVW5pY29kZSBzeW1ib2xzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhIHN5bWJvbCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNVbmljb2RlKHN0cmluZykge1xuICByZXR1cm4gcmVIYXNVbmljb2RlLnRlc3Qoc3RyaW5nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNVbmljb2RlO1xuIiwiZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2U7IiwiLyoganNoaW50IG5vZGU6IHRydWUgKi9cclxuXCJ1c2Ugc3RyaWN0XCI7XHJcbmZ1bmN0aW9uIG1ha2VBcnJheUZyb20ob2JqKSB7XHJcbiAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShvYmopO1xyXG59XHJcbnZhclxyXG4gIFBFTkRJTkcgPSBcInBlbmRpbmdcIixcclxuICBSRVNPTFZFRCA9IFwicmVzb2x2ZWRcIixcclxuICBSRUpFQ1RFRCA9IFwicmVqZWN0ZWRcIjtcclxuXHJcbmZ1bmN0aW9uIFN5bmNocm9ub3VzUHJvbWlzZShoYW5kbGVyKSB7XHJcbiAgdGhpcy5zdGF0dXMgPSBQRU5ESU5HO1xyXG4gIHRoaXMuX2NvbnRpbnVhdGlvbnMgPSBbXTtcclxuICB0aGlzLl9wYXJlbnQgPSBudWxsO1xyXG4gIHRoaXMuX3BhdXNlZCA9IGZhbHNlO1xyXG4gIGlmIChoYW5kbGVyKSB7XHJcbiAgICBoYW5kbGVyLmNhbGwoXHJcbiAgICAgIHRoaXMsXHJcbiAgICAgIHRoaXMuX2NvbnRpbnVlV2l0aC5iaW5kKHRoaXMpLFxyXG4gICAgICB0aGlzLl9mYWlsV2l0aC5iaW5kKHRoaXMpXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gbG9va3NMaWtlQVByb21pc2Uob2JqKSB7XHJcbiAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgKG9iai50aGVuKSA9PT0gXCJmdW5jdGlvblwiO1xyXG59XHJcblxyXG5TeW5jaHJvbm91c1Byb21pc2UucHJvdG90eXBlID0ge1xyXG4gIHRoZW46IGZ1bmN0aW9uIChuZXh0Rm4sIGNhdGNoRm4pIHtcclxuICAgIHZhciBuZXh0ID0gU3luY2hyb25vdXNQcm9taXNlLnVucmVzb2x2ZWQoKS5fc2V0UGFyZW50KHRoaXMpO1xyXG4gICAgaWYgKHRoaXMuX2lzUmVqZWN0ZWQoKSkge1xyXG4gICAgICBpZiAodGhpcy5fcGF1c2VkKSB7XHJcbiAgICAgICAgdGhpcy5fY29udGludWF0aW9ucy5wdXNoKHtcclxuICAgICAgICAgIHByb21pc2U6IG5leHQsXHJcbiAgICAgICAgICBuZXh0Rm46IG5leHRGbixcclxuICAgICAgICAgIGNhdGNoRm46IGNhdGNoRm5cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gbmV4dDtcclxuICAgICAgfVxyXG4gICAgICBpZiAoY2F0Y2hGbikge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICB2YXIgY2F0Y2hSZXN1bHQgPSBjYXRjaEZuKHRoaXMuX2Vycm9yKTtcclxuICAgICAgICAgIGlmIChsb29rc0xpa2VBUHJvbWlzZShjYXRjaFJlc3VsdCkpIHtcclxuICAgICAgICAgICAgdGhpcy5fY2hhaW5Qcm9taXNlRGF0YShjYXRjaFJlc3VsdCwgbmV4dCk7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXh0O1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIFN5bmNocm9ub3VzUHJvbWlzZS5yZXNvbHZlKGNhdGNoUmVzdWx0KS5fc2V0UGFyZW50KHRoaXMpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgIHJldHVybiBTeW5jaHJvbm91c1Byb21pc2UucmVqZWN0KGUpLl9zZXRQYXJlbnQodGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBTeW5jaHJvbm91c1Byb21pc2UucmVqZWN0KHRoaXMuX2Vycm9yKS5fc2V0UGFyZW50KHRoaXMpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5fY29udGludWF0aW9ucy5wdXNoKHtcclxuICAgICAgcHJvbWlzZTogbmV4dCxcclxuICAgICAgbmV4dEZuOiBuZXh0Rm4sXHJcbiAgICAgIGNhdGNoRm46IGNhdGNoRm5cclxuICAgIH0pO1xyXG4gICAgdGhpcy5fcnVuUmVzb2x1dGlvbnMoKTtcclxuICAgIHJldHVybiBuZXh0O1xyXG4gIH0sXHJcbiAgY2F0Y2g6IGZ1bmN0aW9uIChoYW5kbGVyKSB7XHJcbiAgICBpZiAodGhpcy5faXNSZXNvbHZlZCgpKSB7XHJcbiAgICAgIHJldHVybiBTeW5jaHJvbm91c1Byb21pc2UucmVzb2x2ZSh0aGlzLl9kYXRhKS5fc2V0UGFyZW50KHRoaXMpO1xyXG4gICAgfVxyXG4gICAgdmFyIG5leHQgPSBTeW5jaHJvbm91c1Byb21pc2UudW5yZXNvbHZlZCgpLl9zZXRQYXJlbnQodGhpcyk7XHJcbiAgICB0aGlzLl9jb250aW51YXRpb25zLnB1c2goe1xyXG4gICAgICBwcm9taXNlOiBuZXh0LFxyXG4gICAgICBjYXRjaEZuOiBoYW5kbGVyXHJcbiAgICB9KTtcclxuICAgIHRoaXMuX3J1blJlamVjdGlvbnMoKTtcclxuICAgIHJldHVybiBuZXh0O1xyXG4gIH0sXHJcbiAgZmluYWxseTogZnVuY3Rpb24oY2FsbGJhY2spIHtcclxuICAgIHZhciByYW4gPSBmYWxzZTtcclxuICAgIGZ1bmN0aW9uIHJ1bkZpbmFsbHkoKSB7XHJcbiAgICAgIGlmICghcmFuKSB7XHJcbiAgICAgICAgcmFuID0gdHJ1ZTtcclxuICAgICAgICByZXR1cm4gY2FsbGJhY2soKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMudGhlbihydW5GaW5hbGx5KVxyXG4gICAgICAuY2F0Y2gocnVuRmluYWxseSk7XHJcbiAgfSxcclxuICBwYXVzZTogZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5fcGF1c2VkID0gdHJ1ZTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH0sXHJcbiAgcmVzdW1lOiBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZmlyc3RQYXVzZWQgPSB0aGlzLl9maW5kRmlyc3RQYXVzZWQoKTtcclxuICAgIGlmIChmaXJzdFBhdXNlZCkge1xyXG4gICAgICBmaXJzdFBhdXNlZC5fcGF1c2VkID0gZmFsc2U7XHJcbiAgICAgIGZpcnN0UGF1c2VkLl9ydW5SZXNvbHV0aW9ucygpO1xyXG4gICAgICBmaXJzdFBhdXNlZC5fcnVuUmVqZWN0aW9ucygpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfSxcclxuICBfZmluZEFuY2VzdHJ5OiBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fY29udGludWF0aW9ucy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgY3VyKSB7XHJcbiAgICAgIGlmIChjdXIucHJvbWlzZSkge1xyXG4gICAgICAgIHZhciBub2RlID0ge1xyXG4gICAgICAgICAgcHJvbWlzZTogY3VyLnByb21pc2UsXHJcbiAgICAgICAgICBjaGlsZHJlbjogY3VyLnByb21pc2UuX2ZpbmRBbmNlc3RyeSgpXHJcbiAgICAgICAgfTtcclxuICAgICAgICBhY2MucHVzaChub2RlKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gYWNjO1xyXG4gICAgfSwgW10pO1xyXG4gIH0sXHJcbiAgX3NldFBhcmVudDogZnVuY3Rpb24gKHBhcmVudCkge1xyXG4gICAgaWYgKHRoaXMuX3BhcmVudCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJwYXJlbnQgYWxyZWFkeSBzZXRcIik7XHJcbiAgICB9XHJcbiAgICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9LFxyXG4gIF9jb250aW51ZVdpdGg6IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICB2YXIgZmlyc3RQZW5kaW5nID0gdGhpcy5fZmluZEZpcnN0UGVuZGluZygpO1xyXG4gICAgaWYgKGZpcnN0UGVuZGluZykge1xyXG4gICAgICBmaXJzdFBlbmRpbmcuX2RhdGEgPSBkYXRhO1xyXG4gICAgICBmaXJzdFBlbmRpbmcuX3NldFJlc29sdmVkKCk7XHJcbiAgICB9XHJcbiAgfSxcclxuICBfZmluZEZpcnN0UGVuZGluZzogZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2ZpbmRGaXJzdEFuY2VzdG9yKGZ1bmN0aW9uICh0ZXN0KSB7XHJcbiAgICAgIHJldHVybiB0ZXN0Ll9pc1BlbmRpbmcgJiYgdGVzdC5faXNQZW5kaW5nKCk7XHJcbiAgICB9KTtcclxuICB9LFxyXG4gIF9maW5kRmlyc3RQYXVzZWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiB0aGlzLl9maW5kRmlyc3RBbmNlc3RvcihmdW5jdGlvbiAodGVzdCkge1xyXG4gICAgICByZXR1cm4gdGVzdC5fcGF1c2VkO1xyXG4gICAgfSk7XHJcbiAgfSxcclxuICBfZmluZEZpcnN0QW5jZXN0b3I6IGZ1bmN0aW9uIChtYXRjaGluZykge1xyXG4gICAgdmFyIHRlc3QgPSB0aGlzO1xyXG4gICAgdmFyIHJlc3VsdDtcclxuICAgIHdoaWxlICh0ZXN0KSB7XHJcbiAgICAgIGlmIChtYXRjaGluZyh0ZXN0KSkge1xyXG4gICAgICAgIHJlc3VsdCA9IHRlc3Q7XHJcbiAgICAgIH1cclxuICAgICAgdGVzdCA9IHRlc3QuX3BhcmVudDtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfSxcclxuICBfZmFpbFdpdGg6IGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgdmFyIGZpcnN0UmVqZWN0ZWQgPSB0aGlzLl9maW5kRmlyc3RQZW5kaW5nKCk7XHJcbiAgICBpZiAoZmlyc3RSZWplY3RlZCkge1xyXG4gICAgICBmaXJzdFJlamVjdGVkLl9lcnJvciA9IGVycm9yO1xyXG4gICAgICBmaXJzdFJlamVjdGVkLl9zZXRSZWplY3RlZCgpO1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgX3Rha2VDb250aW51YXRpb25zOiBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fY29udGludWF0aW9ucy5zcGxpY2UoMCwgdGhpcy5fY29udGludWF0aW9ucy5sZW5ndGgpO1xyXG4gIH0sXHJcbiAgX3J1blJlamVjdGlvbnM6IGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICh0aGlzLl9wYXVzZWQgfHwgIXRoaXMuX2lzUmVqZWN0ZWQoKSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB2YXJcclxuICAgICAgZXJyb3IgPSB0aGlzLl9lcnJvcixcclxuICAgICAgY29udGludWF0aW9ucyA9IHRoaXMuX3Rha2VDb250aW51YXRpb25zKCksXHJcbiAgICAgIHNlbGYgPSB0aGlzO1xyXG4gICAgY29udGludWF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChjb250KSB7XHJcbiAgICAgIGlmIChjb250LmNhdGNoRm4pIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgdmFyIGNhdGNoUmVzdWx0ID0gY29udC5jYXRjaEZuKGVycm9yKTtcclxuICAgICAgICAgIHNlbGYuX2hhbmRsZVVzZXJGdW5jdGlvblJlc3VsdChjYXRjaFJlc3VsdCwgY29udC5wcm9taXNlKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICB2YXIgbWVzc2FnZSA9IGUubWVzc2FnZTtcclxuICAgICAgICAgIGNvbnQucHJvbWlzZS5yZWplY3QoZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnQucHJvbWlzZS5yZWplY3QoZXJyb3IpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9LFxyXG4gIF9ydW5SZXNvbHV0aW9uczogZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKHRoaXMuX3BhdXNlZCB8fCAhdGhpcy5faXNSZXNvbHZlZCgpIHx8IHRoaXMuX2lzUGVuZGluZygpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHZhciBjb250aW51YXRpb25zID0gdGhpcy5fdGFrZUNvbnRpbnVhdGlvbnMoKTtcclxuICAgIGlmIChsb29rc0xpa2VBUHJvbWlzZSh0aGlzLl9kYXRhKSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5faGFuZGxlV2hlblJlc29sdmVkRGF0YUlzUHJvbWlzZSh0aGlzLl9kYXRhKTtcclxuICAgIH1cclxuICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YTtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIGNvbnRpbnVhdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoY29udCkge1xyXG4gICAgICBpZiAoY29udC5uZXh0Rm4pIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGNvbnQubmV4dEZuKGRhdGEpO1xyXG4gICAgICAgICAgc2VsZi5faGFuZGxlVXNlckZ1bmN0aW9uUmVzdWx0KHJlc3VsdCwgY29udC5wcm9taXNlKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICBzZWxmLl9oYW5kbGVSZXNvbHV0aW9uRXJyb3IoZSwgY29udCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2UgaWYgKGNvbnQucHJvbWlzZSkge1xyXG4gICAgICAgIGNvbnQucHJvbWlzZS5yZXNvbHZlKGRhdGEpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9LFxyXG4gIF9oYW5kbGVSZXNvbHV0aW9uRXJyb3I6IGZ1bmN0aW9uIChlLCBjb250aW51YXRpb24pIHtcclxuICAgIHRoaXMuX3NldFJlamVjdGVkKCk7XHJcbiAgICBpZiAoY29udGludWF0aW9uLmNhdGNoRm4pIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb250aW51YXRpb24uY2F0Y2hGbihlKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH0gY2F0Y2ggKGUyKSB7XHJcbiAgICAgICAgZSA9IGUyO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoY29udGludWF0aW9uLnByb21pc2UpIHtcclxuICAgICAgY29udGludWF0aW9uLnByb21pc2UucmVqZWN0KGUpO1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgX2hhbmRsZVdoZW5SZXNvbHZlZERhdGFJc1Byb21pc2U6IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICByZXR1cm4gZGF0YS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgc2VsZi5fZGF0YSA9IHJlc3VsdDtcclxuICAgICAgc2VsZi5fcnVuUmVzb2x1dGlvbnMoKTtcclxuICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICBzZWxmLl9lcnJvciA9IGVycm9yO1xyXG4gICAgICBzZWxmLl9zZXRSZWplY3RlZCgpO1xyXG4gICAgICBzZWxmLl9ydW5SZWplY3Rpb25zKCk7XHJcbiAgICB9KTtcclxuICB9LFxyXG4gIF9oYW5kbGVVc2VyRnVuY3Rpb25SZXN1bHQ6IGZ1bmN0aW9uIChkYXRhLCBuZXh0U3luY2hyb25vdXNQcm9taXNlKSB7XHJcbiAgICBpZiAobG9va3NMaWtlQVByb21pc2UoZGF0YSkpIHtcclxuICAgICAgdGhpcy5fY2hhaW5Qcm9taXNlRGF0YShkYXRhLCBuZXh0U3luY2hyb25vdXNQcm9taXNlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG5leHRTeW5jaHJvbm91c1Byb21pc2UucmVzb2x2ZShkYXRhKTtcclxuICAgIH1cclxuICB9LFxyXG4gIF9jaGFpblByb21pc2VEYXRhOiBmdW5jdGlvbiAocHJvbWlzZURhdGEsIG5leHRTeW5jaHJvbm91c1Byb21pc2UpIHtcclxuICAgIHByb21pc2VEYXRhLnRoZW4oZnVuY3Rpb24gKG5ld0RhdGEpIHtcclxuICAgICAgbmV4dFN5bmNocm9ub3VzUHJvbWlzZS5yZXNvbHZlKG5ld0RhdGEpO1xyXG4gICAgfSkuY2F0Y2goZnVuY3Rpb24gKG5ld0Vycm9yKSB7XHJcbiAgICAgIG5leHRTeW5jaHJvbm91c1Byb21pc2UucmVqZWN0KG5ld0Vycm9yKTtcclxuICAgIH0pO1xyXG4gIH0sXHJcbiAgX3NldFJlc29sdmVkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLnN0YXR1cyA9IFJFU09MVkVEO1xyXG4gICAgaWYgKCF0aGlzLl9wYXVzZWQpIHtcclxuICAgICAgdGhpcy5fcnVuUmVzb2x1dGlvbnMoKTtcclxuICAgIH1cclxuICB9LFxyXG4gIF9zZXRSZWplY3RlZDogZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5zdGF0dXMgPSBSRUpFQ1RFRDtcclxuICAgIGlmICghdGhpcy5fcGF1c2VkKSB7XHJcbiAgICAgIHRoaXMuX3J1blJlamVjdGlvbnMoKTtcclxuICAgIH1cclxuICB9LFxyXG4gIF9pc1BlbmRpbmc6IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiB0aGlzLnN0YXR1cyA9PT0gUEVORElORztcclxuICB9LFxyXG4gIF9pc1Jlc29sdmVkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zdGF0dXMgPT09IFJFU09MVkVEO1xyXG4gIH0sXHJcbiAgX2lzUmVqZWN0ZWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiB0aGlzLnN0YXR1cyA9PT0gUkVKRUNURUQ7XHJcbiAgfVxyXG59O1xyXG5cclxuU3luY2hyb25vdXNQcm9taXNlLnJlc29sdmUgPSBmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgcmV0dXJuIG5ldyBTeW5jaHJvbm91c1Byb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgaWYgKGxvb2tzTGlrZUFQcm9taXNlKHJlc3VsdCkpIHtcclxuICAgICAgcmVzdWx0LnRoZW4oZnVuY3Rpb24gKG5ld1Jlc3VsdCkge1xyXG4gICAgICAgIHJlc29sdmUobmV3UmVzdWx0KTtcclxuICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXNvbHZlKHJlc3VsdCk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn07XHJcblxyXG5TeW5jaHJvbm91c1Byb21pc2UucmVqZWN0ID0gZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gIHJldHVybiBuZXcgU3luY2hyb25vdXNQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgIHJlamVjdChyZXN1bHQpO1xyXG4gIH0pO1xyXG59O1xyXG5cclxuU3luY2hyb25vdXNQcm9taXNlLnVucmVzb2x2ZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgcmV0dXJuIG5ldyBTeW5jaHJvbm91c1Byb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgdGhpcy5yZXNvbHZlID0gcmVzb2x2ZTtcclxuICAgIHRoaXMucmVqZWN0ID0gcmVqZWN0O1xyXG4gIH0pO1xyXG59O1xyXG5cclxuU3luY2hyb25vdXNQcm9taXNlLmFsbCA9IGZ1bmN0aW9uICgpIHtcclxuICB2YXIgYXJncyA9IG1ha2VBcnJheUZyb20oYXJndW1lbnRzKTtcclxuICBpZiAoQXJyYXkuaXNBcnJheShhcmdzWzBdKSkge1xyXG4gICAgYXJncyA9IGFyZ3NbMF07XHJcbiAgfVxyXG4gIGlmICghYXJncy5sZW5ndGgpIHtcclxuICAgIHJldHVybiBTeW5jaHJvbm91c1Byb21pc2UucmVzb2x2ZShbXSk7XHJcbiAgfVxyXG4gIHJldHVybiBuZXcgU3luY2hyb25vdXNQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgIHZhclxyXG4gICAgICBhbGxEYXRhID0gW10sXHJcbiAgICAgIG51bVJlc29sdmVkID0gMCxcclxuICAgICAgZG9SZXNvbHZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmIChudW1SZXNvbHZlZCA9PT0gYXJncy5sZW5ndGgpIHtcclxuICAgICAgICAgIHJlc29sdmUoYWxsRGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICByZWplY3RlZCA9IGZhbHNlLFxyXG4gICAgICBkb1JlamVjdCA9IGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICBpZiAocmVqZWN0ZWQpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVqZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICB9O1xyXG4gICAgYXJncy5mb3JFYWNoKGZ1bmN0aW9uIChhcmcsIGlkeCkge1xyXG4gICAgICBTeW5jaHJvbm91c1Byb21pc2UucmVzb2x2ZShhcmcpLnRoZW4oZnVuY3Rpb24gKHRoaXNSZXN1bHQpIHtcclxuICAgICAgICBhbGxEYXRhW2lkeF0gPSB0aGlzUmVzdWx0O1xyXG4gICAgICAgIG51bVJlc29sdmVkICs9IDE7XHJcbiAgICAgICAgZG9SZXNvbHZlKCk7XHJcbiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICBkb1JlamVjdChlcnIpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59O1xyXG5cclxuLyoganNoaW50IGlnbm9yZTpzdGFydCAqL1xyXG5pZiAoUHJvbWlzZSA9PT0gU3luY2hyb25vdXNQcm9taXNlKSB7XHJcbiAgdGhyb3cgbmV3IEVycm9yKFwiUGxlYXNlIHVzZSBTeW5jaHJvbm91c1Byb21pc2UuaW5zdGFsbEdsb2JhbGx5KCkgdG8gaW5zdGFsbCBnbG9iYWxseVwiKTtcclxufVxyXG52YXIgUmVhbFByb21pc2UgPSBQcm9taXNlO1xyXG5TeW5jaHJvbm91c1Byb21pc2UuaW5zdGFsbEdsb2JhbGx5ID0gZnVuY3Rpb24oX19hd2FpdGVyKSB7XHJcbiAgaWYgKFByb21pc2UgPT09IFN5bmNocm9ub3VzUHJvbWlzZSkge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcjtcclxuICB9XHJcbiAgdmFyIHJlc3VsdCA9IHBhdGNoQXdhaXRlcklmUmVxdWlyZWQoX19hd2FpdGVyKTtcclxuICBQcm9taXNlID0gU3luY2hyb25vdXNQcm9taXNlO1xyXG4gIHJldHVybiByZXN1bHQ7XHJcbn07XHJcblxyXG5TeW5jaHJvbm91c1Byb21pc2UudW5pbnN0YWxsR2xvYmFsbHkgPSBmdW5jdGlvbigpIHtcclxuICBpZiAoUHJvbWlzZSA9PT0gU3luY2hyb25vdXNQcm9taXNlKSB7XHJcbiAgICBQcm9taXNlID0gUmVhbFByb21pc2U7XHJcbiAgfVxyXG59O1xyXG5cclxuZnVuY3Rpb24gcGF0Y2hBd2FpdGVySWZSZXF1aXJlZChfX2F3YWl0ZXIpIHtcclxuICBpZiAodHlwZW9mKF9fYXdhaXRlcikgPT09IFwidW5kZWZpbmVkXCIgfHwgX19hd2FpdGVyLl9fcGF0Y2hlZCkge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcjtcclxuICB9XHJcbiAgdmFyIG9yaWdpbmFsQXdhaXRlciA9IF9fYXdhaXRlcjtcclxuICBfX2F3YWl0ZXIgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBQcm9taXNlID0gUmVhbFByb21pc2U7XHJcbiAgICBvcmlnaW5hbEF3YWl0ZXIuYXBwbHkodGhpcywgbWFrZUFycmF5RnJvbShhcmd1bWVudHMpKTtcclxuICB9O1xyXG4gIF9fYXdhaXRlci5fX3BhdGNoZWQgPSB0cnVlO1xyXG4gIHJldHVybiBfX2F3YWl0ZXI7XHJcbn1cclxuLyoganNoaW50IGlnbm9yZTplbmQgKi9cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIFN5bmNocm9ub3VzUHJvbWlzZTogU3luY2hyb25vdXNQcm9taXNlXHJcbn07XHJcbiIsInZhciBiYXNlQXNzaWduVmFsdWUgPSByZXF1aXJlKCcuL19iYXNlQXNzaWduVmFsdWUnKSxcbiAgICBiYXNlRm9yT3duID0gcmVxdWlyZSgnLi9fYmFzZUZvck93bicpLFxuICAgIGJhc2VJdGVyYXRlZSA9IHJlcXVpcmUoJy4vX2Jhc2VJdGVyYXRlZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUga2V5cyBhcyBgb2JqZWN0YCBhbmQgdmFsdWVzIGdlbmVyYXRlZFxuICogYnkgcnVubmluZyBlYWNoIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YCB0aHJ1XG4gKiBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAqICh2YWx1ZSwga2V5LCBvYmplY3QpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgb2JqZWN0LlxuICogQHNlZSBfLm1hcEtleXNcbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIHVzZXJzID0ge1xuICogICAnZnJlZCc6ICAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCB9LFxuICogICAncGViYmxlcyc6IHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxIH1cbiAqIH07XG4gKlxuICogXy5tYXBWYWx1ZXModXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlOyB9KTtcbiAqIC8vID0+IHsgJ2ZyZWQnOiA0MCwgJ3BlYmJsZXMnOiAxIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqXG4gKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8ubWFwVmFsdWVzKHVzZXJzLCAnYWdlJyk7XG4gKiAvLyA9PiB7ICdmcmVkJzogNDAsICdwZWJibGVzJzogMSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKi9cbmZ1bmN0aW9uIG1hcFZhbHVlcyhvYmplY3QsIGl0ZXJhdGVlKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgaXRlcmF0ZWUgPSBiYXNlSXRlcmF0ZWUoaXRlcmF0ZWUsIDMpO1xuXG4gIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGl0ZXJhdGVlKHZhbHVlLCBrZXksIG9iamVjdCkpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBWYWx1ZXM7XG4iLCJ2YXIgYmFzZUZvciA9IHJlcXVpcmUoJy4vX2Jhc2VGb3InKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gYmFzZUZvck93bihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gIHJldHVybiBvYmplY3QgJiYgYmFzZUZvcihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRm9yT3duO1xuIiwidmFyIGJhc2VNYXRjaGVzID0gcmVxdWlyZSgnLi9fYmFzZU1hdGNoZXMnKSxcbiAgICBiYXNlTWF0Y2hlc1Byb3BlcnR5ID0gcmVxdWlyZSgnLi9fYmFzZU1hdGNoZXNQcm9wZXJ0eScpLFxuICAgIGlkZW50aXR5ID0gcmVxdWlyZSgnLi9pZGVudGl0eScpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBwcm9wZXJ0eSA9IHJlcXVpcmUoJy4vcHJvcGVydHknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pdGVyYXRlZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gW3ZhbHVlPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGFuIGl0ZXJhdGVlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBpdGVyYXRlZS5cbiAqL1xuZnVuY3Rpb24gYmFzZUl0ZXJhdGVlKHZhbHVlKSB7XG4gIC8vIERvbid0IHN0b3JlIHRoZSBgdHlwZW9mYCByZXN1bHQgaW4gYSB2YXJpYWJsZSB0byBhdm9pZCBhIEpJVCBidWcgaW4gU2FmYXJpIDkuXG4gIC8vIFNlZSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTU2MDM0IGZvciBtb3JlIGRldGFpbHMuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBpZGVudGl0eTtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpXG4gICAgICA/IGJhc2VNYXRjaGVzUHJvcGVydHkodmFsdWVbMF0sIHZhbHVlWzFdKVxuICAgICAgOiBiYXNlTWF0Y2hlcyh2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHByb3BlcnR5KHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXRlcmF0ZWU7XG4iLCJ2YXIgYmFzZUlzRXF1YWxEZWVwID0gcmVxdWlyZSgnLi9fYmFzZUlzRXF1YWxEZWVwJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0VxdWFsYCB3aGljaCBzdXBwb3J0cyBwYXJ0aWFsIGNvbXBhcmlzb25zXG4gKiBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAqICAxIC0gVW5vcmRlcmVkIGNvbXBhcmlzb25cbiAqICAyIC0gUGFydGlhbCBjb21wYXJpc29uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYHZhbHVlYCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykge1xuICBpZiAodmFsdWUgPT09IG90aGVyKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwgfHwgb3RoZXIgPT0gbnVsbCB8fCAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzT2JqZWN0TGlrZShvdGhlcikpKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXI7XG4gIH1cbiAgcmV0dXJuIGJhc2VJc0VxdWFsRGVlcCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGJhc2VJc0VxdWFsLCBzdGFjayk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzRXF1YWw7XG4iLCJ2YXIgU2V0Q2FjaGUgPSByZXF1aXJlKCcuL19TZXRDYWNoZScpLFxuICAgIGFycmF5U29tZSA9IHJlcXVpcmUoJy4vX2FycmF5U29tZScpLFxuICAgIGNhY2hlSGFzID0gcmVxdWlyZSgnLi9fY2FjaGVIYXMnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgYXJyYXlzIHdpdGggc3VwcG9ydCBmb3JcbiAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge0FycmF5fSBvdGhlciBUaGUgb3RoZXIgYXJyYXkgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYGFycmF5YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcnJheXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxBcnJheXMoYXJyYXksIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICBvdGhMZW5ndGggPSBvdGhlci5sZW5ndGg7XG5cbiAgaWYgKGFyckxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIShpc1BhcnRpYWwgJiYgb3RoTGVuZ3RoID4gYXJyTGVuZ3RoKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KGFycmF5KTtcbiAgaWYgKHN0YWNrZWQgJiYgc3RhY2suZ2V0KG90aGVyKSkge1xuICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICB9XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gdHJ1ZSxcbiAgICAgIHNlZW4gPSAoYml0bWFzayAmIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpID8gbmV3IFNldENhY2hlIDogdW5kZWZpbmVkO1xuXG4gIHN0YWNrLnNldChhcnJheSwgb3RoZXIpO1xuICBzdGFjay5zZXQob3RoZXIsIGFycmF5KTtcblxuICAvLyBJZ25vcmUgbm9uLWluZGV4IHByb3BlcnRpZXMuXG4gIHdoaWxlICgrK2luZGV4IDwgYXJyTGVuZ3RoKSB7XG4gICAgdmFyIGFyclZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2luZGV4XTtcblxuICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBhcnJWYWx1ZSwgaW5kZXgsIG90aGVyLCBhcnJheSwgc3RhY2spXG4gICAgICAgIDogY3VzdG9taXplcihhcnJWYWx1ZSwgb3RoVmFsdWUsIGluZGV4LCBhcnJheSwgb3RoZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgaWYgKGNvbXBhcmVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChjb21wYXJlZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgaWYgKHNlZW4pIHtcbiAgICAgIGlmICghYXJyYXlTb21lKG90aGVyLCBmdW5jdGlvbihvdGhWYWx1ZSwgb3RoSW5kZXgpIHtcbiAgICAgICAgICAgIGlmICghY2FjaGVIYXMoc2Vlbiwgb3RoSW5kZXgpICYmXG4gICAgICAgICAgICAgICAgKGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBzZWVuLnB1c2gob3RoSW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pKSB7XG4gICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCEoXG4gICAgICAgICAgYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8XG4gICAgICAgICAgICBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgc3RhY2tbJ2RlbGV0ZSddKGFycmF5KTtcbiAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcXVhbEFycmF5cztcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlmIHN1aXRhYmxlIGZvciBzdHJpY3RcbiAqICBlcXVhbGl0eSBjb21wYXJpc29ucywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSAmJiAhaXNPYmplY3QodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU3RyaWN0Q29tcGFyYWJsZTtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBtYXRjaGVzUHJvcGVydHlgIGZvciBzb3VyY2UgdmFsdWVzIHN1aXRhYmxlXG4gKiBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUoa2V5LCBzcmNWYWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Rba2V5XSA9PT0gc3JjVmFsdWUgJiZcbiAgICAgIChzcmNWYWx1ZSAhPT0gdW5kZWZpbmVkIHx8IChrZXkgaW4gT2JqZWN0KG9iamVjdCkpKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZTtcbiIsInZhciBjYXN0UGF0aCA9IHJlcXVpcmUoJy4vX2Nhc3RQYXRoJyksXG4gICAgdG9LZXkgPSByZXF1aXJlKCcuL190b0tleScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmdldGAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWZhdWx0IHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldChvYmplY3QsIHBhdGgpIHtcbiAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgdmFyIGluZGV4ID0gMCxcbiAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gIHdoaWxlIChvYmplY3QgIT0gbnVsbCAmJiBpbmRleCA8IGxlbmd0aCkge1xuICAgIG9iamVjdCA9IG9iamVjdFt0b0tleShwYXRoW2luZGV4KytdKV07XG4gIH1cbiAgcmV0dXJuIChpbmRleCAmJiBpbmRleCA9PSBsZW5ndGgpID8gb2JqZWN0IDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmdldEluID0gZ2V0SW47XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcHJvcGVydHlFeHByID0gcmVxdWlyZShcInByb3BlcnR5LWV4cHJcIik7XG5cbnZhciBfaGFzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibG9kYXNoL2hhc1wiKSk7XG5cbnZhciB0cmltID0gZnVuY3Rpb24gdHJpbShwYXJ0KSB7XG4gIHJldHVybiBwYXJ0LnN1YnN0cigwLCBwYXJ0Lmxlbmd0aCAtIDEpLnN1YnN0cigxKTtcbn07XG5cbmZ1bmN0aW9uIGdldEluKHNjaGVtYSwgcGF0aCwgdmFsdWUsIGNvbnRleHQpIHtcbiAgdmFyIHBhcmVudCwgbGFzdFBhcnQsIGxhc3RQYXJ0RGVidWc7IC8vIGlmIG9ubHkgb25lIFwidmFsdWVcIiBhcmcgdGhlbiB1c2UgaXQgZm9yIGJvdGhcblxuICBjb250ZXh0ID0gY29udGV4dCB8fCB2YWx1ZTtcbiAgaWYgKCFwYXRoKSByZXR1cm4ge1xuICAgIHBhcmVudDogcGFyZW50LFxuICAgIHBhcmVudFBhdGg6IHBhdGgsXG4gICAgc2NoZW1hOiBzY2hlbWFcbiAgfTtcbiAgKDAsIF9wcm9wZXJ0eUV4cHIuZm9yRWFjaCkocGF0aCwgZnVuY3Rpb24gKF9wYXJ0LCBpc0JyYWNrZXQsIGlzQXJyYXkpIHtcbiAgICB2YXIgcGFydCA9IGlzQnJhY2tldCA/IHRyaW0oX3BhcnQpIDogX3BhcnQ7XG5cbiAgICBpZiAoaXNBcnJheSB8fCAoMCwgX2hhcy5kZWZhdWx0KShzY2hlbWEsICdfc3ViVHlwZScpKSB7XG4gICAgICAvLyB3ZSBza2lwcGVkIGFuIGFycmF5OiBmb29bXS5iYXJcbiAgICAgIHZhciBpZHggPSBpc0FycmF5ID8gcGFyc2VJbnQocGFydCwgMTApIDogMDtcbiAgICAgIHNjaGVtYSA9IHNjaGVtYS5yZXNvbHZlKHtcbiAgICAgICAgY29udGV4dDogY29udGV4dCxcbiAgICAgICAgcGFyZW50OiBwYXJlbnQsXG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfSkuX3N1YlR5cGU7XG5cbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBpZiAoaXNBcnJheSAmJiBpZHggPj0gdmFsdWUubGVuZ3RoKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWXVwLnJlYWNoIGNhbm5vdCByZXNvbHZlIGFuIGFycmF5IGl0ZW0gYXQgaW5kZXg6IFwiICsgX3BhcnQgKyBcIiwgaW4gdGhlIHBhdGg6IFwiICsgcGF0aCArIFwiLiBcIiArIFwiYmVjYXVzZSB0aGVyZSBpcyBubyB2YWx1ZSBhdCB0aGF0IGluZGV4LiBcIik7XG4gICAgICAgIH1cblxuICAgICAgICB2YWx1ZSA9IHZhbHVlW2lkeF07XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFpc0FycmF5KSB7XG4gICAgICBzY2hlbWEgPSBzY2hlbWEucmVzb2x2ZSh7XG4gICAgICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgIH0pO1xuICAgICAgaWYgKCEoMCwgX2hhcy5kZWZhdWx0KShzY2hlbWEsICdmaWVsZHMnKSB8fCAhKDAsIF9oYXMuZGVmYXVsdCkoc2NoZW1hLmZpZWxkcywgcGFydCkpIHRocm93IG5ldyBFcnJvcihcIlRoZSBzY2hlbWEgZG9lcyBub3QgY29udGFpbiB0aGUgcGF0aDogXCIgKyBwYXRoICsgXCIuIFwiICsgKFwiKGZhaWxlZCBhdDogXCIgKyBsYXN0UGFydERlYnVnICsgXCIgd2hpY2ggaXMgYSB0eXBlOiBcXFwiXCIgKyBzY2hlbWEuX3R5cGUgKyBcIlxcXCIpIFwiKSk7XG4gICAgICBzY2hlbWEgPSBzY2hlbWEuZmllbGRzW3BhcnRdO1xuICAgICAgcGFyZW50ID0gdmFsdWU7XG4gICAgICB2YWx1ZSA9IHZhbHVlICYmIHZhbHVlW3BhcnRdO1xuICAgICAgbGFzdFBhcnQgPSBwYXJ0O1xuICAgICAgbGFzdFBhcnREZWJ1ZyA9IGlzQnJhY2tldCA/ICdbJyArIF9wYXJ0ICsgJ10nIDogJy4nICsgX3BhcnQ7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBzY2hlbWE6IHNjaGVtYSxcbiAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICBwYXJlbnRQYXRoOiBsYXN0UGFydFxuICB9O1xufVxuXG52YXIgcmVhY2ggPSBmdW5jdGlvbiByZWFjaChvYmosIHBhdGgsIHZhbHVlLCBjb250ZXh0KSB7XG4gIHJldHVybiBnZXRJbihvYmosIHBhdGgsIHZhbHVlLCBjb250ZXh0KS5zY2hlbWE7XG59O1xuXG52YXIgX2RlZmF1bHQgPSByZWFjaDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsImZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHtcbiAgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsO1xuICB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpO1xuXG4gIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHtcbiAgICByZXR1cm4gY2FjaGU7XG4gIH07XG5cbiAgcmV0dXJuIGNhY2hlO1xufVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHtcbiAgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkge1xuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKTtcblxuICBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHtcbiAgICByZXR1cm4gY2FjaGUuZ2V0KG9iaik7XG4gIH1cblxuICB2YXIgbmV3T2JqID0ge307XG5cbiAgaWYgKG9iaiAhPSBudWxsKSB7XG4gICAgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7XG5cbiAgICAgICAgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkge1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3T2JqW2tleV0gPSBvYmpba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7XG5cbiAgaWYgKGNhY2hlKSB7XG4gICAgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTtcbiAgfVxuXG4gIHJldHVybiBuZXdPYmo7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQ7IiwiZnVuY3Rpb24gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbExvb3NlKHN0cmluZ3MsIHJhdykge1xuICBpZiAoIXJhdykge1xuICAgIHJhdyA9IHN0cmluZ3Muc2xpY2UoMCk7XG4gIH1cblxuICBzdHJpbmdzLnJhdyA9IHJhdztcbiAgcmV0dXJuIHN0cmluZ3M7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbExvb3NlOyIsInZhciBhcnJheVJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5UmVkdWNlJyksXG4gICAgZGVidXJyID0gcmVxdWlyZSgnLi9kZWJ1cnInKSxcbiAgICB3b3JkcyA9IHJlcXVpcmUoJy4vd29yZHMnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNhcHR1cmUgZ3JvdXBzLiAqL1xudmFyIHJzQXBvcyA9IFwiWydcXHUyMDE5XVwiO1xuXG4vKiogVXNlZCB0byBtYXRjaCBhcG9zdHJvcGhlcy4gKi9cbnZhciByZUFwb3MgPSBSZWdFeHAocnNBcG9zLCAnZycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmNhbWVsQ2FzZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lIGVhY2ggd29yZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvdW5kZXIgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvdW5kZXIoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgIHJldHVybiBhcnJheVJlZHVjZSh3b3JkcyhkZWJ1cnIoc3RyaW5nKS5yZXBsYWNlKHJlQXBvcywgJycpKSwgY2FsbGJhY2ssICcnKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVDb21wb3VuZGVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBtYWtlUGF0aDtcblxuZnVuY3Rpb24gbWFrZVBhdGgoc3RyaW5ncykge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgdmFsdWVzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICB2YWx1ZXNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIHBhdGggPSBzdHJpbmdzLnJlZHVjZShmdW5jdGlvbiAoc3RyLCBuZXh0KSB7XG4gICAgdmFyIHZhbHVlID0gdmFsdWVzLnNoaWZ0KCk7XG4gICAgcmV0dXJuIHN0ciArICh2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZSkgKyBuZXh0O1xuICB9KTtcbiAgcmV0dXJuIHBhdGgucmVwbGFjZSgvXlxcLi8sICcnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9pbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxudmFyIF9pbXBsZW1lbnRhdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbXBsZW1lbnRhdGlvbik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVDb250ZXh0IHx8IF9pbXBsZW1lbnRhdGlvbjIuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gKiAvLyA9PiBbZmFsc2UsIGZhbHNlXVxuICovXG5mdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3R1YkZhbHNlO1xuIiwiaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IHJvb3QuQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgIGFsbG9jVW5zYWZlID0gQnVmZmVyID8gQnVmZmVyLmFsbG9jVW5zYWZlIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiAgYGJ1ZmZlcmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXIgVGhlIGJ1ZmZlciB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBjbG9uZUJ1ZmZlcihidWZmZXIsIGlzRGVlcCkge1xuICBpZiAoaXNEZWVwKSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5zbGljZSgpO1xuICB9XG4gIHZhciBsZW5ndGggPSBidWZmZXIubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gYWxsb2NVbnNhZmUgPyBhbGxvY1Vuc2FmZShsZW5ndGgpIDogbmV3IGJ1ZmZlci5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gIGJ1ZmZlci5jb3B5KHJlc3VsdCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsb25lQnVmZmVyO1xuIiwiKGZ1bmN0aW9uIChmYWN0b3J5KSB7XG5cdHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IChtb2R1bGVbJ2V4cG9ydHMnXSA9IGZhY3RvcnkoKSkgOlxuXHRcdHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lWydhbWQnXSA/IGRlZmluZShmYWN0b3J5KCkpIDpcblx0XHRcdCh3aW5kb3dbJ3N0eWxpc1J1bGVTaGVldCddID0gZmFjdG9yeSgpKVxufShmdW5jdGlvbiAoKSB7XG5cblx0J3VzZSBzdHJpY3QnXG5cblx0cmV0dXJuIGZ1bmN0aW9uIChpbnNlcnRSdWxlKSB7XG5cdFx0dmFyIGRlbGltaXRlciA9ICcvKnwqLydcblx0XHR2YXIgbmVlZGxlID0gZGVsaW1pdGVyKyd9J1xuXG5cdFx0ZnVuY3Rpb24gdG9TaGVldCAoYmxvY2spIHtcblx0XHRcdGlmIChibG9jaylcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRpbnNlcnRSdWxlKGJsb2NrICsgJ30nKVxuXHRcdFx0XHR9IGNhdGNoIChlKSB7fVxuXHRcdH1cblxuXHRcdHJldHVybiBmdW5jdGlvbiBydWxlU2hlZXQgKGNvbnRleHQsIGNvbnRlbnQsIHNlbGVjdG9ycywgcGFyZW50cywgbGluZSwgY29sdW1uLCBsZW5ndGgsIG5zLCBkZXB0aCwgYXQpIHtcblx0XHRcdHN3aXRjaCAoY29udGV4dCkge1xuXHRcdFx0XHQvLyBwcm9wZXJ0eVxuXHRcdFx0XHRjYXNlIDE6XG5cdFx0XHRcdFx0Ly8gQGltcG9ydFxuXHRcdFx0XHRcdGlmIChkZXB0aCA9PT0gMCAmJiBjb250ZW50LmNoYXJDb2RlQXQoMCkgPT09IDY0KVxuXHRcdFx0XHRcdFx0cmV0dXJuIGluc2VydFJ1bGUoY29udGVudCsnOycpLCAnJ1xuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdC8vIHNlbGVjdG9yXG5cdFx0XHRcdGNhc2UgMjpcblx0XHRcdFx0XHRpZiAobnMgPT09IDApXG5cdFx0XHRcdFx0XHRyZXR1cm4gY29udGVudCArIGRlbGltaXRlclxuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdC8vIGF0LXJ1bGVcblx0XHRcdFx0Y2FzZSAzOlxuXHRcdFx0XHRcdHN3aXRjaCAobnMpIHtcblx0XHRcdFx0XHRcdC8vIEBmb250LWZhY2UsIEBwYWdlXG5cdFx0XHRcdFx0XHRjYXNlIDEwMjpcblx0XHRcdFx0XHRcdGNhc2UgMTEyOlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaW5zZXJ0UnVsZShzZWxlY3RvcnNbMF0rY29udGVudCksICcnXG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gY29udGVudCArIChhdCA9PT0gMCA/IGRlbGltaXRlciA6ICcnKVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0Y2FzZSAtMjpcblx0XHRcdFx0XHRjb250ZW50LnNwbGl0KG5lZWRsZSkuZm9yRWFjaCh0b1NoZWV0KVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSkpXG4iLCJ2YXIgdW5pdGxlc3NLZXlzID0ge1xuICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogMSxcbiAgYm9yZGVySW1hZ2VPdXRzZXQ6IDEsXG4gIGJvcmRlckltYWdlU2xpY2U6IDEsXG4gIGJvcmRlckltYWdlV2lkdGg6IDEsXG4gIGJveEZsZXg6IDEsXG4gIGJveEZsZXhHcm91cDogMSxcbiAgYm94T3JkaW5hbEdyb3VwOiAxLFxuICBjb2x1bW5Db3VudDogMSxcbiAgY29sdW1uczogMSxcbiAgZmxleDogMSxcbiAgZmxleEdyb3c6IDEsXG4gIGZsZXhQb3NpdGl2ZTogMSxcbiAgZmxleFNocmluazogMSxcbiAgZmxleE5lZ2F0aXZlOiAxLFxuICBmbGV4T3JkZXI6IDEsXG4gIGdyaWRSb3c6IDEsXG4gIGdyaWRSb3dFbmQ6IDEsXG4gIGdyaWRSb3dTcGFuOiAxLFxuICBncmlkUm93U3RhcnQ6IDEsXG4gIGdyaWRDb2x1bW46IDEsXG4gIGdyaWRDb2x1bW5FbmQ6IDEsXG4gIGdyaWRDb2x1bW5TcGFuOiAxLFxuICBncmlkQ29sdW1uU3RhcnQ6IDEsXG4gIG1zR3JpZFJvdzogMSxcbiAgbXNHcmlkUm93U3BhbjogMSxcbiAgbXNHcmlkQ29sdW1uOiAxLFxuICBtc0dyaWRDb2x1bW5TcGFuOiAxLFxuICBmb250V2VpZ2h0OiAxLFxuICBsaW5lSGVpZ2h0OiAxLFxuICBvcGFjaXR5OiAxLFxuICBvcmRlcjogMSxcbiAgb3JwaGFuczogMSxcbiAgdGFiU2l6ZTogMSxcbiAgd2lkb3dzOiAxLFxuICB6SW5kZXg6IDEsXG4gIHpvb206IDEsXG4gIFdlYmtpdExpbmVDbGFtcDogMSxcbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogMSxcbiAgZmxvb2RPcGFjaXR5OiAxLFxuICBzdG9wT3BhY2l0eTogMSxcbiAgc3Ryb2tlRGFzaGFycmF5OiAxLFxuICBzdHJva2VEYXNob2Zmc2V0OiAxLFxuICBzdHJva2VNaXRlcmxpbWl0OiAxLFxuICBzdHJva2VPcGFjaXR5OiAxLFxuICBzdHJva2VXaWR0aDogMVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdW5pdGxlc3NLZXlzO1xuIiwiaW1wb3J0IHsgbWF0Y2hQYXRoLCBSb3V0ZXIsIFN3aXRjaCwgUm91dGUgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZnVuY3Rpb24gbWF0Y2hSb3V0ZXMocm91dGVzLCBwYXRobmFtZSxcbi8qbm90IHB1YmxpYyBBUEkqL1xuYnJhbmNoKSB7XG4gIGlmIChicmFuY2ggPT09IHZvaWQgMCkge1xuICAgIGJyYW5jaCA9IFtdO1xuICB9XG5cbiAgcm91dGVzLnNvbWUoZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgdmFyIG1hdGNoID0gcm91dGUucGF0aCA/IG1hdGNoUGF0aChwYXRobmFtZSwgcm91dGUpIDogYnJhbmNoLmxlbmd0aCA/IGJyYW5jaFticmFuY2gubGVuZ3RoIC0gMV0ubWF0Y2ggLy8gdXNlIHBhcmVudCBtYXRjaFxuICAgIDogUm91dGVyLmNvbXB1dGVSb290TWF0Y2gocGF0aG5hbWUpOyAvLyB1c2UgZGVmYXVsdCBcInJvb3RcIiBtYXRjaFxuXG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICBicmFuY2gucHVzaCh7XG4gICAgICAgIHJvdXRlOiByb3V0ZSxcbiAgICAgICAgbWF0Y2g6IG1hdGNoXG4gICAgICB9KTtcblxuICAgICAgaWYgKHJvdXRlLnJvdXRlcykge1xuICAgICAgICBtYXRjaFJvdXRlcyhyb3V0ZS5yb3V0ZXMsIHBhdGhuYW1lLCBicmFuY2gpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtYXRjaDtcbiAgfSk7XG4gIHJldHVybiBicmFuY2g7XG59XG5cbmZ1bmN0aW9uIHJlbmRlclJvdXRlcyhyb3V0ZXMsIGV4dHJhUHJvcHMsIHN3aXRjaFByb3BzKSB7XG4gIGlmIChleHRyYVByb3BzID09PSB2b2lkIDApIHtcbiAgICBleHRyYVByb3BzID0ge307XG4gIH1cblxuICBpZiAoc3dpdGNoUHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHN3aXRjaFByb3BzID0ge307XG4gIH1cblxuICByZXR1cm4gcm91dGVzID8gUmVhY3QuY3JlYXRlRWxlbWVudChTd2l0Y2gsIHN3aXRjaFByb3BzLCByb3V0ZXMubWFwKGZ1bmN0aW9uIChyb3V0ZSwgaSkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlLCB7XG4gICAgICBrZXk6IHJvdXRlLmtleSB8fCBpLFxuICAgICAgcGF0aDogcm91dGUucGF0aCxcbiAgICAgIGV4YWN0OiByb3V0ZS5leGFjdCxcbiAgICAgIHN0cmljdDogcm91dGUuc3RyaWN0LFxuICAgICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIocHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIHJvdXRlLnJlbmRlciA/IHJvdXRlLnJlbmRlcihfZXh0ZW5kcyh7fSwgcHJvcHMsIGV4dHJhUHJvcHMsIHtcbiAgICAgICAgICByb3V0ZTogcm91dGVcbiAgICAgICAgfSkpIDogUmVhY3QuY3JlYXRlRWxlbWVudChyb3V0ZS5jb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywgZXh0cmFQcm9wcywge1xuICAgICAgICAgIHJvdXRlOiByb3V0ZVxuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pKSA6IG51bGw7XG59XG5cbmV4cG9ydCB7IG1hdGNoUm91dGVzLCByZW5kZXJSb3V0ZXMgfTtcbiIsIi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXHJcbnRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlXHJcbkxpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5USElTIENPREUgSVMgUFJPVklERUQgT04gQU4gKkFTIElTKiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXHJcbktJTkQsIEVJVEhFUiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBXSVRIT1VUIExJTUlUQVRJT04gQU5ZIElNUExJRURcclxuV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIFRJVExFLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSxcclxuTUVSQ0hBTlRBQkxJVFkgT1IgTk9OLUlORlJJTkdFTUVOVC5cclxuXHJcblNlZSB0aGUgQXBhY2hlIFZlcnNpb24gMi4wIExpY2Vuc2UgZm9yIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xyXG5hbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIGV4cG9ydHMpIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xyXG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgcmV0dXJuIHI7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdCh2KSB7XHJcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxyXG4gICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XHJcbiAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICAgIHZhciBpLCBwO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IG4gPT09IFwicmV0dXJuXCIgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XHJcbiAgICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xyXG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cclxuICAgIHJldHVybiBjb29rZWQ7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSByZXN1bHRba10gPSBtb2Rba107XHJcbiAgICByZXN1bHQuZGVmYXVsdCA9IG1vZDtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcbiIsInZhciBpc01lcmdlYWJsZU9iamVjdCA9IGZ1bmN0aW9uIGlzTWVyZ2VhYmxlT2JqZWN0KHZhbHVlKSB7XG5cdHJldHVybiBpc05vbk51bGxPYmplY3QodmFsdWUpXG5cdFx0JiYgIWlzU3BlY2lhbCh2YWx1ZSlcbn07XG5cbmZ1bmN0aW9uIGlzTm9uTnVsbE9iamVjdCh2YWx1ZSkge1xuXHRyZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnXG59XG5cbmZ1bmN0aW9uIGlzU3BlY2lhbCh2YWx1ZSkge1xuXHR2YXIgc3RyaW5nVmFsdWUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuXG5cdHJldHVybiBzdHJpbmdWYWx1ZSA9PT0gJ1tvYmplY3QgUmVnRXhwXSdcblx0XHR8fCBzdHJpbmdWYWx1ZSA9PT0gJ1tvYmplY3QgRGF0ZV0nXG5cdFx0fHwgaXNSZWFjdEVsZW1lbnQodmFsdWUpXG59XG5cbi8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi9iNWFjOTYzZmI3OTFkMTI5OGU3ZjM5NjIzNjM4M2JjOTU1ZjkxNmMxL3NyYy9pc29tb3JwaGljL2NsYXNzaWMvZWxlbWVudC9SZWFjdEVsZW1lbnQuanMjTDIxLUwyNVxudmFyIGNhblVzZVN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmZvcjtcbnZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSBjYW5Vc2VTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykgOiAweGVhYzc7XG5cbmZ1bmN0aW9uIGlzUmVhY3RFbGVtZW50KHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZS4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFXG59XG5cbmZ1bmN0aW9uIGVtcHR5VGFyZ2V0KHZhbCkge1xuXHRyZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpID8gW10gOiB7fVxufVxuXG5mdW5jdGlvbiBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCh2YWx1ZSwgb3B0aW9ucykge1xuXHRyZXR1cm4gKG9wdGlvbnMuY2xvbmUgIT09IGZhbHNlICYmIG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QodmFsdWUpKVxuXHRcdD8gZGVlcG1lcmdlKGVtcHR5VGFyZ2V0KHZhbHVlKSwgdmFsdWUsIG9wdGlvbnMpXG5cdFx0OiB2YWx1ZVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0QXJyYXlNZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHRyZXR1cm4gdGFyZ2V0LmNvbmNhdChzb3VyY2UpLm1hcChmdW5jdGlvbihlbGVtZW50KSB7XG5cdFx0cmV0dXJuIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKGVsZW1lbnQsIG9wdGlvbnMpXG5cdH0pXG59XG5cbmZ1bmN0aW9uIG1lcmdlT2JqZWN0KHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG5cdHZhciBkZXN0aW5hdGlvbiA9IHt9O1xuXHRpZiAob3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCh0YXJnZXQpKSB7XG5cdFx0T2JqZWN0LmtleXModGFyZ2V0KS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHRcdFx0ZGVzdGluYXRpb25ba2V5XSA9IGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHRhcmdldFtrZXldLCBvcHRpb25zKTtcblx0XHR9KTtcblx0fVxuXHRPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdFx0aWYgKCFvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KHNvdXJjZVtrZXldKSB8fCAhdGFyZ2V0W2tleV0pIHtcblx0XHRcdGRlc3RpbmF0aW9uW2tleV0gPSBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZChzb3VyY2Vba2V5XSwgb3B0aW9ucyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRlc3RpbmF0aW9uW2tleV0gPSBkZWVwbWVyZ2UodGFyZ2V0W2tleV0sIHNvdXJjZVtrZXldLCBvcHRpb25zKTtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gZGVzdGluYXRpb25cbn1cblxuZnVuY3Rpb24gZGVlcG1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXHRvcHRpb25zLmFycmF5TWVyZ2UgPSBvcHRpb25zLmFycmF5TWVyZ2UgfHwgZGVmYXVsdEFycmF5TWVyZ2U7XG5cdG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QgPSBvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0IHx8IGlzTWVyZ2VhYmxlT2JqZWN0O1xuXG5cdHZhciBzb3VyY2VJc0FycmF5ID0gQXJyYXkuaXNBcnJheShzb3VyY2UpO1xuXHR2YXIgdGFyZ2V0SXNBcnJheSA9IEFycmF5LmlzQXJyYXkodGFyZ2V0KTtcblx0dmFyIHNvdXJjZUFuZFRhcmdldFR5cGVzTWF0Y2ggPSBzb3VyY2VJc0FycmF5ID09PSB0YXJnZXRJc0FycmF5O1xuXG5cdGlmICghc291cmNlQW5kVGFyZ2V0VHlwZXNNYXRjaCkge1xuXHRcdHJldHVybiBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZChzb3VyY2UsIG9wdGlvbnMpXG5cdH0gZWxzZSBpZiAoc291cmNlSXNBcnJheSkge1xuXHRcdHJldHVybiBvcHRpb25zLmFycmF5TWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpXG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIG1lcmdlT2JqZWN0KHRhcmdldCwgc291cmNlLCBvcHRpb25zKVxuXHR9XG59XG5cbmRlZXBtZXJnZS5hbGwgPSBmdW5jdGlvbiBkZWVwbWVyZ2VBbGwoYXJyYXksIG9wdGlvbnMpIHtcblx0aWYgKCFBcnJheS5pc0FycmF5KGFycmF5KSkge1xuXHRcdHRocm93IG5ldyBFcnJvcignZmlyc3QgYXJndW1lbnQgc2hvdWxkIGJlIGFuIGFycmF5Jylcblx0fVxuXG5cdHJldHVybiBhcnJheS5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgbmV4dCkge1xuXHRcdHJldHVybiBkZWVwbWVyZ2UocHJldiwgbmV4dCwgb3B0aW9ucylcblx0fSwge30pXG59O1xuXG52YXIgZGVlcG1lcmdlXzEgPSBkZWVwbWVyZ2U7XG5cbmV4cG9ydCBkZWZhdWx0IGRlZXBtZXJnZV8xO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBsaXN0Q2FjaGVDbGVhcjtcbiIsIi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKCdhJywgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKE5hTiwgTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBlcTtcbiIsImltcG9ydCBlcSBmcm9tICcuL2VxLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXNzb2NJbmRleE9mO1xuIiwiaW1wb3J0IGFzc29jSW5kZXhPZiBmcm9tICcuL19hc3NvY0luZGV4T2YuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2U7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcbiAgICBkYXRhLnBvcCgpO1xuICB9IGVsc2Uge1xuICAgIHNwbGljZS5jYWxsKGRhdGEsIGluZGV4LCAxKTtcbiAgfVxuICAtLXRoaXMuc2l6ZTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxpc3RDYWNoZURlbGV0ZTtcbiIsImltcG9ydCBhc3NvY0luZGV4T2YgZnJvbSAnLi9fYXNzb2NJbmRleE9mLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQgOiBkYXRhW2luZGV4XVsxXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbGlzdENhY2hlR2V0O1xuIiwiaW1wb3J0IGFzc29jSW5kZXhPZiBmcm9tICcuL19hc3NvY0luZGV4T2YuanMnO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbGlzdENhY2hlSGFzO1xuIiwiaW1wb3J0IGFzc29jSW5kZXhPZiBmcm9tICcuL19hc3NvY0luZGV4T2YuanMnO1xuXG4vKipcbiAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgICsrdGhpcy5zaXplO1xuICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9IGVsc2Uge1xuICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxpc3RDYWNoZVNldDtcbiIsImltcG9ydCBsaXN0Q2FjaGVDbGVhciBmcm9tICcuL19saXN0Q2FjaGVDbGVhci5qcyc7XG5pbXBvcnQgbGlzdENhY2hlRGVsZXRlIGZyb20gJy4vX2xpc3RDYWNoZURlbGV0ZS5qcyc7XG5pbXBvcnQgbGlzdENhY2hlR2V0IGZyb20gJy4vX2xpc3RDYWNoZUdldC5qcyc7XG5pbXBvcnQgbGlzdENhY2hlSGFzIGZyb20gJy4vX2xpc3RDYWNoZUhhcy5qcyc7XG5pbXBvcnQgbGlzdENhY2hlU2V0IGZyb20gJy4vX2xpc3RDYWNoZVNldC5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG5MaXN0Q2FjaGUucHJvdG90eXBlLmNsZWFyID0gbGlzdENhY2hlQ2xlYXI7XG5MaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbkxpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuTGlzdENhY2hlLnByb3RvdHlwZS5oYXMgPSBsaXN0Q2FjaGVIYXM7XG5MaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxuZXhwb3J0IGRlZmF1bHQgTGlzdENhY2hlO1xuIiwiaW1wb3J0IExpc3RDYWNoZSBmcm9tICcuL19MaXN0Q2FjaGUuanMnO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIFN0YWNrXG4gKi9cbmZ1bmN0aW9uIHN0YWNrQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdGFja0NsZWFyO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIHJlc3VsdCA9IGRhdGFbJ2RlbGV0ZSddKGtleSk7XG5cbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdGFja0RlbGV0ZTtcbiIsIi8qKlxuICogR2V0cyB0aGUgc3RhY2sgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrR2V0KGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoa2V5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RhY2tHZXQ7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBhIHN0YWNrIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhrZXkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdGFja0hhcztcbiIsImltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxuZXhwb3J0IGRlZmF1bHQgU3ltYm9sO1xuIiwiaW1wb3J0IFN5bWJvbCBmcm9tICcuL19TeW1ib2wuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICB0cnkge1xuICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHVubWFza2VkKSB7XG4gICAgaWYgKGlzT3duKSB7XG4gICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFJhd1RhZztcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBvYmplY3RUb1N0cmluZztcbiIsImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcbmltcG9ydCBnZXRSYXdUYWcgZnJvbSAnLi9fZ2V0UmF3VGFnLmpzJztcbmltcG9ydCBvYmplY3RUb1N0cmluZyBmcm9tICcuL19vYmplY3RUb1N0cmluZy5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gIH1cbiAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlR2V0VGFnO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzT2JqZWN0O1xuIiwiaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oXyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzRnVuY3Rpb247XG4iLCJpbXBvcnQgY29yZUpzRGF0YSBmcm9tICcuL19jb3JlSnNEYXRhLmpzJztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbnZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG59KCkpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNNYXNrZWQ7XG4iLCJpbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xudmFyIGNvcmVKc0RhdGEgPSByb290WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxuZXhwb3J0IGRlZmF1bHQgY29yZUpzRGF0YTtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICovXG5mdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiAnJztcbn1cblxuZXhwb3J0IGRlZmF1bHQgdG9Tb3VyY2U7XG4iLCJpbXBvcnQgaXNGdW5jdGlvbiBmcm9tICcuL2lzRnVuY3Rpb24uanMnO1xuaW1wb3J0IGlzTWFza2VkIGZyb20gJy4vX2lzTWFza2VkLmpzJztcbmltcG9ydCBpc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcbmltcG9ydCB0b1NvdXJjZSBmcm9tICcuL190b1NvdXJjZS5qcyc7XG5cbi8qKlxuICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gKi9cbnZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbnZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbnZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwYXR0ZXJuID0gaXNGdW5jdGlvbih2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VJc05hdGl2ZTtcbiIsIi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRWYWx1ZTtcbiIsImltcG9ydCBiYXNlSXNOYXRpdmUgZnJvbSAnLi9fYmFzZUlzTmF0aXZlLmpzJztcbmltcG9ydCBnZXRWYWx1ZSBmcm9tICcuL19nZXRWYWx1ZS5qcyc7XG5cbi8qKlxuICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldE5hdGl2ZTtcbiIsImltcG9ydCBnZXROYXRpdmUgZnJvbSAnLi9fZ2V0TmF0aXZlLmpzJztcbmltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdNYXAnKTtcblxuZXhwb3J0IGRlZmF1bHQgTWFwO1xuIiwiaW1wb3J0IGdldE5hdGl2ZSBmcm9tICcuL19nZXROYXRpdmUuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpO1xuXG5leHBvcnQgZGVmYXVsdCBuYXRpdmVDcmVhdGU7XG4iLCJpbXBvcnQgbmF0aXZlQ3JlYXRlIGZyb20gJy4vX25hdGl2ZUNyZWF0ZS5qcyc7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKi9cbmZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBoYXNoQ2xlYXI7XG4iLCIvKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBoYXNoRGVsZXRlO1xuIiwiaW1wb3J0IG5hdGl2ZUNyZWF0ZSBmcm9tICcuL19uYXRpdmVDcmVhdGUuanMnO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogR2V0cyB0aGUgaGFzaCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBoYXNoR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChuYXRpdmVDcmVhdGUpIHtcbiAgICB2YXIgcmVzdWx0ID0gZGF0YVtrZXldO1xuICAgIHJldHVybiByZXN1bHQgPT09IEhBU0hfVU5ERUZJTkVEID8gdW5kZWZpbmVkIDogcmVzdWx0O1xuICB9XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSkgPyBkYXRhW2tleV0gOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhhc2hHZXQ7XG4iLCJpbXBvcnQgbmF0aXZlQ3JlYXRlIGZyb20gJy4vX25hdGl2ZUNyZWF0ZS5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzaEhhcztcbiIsImltcG9ydCBuYXRpdmVDcmVhdGUgZnJvbSAnLi9fbmF0aXZlQ3JlYXRlLmpzJztcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhhc2hTZXQ7XG4iLCJpbXBvcnQgaGFzaENsZWFyIGZyb20gJy4vX2hhc2hDbGVhci5qcyc7XG5pbXBvcnQgaGFzaERlbGV0ZSBmcm9tICcuL19oYXNoRGVsZXRlLmpzJztcbmltcG9ydCBoYXNoR2V0IGZyb20gJy4vX2hhc2hHZXQuanMnO1xuaW1wb3J0IGhhc2hIYXMgZnJvbSAnLi9faGFzaEhhcy5qcyc7XG5pbXBvcnQgaGFzaFNldCBmcm9tICcuL19oYXNoU2V0LmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG5IYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbkhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG5IYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbkhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbmV4cG9ydCBkZWZhdWx0IEhhc2g7XG4iLCJpbXBvcnQgSGFzaCBmcm9tICcuL19IYXNoLmpzJztcbmltcG9ydCBMaXN0Q2FjaGUgZnJvbSAnLi9fTGlzdENhY2hlLmpzJztcbmltcG9ydCBNYXAgZnJvbSAnLi9fTWFwLmpzJztcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgdGhpcy5zaXplID0gMDtcbiAgdGhpcy5fX2RhdGFfXyA9IHtcbiAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICdzdHJpbmcnOiBuZXcgSGFzaFxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXBDYWNoZUNsZWFyO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgOiAodmFsdWUgPT09IG51bGwpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0tleWFibGU7XG4iLCJpbXBvcnQgaXNLZXlhYmxlIGZyb20gJy4vX2lzS2V5YWJsZS5qcyc7XG5cbi8qKlxuICogR2V0cyB0aGUgZGF0YSBmb3IgYG1hcGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHJlZmVyZW5jZSBrZXkuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWFwIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGdldE1hcERhdGEobWFwLCBrZXkpIHtcbiAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gIHJldHVybiBpc0tleWFibGUoa2V5KVxuICAgID8gZGF0YVt0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8gJ3N0cmluZycgOiAnaGFzaCddXG4gICAgOiBkYXRhLm1hcDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0TWFwRGF0YTtcbiIsImltcG9ydCBnZXRNYXBEYXRhIGZyb20gJy4vX2dldE1hcERhdGEuanMnO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwQ2FjaGVEZWxldGU7XG4iLCJpbXBvcnQgZ2V0TWFwRGF0YSBmcm9tICcuL19nZXRNYXBEYXRhLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBtYXAgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmdldChrZXkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXBDYWNoZUdldDtcbiIsImltcG9ydCBnZXRNYXBEYXRhIGZyb20gJy4vX2dldE1hcERhdGEuanMnO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIG1hcCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmhhcyhrZXkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXBDYWNoZUhhcztcbiIsImltcG9ydCBnZXRNYXBEYXRhIGZyb20gJy4vX2dldE1hcERhdGEuanMnO1xuXG4vKipcbiAqIFNldHMgdGhlIG1hcCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSksXG4gICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICB0aGlzLnNpemUgKz0gZGF0YS5zaXplID09IHNpemUgPyAwIDogMTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcENhY2hlU2V0O1xuIiwiaW1wb3J0IG1hcENhY2hlQ2xlYXIgZnJvbSAnLi9fbWFwQ2FjaGVDbGVhci5qcyc7XG5pbXBvcnQgbWFwQ2FjaGVEZWxldGUgZnJvbSAnLi9fbWFwQ2FjaGVEZWxldGUuanMnO1xuaW1wb3J0IG1hcENhY2hlR2V0IGZyb20gJy4vX21hcENhY2hlR2V0LmpzJztcbmltcG9ydCBtYXBDYWNoZUhhcyBmcm9tICcuL19tYXBDYWNoZUhhcy5qcyc7XG5pbXBvcnQgbWFwQ2FjaGVTZXQgZnJvbSAnLi9fbWFwQ2FjaGVTZXQuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbk1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbk1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbk1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbk1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxuZXhwb3J0IGRlZmF1bHQgTWFwQ2FjaGU7XG4iLCJpbXBvcnQgTGlzdENhY2hlIGZyb20gJy4vX0xpc3RDYWNoZS5qcyc7XG5pbXBvcnQgTWFwIGZyb20gJy4vX01hcC5qcyc7XG5pbXBvcnQgTWFwQ2FjaGUgZnJvbSAnLi9fTWFwQ2FjaGUuanMnO1xuXG4vKiogVXNlZCBhcyB0aGUgc2l6ZSB0byBlbmFibGUgbGFyZ2UgYXJyYXkgb3B0aW1pemF0aW9ucy4gKi9cbnZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4vKipcbiAqIFNldHMgdGhlIHN0YWNrIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHN0YWNrIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzdGFja1NldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKGRhdGEgaW5zdGFuY2VvZiBMaXN0Q2FjaGUpIHtcbiAgICB2YXIgcGFpcnMgPSBkYXRhLl9fZGF0YV9fO1xuICAgIGlmICghTWFwIHx8IChwYWlycy5sZW5ndGggPCBMQVJHRV9BUlJBWV9TSVpFIC0gMSkpIHtcbiAgICAgIHBhaXJzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgIHRoaXMuc2l6ZSA9ICsrZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlKHBhaXJzKTtcbiAgfVxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RhY2tTZXQ7XG4iLCJpbXBvcnQgTGlzdENhY2hlIGZyb20gJy4vX0xpc3RDYWNoZS5qcyc7XG5pbXBvcnQgc3RhY2tDbGVhciBmcm9tICcuL19zdGFja0NsZWFyLmpzJztcbmltcG9ydCBzdGFja0RlbGV0ZSBmcm9tICcuL19zdGFja0RlbGV0ZS5qcyc7XG5pbXBvcnQgc3RhY2tHZXQgZnJvbSAnLi9fc3RhY2tHZXQuanMnO1xuaW1wb3J0IHN0YWNrSGFzIGZyb20gJy4vX3N0YWNrSGFzLmpzJztcbmltcG9ydCBzdGFja1NldCBmcm9tICcuL19zdGFja1NldC5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0YWNrIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIFN0YWNrKGVudHJpZXMpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZShlbnRyaWVzKTtcbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgU3RhY2tgLlxuU3RhY2sucHJvdG90eXBlLmNsZWFyID0gc3RhY2tDbGVhcjtcblN0YWNrLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBzdGFja0RlbGV0ZTtcblN0YWNrLnByb3RvdHlwZS5nZXQgPSBzdGFja0dldDtcblN0YWNrLnByb3RvdHlwZS5oYXMgPSBzdGFja0hhcztcblN0YWNrLnByb3RvdHlwZS5zZXQgPSBzdGFja1NldDtcblxuZXhwb3J0IGRlZmF1bHQgU3RhY2s7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlFYWNoKGFycmF5LCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFycmF5RWFjaDtcbiIsImltcG9ydCBnZXROYXRpdmUgZnJvbSAnLi9fZ2V0TmF0aXZlLmpzJztcblxudmFyIGRlZmluZVByb3BlcnR5ID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIHZhciBmdW5jID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2RlZmluZVByb3BlcnR5Jyk7XG4gICAgZnVuYyh7fSwgJycsIHt9KTtcbiAgICByZXR1cm4gZnVuYztcbiAgfSBjYXRjaCAoZSkge31cbn0oKSk7XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZVByb3BlcnR5O1xuIiwiaW1wb3J0IGRlZmluZVByb3BlcnR5IGZyb20gJy4vX2RlZmluZVByb3BlcnR5LmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYXNzaWduVmFsdWVgIGFuZCBgYXNzaWduTWVyZ2VWYWx1ZWAgd2l0aG91dFxuICogdmFsdWUgY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSA9PSAnX19wcm90b19fJyAmJiBkZWZpbmVQcm9wZXJ0eSkge1xuICAgIGRlZmluZVByb3BlcnR5KG9iamVjdCwga2V5LCB7XG4gICAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAgICdlbnVtZXJhYmxlJzogdHJ1ZSxcbiAgICAgICd2YWx1ZSc6IHZhbHVlLFxuICAgICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUFzc2lnblZhbHVlO1xuIiwiaW1wb3J0IGJhc2VBc3NpZ25WYWx1ZSBmcm9tICcuL19iYXNlQXNzaWduVmFsdWUuanMnO1xuaW1wb3J0IGVxIGZyb20gJy4vZXEuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEFzc2lnbnMgYHZhbHVlYCB0byBga2V5YCBvZiBgb2JqZWN0YCBpZiB0aGUgZXhpc3RpbmcgdmFsdWUgaXMgbm90IGVxdWl2YWxlbnRcbiAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAqL1xuZnVuY3Rpb24gYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldO1xuICBpZiAoIShoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBlcShvYmpWYWx1ZSwgdmFsdWUpKSB8fFxuICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBhc3NpZ25WYWx1ZTtcbiIsImltcG9ydCBhc3NpZ25WYWx1ZSBmcm9tICcuL19hc3NpZ25WYWx1ZS5qcyc7XG5pbXBvcnQgYmFzZUFzc2lnblZhbHVlIGZyb20gJy4vX2Jhc2VBc3NpZ25WYWx1ZS5qcyc7XG5cbi8qKlxuICogQ29waWVzIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbS5cbiAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycyB0byBjb3B5LlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIHRvLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29waWVkIHZhbHVlcy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlPYmplY3Qoc291cmNlLCBwcm9wcywgb2JqZWN0LCBjdXN0b21pemVyKSB7XG4gIHZhciBpc05ldyA9ICFvYmplY3Q7XG4gIG9iamVjdCB8fCAob2JqZWN0ID0ge30pO1xuXG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGtleSA9IHByb3BzW2luZGV4XTtcblxuICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgID8gY3VzdG9taXplcihvYmplY3Rba2V5XSwgc291cmNlW2tleV0sIGtleSwgb2JqZWN0LCBzb3VyY2UpXG4gICAgICA6IHVuZGVmaW5lZDtcblxuICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBuZXdWYWx1ZSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgICBpZiAoaXNOZXcpIHtcbiAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb2JqZWN0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjb3B5T2JqZWN0O1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUaW1lcyhuLCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG4pO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZVRpbWVzO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzT2JqZWN0TGlrZTtcbiIsImltcG9ydCBiYXNlR2V0VGFnIGZyb20gJy4vX2Jhc2VHZXRUYWcuanMnO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tICcuL2lzT2JqZWN0TGlrZS5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcmd1bWVudHNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqL1xuZnVuY3Rpb24gYmFzZUlzQXJndW1lbnRzKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VJc0FyZ3VtZW50cztcbiIsImltcG9ydCBiYXNlSXNBcmd1bWVudHMgZnJvbSAnLi9fYmFzZUlzQXJndW1lbnRzLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcmd1bWVudHMgPSBiYXNlSXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPyBiYXNlSXNBcmd1bWVudHMgOiBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAhcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgaXNBcmd1bWVudHM7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuZXhwb3J0IGRlZmF1bHQgaXNBcnJheTtcbiIsIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG52YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuXG4gIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICh0eXBlID09ICdudW1iZXInIHx8XG4gICAgICAodHlwZSAhPSAnc3ltYm9sJyAmJiByZUlzVWludC50ZXN0KHZhbHVlKSkpICYmXG4gICAgICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNJbmRleDtcbiIsIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0xlbmd0aCgzKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKEluZmluaXR5KTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aCgnMycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJlxuICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNMZW5ndGg7XG4iLCJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBpc0xlbmd0aCBmcm9tICcuL2lzTGVuZ3RoLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG52YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTtcbnR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xudHlwZWRBcnJheVRhZ3NbYXJnc1RhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZXJyb3JUYWddID0gdHlwZWRBcnJheVRhZ3NbZnVuY1RhZ10gPVxudHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbc2V0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3N0cmluZ1RhZ10gPVxudHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1R5cGVkQXJyYXlgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VJc1R5cGVkQXJyYXk7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VVbmFyeTtcbiIsImltcG9ydCBiYXNlSXNUeXBlZEFycmF5IGZyb20gJy4vX2Jhc2VJc1R5cGVkQXJyYXkuanMnO1xuaW1wb3J0IGJhc2VVbmFyeSBmcm9tICcuL19iYXNlVW5hcnkuanMnO1xuaW1wb3J0IG5vZGVVdGlsIGZyb20gJy4vX25vZGVVdGlsLmpzJztcblxuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbnZhciBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KG5ldyBVaW50OEFycmF5KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShbXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNUeXBlZEFycmF5ID0gbm9kZUlzVHlwZWRBcnJheSA/IGJhc2VVbmFyeShub2RlSXNUeXBlZEFycmF5KSA6IGJhc2VJc1R5cGVkQXJyYXk7XG5cbmV4cG9ydCBkZWZhdWx0IGlzVHlwZWRBcnJheTtcbiIsImltcG9ydCBiYXNlVGltZXMgZnJvbSAnLi9fYmFzZVRpbWVzLmpzJztcbmltcG9ydCBpc0FyZ3VtZW50cyBmcm9tICcuL2lzQXJndW1lbnRzLmpzJztcbmltcG9ydCBpc0FycmF5IGZyb20gJy4vaXNBcnJheS5qcyc7XG5pbXBvcnQgaXNCdWZmZXIgZnJvbSAnLi9pc0J1ZmZlci5qcyc7XG5pbXBvcnQgaXNJbmRleCBmcm9tICcuL19pc0luZGV4LmpzJztcbmltcG9ydCBpc1R5cGVkQXJyYXkgZnJvbSAnLi9pc1R5cGVkQXJyYXkuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyKHZhbHVlKSxcbiAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpIDogW10sXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICgoaW5oZXJpdGVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aClcbiAgICAgICAgKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFycmF5TGlrZUtleXM7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm90b3R5cGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpIHtcbiAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvcixcbiAgICAgIHByb3RvID0gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3Rvci5wcm90b3R5cGUpIHx8IG9iamVjdFByb3RvO1xuXG4gIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzUHJvdG90eXBlO1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG92ZXJBcmc7XG4iLCJpbXBvcnQgb3ZlckFyZyBmcm9tICcuL19vdmVyQXJnLmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUtleXMgPSBvdmVyQXJnKE9iamVjdC5rZXlzLCBPYmplY3QpO1xuXG5leHBvcnQgZGVmYXVsdCBuYXRpdmVLZXlzO1xuIiwiaW1wb3J0IGlzUHJvdG90eXBlIGZyb20gJy4vX2lzUHJvdG90eXBlLmpzJztcbmltcG9ydCBuYXRpdmVLZXlzIGZyb20gJy4vX25hdGl2ZUtleXMuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNgIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXMob2JqZWN0KSB7XG4gIGlmICghaXNQcm90b3R5cGUob2JqZWN0KSkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYga2V5ICE9ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VLZXlzO1xuIiwiaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi9pc0Z1bmN0aW9uLmpzJztcbmltcG9ydCBpc0xlbmd0aCBmcm9tICcuL2lzTGVuZ3RoLmpzJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzQXJyYXlMaWtlO1xuIiwiaW1wb3J0IGFycmF5TGlrZUtleXMgZnJvbSAnLi9fYXJyYXlMaWtlS2V5cy5qcyc7XG5pbXBvcnQgYmFzZUtleXMgZnJvbSAnLi9fYmFzZUtleXMuanMnO1xuaW1wb3J0IGlzQXJyYXlMaWtlIGZyb20gJy4vaXNBcnJheUxpa2UuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5cyhuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqXG4gKiBfLmtleXMoJ2hpJyk7XG4gKiAvLyA9PiBbJzAnLCAnMSddXG4gKi9cbmZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QpIDogYmFzZUtleXMob2JqZWN0KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQga2V5cztcbiIsImltcG9ydCBjb3B5T2JqZWN0IGZyb20gJy4vX2NvcHlPYmplY3QuanMnO1xuaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VBc3NpZ24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlQXNzaWduO1xuIiwiLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2VcbiAqIFtgT2JqZWN0LmtleXNgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAqIGV4Y2VwdCB0aGF0IGl0IGluY2x1ZGVzIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIG5hdGl2ZUtleXNJbihvYmplY3QpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBpZiAob2JqZWN0ICE9IG51bGwpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG5hdGl2ZUtleXNJbjtcbiIsImltcG9ydCBpc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcbmltcG9ydCBpc1Byb3RvdHlwZSBmcm9tICcuL19pc1Byb3RvdHlwZS5qcyc7XG5pbXBvcnQgbmF0aXZlS2V5c0luIGZyb20gJy4vX25hdGl2ZUtleXNJbi5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c0luYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzSW4ob2JqZWN0KSB7XG4gIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzSW4ob2JqZWN0KTtcbiAgfVxuICB2YXIgaXNQcm90byA9IGlzUHJvdG90eXBlKG9iamVjdCksXG4gICAgICByZXN1bHQgPSBbXTtcblxuICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKCEoa2V5ID09ICdjb25zdHJ1Y3RvcicgJiYgKGlzUHJvdG8gfHwgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VLZXlzSW47XG4iLCJpbXBvcnQgYXJyYXlMaWtlS2V5cyBmcm9tICcuL19hcnJheUxpa2VLZXlzLmpzJztcbmltcG9ydCBiYXNlS2V5c0luIGZyb20gJy4vX2Jhc2VLZXlzSW4uanMnO1xuaW1wb3J0IGlzQXJyYXlMaWtlIGZyb20gJy4vaXNBcnJheUxpa2UuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzSW4obmV3IEZvbyk7XG4gKiAvLyA9PiBbJ2EnLCAnYicsICdjJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqL1xuZnVuY3Rpb24ga2V5c0luKG9iamVjdCkge1xuICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0LCB0cnVlKSA6IGJhc2VLZXlzSW4ob2JqZWN0KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQga2V5c0luO1xuIiwiaW1wb3J0IGNvcHlPYmplY3QgZnJvbSAnLi9fY29weU9iamVjdC5qcyc7XG5pbXBvcnQga2V5c0luIGZyb20gJy4va2V5c0luLmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25JbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gKiBvciBgY3VzdG9taXplcmAgZnVuY3Rpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gYmFzZUFzc2lnbkluKG9iamVjdCwgc291cmNlKSB7XG4gIHJldHVybiBvYmplY3QgJiYgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlQXNzaWduSW47XG4iLCIvKipcbiAqIENvcGllcyB0aGUgdmFsdWVzIG9mIGBzb3VyY2VgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgZnJvbS5cbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1bXV0gVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIHRvLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlBcnJheShzb3VyY2UsIGFycmF5KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcblxuICBhcnJheSB8fCAoYXJyYXkgPSBBcnJheShsZW5ndGgpKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtpbmRleF0gPSBzb3VyY2VbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29weUFycmF5O1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZmlsdGVyYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5RmlsdGVyKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcnJheUZpbHRlcjtcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgYXJyYXlzID0gXy50aW1lcygyLCBfLnN0dWJBcnJheSk7XG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzKTtcbiAqIC8vID0+IFtbXSwgW11dXG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzWzBdID09PSBhcnJheXNbMV0pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gc3R1YkFycmF5KCkge1xuICByZXR1cm4gW107XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0dWJBcnJheTtcbiIsImltcG9ydCBhcnJheUZpbHRlciBmcm9tICcuL19hcnJheUZpbHRlci5qcyc7XG5pbXBvcnQgc3R1YkFycmF5IGZyb20gJy4vc3R1YkFycmF5LmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUdldFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAqL1xudmFyIGdldFN5bWJvbHMgPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gIHJldHVybiBhcnJheUZpbHRlcihuYXRpdmVHZXRTeW1ib2xzKG9iamVjdCksIGZ1bmN0aW9uKHN5bWJvbCkge1xuICAgIHJldHVybiBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iamVjdCwgc3ltYm9sKTtcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBnZXRTeW1ib2xzO1xuIiwiaW1wb3J0IGNvcHlPYmplY3QgZnJvbSAnLi9fY29weU9iamVjdC5qcyc7XG5pbXBvcnQgZ2V0U3ltYm9scyBmcm9tICcuL19nZXRTeW1ib2xzLmpzJztcblxuLyoqXG4gKiBDb3BpZXMgb3duIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyB0by5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlTeW1ib2xzKHNvdXJjZSwgb2JqZWN0KSB7XG4gIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9scyhzb3VyY2UpLCBvYmplY3QpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjb3B5U3ltYm9scztcbiIsIi8qKlxuICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFwcGVuZC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBhcnJheVB1c2goYXJyYXksIHZhbHVlcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBvZmZzZXQgPSBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXJyYXlQdXNoO1xuIiwiaW1wb3J0IG92ZXJBcmcgZnJvbSAnLi9fb3ZlckFyZy5qcyc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIGdldFByb3RvdHlwZSA9IG92ZXJBcmcoT2JqZWN0LmdldFByb3RvdHlwZU9mLCBPYmplY3QpO1xuXG5leHBvcnQgZGVmYXVsdCBnZXRQcm90b3R5cGU7XG4iLCJpbXBvcnQgYXJyYXlQdXNoIGZyb20gJy4vX2FycmF5UHVzaC5qcyc7XG5pbXBvcnQgZ2V0UHJvdG90eXBlIGZyb20gJy4vX2dldFByb3RvdHlwZS5qcyc7XG5pbXBvcnQgZ2V0U3ltYm9scyBmcm9tICcuL19nZXRTeW1ib2xzLmpzJztcbmltcG9ydCBzdHViQXJyYXkgZnJvbSAnLi9zdHViQXJyYXkuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gKi9cbnZhciBnZXRTeW1ib2xzSW4gPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHdoaWxlIChvYmplY3QpIHtcbiAgICBhcnJheVB1c2gocmVzdWx0LCBnZXRTeW1ib2xzKG9iamVjdCkpO1xuICAgIG9iamVjdCA9IGdldFByb3RvdHlwZShvYmplY3QpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBnZXRTeW1ib2xzSW47XG4iLCJpbXBvcnQgY29weU9iamVjdCBmcm9tICcuL19jb3B5T2JqZWN0LmpzJztcbmltcG9ydCBnZXRTeW1ib2xzSW4gZnJvbSAnLi9fZ2V0U3ltYm9sc0luLmpzJztcblxuLyoqXG4gKiBDb3BpZXMgb3duIGFuZCBpbmhlcml0ZWQgc3ltYm9scyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyBmcm9tLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weVN5bWJvbHNJbihzb3VyY2UsIG9iamVjdCkge1xuICByZXR1cm4gY29weU9iamVjdChzb3VyY2UsIGdldFN5bWJvbHNJbihzb3VyY2UpLCBvYmplY3QpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjb3B5U3ltYm9sc0luO1xuIiwiaW1wb3J0IGFycmF5UHVzaCBmcm9tICcuL19hcnJheVB1c2guanMnO1xuaW1wb3J0IGlzQXJyYXkgZnJvbSAnLi9pc0FycmF5LmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0QWxsS2V5c2AgYW5kIGBnZXRBbGxLZXlzSW5gIHdoaWNoIHVzZXNcbiAqIGBrZXlzRnVuY2AgYW5kIGBzeW1ib2xzRnVuY2AgdG8gZ2V0IHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN5bWJvbHNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNGdW5jLCBzeW1ib2xzRnVuYykge1xuICB2YXIgcmVzdWx0ID0ga2V5c0Z1bmMob2JqZWN0KTtcbiAgcmV0dXJuIGlzQXJyYXkob2JqZWN0KSA/IHJlc3VsdCA6IGFycmF5UHVzaChyZXN1bHQsIHN5bWJvbHNGdW5jKG9iamVjdCkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlR2V0QWxsS2V5cztcbiIsImltcG9ydCBiYXNlR2V0QWxsS2V5cyBmcm9tICcuL19iYXNlR2V0QWxsS2V5cy5qcyc7XG5pbXBvcnQgZ2V0U3ltYm9scyBmcm9tICcuL19nZXRTeW1ib2xzLmpzJztcbmltcG9ydCBrZXlzIGZyb20gJy4va2V5cy5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gZ2V0QWxsS2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5cywgZ2V0U3ltYm9scyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldEFsbEtleXM7XG4iLCJpbXBvcnQgYmFzZUdldEFsbEtleXMgZnJvbSAnLi9fYmFzZUdldEFsbEtleXMuanMnO1xuaW1wb3J0IGdldFN5bWJvbHNJbiBmcm9tICcuL19nZXRTeW1ib2xzSW4uanMnO1xuaW1wb3J0IGtleXNJbiBmcm9tICcuL2tleXNJbi5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gZ2V0QWxsS2V5c0luKG9iamVjdCkge1xuICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzSW4sIGdldFN5bWJvbHNJbik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldEFsbEtleXNJbjtcbiIsImltcG9ydCBnZXROYXRpdmUgZnJvbSAnLi9fZ2V0TmF0aXZlLmpzJztcbmltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgRGF0YVZpZXcgPSBnZXROYXRpdmUocm9vdCwgJ0RhdGFWaWV3Jyk7XG5cbmV4cG9ydCBkZWZhdWx0IERhdGFWaWV3O1xuIiwiaW1wb3J0IGdldE5hdGl2ZSBmcm9tICcuL19nZXROYXRpdmUuanMnO1xuaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBQcm9taXNlID0gZ2V0TmF0aXZlKHJvb3QsICdQcm9taXNlJyk7XG5cbmV4cG9ydCBkZWZhdWx0IFByb21pc2U7XG4iLCJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5pbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFNldCA9IGdldE5hdGl2ZShyb290LCAnU2V0Jyk7XG5cbmV4cG9ydCBkZWZhdWx0IFNldDtcbiIsImltcG9ydCBnZXROYXRpdmUgZnJvbSAnLi9fZ2V0TmF0aXZlLmpzJztcbmltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgV2Vha01hcCA9IGdldE5hdGl2ZShyb290LCAnV2Vha01hcCcpO1xuXG5leHBvcnQgZGVmYXVsdCBXZWFrTWFwO1xuIiwiaW1wb3J0IERhdGFWaWV3IGZyb20gJy4vX0RhdGFWaWV3LmpzJztcbmltcG9ydCBNYXAgZnJvbSAnLi9fTWFwLmpzJztcbmltcG9ydCBQcm9taXNlIGZyb20gJy4vX1Byb21pc2UuanMnO1xuaW1wb3J0IFNldCBmcm9tICcuL19TZXQuanMnO1xuaW1wb3J0IFdlYWtNYXAgZnJvbSAnLi9fV2Vha01hcC5qcyc7XG5pbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCB0b1NvdXJjZSBmcm9tICcuL190b1NvdXJjZS5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICBwcm9taXNlVGFnID0gJ1tvYmplY3QgUHJvbWlzZV0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XSc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG52YXIgZGF0YVZpZXdDdG9yU3RyaW5nID0gdG9Tb3VyY2UoRGF0YVZpZXcpLFxuICAgIG1hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShNYXApLFxuICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgc2V0Q3RvclN0cmluZyA9IHRvU291cmNlKFNldCksXG4gICAgd2Vha01hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShXZWFrTWFwKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBgdG9TdHJpbmdUYWdgIG9mIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xudmFyIGdldFRhZyA9IGJhc2VHZXRUYWc7XG5cbi8vIEZhbGxiYWNrIGZvciBkYXRhIHZpZXdzLCBtYXBzLCBzZXRzLCBhbmQgd2VhayBtYXBzIGluIElFIDExIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzIDwgNi5cbmlmICgoRGF0YVZpZXcgJiYgZ2V0VGFnKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSkpKSAhPSBkYXRhVmlld1RhZykgfHxcbiAgICAoTWFwICYmIGdldFRhZyhuZXcgTWFwKSAhPSBtYXBUYWcpIHx8XG4gICAgKFByb21pc2UgJiYgZ2V0VGFnKFByb21pc2UucmVzb2x2ZSgpKSAhPSBwcm9taXNlVGFnKSB8fFxuICAgIChTZXQgJiYgZ2V0VGFnKG5ldyBTZXQpICE9IHNldFRhZykgfHxcbiAgICAoV2Vha01hcCAmJiBnZXRUYWcobmV3IFdlYWtNYXApICE9IHdlYWtNYXBUYWcpKSB7XG4gIGdldFRhZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGJhc2VHZXRUYWcodmFsdWUpLFxuICAgICAgICBDdG9yID0gcmVzdWx0ID09IG9iamVjdFRhZyA/IHZhbHVlLmNvbnN0cnVjdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICBjdG9yU3RyaW5nID0gQ3RvciA/IHRvU291cmNlKEN0b3IpIDogJyc7XG5cbiAgICBpZiAoY3RvclN0cmluZykge1xuICAgICAgc3dpdGNoIChjdG9yU3RyaW5nKSB7XG4gICAgICAgIGNhc2UgZGF0YVZpZXdDdG9yU3RyaW5nOiByZXR1cm4gZGF0YVZpZXdUYWc7XG4gICAgICAgIGNhc2UgbWFwQ3RvclN0cmluZzogcmV0dXJuIG1hcFRhZztcbiAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzogcmV0dXJuIHByb21pc2VUYWc7XG4gICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzogcmV0dXJuIHNldFRhZztcbiAgICAgICAgY2FzZSB3ZWFrTWFwQ3RvclN0cmluZzogcmV0dXJuIHdlYWtNYXBUYWc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFRhZztcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYW4gYXJyYXkgY2xvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gKi9cbmZ1bmN0aW9uIGluaXRDbG9uZUFycmF5KGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBuZXcgYXJyYXkuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICAvLyBBZGQgcHJvcGVydGllcyBhc3NpZ25lZCBieSBgUmVnRXhwI2V4ZWNgLlxuICBpZiAobGVuZ3RoICYmIHR5cGVvZiBhcnJheVswXSA9PSAnc3RyaW5nJyAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGFycmF5LCAnaW5kZXgnKSkge1xuICAgIHJlc3VsdC5pbmRleCA9IGFycmF5LmluZGV4O1xuICAgIHJlc3VsdC5pbnB1dCA9IGFycmF5LmlucHV0O1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGluaXRDbG9uZUFycmF5O1xuIiwiaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFVpbnQ4QXJyYXkgPSByb290LlVpbnQ4QXJyYXk7XG5cbmV4cG9ydCBkZWZhdWx0IFVpbnQ4QXJyYXk7XG4iLCJpbXBvcnQgVWludDhBcnJheSBmcm9tICcuL19VaW50OEFycmF5LmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYGFycmF5QnVmZmVyYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gYXJyYXlCdWZmZXIgVGhlIGFycmF5IGJ1ZmZlciB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtBcnJheUJ1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGFycmF5IGJ1ZmZlci5cbiAqL1xuZnVuY3Rpb24gY2xvbmVBcnJheUJ1ZmZlcihhcnJheUJ1ZmZlcikge1xuICB2YXIgcmVzdWx0ID0gbmV3IGFycmF5QnVmZmVyLmNvbnN0cnVjdG9yKGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpO1xuICBuZXcgVWludDhBcnJheShyZXN1bHQpLnNldChuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcikpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbG9uZUFycmF5QnVmZmVyO1xuIiwiaW1wb3J0IGNsb25lQXJyYXlCdWZmZXIgZnJvbSAnLi9fY2xvbmVBcnJheUJ1ZmZlci5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGBkYXRhVmlld2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhVmlldyBUaGUgZGF0YSB2aWV3IHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBkYXRhIHZpZXcuXG4gKi9cbmZ1bmN0aW9uIGNsb25lRGF0YVZpZXcoZGF0YVZpZXcsIGlzRGVlcCkge1xuICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcihkYXRhVmlldy5idWZmZXIpIDogZGF0YVZpZXcuYnVmZmVyO1xuICByZXR1cm4gbmV3IGRhdGFWaWV3LmNvbnN0cnVjdG9yKGJ1ZmZlciwgZGF0YVZpZXcuYnl0ZU9mZnNldCwgZGF0YVZpZXcuYnl0ZUxlbmd0aCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsb25lRGF0YVZpZXc7XG4iLCIvKiogVXNlZCB0byBtYXRjaCBgUmVnRXhwYCBmbGFncyBmcm9tIHRoZWlyIGNvZXJjZWQgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUZsYWdzID0gL1xcdyokLztcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHJlZ2V4cGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWdleHAgVGhlIHJlZ2V4cCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCByZWdleHAuXG4gKi9cbmZ1bmN0aW9uIGNsb25lUmVnRXhwKHJlZ2V4cCkge1xuICB2YXIgcmVzdWx0ID0gbmV3IHJlZ2V4cC5jb25zdHJ1Y3RvcihyZWdleHAuc291cmNlLCByZUZsYWdzLmV4ZWMocmVnZXhwKSk7XG4gIHJlc3VsdC5sYXN0SW5kZXggPSByZWdleHAubGFzdEluZGV4O1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbG9uZVJlZ0V4cDtcbiIsImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFZhbHVlT2YgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnZhbHVlT2YgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBgc3ltYm9sYCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzeW1ib2wgVGhlIHN5bWJvbCBvYmplY3QgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgc3ltYm9sIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gY2xvbmVTeW1ib2woc3ltYm9sKSB7XG4gIHJldHVybiBzeW1ib2xWYWx1ZU9mID8gT2JqZWN0KHN5bWJvbFZhbHVlT2YuY2FsbChzeW1ib2wpKSA6IHt9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbG9uZVN5bWJvbDtcbiIsImltcG9ydCBjbG9uZUFycmF5QnVmZmVyIGZyb20gJy4vX2Nsb25lQXJyYXlCdWZmZXIuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgdHlwZWRBcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSB0eXBlZEFycmF5IFRoZSB0eXBlZCBhcnJheSB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgdHlwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGNsb25lVHlwZWRBcnJheSh0eXBlZEFycmF5LCBpc0RlZXApIHtcbiAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIodHlwZWRBcnJheS5idWZmZXIpIDogdHlwZWRBcnJheS5idWZmZXI7XG4gIHJldHVybiBuZXcgdHlwZWRBcnJheS5jb25zdHJ1Y3RvcihidWZmZXIsIHR5cGVkQXJyYXkuYnl0ZU9mZnNldCwgdHlwZWRBcnJheS5sZW5ndGgpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbG9uZVR5cGVkQXJyYXk7XG4iLCJpbXBvcnQgY2xvbmVBcnJheUJ1ZmZlciBmcm9tICcuL19jbG9uZUFycmF5QnVmZmVyLmpzJztcbmltcG9ydCBjbG9uZURhdGFWaWV3IGZyb20gJy4vX2Nsb25lRGF0YVZpZXcuanMnO1xuaW1wb3J0IGNsb25lUmVnRXhwIGZyb20gJy4vX2Nsb25lUmVnRXhwLmpzJztcbmltcG9ydCBjbG9uZVN5bWJvbCBmcm9tICcuL19jbG9uZVN5bWJvbC5qcyc7XG5pbXBvcnQgY2xvbmVUeXBlZEFycmF5IGZyb20gJy4vX2Nsb25lVHlwZWRBcnJheS5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKipcbiAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZSBiYXNlZCBvbiBpdHMgYHRvU3RyaW5nVGFnYC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNsb25pbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBNYXBgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIGBTZXRgLCBvciBgU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0IHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICovXG5mdW5jdGlvbiBpbml0Q2xvbmVCeVRhZyhvYmplY3QsIHRhZywgaXNEZWVwKSB7XG4gIHZhciBDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yO1xuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICByZXR1cm4gY2xvbmVBcnJheUJ1ZmZlcihvYmplY3QpO1xuXG4gICAgY2FzZSBib29sVGFnOlxuICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgIHJldHVybiBuZXcgQ3Rvcigrb2JqZWN0KTtcblxuICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICByZXR1cm4gY2xvbmVEYXRhVmlldyhvYmplY3QsIGlzRGVlcCk7XG5cbiAgICBjYXNlIGZsb2F0MzJUYWc6IGNhc2UgZmxvYXQ2NFRhZzpcbiAgICBjYXNlIGludDhUYWc6IGNhc2UgaW50MTZUYWc6IGNhc2UgaW50MzJUYWc6XG4gICAgY2FzZSB1aW50OFRhZzogY2FzZSB1aW50OENsYW1wZWRUYWc6IGNhc2UgdWludDE2VGFnOiBjYXNlIHVpbnQzMlRhZzpcbiAgICAgIHJldHVybiBjbG9uZVR5cGVkQXJyYXkob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgY2FzZSBtYXBUYWc6XG4gICAgICByZXR1cm4gbmV3IEN0b3I7XG5cbiAgICBjYXNlIG51bWJlclRhZzpcbiAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgIHJldHVybiBuZXcgQ3RvcihvYmplY3QpO1xuXG4gICAgY2FzZSByZWdleHBUYWc6XG4gICAgICByZXR1cm4gY2xvbmVSZWdFeHAob2JqZWN0KTtcblxuICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICByZXR1cm4gY2xvbmVTeW1ib2wob2JqZWN0KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBpbml0Q2xvbmVCeVRhZztcbiIsImltcG9ydCBpc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0Q3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jcmVhdGVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgYXNzaWduaW5nXG4gKiBwcm9wZXJ0aWVzIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHByb3RvIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAqL1xudmFyIGJhc2VDcmVhdGUgPSAoZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIG9iamVjdCgpIHt9XG4gIHJldHVybiBmdW5jdGlvbihwcm90bykge1xuICAgIGlmICghaXNPYmplY3QocHJvdG8pKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGlmIChvYmplY3RDcmVhdGUpIHtcbiAgICAgIHJldHVybiBvYmplY3RDcmVhdGUocHJvdG8pO1xuICAgIH1cbiAgICBvYmplY3QucHJvdG90eXBlID0gcHJvdG87XG4gICAgdmFyIHJlc3VsdCA9IG5ldyBvYmplY3Q7XG4gICAgb2JqZWN0LnByb3RvdHlwZSA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufSgpKTtcblxuZXhwb3J0IGRlZmF1bHQgYmFzZUNyZWF0ZTtcbiIsImltcG9ydCBiYXNlQ3JlYXRlIGZyb20gJy4vX2Jhc2VDcmVhdGUuanMnO1xuaW1wb3J0IGdldFByb3RvdHlwZSBmcm9tICcuL19nZXRQcm90b3R5cGUuanMnO1xuaW1wb3J0IGlzUHJvdG90eXBlIGZyb20gJy4vX2lzUHJvdG90eXBlLmpzJztcblxuLyoqXG4gKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICovXG5mdW5jdGlvbiBpbml0Q2xvbmVPYmplY3Qob2JqZWN0KSB7XG4gIHJldHVybiAodHlwZW9mIG9iamVjdC5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmICFpc1Byb3RvdHlwZShvYmplY3QpKVxuICAgID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSlcbiAgICA6IHt9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBpbml0Q2xvbmVPYmplY3Q7XG4iLCJpbXBvcnQgZ2V0VGFnIGZyb20gJy4vX2dldFRhZy5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWFwYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG1hcCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNNYXAodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSBtYXBUYWc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VJc01hcDtcbiIsImltcG9ydCBiYXNlSXNNYXAgZnJvbSAnLi9fYmFzZUlzTWFwLmpzJztcbmltcG9ydCBiYXNlVW5hcnkgZnJvbSAnLi9fYmFzZVVuYXJ5LmpzJztcbmltcG9ydCBub2RlVXRpbCBmcm9tICcuL19ub2RlVXRpbC5qcyc7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzTWFwID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNNYXA7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBNYXBgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG1hcCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTWFwKG5ldyBNYXApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNNYXAobmV3IFdlYWtNYXApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzTWFwID0gbm9kZUlzTWFwID8gYmFzZVVuYXJ5KG5vZGVJc01hcCkgOiBiYXNlSXNNYXA7XG5cbmV4cG9ydCBkZWZhdWx0IGlzTWFwO1xuIiwiaW1wb3J0IGdldFRhZyBmcm9tICcuL19nZXRUYWcuanMnO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tICcuL2lzT2JqZWN0TGlrZS5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzZXRUYWcgPSAnW29iamVjdCBTZXRdJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1NldGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzZXQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzU2V0KHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gc2V0VGFnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXNTZXQ7XG4iLCJpbXBvcnQgYmFzZUlzU2V0IGZyb20gJy4vX2Jhc2VJc1NldC5qcyc7XG5pbXBvcnQgYmFzZVVuYXJ5IGZyb20gJy4vX2Jhc2VVbmFyeS5qcyc7XG5pbXBvcnQgbm9kZVV0aWwgZnJvbSAnLi9fbm9kZVV0aWwuanMnO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc1NldCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzU2V0O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU2V0YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjMuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzZXQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1NldChuZXcgU2V0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU2V0KG5ldyBXZWFrU2V0KTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc1NldCA9IG5vZGVJc1NldCA/IGJhc2VVbmFyeShub2RlSXNTZXQpIDogYmFzZUlzU2V0O1xuXG5leHBvcnQgZGVmYXVsdCBpc1NldDtcbiIsImltcG9ydCBTdGFjayBmcm9tICcuL19TdGFjay5qcyc7XG5pbXBvcnQgYXJyYXlFYWNoIGZyb20gJy4vX2FycmF5RWFjaC5qcyc7XG5pbXBvcnQgYXNzaWduVmFsdWUgZnJvbSAnLi9fYXNzaWduVmFsdWUuanMnO1xuaW1wb3J0IGJhc2VBc3NpZ24gZnJvbSAnLi9fYmFzZUFzc2lnbi5qcyc7XG5pbXBvcnQgYmFzZUFzc2lnbkluIGZyb20gJy4vX2Jhc2VBc3NpZ25Jbi5qcyc7XG5pbXBvcnQgY2xvbmVCdWZmZXIgZnJvbSAnLi9fY2xvbmVCdWZmZXIuanMnO1xuaW1wb3J0IGNvcHlBcnJheSBmcm9tICcuL19jb3B5QXJyYXkuanMnO1xuaW1wb3J0IGNvcHlTeW1ib2xzIGZyb20gJy4vX2NvcHlTeW1ib2xzLmpzJztcbmltcG9ydCBjb3B5U3ltYm9sc0luIGZyb20gJy4vX2NvcHlTeW1ib2xzSW4uanMnO1xuaW1wb3J0IGdldEFsbEtleXMgZnJvbSAnLi9fZ2V0QWxsS2V5cy5qcyc7XG5pbXBvcnQgZ2V0QWxsS2V5c0luIGZyb20gJy4vX2dldEFsbEtleXNJbi5qcyc7XG5pbXBvcnQgZ2V0VGFnIGZyb20gJy4vX2dldFRhZy5qcyc7XG5pbXBvcnQgaW5pdENsb25lQXJyYXkgZnJvbSAnLi9faW5pdENsb25lQXJyYXkuanMnO1xuaW1wb3J0IGluaXRDbG9uZUJ5VGFnIGZyb20gJy4vX2luaXRDbG9uZUJ5VGFnLmpzJztcbmltcG9ydCBpbml0Q2xvbmVPYmplY3QgZnJvbSAnLi9faW5pdENsb25lT2JqZWN0LmpzJztcbmltcG9ydCBpc0FycmF5IGZyb20gJy4vaXNBcnJheS5qcyc7XG5pbXBvcnQgaXNCdWZmZXIgZnJvbSAnLi9pc0J1ZmZlci5qcyc7XG5pbXBvcnQgaXNNYXAgZnJvbSAnLi9pc01hcC5qcyc7XG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5pbXBvcnQgaXNTZXQgZnJvbSAnLi9pc1NldC5qcyc7XG5pbXBvcnQga2V5cyBmcm9tICcuL2tleXMuanMnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBjbG9uaW5nLiAqL1xudmFyIENMT05FX0RFRVBfRkxBRyA9IDEsXG4gICAgQ0xPTkVfRkxBVF9GTEFHID0gMixcbiAgICBDTE9ORV9TWU1CT0xTX0ZMQUcgPSA0O1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbi8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIHN1cHBvcnRlZCBieSBgXy5jbG9uZWAuICovXG52YXIgY2xvbmVhYmxlVGFncyA9IHt9O1xuY2xvbmVhYmxlVGFnc1thcmdzVGFnXSA9IGNsb25lYWJsZVRhZ3NbYXJyYXlUYWddID1cbmNsb25lYWJsZVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gY2xvbmVhYmxlVGFnc1tkYXRhVmlld1RhZ10gPVxuY2xvbmVhYmxlVGFnc1tib29sVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0ZVRhZ10gPVxuY2xvbmVhYmxlVGFnc1tmbG9hdDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZmxvYXQ2NFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tpbnQ4VGFnXSA9IGNsb25lYWJsZVRhZ3NbaW50MTZUYWddID1cbmNsb25lYWJsZVRhZ3NbaW50MzJUYWddID0gY2xvbmVhYmxlVGFnc1ttYXBUYWddID1cbmNsb25lYWJsZVRhZ3NbbnVtYmVyVGFnXSA9IGNsb25lYWJsZVRhZ3Nbb2JqZWN0VGFnXSA9XG5jbG9uZWFibGVUYWdzW3JlZ2V4cFRhZ10gPSBjbG9uZWFibGVUYWdzW3NldFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tzdHJpbmdUYWddID0gY2xvbmVhYmxlVGFnc1tzeW1ib2xUYWddID1cbmNsb25lYWJsZVRhZ3NbdWludDhUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50OENsYW1wZWRUYWddID1cbmNsb25lYWJsZVRhZ3NbdWludDE2VGFnXSA9IGNsb25lYWJsZVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG5jbG9uZWFibGVUYWdzW2Vycm9yVGFnXSA9IGNsb25lYWJsZVRhZ3NbZnVuY1RhZ10gPVxuY2xvbmVhYmxlVGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNsb25lYCBhbmQgYF8uY2xvbmVEZWVwYCB3aGljaCB0cmFja3NcbiAqIHRyYXZlcnNlZCBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAqICAxIC0gRGVlcCBjbG9uZVxuICogIDIgLSBGbGF0dGVuIGluaGVyaXRlZCBwcm9wZXJ0aWVzXG4gKiAgNCAtIENsb25lIHN5bWJvbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2tleV0gVGhlIGtleSBvZiBgdmFsdWVgLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGB2YWx1ZWAuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIG9iamVjdHMgYW5kIHRoZWlyIGNsb25lIGNvdW50ZXJwYXJ0cy5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VDbG9uZSh2YWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCBvYmplY3QsIHN0YWNrKSB7XG4gIHZhciByZXN1bHQsXG4gICAgICBpc0RlZXAgPSBiaXRtYXNrICYgQ0xPTkVfREVFUF9GTEFHLFxuICAgICAgaXNGbGF0ID0gYml0bWFzayAmIENMT05FX0ZMQVRfRkxBRyxcbiAgICAgIGlzRnVsbCA9IGJpdG1hc2sgJiBDTE9ORV9TWU1CT0xTX0ZMQUc7XG5cbiAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICByZXN1bHQgPSBvYmplY3QgPyBjdXN0b21pemVyKHZhbHVlLCBrZXksIG9iamVjdCwgc3RhY2spIDogY3VzdG9taXplcih2YWx1ZSk7XG4gIH1cbiAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKTtcbiAgaWYgKGlzQXJyKSB7XG4gICAgcmVzdWx0ID0gaW5pdENsb25lQXJyYXkodmFsdWUpO1xuICAgIGlmICghaXNEZWVwKSB7XG4gICAgICByZXR1cm4gY29weUFycmF5KHZhbHVlLCByZXN1bHQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKSxcbiAgICAgICAgaXNGdW5jID0gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZztcblxuICAgIGlmIChpc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjbG9uZUJ1ZmZlcih2YWx1ZSwgaXNEZWVwKTtcbiAgICB9XG4gICAgaWYgKHRhZyA9PSBvYmplY3RUYWcgfHwgdGFnID09IGFyZ3NUYWcgfHwgKGlzRnVuYyAmJiAhb2JqZWN0KSkge1xuICAgICAgcmVzdWx0ID0gKGlzRmxhdCB8fCBpc0Z1bmMpID8ge30gOiBpbml0Q2xvbmVPYmplY3QodmFsdWUpO1xuICAgICAgaWYgKCFpc0RlZXApIHtcbiAgICAgICAgcmV0dXJuIGlzRmxhdFxuICAgICAgICAgID8gY29weVN5bWJvbHNJbih2YWx1ZSwgYmFzZUFzc2lnbkluKHJlc3VsdCwgdmFsdWUpKVxuICAgICAgICAgIDogY29weVN5bWJvbHModmFsdWUsIGJhc2VBc3NpZ24ocmVzdWx0LCB2YWx1ZSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWNsb25lYWJsZVRhZ3NbdGFnXSkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID8gdmFsdWUgOiB7fTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IGluaXRDbG9uZUJ5VGFnKHZhbHVlLCB0YWcsIGlzRGVlcCk7XG4gICAgfVxuICB9XG4gIC8vIENoZWNrIGZvciBjaXJjdWxhciByZWZlcmVuY2VzIGFuZCByZXR1cm4gaXRzIGNvcnJlc3BvbmRpbmcgY2xvbmUuXG4gIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KHZhbHVlKTtcbiAgaWYgKHN0YWNrZWQpIHtcbiAgICByZXR1cm4gc3RhY2tlZDtcbiAgfVxuICBzdGFjay5zZXQodmFsdWUsIHJlc3VsdCk7XG5cbiAgaWYgKGlzU2V0KHZhbHVlKSkge1xuICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUpIHtcbiAgICAgIHJlc3VsdC5hZGQoYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdWJWYWx1ZSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoaXNNYXAodmFsdWUpKSB7XG4gICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgICByZXN1bHQuc2V0KGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGtleXNGdW5jID0gaXNGdWxsXG4gICAgPyAoaXNGbGF0ID8gZ2V0QWxsS2V5c0luIDogZ2V0QWxsS2V5cylcbiAgICA6IChpc0ZsYXQgPyBrZXlzSW4gOiBrZXlzKTtcblxuICB2YXIgcHJvcHMgPSBpc0FyciA/IHVuZGVmaW5lZCA6IGtleXNGdW5jKHZhbHVlKTtcbiAgYXJyYXlFYWNoKHByb3BzIHx8IHZhbHVlLCBmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgaWYgKHByb3BzKSB7XG4gICAgICBrZXkgPSBzdWJWYWx1ZTtcbiAgICAgIHN1YlZhbHVlID0gdmFsdWVba2V5XTtcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgcG9wdWxhdGUgY2xvbmUgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBhc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUNsb25lO1xuIiwiaW1wb3J0IGJhc2VDbG9uZSBmcm9tICcuL19iYXNlQ2xvbmUuanMnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBjbG9uaW5nLiAqL1xudmFyIENMT05FX1NZTUJPTFNfRkxBRyA9IDQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHNoYWxsb3cgY2xvbmUgb2YgYHZhbHVlYC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvbiB0aGVcbiAqIFtzdHJ1Y3R1cmVkIGNsb25lIGFsZ29yaXRobV0oaHR0cHM6Ly9tZG4uaW8vU3RydWN0dXJlZF9jbG9uZV9hbGdvcml0aG0pXG4gKiBhbmQgc3VwcG9ydHMgY2xvbmluZyBhcnJheXMsIGFycmF5IGJ1ZmZlcnMsIGJvb2xlYW5zLCBkYXRlIG9iamVjdHMsIG1hcHMsXG4gKiBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLCBzZXRzLCBzdHJpbmdzLCBzeW1ib2xzLCBhbmQgdHlwZWRcbiAqIGFycmF5cy4gVGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgYGFyZ3VtZW50c2Agb2JqZWN0cyBhcmUgY2xvbmVkXG4gKiBhcyBwbGFpbiBvYmplY3RzLiBBbiBlbXB0eSBvYmplY3QgaXMgcmV0dXJuZWQgZm9yIHVuY2xvbmVhYmxlIHZhbHVlcyBzdWNoXG4gKiBhcyBlcnJvciBvYmplY3RzLCBmdW5jdGlvbnMsIERPTSBub2RlcywgYW5kIFdlYWtNYXBzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gKiBAc2VlIF8uY2xvbmVEZWVwXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3RzID0gW3sgJ2EnOiAxIH0sIHsgJ2InOiAyIH1dO1xuICpcbiAqIHZhciBzaGFsbG93ID0gXy5jbG9uZShvYmplY3RzKTtcbiAqIGNvbnNvbGUubG9nKHNoYWxsb3dbMF0gPT09IG9iamVjdHNbMF0pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBjbG9uZSh2YWx1ZSkge1xuICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9TWU1CT0xTX0ZMQUcpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbG9uZTtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gKiBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheU1hcChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFycmF5TWFwO1xuIiwiaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc1N5bWJvbDtcbiIsImltcG9ydCBNYXBDYWNoZSBmcm9tICcuL19NYXBDYWNoZS5qcyc7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcbiAqIHByb3ZpZGVkLCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICogcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uIGlzIHVzZWQgYXMgdGhlIG1hcCBjYWNoZSBrZXkuIFRoZSBgZnVuY2BcbiAqIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICpcbiAqICoqTm90ZToqKiBUaGUgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWRcbiAqIGZ1bmN0aW9uLiBJdHMgY3JlYXRpb24gbWF5IGJlIGN1c3RvbWl6ZWQgYnkgcmVwbGFjaW5nIHRoZSBgXy5tZW1vaXplLkNhY2hlYFxuICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAqIFtgTWFwYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcHJvcGVydGllcy1vZi10aGUtbWFwLXByb3RvdHlwZS1vYmplY3QpXG4gKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBjbGVhcmAsIGBkZWxldGVgLCBgZ2V0YCwgYGhhc2AsIGFuZCBgc2V0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICogdmFyIG90aGVyID0geyAnYyc6IDMsICdkJzogNCB9O1xuICpcbiAqIHZhciB2YWx1ZXMgPSBfLm1lbW9pemUoXy52YWx1ZXMpO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiB2YWx1ZXMob3RoZXIpO1xuICogLy8gPT4gWzMsIDRdXG4gKlxuICogb2JqZWN0LmEgPSAyO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAqIHZhbHVlcy5jYWNoZS5zZXQob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWydhJywgJ2InXVxuICpcbiAqIC8vIFJlcGxhY2UgYF8ubWVtb2l6ZS5DYWNoZWAuXG4gKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICovXG5mdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICBpZiAoY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpIHx8IGNhY2hlO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKTtcbiAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG4vLyBFeHBvc2UgYE1hcENhY2hlYC5cbm1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZTtcbiIsImltcG9ydCBtZW1vaXplIGZyb20gJy4vbWVtb2l6ZS5qcyc7XG5cbi8qKiBVc2VkIGFzIHRoZSBtYXhpbXVtIG1lbW9pemUgY2FjaGUgc2l6ZS4gKi9cbnZhciBNQVhfTUVNT0laRV9TSVpFID0gNTAwO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tZW1vaXplYCB3aGljaCBjbGVhcnMgdGhlIG1lbW9pemVkIGZ1bmN0aW9uJ3NcbiAqIGNhY2hlIHdoZW4gaXQgZXhjZWVkcyBgTUFYX01FTU9JWkVfU0laRWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBtZW1vaXplQ2FwcGVkKGZ1bmMpIHtcbiAgdmFyIHJlc3VsdCA9IG1lbW9pemUoZnVuYywgZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKGNhY2hlLnNpemUgPT09IE1BWF9NRU1PSVpFX1NJWkUpIHtcbiAgICAgIGNhY2hlLmNsZWFyKCk7XG4gICAgfVxuICAgIHJldHVybiBrZXk7XG4gIH0pO1xuXG4gIHZhciBjYWNoZSA9IHJlc3VsdC5jYWNoZTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZUNhcHBlZDtcbiIsImltcG9ydCBtZW1vaXplQ2FwcGVkIGZyb20gJy4vX21lbW9pemVDYXBwZWQuanMnO1xuXG4vKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVQcm9wTmFtZSA9IC9bXi5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwkKSkvZztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggYmFja3NsYXNoZXMgaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVFc2NhcGVDaGFyID0gL1xcXFwoXFxcXCk/L2c7XG5cbi8qKlxuICogQ29udmVydHMgYHN0cmluZ2AgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqL1xudmFyIHN0cmluZ1RvUGF0aCA9IG1lbW9pemVDYXBwZWQoZnVuY3Rpb24oc3RyaW5nKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgaWYgKHN0cmluZy5jaGFyQ29kZUF0KDApID09PSA0NiAvKiAuICovKSB7XG4gICAgcmVzdWx0LnB1c2goJycpO1xuICB9XG4gIHN0cmluZy5yZXBsYWNlKHJlUHJvcE5hbWUsIGZ1bmN0aW9uKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdWJTdHJpbmcpIHtcbiAgICByZXN1bHQucHVzaChxdW90ZSA/IHN1YlN0cmluZy5yZXBsYWNlKHJlRXNjYXBlQ2hhciwgJyQxJykgOiAobnVtYmVyIHx8IG1hdGNoKSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHN0cmluZ1RvUGF0aDtcbiIsImltcG9ydCBpc1N5bWJvbCBmcm9tICcuL2lzU3ltYm9sLmpzJztcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIGtleSBpZiBpdCdzIG5vdCBhIHN0cmluZyBvciBzeW1ib2wuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7c3RyaW5nfHN5bWJvbH0gUmV0dXJucyB0aGUga2V5LlxuICovXG5mdW5jdGlvbiB0b0tleSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRvS2V5O1xuIiwiaW1wb3J0IFN5bWJvbCBmcm9tICcuL19TeW1ib2wuanMnO1xuaW1wb3J0IGFycmF5TWFwIGZyb20gJy4vX2FycmF5TWFwLmpzJztcbmltcG9ydCBpc0FycmF5IGZyb20gJy4vaXNBcnJheS5qcyc7XG5pbXBvcnQgaXNTeW1ib2wgZnJvbSAnLi9pc1N5bWJvbC5qcyc7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDA7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udG9TdHJpbmcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9TdHJpbmdgIHdoaWNoIGRvZXNuJ3QgY29udmVydCBudWxsaXNoXG4gKiB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5ncy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRvU3RyaW5nKHZhbHVlKSB7XG4gIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgLy8gUmVjdXJzaXZlbHkgY29udmVydCB2YWx1ZXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIGJhc2VUb1N0cmluZykgKyAnJztcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN5bWJvbFRvU3RyaW5nID8gc3ltYm9sVG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgfVxuICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VUb1N0cmluZztcbiIsImltcG9ydCBiYXNlVG9TdHJpbmcgZnJvbSAnLi9fYmFzZVRvU3RyaW5nLmpzJztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nLiBBbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQgZm9yIGBudWxsYFxuICogYW5kIGB1bmRlZmluZWRgIHZhbHVlcy4gVGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvU3RyaW5nKG51bGwpO1xuICogLy8gPT4gJydcbiAqXG4gKiBfLnRvU3RyaW5nKC0wKTtcbiAqIC8vID0+ICctMCdcbiAqXG4gKiBfLnRvU3RyaW5nKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiAnMSwyLDMnXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiBiYXNlVG9TdHJpbmcodmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB0b1N0cmluZztcbiIsImltcG9ydCBhcnJheU1hcCBmcm9tICcuL19hcnJheU1hcC5qcyc7XG5pbXBvcnQgY29weUFycmF5IGZyb20gJy4vX2NvcHlBcnJheS5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IGlzU3ltYm9sIGZyb20gJy4vaXNTeW1ib2wuanMnO1xuaW1wb3J0IHN0cmluZ1RvUGF0aCBmcm9tICcuL19zdHJpbmdUb1BhdGguanMnO1xuaW1wb3J0IHRvS2V5IGZyb20gJy4vX3RvS2V5LmpzJztcbmltcG9ydCB0b1N0cmluZyBmcm9tICcuL3RvU3RyaW5nLmpzJztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9QYXRoKCdhLmIuYycpO1xuICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gKlxuICogXy50b1BhdGgoJ2FbMF0uYi5jJyk7XG4gKiAvLyA9PiBbJ2EnLCAnMCcsICdiJywgJ2MnXVxuICovXG5mdW5jdGlvbiB0b1BhdGgodmFsdWUpIHtcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCB0b0tleSk7XG4gIH1cbiAgcmV0dXJuIGlzU3ltYm9sKHZhbHVlKSA/IFt2YWx1ZV0gOiBjb3B5QXJyYXkoc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB0b1BhdGg7XG4iLCJpbXBvcnQgYmFzZUNsb25lIGZyb20gJy4vX2Jhc2VDbG9uZS5qcyc7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGNsb25pbmcuICovXG52YXIgQ0xPTkVfREVFUF9GTEFHID0gMSxcbiAgICBDTE9ORV9TWU1CT0xTX0ZMQUcgPSA0O1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGNsb25lcyBgdmFsdWVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMS4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZWN1cnNpdmVseSBjbG9uZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBkZWVwIGNsb25lZCB2YWx1ZS5cbiAqIEBzZWUgXy5jbG9uZVxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IFt7ICdhJzogMSB9LCB7ICdiJzogMiB9XTtcbiAqXG4gKiB2YXIgZGVlcCA9IF8uY2xvbmVEZWVwKG9iamVjdHMpO1xuICogY29uc29sZS5sb2coZGVlcFswXSA9PT0gb2JqZWN0c1swXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBjbG9uZURlZXAodmFsdWUpIHtcbiAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xvbmVEZWVwO1xuIiwiaW1wb3J0IHsgX19hc3NpZ24sIF9fZXh0ZW5kcywgX19yZXN0IH0gZnJvbSAndHNsaWInO1xuaW1wb3J0IHsgY3JlYXRlRWxlbWVudCwgQ2hpbGRyZW4sIENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBpc0VxdWFsIGZyb20gJ3JlYWN0LWZhc3QtY29tcGFyZSc7XG5pbXBvcnQgZGVlcG1lcmdlIGZyb20gJ2RlZXBtZXJnZSc7XG5pbXBvcnQgaG9pc3ROb25SZWFjdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuaW1wb3J0IGNyZWF0ZUNvbnRleHQgZnJvbSAnY3JlYXRlLXJlYWN0LWNvbnRleHQnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBjbG9uZSBmcm9tICdsb2Rhc2gtZXMvY2xvbmUnO1xuaW1wb3J0IHRvUGF0aCBmcm9tICdsb2Rhc2gtZXMvdG9QYXRoJztcbmltcG9ydCBjbG9uZURlZXAgZnJvbSAnbG9kYXNoLWVzL2Nsb25lRGVlcCc7XG5cbnZhciBfYTtcbnZhciBGb3JtaWtQcm92aWRlciA9IChfYSA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVDb250ZXh0KHt9KSwgX2EuUHJvdmlkZXIpLFxuICAgIEZvcm1pa0NvbnN1bWVyID0gX2EuQ29uc3VtZXI7XG5mdW5jdGlvbiBjb25uZWN0KENvbXApIHtcbiAgdmFyIEMgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICByZXR1cm4gY3JlYXRlRWxlbWVudChGb3JtaWtDb25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGZvcm1paykge1xuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoQ29tcCwgX19hc3NpZ24oe30sIHByb3BzLCB7XG4gICAgICAgIGZvcm1pazogZm9ybWlrXG4gICAgICB9KSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGNvbXBvbmVudERpc3BsYXlOYW1lID0gQ29tcC5kaXNwbGF5TmFtZSB8fCBDb21wLm5hbWUgfHwgQ29tcC5jb25zdHJ1Y3RvciAmJiBDb21wLmNvbnN0cnVjdG9yLm5hbWUgfHwgJ0NvbXBvbmVudCc7XG4gIEMuV3JhcHBlZENvbXBvbmVudCA9IENvbXA7XG4gIEMuZGlzcGxheU5hbWUgPSBcIkZvcm1pa0Nvbm5lY3QoXCIgKyBjb21wb25lbnREaXNwbGF5TmFtZSArIFwiKVwiO1xuICByZXR1cm4gaG9pc3ROb25SZWFjdFN0YXRpY3MoQywgQ29tcCk7XG59XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJztcbn07XG52YXIgaXNPYmplY3QgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCc7XG59O1xudmFyIGlzSW50ZWdlciA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIFN0cmluZyhNYXRoLmZsb29yKE51bWJlcihvYmopKSkgPT09IG9iajtcbn07XG52YXIgaXNTdHJpbmcgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgU3RyaW5nXSc7XG59O1xudmFyIGlzTmFOID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICE9PSBvYmo7XG59O1xudmFyIGlzRW1wdHlDaGlsZHJlbiA9IGZ1bmN0aW9uIChjaGlsZHJlbikge1xuICByZXR1cm4gQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAwO1xufTtcbnZhciBpc1Byb21pc2UgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHZhbHVlKSAmJiBpc0Z1bmN0aW9uKHZhbHVlLnRoZW4pO1xufTtcbnZhciBpc0lucHV0RXZlbnQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICYmIGlzT2JqZWN0KHZhbHVlKSAmJiBpc09iamVjdCh2YWx1ZS50YXJnZXQpO1xufTtcbmZ1bmN0aW9uIGdldEFjdGl2ZUVsZW1lbnQoZG9jKSB7XG4gIGRvYyA9IGRvYyB8fCAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IGRvY3VtZW50IDogdW5kZWZpbmVkKTtcblxuICBpZiAodHlwZW9mIGRvYyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHRyeSB7XG4gICAgcmV0dXJuIGRvYy5hY3RpdmVFbGVtZW50IHx8IGRvYy5ib2R5O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGRvYy5ib2R5O1xuICB9XG59XG5mdW5jdGlvbiBtYWtlQ2FuY2VsYWJsZShwcm9taXNlKSB7XG4gIHZhciBoYXNDYW5jZWxlZCA9IGZhbHNlO1xuICB2YXIgd3JhcHBlZFByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHJldHVybiBoYXNDYW5jZWxlZCA/IHJlamVjdCh7XG4gICAgICAgIGlzQ2FuY2VsZWQ6IHRydWVcbiAgICAgIH0pIDogcmVzb2x2ZSh2YWwpO1xuICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgcmV0dXJuIGhhc0NhbmNlbGVkID8gcmVqZWN0KHtcbiAgICAgICAgaXNDYW5jZWxlZDogdHJ1ZVxuICAgICAgfSkgOiByZWplY3QoZXJyb3IpO1xuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIFt3cmFwcGVkUHJvbWlzZSwgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgIGhhc0NhbmNlbGVkID0gdHJ1ZTtcbiAgfV07XG59XG5mdW5jdGlvbiBnZXRJbihvYmosIGtleSwgZGVmLCBwKSB7XG4gIGlmIChwID09PSB2b2lkIDApIHtcbiAgICBwID0gMDtcbiAgfVxuXG4gIHZhciBwYXRoID0gdG9QYXRoKGtleSk7XG5cbiAgd2hpbGUgKG9iaiAmJiBwIDwgcGF0aC5sZW5ndGgpIHtcbiAgICBvYmogPSBvYmpbcGF0aFtwKytdXTtcbiAgfVxuXG4gIHJldHVybiBvYmogPT09IHVuZGVmaW5lZCA/IGRlZiA6IG9iajtcbn1cbmZ1bmN0aW9uIHNldEluKG9iaiwgcGF0aCwgdmFsdWUpIHtcbiAgdmFyIHJlcyA9IGNsb25lKG9iaik7XG4gIHZhciByZXNWYWwgPSByZXM7XG4gIHZhciBpID0gMDtcbiAgdmFyIHBhdGhBcnJheSA9IHRvUGF0aChwYXRoKTtcblxuICBmb3IgKDsgaSA8IHBhdGhBcnJheS5sZW5ndGggLSAxOyBpKyspIHtcbiAgICB2YXIgY3VycmVudFBhdGggPSBwYXRoQXJyYXlbaV07XG4gICAgdmFyIGN1cnJlbnRPYmogPSBnZXRJbihvYmosIHBhdGhBcnJheS5zbGljZSgwLCBpICsgMSkpO1xuXG4gICAgaWYgKGN1cnJlbnRPYmopIHtcbiAgICAgIHJlc1ZhbCA9IHJlc1ZhbFtjdXJyZW50UGF0aF0gPSBjbG9uZShjdXJyZW50T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG5leHRQYXRoID0gcGF0aEFycmF5W2kgKyAxXTtcbiAgICAgIHJlc1ZhbCA9IHJlc1ZhbFtjdXJyZW50UGF0aF0gPSBpc0ludGVnZXIobmV4dFBhdGgpICYmIE51bWJlcihuZXh0UGF0aCkgPj0gMCA/IFtdIDoge307XG4gICAgfVxuICB9XG5cbiAgaWYgKChpID09PSAwID8gb2JqIDogcmVzVmFsKVtwYXRoQXJyYXlbaV1dID09PSB2YWx1ZSkge1xuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIGRlbGV0ZSByZXNWYWxbcGF0aEFycmF5W2ldXTtcbiAgfSBlbHNlIHtcbiAgICByZXNWYWxbcGF0aEFycmF5W2ldXSA9IHZhbHVlO1xuICB9XG5cbiAgaWYgKGkgPT09IDAgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIGRlbGV0ZSByZXNbcGF0aEFycmF5W2ldXTtcbiAgfVxuXG4gIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBzZXROZXN0ZWRPYmplY3RWYWx1ZXMob2JqZWN0LCB2YWx1ZSwgdmlzaXRlZCwgcmVzcG9uc2UpIHtcbiAgaWYgKHZpc2l0ZWQgPT09IHZvaWQgMCkge1xuICAgIHZpc2l0ZWQgPSBuZXcgV2Vha01hcCgpO1xuICB9XG5cbiAgaWYgKHJlc3BvbnNlID09PSB2b2lkIDApIHtcbiAgICByZXNwb25zZSA9IHt9O1xuICB9XG5cbiAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IE9iamVjdC5rZXlzKG9iamVjdCk7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgdmFyIGsgPSBfYVtfaV07XG4gICAgdmFyIHZhbCA9IG9iamVjdFtrXTtcblxuICAgIGlmIChpc09iamVjdCh2YWwpKSB7XG4gICAgICBpZiAoIXZpc2l0ZWQuZ2V0KHZhbCkpIHtcbiAgICAgICAgdmlzaXRlZC5zZXQodmFsLCB0cnVlKTtcbiAgICAgICAgcmVzcG9uc2Vba10gPSBBcnJheS5pc0FycmF5KHZhbCkgPyBbXSA6IHt9O1xuICAgICAgICBzZXROZXN0ZWRPYmplY3RWYWx1ZXModmFsLCB2YWx1ZSwgdmlzaXRlZCwgcmVzcG9uc2Vba10pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXNwb25zZVtrXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXNwb25zZTtcbn1cblxudmFyIEZvcm1payA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX3N1cGVyKSB7XG4gIF9fZXh0ZW5kcyhGb3JtaWssIF9zdXBlcik7XG5cbiAgZnVuY3Rpb24gRm9ybWlrKHByb3BzKSB7XG4gICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oY0NhY2hlID0ge307XG4gICAgX3RoaXMuaGJDYWNoZSA9IHt9O1xuXG4gICAgX3RoaXMucmVnaXN0ZXJGaWVsZCA9IGZ1bmN0aW9uIChuYW1lLCBDb21wKSB7XG4gICAgICBfdGhpcy5maWVsZHNbbmFtZV0gPSBDb21wO1xuICAgIH07XG5cbiAgICBfdGhpcy51bnJlZ2lzdGVyRmllbGQgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgZGVsZXRlIF90aGlzLmZpZWxkc1tuYW1lXTtcbiAgICB9O1xuXG4gICAgX3RoaXMuc2V0RXJyb3JzID0gZnVuY3Rpb24gKGVycm9ycykge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBlcnJvcnM6IGVycm9yc1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLnNldFRvdWNoZWQgPSBmdW5jdGlvbiAodG91Y2hlZCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICB0b3VjaGVkOiB0b3VjaGVkXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChfdGhpcy5wcm9wcy52YWxpZGF0ZU9uQmx1cikge1xuICAgICAgICAgIF90aGlzLnJ1blZhbGlkYXRpb25zKF90aGlzLnN0YXRlLnZhbHVlcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5zZXRWYWx1ZXMgPSBmdW5jdGlvbiAodmFsdWVzKSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHZhbHVlczogdmFsdWVzXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChfdGhpcy5wcm9wcy52YWxpZGF0ZU9uQ2hhbmdlKSB7XG4gICAgICAgICAgX3RoaXMucnVuVmFsaWRhdGlvbnModmFsdWVzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLnNldFN0YXR1cyA9IGZ1bmN0aW9uIChzdGF0dXMpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBzdGF0dXNcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5zZXRFcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiV2FybmluZzogRm9ybWlrJ3Mgc2V0RXJyb3IoZXJyb3IpIGlzIGRlcHJlY2F0ZWQgYW5kIG1heSBiZSByZW1vdmVkIGluIGZ1dHVyZSByZWxlYXNlcy4gUGxlYXNlIHVzZSBGb3JtaWsncyBzZXRTdGF0dXMoc3RhdHVzKSBpbnN0ZWFkLiBJdCB3b3JrcyBpZGVudGljYWxseS4gRm9yIG1vcmUgaW5mbyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2phcmVkcGFsbWVyL2Zvcm1payNzZXRzdGF0dXMtc3RhdHVzLWFueS0tdm9pZFwiKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBlcnJvcjogZXJyb3JcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5zZXRTdWJtaXR0aW5nID0gZnVuY3Rpb24gKGlzU3VibWl0dGluZykge1xuICAgICAgaWYgKF90aGlzLmRpZE1vdW50KSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBpc1N1Ym1pdHRpbmc6IGlzU3VibWl0dGluZ1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMudmFsaWRhdGVGaWVsZCA9IGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBpc1ZhbGlkYXRpbmc6IHRydWVcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gX3RoaXMucnVuU2luZ2xlRmllbGRMZXZlbFZhbGlkYXRpb24oZmllbGQsIGdldEluKF90aGlzLnN0YXRlLnZhbHVlcywgZmllbGQpKS50aGVuKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICBpZiAoX3RoaXMuZGlkTW91bnQpIHtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBlcnJvcnM6IHNldEluKF90aGlzLnN0YXRlLmVycm9ycywgZmllbGQsIGVycm9yKSxcbiAgICAgICAgICAgIGlzVmFsaWRhdGluZzogZmFsc2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5ydW5TaW5nbGVGaWVsZExldmVsVmFsaWRhdGlvbiA9IGZ1bmN0aW9uIChmaWVsZCwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZShfdGhpcy5maWVsZHNbZmllbGRdLnByb3BzLnZhbGlkYXRlKHZhbHVlKSk7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHJldHVybiB4O1xuICAgICAgfSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIGU7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMucnVuVmFsaWRhdGlvblNjaGVtYSA9IGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICB2YXIgdmFsaWRhdGlvblNjaGVtYSA9IF90aGlzLnByb3BzLnZhbGlkYXRpb25TY2hlbWE7XG4gICAgICAgIHZhciBzY2hlbWEgPSBpc0Z1bmN0aW9uKHZhbGlkYXRpb25TY2hlbWEpID8gdmFsaWRhdGlvblNjaGVtYSgpIDogdmFsaWRhdGlvblNjaGVtYTtcbiAgICAgICAgdmFsaWRhdGVZdXBTY2hlbWEodmFsdWVzLCBzY2hlbWEpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJlc29sdmUoe30pO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgcmVzb2x2ZSh5dXBUb0Zvcm1FcnJvcnMoZXJyKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLnJ1blZhbGlkYXRpb25zID0gZnVuY3Rpb24gKHZhbHVlcykge1xuICAgICAgaWYgKHZhbHVlcyA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHZhbHVlcyA9IF90aGlzLnN0YXRlLnZhbHVlcztcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLnZhbGlkYXRvcikge1xuICAgICAgICBfdGhpcy52YWxpZGF0b3IoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIF9hID0gbWFrZUNhbmNlbGFibGUoUHJvbWlzZS5hbGwoW190aGlzLnJ1bkZpZWxkTGV2ZWxWYWxpZGF0aW9ucyh2YWx1ZXMpLCBfdGhpcy5wcm9wcy52YWxpZGF0aW9uU2NoZW1hID8gX3RoaXMucnVuVmFsaWRhdGlvblNjaGVtYSh2YWx1ZXMpIDoge30sIF90aGlzLnByb3BzLnZhbGlkYXRlID8gX3RoaXMucnVuVmFsaWRhdGVIYW5kbGVyKHZhbHVlcykgOiB7fV0pLnRoZW4oZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHZhciBmaWVsZEVycm9ycyA9IF9hWzBdLFxuICAgICAgICAgICAgc2NoZW1hRXJyb3JzID0gX2FbMV0sXG4gICAgICAgICAgICBoYW5kbGVyRXJyb3JzID0gX2FbMl07XG4gICAgICAgIHJldHVybiBkZWVwbWVyZ2UuYWxsKFtmaWVsZEVycm9ycywgc2NoZW1hRXJyb3JzLCBoYW5kbGVyRXJyb3JzXSwge1xuICAgICAgICAgIGFycmF5TWVyZ2U6IGFycmF5TWVyZ2VcbiAgICAgICAgfSk7XG4gICAgICB9KSksXG4gICAgICAgICAgcHJvbWlzZSA9IF9hWzBdLFxuICAgICAgICAgIGNhbmNlbCA9IF9hWzFdO1xuXG4gICAgICBfdGhpcy52YWxpZGF0b3IgPSBjYW5jZWw7XG4gICAgICByZXR1cm4gcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChlcnJvcnMpIHtcbiAgICAgICAgaWYgKF90aGlzLmRpZE1vdW50KSB7XG4gICAgICAgICAgX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHByZXZTdGF0ZSkge1xuICAgICAgICAgICAgaWYgKCFpc0VxdWFsKHByZXZTdGF0ZS5lcnJvcnMsIGVycm9ycykpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBlcnJvcnM6IGVycm9yc1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlcnJvcnM7XG4gICAgICB9KS5jYXRjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4geDtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiAoZXZlbnRPclBhdGgpIHtcbiAgICAgIHZhciBleGVjdXRlQ2hhbmdlID0gZnVuY3Rpb24gKGV2ZW50T3JWYWx1ZSwgbWF5YmVQYXRoKSB7XG4gICAgICAgIHZhciBmaWVsZCA9IG1heWJlUGF0aDtcbiAgICAgICAgdmFyIHZhbHVlO1xuXG4gICAgICAgIGlmIChpc0lucHV0RXZlbnQoZXZlbnRPclZhbHVlKSkge1xuICAgICAgICAgIHZhciBldmVudF8xID0gZXZlbnRPclZhbHVlO1xuXG4gICAgICAgICAgaWYgKGV2ZW50XzEucGVyc2lzdCkge1xuICAgICAgICAgICAgZXZlbnRfMS5wZXJzaXN0KCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIF9hID0gZXZlbnRfMS50YXJnZXQsXG4gICAgICAgICAgICAgIHR5cGUgPSBfYS50eXBlLFxuICAgICAgICAgICAgICBuYW1lXzEgPSBfYS5uYW1lLFxuICAgICAgICAgICAgICBpZCA9IF9hLmlkLFxuICAgICAgICAgICAgICBjaGVja2VkID0gX2EuY2hlY2tlZCxcbiAgICAgICAgICAgICAgb3V0ZXJIVE1MID0gX2Eub3V0ZXJIVE1MO1xuICAgICAgICAgIGZpZWxkID0gbWF5YmVQYXRoID8gbWF5YmVQYXRoIDogbmFtZV8xID8gbmFtZV8xIDogaWQ7XG5cbiAgICAgICAgICBpZiAoIWZpZWxkICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIHdhcm5BYm91dE1pc3NpbmdJZGVudGlmaWVyKHtcbiAgICAgICAgICAgICAgaHRtbENvbnRlbnQ6IG91dGVySFRNTCxcbiAgICAgICAgICAgICAgZG9jdW1lbnRhdGlvbkFuY2hvckxpbms6ICdoYW5kbGVjaGFuZ2UtZS1yZWFjdGNoYW5nZWV2ZW50YW55LS12b2lkJyxcbiAgICAgICAgICAgICAgaGFuZGxlck5hbWU6ICdoYW5kbGVDaGFuZ2UnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YWx1ZSA9IGV2ZW50XzEudGFyZ2V0LnZhbHVlO1xuXG4gICAgICAgICAgaWYgKC9udW1iZXJ8cmFuZ2UvLnRlc3QodHlwZSkpIHtcbiAgICAgICAgICAgIHZhciBwYXJzZWQgPSBwYXJzZUZsb2F0KGV2ZW50XzEudGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgICAgIHZhbHVlID0gaXNOYU4ocGFyc2VkKSA/ICcnIDogcGFyc2VkO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICgvY2hlY2tib3gvLnRlc3QodHlwZSkpIHtcbiAgICAgICAgICAgIHZhbHVlID0gY2hlY2tlZDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWUgPSBldmVudE9yVmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZmllbGQpIHtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAocHJldlN0YXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gX19hc3NpZ24oe30sIHByZXZTdGF0ZSwge1xuICAgICAgICAgICAgICB2YWx1ZXM6IHNldEluKHByZXZTdGF0ZS52YWx1ZXMsIGZpZWxkLCB2YWx1ZSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy52YWxpZGF0ZU9uQ2hhbmdlKSB7XG4gICAgICAgICAgICAgIF90aGlzLnJ1blZhbGlkYXRpb25zKHNldEluKF90aGlzLnN0YXRlLnZhbHVlcywgZmllbGQsIHZhbHVlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGlmIChpc1N0cmluZyhldmVudE9yUGF0aCkpIHtcbiAgICAgICAgdmFyIHBhdGhfMSA9IGV2ZW50T3JQYXRoO1xuXG4gICAgICAgIGlmICghaXNGdW5jdGlvbihfdGhpcy5oY0NhY2hlW3BhdGhfMV0pKSB7XG4gICAgICAgICAgX3RoaXMuaGNDYWNoZVtwYXRoXzFdID0gZnVuY3Rpb24gKGV2ZW50T3JWYWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGV4ZWN1dGVDaGFuZ2UoZXZlbnRPclZhbHVlLCBwYXRoXzEpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gX3RoaXMuaGNDYWNoZVtwYXRoXzFdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGV2ZW50XzIgPSBldmVudE9yUGF0aDtcbiAgICAgICAgZXhlY3V0ZUNoYW5nZShldmVudF8yKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuc2V0RmllbGRWYWx1ZSA9IGZ1bmN0aW9uIChmaWVsZCwgdmFsdWUsIHNob3VsZFZhbGlkYXRlKSB7XG4gICAgICBpZiAoc2hvdWxkVmFsaWRhdGUgPT09IHZvaWQgMCkge1xuICAgICAgICBzaG91bGRWYWxpZGF0ZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5kaWRNb3VudCkge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAocHJldlN0YXRlKSB7XG4gICAgICAgICAgcmV0dXJuIF9fYXNzaWduKHt9LCBwcmV2U3RhdGUsIHtcbiAgICAgICAgICAgIHZhbHVlczogc2V0SW4ocHJldlN0YXRlLnZhbHVlcywgZmllbGQsIHZhbHVlKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKF90aGlzLnByb3BzLnZhbGlkYXRlT25DaGFuZ2UgJiYgc2hvdWxkVmFsaWRhdGUpIHtcbiAgICAgICAgICAgIF90aGlzLnJ1blZhbGlkYXRpb25zKF90aGlzLnN0YXRlLnZhbHVlcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlU3VibWl0ID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChlICYmIGUucHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHZhciBhY3RpdmVFbGVtZW50ID0gZ2V0QWN0aXZlRWxlbWVudCgpO1xuXG4gICAgICAgIGlmIChhY3RpdmVFbGVtZW50ICE9PSBudWxsICYmIGFjdGl2ZUVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MQnV0dG9uRWxlbWVudCkge1xuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISEoYWN0aXZlRWxlbWVudC5hdHRyaWJ1dGVzICYmIGFjdGl2ZUVsZW1lbnQuYXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ3R5cGUnKSksICdZb3Ugc3VibWl0dGVkIGEgRm9ybWlrIGZvcm0gdXNpbmcgYSBidXR0b24gd2l0aCBhbiB1bnNwZWNpZmllZCBgdHlwZWAgYXR0cmlidXRlLiAgTW9zdCBicm93c2VycyBkZWZhdWx0IGJ1dHRvbiBlbGVtZW50cyB0byBgdHlwZT1cInN1Ym1pdFwiYC4gSWYgdGhpcyBpcyBub3QgYSBzdWJtaXQgYnV0dG9uLCBwbGVhc2UgYWRkIGB0eXBlPVwiYnV0dG9uXCJgLicpIDogdm9pZCAwO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnN1Ym1pdEZvcm0oKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuc3VibWl0Rm9ybSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChwcmV2U3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0b3VjaGVkOiBzZXROZXN0ZWRPYmplY3RWYWx1ZXMocHJldlN0YXRlLnZhbHVlcywgdHJ1ZSksXG4gICAgICAgICAgaXNTdWJtaXR0aW5nOiB0cnVlLFxuICAgICAgICAgIGlzVmFsaWRhdGluZzogdHJ1ZSxcbiAgICAgICAgICBzdWJtaXRDb3VudDogcHJldlN0YXRlLnN1Ym1pdENvdW50ICsgMVxuICAgICAgICB9O1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBfdGhpcy5ydW5WYWxpZGF0aW9ucyhfdGhpcy5zdGF0ZS52YWx1ZXMpLnRoZW4oZnVuY3Rpb24gKGNvbWJpbmVkRXJyb3JzKSB7XG4gICAgICAgIGlmIChfdGhpcy5kaWRNb3VudCkge1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGlzVmFsaWRhdGluZzogZmFsc2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpc1ZhbGlkID0gT2JqZWN0LmtleXMoY29tYmluZWRFcnJvcnMpLmxlbmd0aCA9PT0gMDtcblxuICAgICAgICBpZiAoaXNWYWxpZCkge1xuICAgICAgICAgIF90aGlzLmV4ZWN1dGVTdWJtaXQoKTtcbiAgICAgICAgfSBlbHNlIGlmIChfdGhpcy5kaWRNb3VudCkge1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGlzU3VibWl0dGluZzogZmFsc2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLmV4ZWN1dGVTdWJtaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5wcm9wcy5vblN1Ym1pdChfdGhpcy5zdGF0ZS52YWx1ZXMsIF90aGlzLmdldEZvcm1pa0FjdGlvbnMoKSk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUJsdXIgPSBmdW5jdGlvbiAoZXZlbnRPclBhdGgpIHtcbiAgICAgIHZhciBleGVjdXRlQmx1ciA9IGZ1bmN0aW9uIChtYXliZUV2ZW50LCBtYXliZVBhdGgpIHtcbiAgICAgICAgdmFyIGZpZWxkID0gbWF5YmVQYXRoO1xuXG4gICAgICAgIGlmIChpc0lucHV0RXZlbnQobWF5YmVFdmVudCkpIHtcbiAgICAgICAgICB2YXIgZXZlbnRfMyA9IG1heWJlRXZlbnQ7XG5cbiAgICAgICAgICBpZiAoZXZlbnRfMy5wZXJzaXN0KSB7XG4gICAgICAgICAgICBldmVudF8zLnBlcnNpc3QoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgX2EgPSBldmVudF8zLnRhcmdldCxcbiAgICAgICAgICAgICAgbmFtZV8yID0gX2EubmFtZSxcbiAgICAgICAgICAgICAgaWQgPSBfYS5pZCxcbiAgICAgICAgICAgICAgb3V0ZXJIVE1MID0gX2Eub3V0ZXJIVE1MO1xuICAgICAgICAgIGZpZWxkID0gbmFtZV8yID8gbmFtZV8yIDogaWQ7XG5cbiAgICAgICAgICBpZiAoIWZpZWxkICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIHdhcm5BYm91dE1pc3NpbmdJZGVudGlmaWVyKHtcbiAgICAgICAgICAgICAgaHRtbENvbnRlbnQ6IG91dGVySFRNTCxcbiAgICAgICAgICAgICAgZG9jdW1lbnRhdGlvbkFuY2hvckxpbms6ICdoYW5kbGVibHVyLWUtcmVhY3Rmb2N1c2V2ZW50YW55LS12b2lkJyxcbiAgICAgICAgICAgICAgaGFuZGxlck5hbWU6ICdoYW5kbGVCbHVyJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHByZXZTdGF0ZSkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b3VjaGVkOiBzZXRJbihwcmV2U3RhdGUudG91Y2hlZCwgZmllbGQsIHRydWUpXG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKF90aGlzLnByb3BzLnZhbGlkYXRlT25CbHVyKSB7XG4gICAgICAgICAgX3RoaXMucnVuVmFsaWRhdGlvbnMoX3RoaXMuc3RhdGUudmFsdWVzKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgaWYgKGlzU3RyaW5nKGV2ZW50T3JQYXRoKSkge1xuICAgICAgICB2YXIgcGF0aF8yID0gZXZlbnRPclBhdGg7XG5cbiAgICAgICAgaWYgKCFpc0Z1bmN0aW9uKF90aGlzLmhiQ2FjaGVbcGF0aF8yXSkpIHtcbiAgICAgICAgICBfdGhpcy5oYkNhY2hlW3BhdGhfMl0gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBleGVjdXRlQmx1cihldmVudCwgcGF0aF8yKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIF90aGlzLmhiQ2FjaGVbcGF0aF8yXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBldmVudF80ID0gZXZlbnRPclBhdGg7XG4gICAgICAgIGV4ZWN1dGVCbHVyKGV2ZW50XzQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5zZXRGaWVsZFRvdWNoZWQgPSBmdW5jdGlvbiAoZmllbGQsIHRvdWNoZWQsIHNob3VsZFZhbGlkYXRlKSB7XG4gICAgICBpZiAodG91Y2hlZCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHRvdWNoZWQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2hvdWxkVmFsaWRhdGUgPT09IHZvaWQgMCkge1xuICAgICAgICBzaG91bGRWYWxpZGF0ZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChwcmV2U3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIF9fYXNzaWduKHt9LCBwcmV2U3RhdGUsIHtcbiAgICAgICAgICB0b3VjaGVkOiBzZXRJbihwcmV2U3RhdGUudG91Y2hlZCwgZmllbGQsIHRvdWNoZWQpXG4gICAgICAgIH0pO1xuICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoX3RoaXMucHJvcHMudmFsaWRhdGVPbkJsdXIgJiYgc2hvdWxkVmFsaWRhdGUpIHtcbiAgICAgICAgICBfdGhpcy5ydW5WYWxpZGF0aW9ucyhfdGhpcy5zdGF0ZS52YWx1ZXMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuc2V0RmllbGRFcnJvciA9IGZ1bmN0aW9uIChmaWVsZCwgbWVzc2FnZSkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHByZXZTdGF0ZSkge1xuICAgICAgICByZXR1cm4gX19hc3NpZ24oe30sIHByZXZTdGF0ZSwge1xuICAgICAgICAgIGVycm9yczogc2V0SW4ocHJldlN0YXRlLmVycm9ycywgZmllbGQsIG1lc3NhZ2UpXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLnJlc2V0Rm9ybSA9IGZ1bmN0aW9uIChuZXh0VmFsdWVzKSB7XG4gICAgICB2YXIgdmFsdWVzID0gbmV4dFZhbHVlcyA/IG5leHRWYWx1ZXMgOiBfdGhpcy5wcm9wcy5pbml0aWFsVmFsdWVzO1xuICAgICAgX3RoaXMuaW5pdGlhbFZhbHVlcyA9IHZhbHVlcztcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBpc1N1Ym1pdHRpbmc6IGZhbHNlLFxuICAgICAgICBpc1ZhbGlkYXRpbmc6IGZhbHNlLFxuICAgICAgICBlcnJvcnM6IHt9LFxuICAgICAgICB0b3VjaGVkOiB7fSxcbiAgICAgICAgZXJyb3I6IHVuZGVmaW5lZCxcbiAgICAgICAgc3RhdHVzOiBfdGhpcy5wcm9wcy5pbml0aWFsU3RhdHVzLFxuICAgICAgICB2YWx1ZXM6IHZhbHVlcyxcbiAgICAgICAgc3VibWl0Q291bnQ6IDBcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVSZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vblJlc2V0KSB7XG4gICAgICAgIHZhciBtYXliZVByb21pc2VkT25SZXNldCA9IF90aGlzLnByb3BzLm9uUmVzZXQoX3RoaXMuc3RhdGUudmFsdWVzLCBfdGhpcy5nZXRGb3JtaWtBY3Rpb25zKCkpO1xuXG4gICAgICAgIGlmIChpc1Byb21pc2UobWF5YmVQcm9taXNlZE9uUmVzZXQpKSB7XG4gICAgICAgICAgbWF5YmVQcm9taXNlZE9uUmVzZXQudGhlbihfdGhpcy5yZXNldEZvcm0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLnJlc2V0Rm9ybSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5yZXNldEZvcm0oKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuc2V0Rm9ybWlrU3RhdGUgPSBmdW5jdGlvbiAocywgY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiBfdGhpcy5zZXRTdGF0ZShzLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIF90aGlzLnZhbGlkYXRlRm9ybSA9IGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgaXNWYWxpZGF0aW5nOiB0cnVlXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIF90aGlzLnJ1blZhbGlkYXRpb25zKHZhbHVlcykudGhlbihmdW5jdGlvbiAoZXJyb3JzKSB7XG4gICAgICAgIGlmIChfdGhpcy5kaWRNb3VudCkge1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGlzVmFsaWRhdGluZzogZmFsc2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlcnJvcnM7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuZ2V0Rm9ybWlrQWN0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlc2V0Rm9ybTogX3RoaXMucmVzZXRGb3JtLFxuICAgICAgICBzdWJtaXRGb3JtOiBfdGhpcy5zdWJtaXRGb3JtLFxuICAgICAgICB2YWxpZGF0ZUZvcm06IF90aGlzLnZhbGlkYXRlRm9ybSxcbiAgICAgICAgdmFsaWRhdGVGaWVsZDogX3RoaXMudmFsaWRhdGVGaWVsZCxcbiAgICAgICAgc2V0RXJyb3I6IF90aGlzLnNldEVycm9yLFxuICAgICAgICBzZXRFcnJvcnM6IF90aGlzLnNldEVycm9ycyxcbiAgICAgICAgc2V0RmllbGRFcnJvcjogX3RoaXMuc2V0RmllbGRFcnJvcixcbiAgICAgICAgc2V0RmllbGRUb3VjaGVkOiBfdGhpcy5zZXRGaWVsZFRvdWNoZWQsXG4gICAgICAgIHNldEZpZWxkVmFsdWU6IF90aGlzLnNldEZpZWxkVmFsdWUsXG4gICAgICAgIHNldFN0YXR1czogX3RoaXMuc2V0U3RhdHVzLFxuICAgICAgICBzZXRTdWJtaXR0aW5nOiBfdGhpcy5zZXRTdWJtaXR0aW5nLFxuICAgICAgICBzZXRUb3VjaGVkOiBfdGhpcy5zZXRUb3VjaGVkLFxuICAgICAgICBzZXRWYWx1ZXM6IF90aGlzLnNldFZhbHVlcyxcbiAgICAgICAgc2V0Rm9ybWlrU3RhdGU6IF90aGlzLnNldEZvcm1pa1N0YXRlXG4gICAgICB9O1xuICAgIH07XG5cbiAgICBfdGhpcy5nZXRGb3JtaWtDb21wdXRlZFByb3BzID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGlzSW5pdGlhbFZhbGlkID0gX3RoaXMucHJvcHMuaXNJbml0aWFsVmFsaWQ7XG4gICAgICB2YXIgZGlydHkgPSAhaXNFcXVhbChfdGhpcy5pbml0aWFsVmFsdWVzLCBfdGhpcy5zdGF0ZS52YWx1ZXMpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGlydHk6IGRpcnR5LFxuICAgICAgICBpc1ZhbGlkOiBkaXJ0eSA/IF90aGlzLnN0YXRlLmVycm9ycyAmJiBPYmplY3Qua2V5cyhfdGhpcy5zdGF0ZS5lcnJvcnMpLmxlbmd0aCA9PT0gMCA6IGlzSW5pdGlhbFZhbGlkICE9PSBmYWxzZSAmJiBpc0Z1bmN0aW9uKGlzSW5pdGlhbFZhbGlkKSA/IGlzSW5pdGlhbFZhbGlkKF90aGlzLnByb3BzKSA6IGlzSW5pdGlhbFZhbGlkLFxuICAgICAgICBpbml0aWFsVmFsdWVzOiBfdGhpcy5pbml0aWFsVmFsdWVzXG4gICAgICB9O1xuICAgIH07XG5cbiAgICBfdGhpcy5nZXRGb3JtaWtCYWcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX19hc3NpZ24oe30sIF90aGlzLnN0YXRlLCBfdGhpcy5nZXRGb3JtaWtBY3Rpb25zKCksIF90aGlzLmdldEZvcm1pa0NvbXB1dGVkUHJvcHMoKSwge1xuICAgICAgICByZWdpc3RlckZpZWxkOiBfdGhpcy5yZWdpc3RlckZpZWxkLFxuICAgICAgICB1bnJlZ2lzdGVyRmllbGQ6IF90aGlzLnVucmVnaXN0ZXJGaWVsZCxcbiAgICAgICAgaGFuZGxlQmx1cjogX3RoaXMuaGFuZGxlQmx1cixcbiAgICAgICAgaGFuZGxlQ2hhbmdlOiBfdGhpcy5oYW5kbGVDaGFuZ2UsXG4gICAgICAgIGhhbmRsZVJlc2V0OiBfdGhpcy5oYW5kbGVSZXNldCxcbiAgICAgICAgaGFuZGxlU3VibWl0OiBfdGhpcy5oYW5kbGVTdWJtaXQsXG4gICAgICAgIHZhbGlkYXRlT25DaGFuZ2U6IF90aGlzLnByb3BzLnZhbGlkYXRlT25DaGFuZ2UsXG4gICAgICAgIHZhbGlkYXRlT25CbHVyOiBfdGhpcy5wcm9wcy52YWxpZGF0ZU9uQmx1clxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLmdldEZvcm1pa0NvbnRleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX19hc3NpZ24oe30sIF90aGlzLmdldEZvcm1pa0JhZygpLCB7XG4gICAgICAgIHZhbGlkYXRpb25TY2hlbWE6IF90aGlzLnByb3BzLnZhbGlkYXRpb25TY2hlbWEsXG4gICAgICAgIHZhbGlkYXRlOiBfdGhpcy5wcm9wcy52YWxpZGF0ZSxcbiAgICAgICAgaW5pdGlhbFZhbHVlczogX3RoaXMuaW5pdGlhbFZhbHVlc1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgdmFsdWVzOiBwcm9wcy5pbml0aWFsVmFsdWVzIHx8IHt9LFxuICAgICAgZXJyb3JzOiB7fSxcbiAgICAgIHRvdWNoZWQ6IHt9LFxuICAgICAgaXNTdWJtaXR0aW5nOiBmYWxzZSxcbiAgICAgIGlzVmFsaWRhdGluZzogZmFsc2UsXG4gICAgICBzdWJtaXRDb3VudDogMCxcbiAgICAgIHN0YXR1czogcHJvcHMuaW5pdGlhbFN0YXR1c1xuICAgIH07XG4gICAgX3RoaXMuZGlkTW91bnQgPSBmYWxzZTtcbiAgICBfdGhpcy5maWVsZHMgPSB7fTtcbiAgICBfdGhpcy5pbml0aWFsVmFsdWVzID0gcHJvcHMuaW5pdGlhbFZhbHVlcyB8fCB7fTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEocHJvcHMuY29tcG9uZW50ICYmIHByb3BzLnJlbmRlciksICdZb3Ugc2hvdWxkIG5vdCB1c2UgPEZvcm1payBjb21wb25lbnQ+IGFuZCA8Rm9ybWlrIHJlbmRlcj4gaW4gdGhlIHNhbWUgPEZvcm1paz4gY29tcG9uZW50OyA8Rm9ybWlrIHJlbmRlcj4gd2lsbCBiZSBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHByb3BzLmNvbXBvbmVudCAmJiBwcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHByb3BzLmNoaWxkcmVuKSksICdZb3Ugc2hvdWxkIG5vdCB1c2UgPEZvcm1payBjb21wb25lbnQ+IGFuZCA8Rm9ybWlrIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSA8Rm9ybWlrPiBjb21wb25lbnQ7IDxGb3JtaWsgY2hpbGRyZW4+IHdpbGwgYmUgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIShwcm9wcy5yZW5kZXIgJiYgcHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbihwcm9wcy5jaGlsZHJlbikpLCAnWW91IHNob3VsZCBub3QgdXNlIDxGb3JtaWsgcmVuZGVyPiBhbmQgPEZvcm1payBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgPEZvcm1paz4gY29tcG9uZW50OyA8Rm9ybWlrIGNoaWxkcmVuPiB3aWxsIGJlIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBGb3JtaWsucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZGlkTW91bnQgPSB0cnVlO1xuICB9O1xuXG4gIEZvcm1pay5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5kaWRNb3VudCA9IGZhbHNlO1xuXG4gICAgaWYgKHRoaXMudmFsaWRhdG9yKSB7XG4gICAgICB0aGlzLnZhbGlkYXRvcigpO1xuICAgIH1cbiAgfTtcblxuICBGb3JtaWsucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5lbmFibGVSZWluaXRpYWxpemUgJiYgIWlzRXF1YWwocHJldlByb3BzLmluaXRpYWxWYWx1ZXMsIHRoaXMucHJvcHMuaW5pdGlhbFZhbHVlcykpIHtcbiAgICAgIHRoaXMuaW5pdGlhbFZhbHVlcyA9IHRoaXMucHJvcHMuaW5pdGlhbFZhbHVlcztcbiAgICAgIHRoaXMucmVzZXRGb3JtKHRoaXMucHJvcHMuaW5pdGlhbFZhbHVlcyk7XG4gICAgfVxuICB9O1xuXG4gIEZvcm1pay5wcm90b3R5cGUucnVuRmllbGRMZXZlbFZhbGlkYXRpb25zID0gZnVuY3Rpb24gKHZhbHVlcykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgZmllbGRLZXlzV2l0aFZhbGlkYXRpb24gPSBPYmplY3Qua2V5cyh0aGlzLmZpZWxkcykuZmlsdGVyKGZ1bmN0aW9uIChmKSB7XG4gICAgICByZXR1cm4gX3RoaXMuZmllbGRzICYmIF90aGlzLmZpZWxkc1tmXSAmJiBfdGhpcy5maWVsZHNbZl0ucHJvcHMudmFsaWRhdGUgJiYgaXNGdW5jdGlvbihfdGhpcy5maWVsZHNbZl0ucHJvcHMudmFsaWRhdGUpO1xuICAgIH0pO1xuICAgIHZhciBmaWVsZFZhbGlkYXRpb25zID0gZmllbGRLZXlzV2l0aFZhbGlkYXRpb24ubGVuZ3RoID4gMCA/IGZpZWxkS2V5c1dpdGhWYWxpZGF0aW9uLm1hcChmdW5jdGlvbiAoZikge1xuICAgICAgcmV0dXJuIF90aGlzLnJ1blNpbmdsZUZpZWxkTGV2ZWxWYWxpZGF0aW9uKGYsIGdldEluKHZhbHVlcywgZikpO1xuICAgIH0pIDogW1Byb21pc2UucmVzb2x2ZSgnRE9fTk9UX0RFTEVURV9ZT1VfV0lMTF9CRV9GSVJFRCcpXTtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoZmllbGRWYWxpZGF0aW9ucykudGhlbihmdW5jdGlvbiAoZmllbGRFcnJvcnNMaXN0KSB7XG4gICAgICByZXR1cm4gZmllbGRFcnJvcnNMaXN0LnJlZHVjZShmdW5jdGlvbiAocHJldiwgY3VyciwgaW5kZXgpIHtcbiAgICAgICAgaWYgKGN1cnIgPT09ICdET19OT1RfREVMRVRFX1lPVV9XSUxMX0JFX0ZJUkVEJykge1xuICAgICAgICAgIHJldHVybiBwcmV2O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCEhY3Vycikge1xuICAgICAgICAgIHByZXYgPSBzZXRJbihwcmV2LCBmaWVsZEtleXNXaXRoVmFsaWRhdGlvbltpbmRleF0sIGN1cnIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgICB9LCB7fSk7XG4gICAgfSk7XG4gIH07XG5cbiAgRm9ybWlrLnByb3RvdHlwZS5ydW5WYWxpZGF0ZUhhbmRsZXIgPSBmdW5jdGlvbiAodmFsdWVzKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgdmFyIG1heWJlUHJvbWlzZWRFcnJvcnMgPSBfdGhpcy5wcm9wcy52YWxpZGF0ZSh2YWx1ZXMpO1xuXG4gICAgICBpZiAobWF5YmVQcm9taXNlZEVycm9ycyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc29sdmUoe30pO1xuICAgICAgfSBlbHNlIGlmIChpc1Byb21pc2UobWF5YmVQcm9taXNlZEVycm9ycykpIHtcbiAgICAgICAgbWF5YmVQcm9taXNlZEVycm9ycy50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXNvbHZlKHt9KTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9ycykge1xuICAgICAgICAgIHJlc29sdmUoZXJyb3JzKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNvbHZlKG1heWJlUHJvbWlzZWRFcnJvcnMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIEZvcm1pay5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfYSA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNvbXBvbmVudCA9IF9hLmNvbXBvbmVudCxcbiAgICAgICAgcmVuZGVyID0gX2EucmVuZGVyLFxuICAgICAgICBjaGlsZHJlbiA9IF9hLmNoaWxkcmVuO1xuICAgIHZhciBwcm9wcyA9IHRoaXMuZ2V0Rm9ybWlrQmFnKCk7XG4gICAgdmFyIGN0eCA9IHRoaXMuZ2V0Rm9ybWlrQ29udGV4dCgpO1xuICAgIHJldHVybiBjcmVhdGVFbGVtZW50KEZvcm1pa1Byb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogY3R4XG4gICAgfSwgY29tcG9uZW50ID8gY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKSA6IHJlbmRlciA/IHJlbmRlcihwcm9wcykgOiBjaGlsZHJlbiA/IGlzRnVuY3Rpb24oY2hpbGRyZW4pID8gY2hpbGRyZW4ocHJvcHMpIDogIWlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikgPyBDaGlsZHJlbi5vbmx5KGNoaWxkcmVuKSA6IG51bGwgOiBudWxsKTtcbiAgfTtcblxuICBGb3JtaWsuZGVmYXVsdFByb3BzID0ge1xuICAgIHZhbGlkYXRlT25DaGFuZ2U6IHRydWUsXG4gICAgdmFsaWRhdGVPbkJsdXI6IHRydWUsXG4gICAgaXNJbml0aWFsVmFsaWQ6IGZhbHNlLFxuICAgIGVuYWJsZVJlaW5pdGlhbGl6ZTogZmFsc2VcbiAgfTtcbiAgcmV0dXJuIEZvcm1paztcbn0oQ29tcG9uZW50KTtcblxuZnVuY3Rpb24gd2FybkFib3V0TWlzc2luZ0lkZW50aWZpZXIoX2EpIHtcbiAgdmFyIGh0bWxDb250ZW50ID0gX2EuaHRtbENvbnRlbnQsXG4gICAgICBkb2N1bWVudGF0aW9uQW5jaG9yTGluayA9IF9hLmRvY3VtZW50YXRpb25BbmNob3JMaW5rLFxuICAgICAgaGFuZGxlck5hbWUgPSBfYS5oYW5kbGVyTmFtZTtcbiAgY29uc29sZS53YXJuKFwiV2FybmluZzogRm9ybWlrIGNhbGxlZCBgXCIgKyBoYW5kbGVyTmFtZSArIFwiYCwgYnV0IHlvdSBmb3Jnb3QgdG8gcGFzcyBhbiBgaWRgIG9yIGBuYW1lYCBhdHRyaWJ1dGUgdG8geW91ciBpbnB1dDpcXG5cXG4gICAgXCIgKyBodG1sQ29udGVudCArIFwiXFxuXFxuICAgIEZvcm1payBjYW5ub3QgZGV0ZXJtaW5lIHdoaWNoIHZhbHVlIHRvIHVwZGF0ZS4gRm9yIG1vcmUgaW5mbyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2phcmVkcGFsbWVyL2Zvcm1payNcIiArIGRvY3VtZW50YXRpb25BbmNob3JMaW5rICsgXCJcXG4gIFwiKTtcbn1cblxuZnVuY3Rpb24geXVwVG9Gb3JtRXJyb3JzKHl1cEVycm9yKSB7XG4gIHZhciBlcnJvcnMgPSB7fTtcblxuICBpZiAoeXVwRXJyb3IuaW5uZXIubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHNldEluKGVycm9ycywgeXVwRXJyb3IucGF0aCwgeXVwRXJyb3IubWVzc2FnZSk7XG4gIH1cblxuICBmb3IgKHZhciBfaSA9IDAsIF9hID0geXVwRXJyb3IuaW5uZXI7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgdmFyIGVyciA9IF9hW19pXTtcblxuICAgIGlmICghZXJyb3JzW2Vyci5wYXRoXSkge1xuICAgICAgZXJyb3JzID0gc2V0SW4oZXJyb3JzLCBlcnIucGF0aCwgZXJyLm1lc3NhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBlcnJvcnM7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZVl1cFNjaGVtYSh2YWx1ZXMsIHNjaGVtYSwgc3luYywgY29udGV4dCkge1xuICBpZiAoc3luYyA9PT0gdm9pZCAwKSB7XG4gICAgc3luYyA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkge1xuICAgIGNvbnRleHQgPSB7fTtcbiAgfVxuXG4gIHZhciB2YWxpZGF0ZURhdGEgPSB7fTtcblxuICBmb3IgKHZhciBrIGluIHZhbHVlcykge1xuICAgIGlmICh2YWx1ZXMuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgIHZhciBrZXkgPSBTdHJpbmcoayk7XG4gICAgICB2YWxpZGF0ZURhdGFba2V5XSA9IHZhbHVlc1trZXldICE9PSAnJyA/IHZhbHVlc1trZXldIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzY2hlbWFbc3luYyA/ICd2YWxpZGF0ZVN5bmMnIDogJ3ZhbGlkYXRlJ10odmFsaWRhdGVEYXRhLCB7XG4gICAgYWJvcnRFYXJseTogZmFsc2UsXG4gICAgY29udGV4dDogY29udGV4dFxuICB9KTtcbn1cblxuZnVuY3Rpb24gYXJyYXlNZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgZGVzdGluYXRpb24gPSB0YXJnZXQuc2xpY2UoKTtcbiAgc291cmNlLmZvckVhY2goZnVuY3Rpb24gKGUsIGkpIHtcbiAgICBpZiAodHlwZW9mIGRlc3RpbmF0aW9uW2ldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIGNsb25lUmVxdWVzdGVkID0gb3B0aW9ucy5jbG9uZSAhPT0gZmFsc2U7XG4gICAgICB2YXIgc2hvdWxkQ2xvbmUgPSBjbG9uZVJlcXVlc3RlZCAmJiBvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KGUpO1xuICAgICAgZGVzdGluYXRpb25baV0gPSBzaG91bGRDbG9uZSA/IGRlZXBtZXJnZShBcnJheS5pc0FycmF5KGUpID8gW10gOiB7fSwgZSwgb3B0aW9ucykgOiBlO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdChlKSkge1xuICAgICAgZGVzdGluYXRpb25baV0gPSBkZWVwbWVyZ2UodGFyZ2V0W2ldLCBlLCBvcHRpb25zKTtcbiAgICB9IGVsc2UgaWYgKHRhcmdldC5pbmRleE9mKGUpID09PSAtMSkge1xuICAgICAgZGVzdGluYXRpb24ucHVzaChlKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gZGVzdGluYXRpb247XG59XG5cbnZhciBGaWVsZElubmVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgX19leHRlbmRzKEZpZWxkSW5uZXIsIF9zdXBlcik7XG5cbiAgZnVuY3Rpb24gRmllbGRJbm5lcihwcm9wcykge1xuICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuXG4gICAgdmFyIHJlbmRlciA9IHByb3BzLnJlbmRlcixcbiAgICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50O1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIShjb21wb25lbnQgJiYgcmVuZGVyKSwgJ1lvdSBzaG91bGQgbm90IHVzZSA8RmllbGQgY29tcG9uZW50PiBhbmQgPEZpZWxkIHJlbmRlcj4gaW4gdGhlIHNhbWUgPEZpZWxkPiBjb21wb25lbnQ7IDxGaWVsZCBjb21wb25lbnQ+IHdpbGwgYmUgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIShjb21wb25lbnQgJiYgY2hpbGRyZW4gJiYgaXNGdW5jdGlvbihjaGlsZHJlbikpLCAnWW91IHNob3VsZCBub3QgdXNlIDxGaWVsZCBjb21wb25lbnQ+IGFuZCA8RmllbGQgY2hpbGRyZW4+IGFzIGEgZnVuY3Rpb24gaW4gdGhlIHNhbWUgPEZpZWxkPiBjb21wb25lbnQ7IDxGaWVsZCBjb21wb25lbnQ+IHdpbGwgYmUgaWdub3JlZC4nKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEocmVuZGVyICYmIGNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pKSwgJ1lvdSBzaG91bGQgbm90IHVzZSA8RmllbGQgcmVuZGVyPiBhbmQgPEZpZWxkIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSA8RmllbGQ+IGNvbXBvbmVudDsgPEZpZWxkIGNoaWxkcmVuPiB3aWxsIGJlIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBGaWVsZElubmVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnByb3BzLmZvcm1pay5yZWdpc3RlckZpZWxkKHRoaXMucHJvcHMubmFtZSwgdGhpcyk7XG4gIH07XG5cbiAgRmllbGRJbm5lci5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIGlmICh0aGlzLnByb3BzLm5hbWUgIT09IHByZXZQcm9wcy5uYW1lKSB7XG4gICAgICB0aGlzLnByb3BzLmZvcm1pay51bnJlZ2lzdGVyRmllbGQocHJldlByb3BzLm5hbWUpO1xuICAgICAgdGhpcy5wcm9wcy5mb3JtaWsucmVnaXN0ZXJGaWVsZCh0aGlzLnByb3BzLm5hbWUsIHRoaXMpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLnZhbGlkYXRlICE9PSBwcmV2UHJvcHMudmFsaWRhdGUpIHtcbiAgICAgIHRoaXMucHJvcHMuZm9ybWlrLnJlZ2lzdGVyRmllbGQodGhpcy5wcm9wcy5uYW1lLCB0aGlzKTtcbiAgICB9XG4gIH07XG5cbiAgRmllbGRJbm5lci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5wcm9wcy5mb3JtaWsudW5yZWdpc3RlckZpZWxkKHRoaXMucHJvcHMubmFtZSk7XG4gIH07XG5cbiAgRmllbGRJbm5lci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfYSA9IHRoaXMucHJvcHMsXG4gICAgICAgIHZhbGlkYXRlID0gX2EudmFsaWRhdGUsXG4gICAgICAgIG5hbWUgPSBfYS5uYW1lLFxuICAgICAgICByZW5kZXIgPSBfYS5yZW5kZXIsXG4gICAgICAgIGNoaWxkcmVuID0gX2EuY2hpbGRyZW4sXG4gICAgICAgIF9iID0gX2EuY29tcG9uZW50LFxuICAgICAgICBjb21wb25lbnQgPSBfYiA9PT0gdm9pZCAwID8gJ2lucHV0JyA6IF9iLFxuICAgICAgICBmb3JtaWsgPSBfYS5mb3JtaWssXG4gICAgICAgIHByb3BzID0gX19yZXN0KF9hLCBbXCJ2YWxpZGF0ZVwiLCBcIm5hbWVcIiwgXCJyZW5kZXJcIiwgXCJjaGlsZHJlblwiLCBcImNvbXBvbmVudFwiLCBcImZvcm1pa1wiXSk7XG5cbiAgICB2YXIgX3ZhbGlkYXRlID0gZm9ybWlrLnZhbGlkYXRlLFxuICAgICAgICBfdmFsaWRhdGlvblNjaGVtYSA9IGZvcm1pay52YWxpZGF0aW9uU2NoZW1hLFxuICAgICAgICByZXN0T2ZGb3JtaWsgPSBfX3Jlc3QoZm9ybWlrLCBbXCJ2YWxpZGF0ZVwiLCBcInZhbGlkYXRpb25TY2hlbWFcIl0pO1xuXG4gICAgdmFyIGZpZWxkID0ge1xuICAgICAgdmFsdWU6IHByb3BzLnR5cGUgPT09ICdyYWRpbycgfHwgcHJvcHMudHlwZSA9PT0gJ2NoZWNrYm94JyA/IHByb3BzLnZhbHVlIDogZ2V0SW4oZm9ybWlrLnZhbHVlcywgbmFtZSksXG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgb25DaGFuZ2U6IGZvcm1pay5oYW5kbGVDaGFuZ2UsXG4gICAgICBvbkJsdXI6IGZvcm1pay5oYW5kbGVCbHVyXG4gICAgfTtcbiAgICB2YXIgYmFnID0ge1xuICAgICAgZmllbGQ6IGZpZWxkLFxuICAgICAgZm9ybTogcmVzdE9mRm9ybWlrXG4gICAgfTtcblxuICAgIGlmIChyZW5kZXIpIHtcbiAgICAgIHJldHVybiByZW5kZXIoYmFnKTtcbiAgICB9XG5cbiAgICBpZiAoaXNGdW5jdGlvbihjaGlsZHJlbikpIHtcbiAgICAgIHJldHVybiBjaGlsZHJlbihiYWcpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY29tcG9uZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIGlubmVyUmVmID0gcHJvcHMuaW5uZXJSZWYsXG4gICAgICAgICAgcmVzdCA9IF9fcmVzdChwcm9wcywgW1wiaW5uZXJSZWZcIl0pO1xuXG4gICAgICByZXR1cm4gY3JlYXRlRWxlbWVudChjb21wb25lbnQsIF9fYXNzaWduKHtcbiAgICAgICAgcmVmOiBpbm5lclJlZlxuICAgICAgfSwgZmllbGQsIHJlc3QsIHtcbiAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBfX2Fzc2lnbih7fSwgYmFnLCBwcm9wcywge1xuICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBGaWVsZElubmVyO1xufShDb21wb25lbnQpO1xuXG52YXIgRmllbGQgPVxuLyojX19QVVJFX18qL1xuY29ubmVjdChGaWVsZElubmVyKTtcblxudmFyIEZvcm0gPVxuLyojX19QVVJFX18qL1xuY29ubmVjdChmdW5jdGlvbiAoX2EpIHtcbiAgdmFyIF9iID0gX2EuZm9ybWlrLFxuICAgICAgaGFuZGxlUmVzZXQgPSBfYi5oYW5kbGVSZXNldCxcbiAgICAgIGhhbmRsZVN1Ym1pdCA9IF9iLmhhbmRsZVN1Ym1pdCxcbiAgICAgIHByb3BzID0gX19yZXN0KF9hLCBbXCJmb3JtaWtcIl0pO1xuXG4gIHJldHVybiBjcmVhdGVFbGVtZW50KFwiZm9ybVwiLCBfX2Fzc2lnbih7XG4gICAgb25SZXNldDogaGFuZGxlUmVzZXQsXG4gICAgb25TdWJtaXQ6IGhhbmRsZVN1Ym1pdFxuICB9LCBwcm9wcykpO1xufSk7XG5Gb3JtLmRpc3BsYXlOYW1lID0gJ0Zvcm0nO1xuXG5mdW5jdGlvbiB3aXRoRm9ybWlrKF9hKSB7XG4gIHZhciBfYiA9IF9hLm1hcFByb3BzVG9WYWx1ZXMsXG4gICAgICBtYXBQcm9wc1RvVmFsdWVzID0gX2IgPT09IHZvaWQgMCA/IGZ1bmN0aW9uICh2YW5pbGxhUHJvcHMpIHtcbiAgICB2YXIgdmFsID0ge307XG5cbiAgICBmb3IgKHZhciBrIGluIHZhbmlsbGFQcm9wcykge1xuICAgICAgaWYgKHZhbmlsbGFQcm9wcy5oYXNPd25Qcm9wZXJ0eShrKSAmJiB0eXBlb2YgdmFuaWxsYVByb3BzW2tdICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhbFtrXSA9IHZhbmlsbGFQcm9wc1trXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdmFsO1xuICB9IDogX2IsXG4gICAgICBjb25maWcgPSBfX3Jlc3QoX2EsIFtcIm1hcFByb3BzVG9WYWx1ZXNcIl0pO1xuXG4gIHJldHVybiBmdW5jdGlvbiBjcmVhdGVGb3JtaWsoQ29tcG9uZW50JCQxKSB7XG4gICAgdmFyIGNvbXBvbmVudERpc3BsYXlOYW1lID0gQ29tcG9uZW50JCQxLmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudCQkMS5uYW1lIHx8IENvbXBvbmVudCQkMS5jb25zdHJ1Y3RvciAmJiBDb21wb25lbnQkJDEuY29uc3RydWN0b3IubmFtZSB8fCAnQ29tcG9uZW50JztcblxuICAgIHZhciBDID0gZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgX19leHRlbmRzKEMsIF9zdXBlcik7XG5cbiAgICAgIGZ1bmN0aW9uIEMoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuXG4gICAgICAgIF90aGlzLnZhbGlkYXRlID0gZnVuY3Rpb24gKHZhbHVlcykge1xuICAgICAgICAgIHJldHVybiBjb25maWcudmFsaWRhdGUodmFsdWVzLCBfdGhpcy5wcm9wcyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgX3RoaXMudmFsaWRhdGlvblNjaGVtYSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gaXNGdW5jdGlvbihjb25maWcudmFsaWRhdGlvblNjaGVtYSkgPyBjb25maWcudmFsaWRhdGlvblNjaGVtYShfdGhpcy5wcm9wcykgOiBjb25maWcudmFsaWRhdGlvblNjaGVtYTtcbiAgICAgICAgfTtcblxuICAgICAgICBfdGhpcy5oYW5kbGVTdWJtaXQgPSBmdW5jdGlvbiAodmFsdWVzLCBhY3Rpb25zKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbmZpZy5oYW5kbGVTdWJtaXQodmFsdWVzLCBfX2Fzc2lnbih7fSwgYWN0aW9ucywge1xuICAgICAgICAgICAgcHJvcHM6IF90aGlzLnByb3BzXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9O1xuXG4gICAgICAgIF90aGlzLnJlbmRlckZvcm1Db21wb25lbnQgPSBmdW5jdGlvbiAoZm9ybWlrUHJvcHMpIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlRWxlbWVudChDb21wb25lbnQkJDEsIF9fYXNzaWduKHt9LCBfdGhpcy5wcm9wcywgZm9ybWlrUHJvcHMpKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICB9XG5cbiAgICAgIEMucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIGNoaWxkcmVuID0gX2EuY2hpbGRyZW4sXG4gICAgICAgICAgICBwcm9wcyA9IF9fcmVzdChfYSwgW1wiY2hpbGRyZW5cIl0pO1xuXG4gICAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KEZvcm1paywgX19hc3NpZ24oe30sIHByb3BzLCBjb25maWcsIHtcbiAgICAgICAgICB2YWxpZGF0ZTogY29uZmlnLnZhbGlkYXRlICYmIHRoaXMudmFsaWRhdGUsXG4gICAgICAgICAgdmFsaWRhdGlvblNjaGVtYTogY29uZmlnLnZhbGlkYXRpb25TY2hlbWEgJiYgdGhpcy52YWxpZGF0aW9uU2NoZW1hLFxuICAgICAgICAgIGluaXRpYWxWYWx1ZXM6IG1hcFByb3BzVG9WYWx1ZXModGhpcy5wcm9wcyksXG4gICAgICAgICAgaW5pdGlhbFN0YXR1czogY29uZmlnLm1hcFByb3BzVG9TdGF0dXMgJiYgY29uZmlnLm1hcFByb3BzVG9TdGF0dXModGhpcy5wcm9wcyksXG4gICAgICAgICAgb25TdWJtaXQ6IHRoaXMuaGFuZGxlU3VibWl0LFxuICAgICAgICAgIHJlbmRlcjogdGhpcy5yZW5kZXJGb3JtQ29tcG9uZW50XG4gICAgICAgIH0pKTtcbiAgICAgIH07XG5cbiAgICAgIEMuZGlzcGxheU5hbWUgPSBcIldpdGhGb3JtaWsoXCIgKyBjb21wb25lbnREaXNwbGF5TmFtZSArIFwiKVwiO1xuICAgICAgcmV0dXJuIEM7XG4gICAgfShDb21wb25lbnQpO1xuXG4gICAgcmV0dXJuIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKEMsIENvbXBvbmVudCQkMSk7XG4gIH07XG59XG5cbnZhciBtb3ZlID0gZnVuY3Rpb24gKGFycmF5LCBmcm9tLCB0bykge1xuICB2YXIgY29weSA9IChhcnJheSB8fCBbXSkuc2xpY2UoKTtcbiAgdmFyIHZhbHVlID0gY29weVtmcm9tXTtcbiAgY29weS5zcGxpY2UoZnJvbSwgMSk7XG4gIGNvcHkuc3BsaWNlKHRvLCAwLCB2YWx1ZSk7XG4gIHJldHVybiBjb3B5O1xufTtcbnZhciBzd2FwID0gZnVuY3Rpb24gKGFycmF5LCBpbmRleEEsIGluZGV4Qikge1xuICB2YXIgY29weSA9IChhcnJheSB8fCBbXSkuc2xpY2UoKTtcbiAgdmFyIGEgPSBjb3B5W2luZGV4QV07XG4gIGNvcHlbaW5kZXhBXSA9IGNvcHlbaW5kZXhCXTtcbiAgY29weVtpbmRleEJdID0gYTtcbiAgcmV0dXJuIGNvcHk7XG59O1xudmFyIGluc2VydCA9IGZ1bmN0aW9uIChhcnJheSwgaW5kZXgsIHZhbHVlKSB7XG4gIHZhciBjb3B5ID0gKGFycmF5IHx8IFtdKS5zbGljZSgpO1xuICBjb3B5LnNwbGljZShpbmRleCwgMCwgdmFsdWUpO1xuICByZXR1cm4gY29weTtcbn07XG52YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIChhcnJheSwgaW5kZXgsIHZhbHVlKSB7XG4gIHZhciBjb3B5ID0gKGFycmF5IHx8IFtdKS5zbGljZSgpO1xuICBjb3B5W2luZGV4XSA9IHZhbHVlO1xuICByZXR1cm4gY29weTtcbn07XG5cbnZhciBGaWVsZEFycmF5SW5uZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9zdXBlcikge1xuICBfX2V4dGVuZHMoRmllbGRBcnJheUlubmVyLCBfc3VwZXIpO1xuXG4gIGZ1bmN0aW9uIEZpZWxkQXJyYXlJbm5lcihwcm9wcykge1xuICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMudXBkYXRlQXJyYXlGaWVsZCA9IGZ1bmN0aW9uIChmbiwgYWx0ZXJUb3VjaGVkLCBhbHRlckVycm9ycykge1xuICAgICAgdmFyIF9hID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgbmFtZSA9IF9hLm5hbWUsXG4gICAgICAgICAgdmFsaWRhdGVPbkNoYW5nZSA9IF9hLnZhbGlkYXRlT25DaGFuZ2UsXG4gICAgICAgICAgX2IgPSBfYS5mb3JtaWssXG4gICAgICAgICAgc2V0Rm9ybWlrU3RhdGUgPSBfYi5zZXRGb3JtaWtTdGF0ZSxcbiAgICAgICAgICB2YWxpZGF0ZUZvcm0gPSBfYi52YWxpZGF0ZUZvcm07XG4gICAgICBzZXRGb3JtaWtTdGF0ZShmdW5jdGlvbiAocHJldlN0YXRlKSB7XG4gICAgICAgIHZhciB1cGRhdGVFcnJvcnMgPSB0eXBlb2YgYWx0ZXJFcnJvcnMgPT09ICdmdW5jdGlvbicgPyBhbHRlckVycm9ycyA6IGZuO1xuICAgICAgICB2YXIgdXBkYXRlVG91Y2hlZCA9IHR5cGVvZiBhbHRlclRvdWNoZWQgPT09ICdmdW5jdGlvbicgPyBhbHRlclRvdWNoZWQgOiBmbjtcbiAgICAgICAgcmV0dXJuIF9fYXNzaWduKHt9LCBwcmV2U3RhdGUsIHtcbiAgICAgICAgICB2YWx1ZXM6IHNldEluKHByZXZTdGF0ZS52YWx1ZXMsIG5hbWUsIGZuKGdldEluKHByZXZTdGF0ZS52YWx1ZXMsIG5hbWUpKSksXG4gICAgICAgICAgZXJyb3JzOiBhbHRlckVycm9ycyA/IHNldEluKHByZXZTdGF0ZS5lcnJvcnMsIG5hbWUsIHVwZGF0ZUVycm9ycyhnZXRJbihwcmV2U3RhdGUuZXJyb3JzLCBuYW1lKSkpIDogcHJldlN0YXRlLmVycm9ycyxcbiAgICAgICAgICB0b3VjaGVkOiBhbHRlclRvdWNoZWQgPyBzZXRJbihwcmV2U3RhdGUudG91Y2hlZCwgbmFtZSwgdXBkYXRlVG91Y2hlZChnZXRJbihwcmV2U3RhdGUudG91Y2hlZCwgbmFtZSkpKSA6IHByZXZTdGF0ZS50b3VjaGVkXG4gICAgICAgIH0pO1xuICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodmFsaWRhdGVPbkNoYW5nZSkge1xuICAgICAgICAgIHZhbGlkYXRlRm9ybSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMucHVzaCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIF90aGlzLnVwZGF0ZUFycmF5RmllbGQoZnVuY3Rpb24gKGFycmF5KSB7XG4gICAgICAgIHJldHVybiAoYXJyYXkgfHwgW10pLmNvbmNhdChbY2xvbmVEZWVwKHZhbHVlKV0pO1xuICAgICAgfSwgZmFsc2UsIGZhbHNlKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlUHVzaCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnB1c2godmFsdWUpO1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgX3RoaXMuc3dhcCA9IGZ1bmN0aW9uIChpbmRleEEsIGluZGV4Qikge1xuICAgICAgcmV0dXJuIF90aGlzLnVwZGF0ZUFycmF5RmllbGQoZnVuY3Rpb24gKGFycmF5KSB7XG4gICAgICAgIHJldHVybiBzd2FwKGFycmF5LCBpbmRleEEsIGluZGV4Qik7XG4gICAgICB9LCB0cnVlLCB0cnVlKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlU3dhcCA9IGZ1bmN0aW9uIChpbmRleEEsIGluZGV4Qikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnN3YXAoaW5kZXhBLCBpbmRleEIpO1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgX3RoaXMubW92ZSA9IGZ1bmN0aW9uIChmcm9tLCB0bykge1xuICAgICAgcmV0dXJuIF90aGlzLnVwZGF0ZUFycmF5RmllbGQoZnVuY3Rpb24gKGFycmF5KSB7XG4gICAgICAgIHJldHVybiBtb3ZlKGFycmF5LCBmcm9tLCB0byk7XG4gICAgICB9LCB0cnVlLCB0cnVlKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlTW92ZSA9IGZ1bmN0aW9uIChmcm9tLCB0bykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLm1vdmUoZnJvbSwgdG8pO1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaW5zZXJ0ID0gZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIF90aGlzLnVwZGF0ZUFycmF5RmllbGQoZnVuY3Rpb24gKGFycmF5KSB7XG4gICAgICAgIHJldHVybiBpbnNlcnQoYXJyYXksIGluZGV4LCB2YWx1ZSk7XG4gICAgICB9LCBmdW5jdGlvbiAoYXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIGluc2VydChhcnJheSwgaW5kZXgsIG51bGwpO1xuICAgICAgfSwgZnVuY3Rpb24gKGFycmF5KSB7XG4gICAgICAgIHJldHVybiBpbnNlcnQoYXJyYXksIGluZGV4LCBudWxsKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVJbnNlcnQgPSBmdW5jdGlvbiAoaW5kZXgsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuaW5zZXJ0KGluZGV4LCB2YWx1ZSk7XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBfdGhpcy5yZXBsYWNlID0gZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIF90aGlzLnVwZGF0ZUFycmF5RmllbGQoZnVuY3Rpb24gKGFycmF5KSB7XG4gICAgICAgIHJldHVybiByZXBsYWNlKGFycmF5LCBpbmRleCwgdmFsdWUpO1xuICAgICAgfSwgZmFsc2UsIGZhbHNlKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlUmVwbGFjZSA9IGZ1bmN0aW9uIChpbmRleCwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5yZXBsYWNlKGluZGV4LCB2YWx1ZSk7XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBfdGhpcy51bnNoaWZ0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gLTE7XG5cbiAgICAgIF90aGlzLnVwZGF0ZUFycmF5RmllbGQoZnVuY3Rpb24gKGFycmF5KSB7XG4gICAgICAgIHZhciBhcnIgPSBhcnJheSA/IFt2YWx1ZV0uY29uY2F0KGFycmF5KSA6IFt2YWx1ZV07XG5cbiAgICAgICAgaWYgKGxlbmd0aCA8IDApIHtcbiAgICAgICAgICBsZW5ndGggPSBhcnIubGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFycjtcbiAgICAgIH0sIGZ1bmN0aW9uIChhcnJheSkge1xuICAgICAgICB2YXIgYXJyID0gYXJyYXkgPyBbbnVsbF0uY29uY2F0KGFycmF5KSA6IFtudWxsXTtcbiAgICAgICAgaWYgKGxlbmd0aCA8IDApIGxlbmd0aCA9IGFyci5sZW5ndGg7XG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgICB9LCBmdW5jdGlvbiAoYXJyYXkpIHtcbiAgICAgICAgdmFyIGFyciA9IGFycmF5ID8gW251bGxdLmNvbmNhdChhcnJheSkgOiBbbnVsbF07XG4gICAgICAgIGlmIChsZW5ndGggPCAwKSBsZW5ndGggPSBhcnIubGVuZ3RoO1xuICAgICAgICByZXR1cm4gYXJyO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZVVuc2hpZnQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy51bnNoaWZ0KHZhbHVlKTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZVJlbW92ZSA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnJlbW92ZShpbmRleCk7XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVQb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMucG9wKCk7XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBfdGhpcy5yZW1vdmUgPSBfdGhpcy5yZW1vdmUuYmluZChfdGhpcyk7XG4gICAgX3RoaXMucG9wID0gX3RoaXMucG9wLmJpbmQoX3RoaXMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIEZpZWxkQXJyYXlJbm5lci5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgdmFyIHJlc3VsdDtcbiAgICB0aGlzLnVwZGF0ZUFycmF5RmllbGQoZnVuY3Rpb24gKGFycmF5KSB7XG4gICAgICB2YXIgY29weSA9IGFycmF5ID8gYXJyYXkuc2xpY2UoKSA6IFtdO1xuXG4gICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICByZXN1bHQgPSBjb3B5W2luZGV4XTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRnVuY3Rpb24oY29weS5zcGxpY2UpKSB7XG4gICAgICAgIGNvcHkuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvcHk7XG4gICAgfSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICBGaWVsZEFycmF5SW5uZXIucHJvdG90eXBlLnBvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzdWx0O1xuICAgIHRoaXMudXBkYXRlQXJyYXlGaWVsZChmdW5jdGlvbiAoYXJyYXkpIHtcbiAgICAgIHZhciB0bXAgPSBhcnJheTtcblxuICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0ID0gdG1wICYmIHRtcC5wb3AgJiYgdG1wLnBvcCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdG1wO1xuICAgIH0sIHRydWUsIHRydWUpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgRmllbGRBcnJheUlubmVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFycmF5SGVscGVycyA9IHtcbiAgICAgIHB1c2g6IHRoaXMucHVzaCxcbiAgICAgIHBvcDogdGhpcy5wb3AsXG4gICAgICBzd2FwOiB0aGlzLnN3YXAsXG4gICAgICBtb3ZlOiB0aGlzLm1vdmUsXG4gICAgICBpbnNlcnQ6IHRoaXMuaW5zZXJ0LFxuICAgICAgcmVwbGFjZTogdGhpcy5yZXBsYWNlLFxuICAgICAgdW5zaGlmdDogdGhpcy51bnNoaWZ0LFxuICAgICAgcmVtb3ZlOiB0aGlzLnJlbW92ZSxcbiAgICAgIGhhbmRsZVB1c2g6IHRoaXMuaGFuZGxlUHVzaCxcbiAgICAgIGhhbmRsZVBvcDogdGhpcy5oYW5kbGVQb3AsXG4gICAgICBoYW5kbGVTd2FwOiB0aGlzLmhhbmRsZVN3YXAsXG4gICAgICBoYW5kbGVNb3ZlOiB0aGlzLmhhbmRsZU1vdmUsXG4gICAgICBoYW5kbGVJbnNlcnQ6IHRoaXMuaGFuZGxlSW5zZXJ0LFxuICAgICAgaGFuZGxlUmVwbGFjZTogdGhpcy5oYW5kbGVSZXBsYWNlLFxuICAgICAgaGFuZGxlVW5zaGlmdDogdGhpcy5oYW5kbGVVbnNoaWZ0LFxuICAgICAgaGFuZGxlUmVtb3ZlOiB0aGlzLmhhbmRsZVJlbW92ZVxuICAgIH07XG5cbiAgICB2YXIgX2EgPSB0aGlzLnByb3BzLFxuICAgICAgICBjb21wb25lbnQgPSBfYS5jb21wb25lbnQsXG4gICAgICAgIHJlbmRlciA9IF9hLnJlbmRlcixcbiAgICAgICAgY2hpbGRyZW4gPSBfYS5jaGlsZHJlbixcbiAgICAgICAgbmFtZSA9IF9hLm5hbWUsXG4gICAgICAgIF9iID0gX2EuZm9ybWlrLFxuICAgICAgICBfdmFsaWRhdGUgPSBfYi52YWxpZGF0ZSxcbiAgICAgICAgX3ZhbGlkYXRpb25TY2hlbWEgPSBfYi52YWxpZGF0aW9uU2NoZW1hLFxuICAgICAgICByZXN0T2ZGb3JtaWsgPSBfX3Jlc3QoX2IsIFtcInZhbGlkYXRlXCIsIFwidmFsaWRhdGlvblNjaGVtYVwiXSk7XG5cbiAgICB2YXIgcHJvcHMgPSBfX2Fzc2lnbih7fSwgYXJyYXlIZWxwZXJzLCB7XG4gICAgICBmb3JtOiByZXN0T2ZGb3JtaWssXG4gICAgICBuYW1lOiBuYW1lXG4gICAgfSk7XG5cbiAgICByZXR1cm4gY29tcG9uZW50ID8gY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKSA6IHJlbmRlciA/IHJlbmRlcihwcm9wcykgOiBjaGlsZHJlbiA/IHR5cGVvZiBjaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJyA/IGNoaWxkcmVuKHByb3BzKSA6ICFpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pID8gQ2hpbGRyZW4ub25seShjaGlsZHJlbikgOiBudWxsIDogbnVsbDtcbiAgfTtcblxuICBGaWVsZEFycmF5SW5uZXIuZGVmYXVsdFByb3BzID0ge1xuICAgIHZhbGlkYXRlT25DaGFuZ2U6IHRydWVcbiAgfTtcbiAgcmV0dXJuIEZpZWxkQXJyYXlJbm5lcjtcbn0oQ29tcG9uZW50KTtcblxudmFyIEZpZWxkQXJyYXkgPVxuLyojX19QVVJFX18qL1xuY29ubmVjdChGaWVsZEFycmF5SW5uZXIpO1xuXG52YXIgRmFzdEZpZWxkSW5uZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9zdXBlcikge1xuICBfX2V4dGVuZHMoRmFzdEZpZWxkSW5uZXIsIF9zdXBlcik7XG5cbiAgZnVuY3Rpb24gRmFzdEZpZWxkSW5uZXIocHJvcHMpIHtcbiAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcblxuICAgIHZhciByZW5kZXIgPSBwcm9wcy5yZW5kZXIsXG4gICAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEoY29tcG9uZW50ICYmIHJlbmRlciksICdZb3Ugc2hvdWxkIG5vdCB1c2UgPEZhc3RGaWVsZCBjb21wb25lbnQ+IGFuZCA8RmFzdEZpZWxkIHJlbmRlcj4gaW4gdGhlIHNhbWUgPEZhc3RGaWVsZD4gY29tcG9uZW50OyA8RmFzdEZpZWxkIGNvbXBvbmVudD4gd2lsbCBiZSBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKGNvbXBvbmVudCAmJiBjaGlsZHJlbiAmJiBpc0Z1bmN0aW9uKGNoaWxkcmVuKSksICdZb3Ugc2hvdWxkIG5vdCB1c2UgPEZhc3RGaWVsZCBjb21wb25lbnQ+IGFuZCA8RmFzdEZpZWxkIGNoaWxkcmVuPiBhcyBhIGZ1bmN0aW9uIGluIHRoZSBzYW1lIDxGYXN0RmllbGQ+IGNvbXBvbmVudDsgPEZhc3RGaWVsZCBjb21wb25lbnQ+IHdpbGwgYmUgaWdub3JlZC4nKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEocmVuZGVyICYmIGNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pKSwgJ1lvdSBzaG91bGQgbm90IHVzZSA8RmFzdEZpZWxkIHJlbmRlcj4gYW5kIDxGYXN0RmllbGQgY2hpbGRyZW4+IGluIHRoZSBzYW1lIDxGYXN0RmllbGQ+IGNvbXBvbmVudDsgPEZhc3RGaWVsZCBjaGlsZHJlbj4gd2lsbCBiZSBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgRmFzdEZpZWxkSW5uZXIucHJvdG90eXBlLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgIGlmICh0aGlzLnByb3BzLnNob3VsZFVwZGF0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuc2hvdWxkVXBkYXRlKHByb3BzLCB0aGlzLnByb3BzKTtcbiAgICB9IGVsc2UgaWYgKGdldEluKHRoaXMucHJvcHMuZm9ybWlrLnZhbHVlcywgdGhpcy5wcm9wcy5uYW1lKSAhPT0gZ2V0SW4ocHJvcHMuZm9ybWlrLnZhbHVlcywgdGhpcy5wcm9wcy5uYW1lKSB8fCBnZXRJbih0aGlzLnByb3BzLmZvcm1pay5lcnJvcnMsIHRoaXMucHJvcHMubmFtZSkgIT09IGdldEluKHByb3BzLmZvcm1pay5lcnJvcnMsIHRoaXMucHJvcHMubmFtZSkgfHwgZ2V0SW4odGhpcy5wcm9wcy5mb3JtaWsudG91Y2hlZCwgdGhpcy5wcm9wcy5uYW1lKSAhPT0gZ2V0SW4ocHJvcHMuZm9ybWlrLnRvdWNoZWQsIHRoaXMucHJvcHMubmFtZSkgfHwgT2JqZWN0LmtleXModGhpcy5wcm9wcykubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhwcm9wcykubGVuZ3RoIHx8IHRoaXMucHJvcHMuZm9ybWlrLmlzU3VibWl0dGluZyAhPT0gcHJvcHMuZm9ybWlrLmlzU3VibWl0dGluZykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgRmFzdEZpZWxkSW5uZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucHJvcHMuZm9ybWlrLnJlZ2lzdGVyRmllbGQodGhpcy5wcm9wcy5uYW1lLCB0aGlzKTtcbiAgfTtcblxuICBGYXN0RmllbGRJbm5lci5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIGlmICh0aGlzLnByb3BzLm5hbWUgIT09IHByZXZQcm9wcy5uYW1lKSB7XG4gICAgICB0aGlzLnByb3BzLmZvcm1pay51bnJlZ2lzdGVyRmllbGQocHJldlByb3BzLm5hbWUpO1xuICAgICAgdGhpcy5wcm9wcy5mb3JtaWsucmVnaXN0ZXJGaWVsZCh0aGlzLnByb3BzLm5hbWUsIHRoaXMpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLnZhbGlkYXRlICE9PSBwcmV2UHJvcHMudmFsaWRhdGUpIHtcbiAgICAgIHRoaXMucHJvcHMuZm9ybWlrLnJlZ2lzdGVyRmllbGQodGhpcy5wcm9wcy5uYW1lLCB0aGlzKTtcbiAgICB9XG4gIH07XG5cbiAgRmFzdEZpZWxkSW5uZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucHJvcHMuZm9ybWlrLnVucmVnaXN0ZXJGaWVsZCh0aGlzLnByb3BzLm5hbWUpO1xuICB9O1xuXG4gIEZhc3RGaWVsZElubmVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9hID0gdGhpcy5wcm9wcyxcbiAgICAgICAgdmFsaWRhdGUgPSBfYS52YWxpZGF0ZSxcbiAgICAgICAgbmFtZSA9IF9hLm5hbWUsXG4gICAgICAgIHJlbmRlciA9IF9hLnJlbmRlcixcbiAgICAgICAgY2hpbGRyZW4gPSBfYS5jaGlsZHJlbixcbiAgICAgICAgX2IgPSBfYS5jb21wb25lbnQsXG4gICAgICAgIGNvbXBvbmVudCA9IF9iID09PSB2b2lkIDAgPyAnaW5wdXQnIDogX2IsXG4gICAgICAgIGZvcm1payA9IF9hLmZvcm1payxcbiAgICAgICAgc2hvdWxkVXBkYXRlID0gX2Euc2hvdWxkVXBkYXRlLFxuICAgICAgICBwcm9wcyA9IF9fcmVzdChfYSwgW1widmFsaWRhdGVcIiwgXCJuYW1lXCIsIFwicmVuZGVyXCIsIFwiY2hpbGRyZW5cIiwgXCJjb21wb25lbnRcIiwgXCJmb3JtaWtcIiwgXCJzaG91bGRVcGRhdGVcIl0pO1xuXG4gICAgdmFyIF92YWxpZGF0ZSA9IGZvcm1pay52YWxpZGF0ZSxcbiAgICAgICAgX3ZhbGlkYXRpb25TY2hlbWEgPSBmb3JtaWsudmFsaWRhdGlvblNjaGVtYSxcbiAgICAgICAgcmVzdE9mRm9ybWlrID0gX19yZXN0KGZvcm1paywgW1widmFsaWRhdGVcIiwgXCJ2YWxpZGF0aW9uU2NoZW1hXCJdKTtcblxuICAgIHZhciBmaWVsZCA9IHtcbiAgICAgIHZhbHVlOiBwcm9wcy50eXBlID09PSAncmFkaW8nIHx8IHByb3BzLnR5cGUgPT09ICdjaGVja2JveCcgPyBwcm9wcy52YWx1ZSA6IGdldEluKGZvcm1pay52YWx1ZXMsIG5hbWUpLFxuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIG9uQ2hhbmdlOiBmb3JtaWsuaGFuZGxlQ2hhbmdlLFxuICAgICAgb25CbHVyOiBmb3JtaWsuaGFuZGxlQmx1clxuICAgIH07XG4gICAgdmFyIGJhZyA9IHtcbiAgICAgIGZpZWxkOiBmaWVsZCxcbiAgICAgIGZvcm06IHJlc3RPZkZvcm1pa1xuICAgIH07XG5cbiAgICBpZiAocmVuZGVyKSB7XG4gICAgICByZXR1cm4gcmVuZGVyKGJhZyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRnVuY3Rpb24oY2hpbGRyZW4pKSB7XG4gICAgICByZXR1cm4gY2hpbGRyZW4oYmFnKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNvbXBvbmVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciBpbm5lclJlZiA9IHByb3BzLmlubmVyUmVmLFxuICAgICAgICAgIHJlc3QgPSBfX3Jlc3QocHJvcHMsIFtcImlubmVyUmVmXCJdKTtcblxuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBfX2Fzc2lnbih7XG4gICAgICAgIHJlZjogaW5uZXJSZWZcbiAgICAgIH0sIGZpZWxkLCByZXN0LCB7XG4gICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgICAgfSkpO1xuICAgIH1cblxuICAgIHJldHVybiBjcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgX19hc3NpZ24oe30sIGJhZywgcHJvcHMsIHtcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gRmFzdEZpZWxkSW5uZXI7XG59KENvbXBvbmVudCk7XG5cbnZhciBGYXN0RmllbGQgPVxuLyojX19QVVJFX18qL1xuY29ubmVjdChGYXN0RmllbGRJbm5lcik7XG5cbnZhciBFcnJvck1lc3NhZ2VJbXBsID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgX19leHRlbmRzKEVycm9yTWVzc2FnZUltcGwsIF9zdXBlcik7XG5cbiAgZnVuY3Rpb24gRXJyb3JNZXNzYWdlSW1wbCgpIHtcbiAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICBFcnJvck1lc3NhZ2VJbXBsLnByb3RvdHlwZS5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICBpZiAoZ2V0SW4odGhpcy5wcm9wcy5mb3JtaWsuZXJyb3JzLCB0aGlzLnByb3BzLm5hbWUpICE9PSBnZXRJbihwcm9wcy5mb3JtaWsuZXJyb3JzLCB0aGlzLnByb3BzLm5hbWUpIHx8IGdldEluKHRoaXMucHJvcHMuZm9ybWlrLnRvdWNoZWQsIHRoaXMucHJvcHMubmFtZSkgIT09IGdldEluKHByb3BzLmZvcm1pay50b3VjaGVkLCB0aGlzLnByb3BzLm5hbWUpIHx8IE9iamVjdC5rZXlzKHRoaXMucHJvcHMpLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMocHJvcHMpLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgRXJyb3JNZXNzYWdlSW1wbC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfYSA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNvbXBvbmVudCA9IF9hLmNvbXBvbmVudCxcbiAgICAgICAgZm9ybWlrID0gX2EuZm9ybWlrLFxuICAgICAgICByZW5kZXIgPSBfYS5yZW5kZXIsXG4gICAgICAgIGNoaWxkcmVuID0gX2EuY2hpbGRyZW4sXG4gICAgICAgIG5hbWUgPSBfYS5uYW1lLFxuICAgICAgICByZXN0ID0gX19yZXN0KF9hLCBbXCJjb21wb25lbnRcIiwgXCJmb3JtaWtcIiwgXCJyZW5kZXJcIiwgXCJjaGlsZHJlblwiLCBcIm5hbWVcIl0pO1xuXG4gICAgdmFyIHRvdWNoID0gZ2V0SW4oZm9ybWlrLnRvdWNoZWQsIG5hbWUpO1xuICAgIHZhciBlcnJvciA9IGdldEluKGZvcm1pay5lcnJvcnMsIG5hbWUpO1xuICAgIHJldHVybiAhIXRvdWNoICYmICEhZXJyb3IgPyByZW5kZXIgPyBpc0Z1bmN0aW9uKHJlbmRlcikgPyByZW5kZXIoZXJyb3IpIDogbnVsbCA6IGNoaWxkcmVuID8gaXNGdW5jdGlvbihjaGlsZHJlbikgPyBjaGlsZHJlbihlcnJvcikgOiBudWxsIDogY29tcG9uZW50ID8gY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHJlc3QsIGVycm9yKSA6IGVycm9yIDogbnVsbDtcbiAgfTtcblxuICByZXR1cm4gRXJyb3JNZXNzYWdlSW1wbDtcbn0oQ29tcG9uZW50KTtcblxudmFyIEVycm9yTWVzc2FnZSA9XG4vKiNfX1BVUkVfXyovXG5jb25uZWN0KEVycm9yTWVzc2FnZUltcGwpO1xuXG5leHBvcnQgeyBGb3JtaWssIHl1cFRvRm9ybUVycm9ycywgdmFsaWRhdGVZdXBTY2hlbWEsIEZpZWxkLCBGb3JtLCB3aXRoRm9ybWlrLCBtb3ZlLCBzd2FwLCBpbnNlcnQsIHJlcGxhY2UsIEZpZWxkQXJyYXksIGlzRnVuY3Rpb24sIGlzT2JqZWN0LCBpc0ludGVnZXIsIGlzU3RyaW5nLCBpc05hTiwgaXNFbXB0eUNoaWxkcmVuLCBpc1Byb21pc2UsIGlzSW5wdXRFdmVudCwgZ2V0QWN0aXZlRWxlbWVudCwgbWFrZUNhbmNlbGFibGUsIGdldEluLCBzZXRJbiwgc2V0TmVzdGVkT2JqZWN0VmFsdWVzLCBGYXN0RmllbGQsIEZvcm1pa1Byb3ZpZGVyLCBGb3JtaWtDb25zdW1lciwgY29ubmVjdCwgRXJyb3JNZXNzYWdlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mb3JtaWsuZXNtLmpzLm1hcFxuIiwiZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICB2YXIgY2FjaGUgPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICBpZiAoY2FjaGVbYXJnXSA9PT0gdW5kZWZpbmVkKSBjYWNoZVthcmddID0gZm4oYXJnKTtcbiAgICByZXR1cm4gY2FjaGVbYXJnXTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZTtcbiIsImltcG9ydCBtZW1vaXplIGZyb20gJ0BlbW90aW9uL21lbW9pemUnO1xuXG52YXIgcmVhY3RQcm9wc1JlZ2V4ID0gL14oKGNoaWxkcmVufGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MfGtleXxyZWZ8YXV0b0ZvY3VzfGRlZmF1bHRWYWx1ZXxkZWZhdWx0Q2hlY2tlZHxpbm5lckhUTUx8c3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nfHN1cHByZXNzSHlkcmF0aW9uV2FybmluZ3x2YWx1ZUxpbmt8YWNjZXB0fGFjY2VwdENoYXJzZXR8YWNjZXNzS2V5fGFjdGlvbnxhbGxvd3xhbGxvd1VzZXJNZWRpYXxhbGxvd1BheW1lbnRSZXF1ZXN0fGFsbG93RnVsbFNjcmVlbnxhbGxvd1RyYW5zcGFyZW5jeXxhbHR8YXN5bmN8YXV0b0NvbXBsZXRlfGF1dG9QbGF5fGNhcHR1cmV8Y2VsbFBhZGRpbmd8Y2VsbFNwYWNpbmd8Y2hhbGxlbmdlfGNoYXJTZXR8Y2hlY2tlZHxjaXRlfGNsYXNzSUR8Y2xhc3NOYW1lfGNvbHN8Y29sU3Bhbnxjb250ZW50fGNvbnRlbnRFZGl0YWJsZXxjb250ZXh0TWVudXxjb250cm9sc3xjb250cm9sc0xpc3R8Y29vcmRzfGNyb3NzT3JpZ2lufGRhdGF8ZGF0ZVRpbWV8ZGVjb2Rpbmd8ZGVmYXVsdHxkZWZlcnxkaXJ8ZGlzYWJsZWR8ZG93bmxvYWR8ZHJhZ2dhYmxlfGVuY1R5cGV8Zm9ybXxmb3JtQWN0aW9ufGZvcm1FbmNUeXBlfGZvcm1NZXRob2R8Zm9ybU5vVmFsaWRhdGV8Zm9ybVRhcmdldHxmcmFtZUJvcmRlcnxoZWFkZXJzfGhlaWdodHxoaWRkZW58aGlnaHxocmVmfGhyZWZMYW5nfGh0bWxGb3J8aHR0cEVxdWl2fGlkfGlucHV0TW9kZXxpbnRlZ3JpdHl8aXN8a2V5UGFyYW1zfGtleVR5cGV8a2luZHxsYWJlbHxsYW5nfGxpc3R8bG9hZGluZ3xsb29wfGxvd3xtYXJnaW5IZWlnaHR8bWFyZ2luV2lkdGh8bWF4fG1heExlbmd0aHxtZWRpYXxtZWRpYUdyb3VwfG1ldGhvZHxtaW58bWluTGVuZ3RofG11bHRpcGxlfG11dGVkfG5hbWV8bm9uY2V8bm9WYWxpZGF0ZXxvcGVufG9wdGltdW18cGF0dGVybnxwbGFjZWhvbGRlcnxwbGF5c0lubGluZXxwb3N0ZXJ8cHJlbG9hZHxwcm9maWxlfHJhZGlvR3JvdXB8cmVhZE9ubHl8cmVmZXJyZXJQb2xpY3l8cmVsfHJlcXVpcmVkfHJldmVyc2VkfHJvbGV8cm93c3xyb3dTcGFufHNhbmRib3h8c2NvcGV8c2NvcGVkfHNjcm9sbGluZ3xzZWFtbGVzc3xzZWxlY3RlZHxzaGFwZXxzaXplfHNpemVzfHNsb3R8c3BhbnxzcGVsbENoZWNrfHNyY3xzcmNEb2N8c3JjTGFuZ3xzcmNTZXR8c3RhcnR8c3RlcHxzdHlsZXxzdW1tYXJ5fHRhYkluZGV4fHRhcmdldHx0aXRsZXx0eXBlfHVzZU1hcHx2YWx1ZXx3aWR0aHx3bW9kZXx3cmFwfGFib3V0fGRhdGF0eXBlfGlubGlzdHxwcmVmaXh8cHJvcGVydHl8cmVzb3VyY2V8dHlwZW9mfHZvY2FifGF1dG9DYXBpdGFsaXplfGF1dG9Db3JyZWN0fGF1dG9TYXZlfGNvbG9yfGl0ZW1Qcm9wfGl0ZW1TY29wZXxpdGVtVHlwZXxpdGVtSUR8aXRlbVJlZnxyZXN1bHRzfHNlY3VyaXR5fHVuc2VsZWN0YWJsZXxhY2NlbnRIZWlnaHR8YWNjdW11bGF0ZXxhZGRpdGl2ZXxhbGlnbm1lbnRCYXNlbGluZXxhbGxvd1Jlb3JkZXJ8YWxwaGFiZXRpY3xhbXBsaXR1ZGV8YXJhYmljRm9ybXxhc2NlbnR8YXR0cmlidXRlTmFtZXxhdHRyaWJ1dGVUeXBlfGF1dG9SZXZlcnNlfGF6aW11dGh8YmFzZUZyZXF1ZW5jeXxiYXNlbGluZVNoaWZ0fGJhc2VQcm9maWxlfGJib3h8YmVnaW58Ymlhc3xieXxjYWxjTW9kZXxjYXBIZWlnaHR8Y2xpcHxjbGlwUGF0aFVuaXRzfGNsaXBQYXRofGNsaXBSdWxlfGNvbG9ySW50ZXJwb2xhdGlvbnxjb2xvckludGVycG9sYXRpb25GaWx0ZXJzfGNvbG9yUHJvZmlsZXxjb2xvclJlbmRlcmluZ3xjb250ZW50U2NyaXB0VHlwZXxjb250ZW50U3R5bGVUeXBlfGN1cnNvcnxjeHxjeXxkfGRlY2VsZXJhdGV8ZGVzY2VudHxkaWZmdXNlQ29uc3RhbnR8ZGlyZWN0aW9ufGRpc3BsYXl8ZGl2aXNvcnxkb21pbmFudEJhc2VsaW5lfGR1cnxkeHxkeXxlZGdlTW9kZXxlbGV2YXRpb258ZW5hYmxlQmFja2dyb3VuZHxlbmR8ZXhwb25lbnR8ZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZHxmaWxsfGZpbGxPcGFjaXR5fGZpbGxSdWxlfGZpbHRlcnxmaWx0ZXJSZXN8ZmlsdGVyVW5pdHN8Zmxvb2RDb2xvcnxmbG9vZE9wYWNpdHl8Zm9jdXNhYmxlfGZvbnRGYW1pbHl8Zm9udFNpemV8Zm9udFNpemVBZGp1c3R8Zm9udFN0cmV0Y2h8Zm9udFN0eWxlfGZvbnRWYXJpYW50fGZvbnRXZWlnaHR8Zm9ybWF0fGZyb218ZnJ8Znh8Znl8ZzF8ZzJ8Z2x5cGhOYW1lfGdseXBoT3JpZW50YXRpb25Ib3Jpem9udGFsfGdseXBoT3JpZW50YXRpb25WZXJ0aWNhbHxnbHlwaFJlZnxncmFkaWVudFRyYW5zZm9ybXxncmFkaWVudFVuaXRzfGhhbmdpbmd8aG9yaXpBZHZYfGhvcml6T3JpZ2luWHxpZGVvZ3JhcGhpY3xpbWFnZVJlbmRlcmluZ3xpbnxpbjJ8aW50ZXJjZXB0fGt8azF8azJ8azN8azR8a2VybmVsTWF0cml4fGtlcm5lbFVuaXRMZW5ndGh8a2VybmluZ3xrZXlQb2ludHN8a2V5U3BsaW5lc3xrZXlUaW1lc3xsZW5ndGhBZGp1c3R8bGV0dGVyU3BhY2luZ3xsaWdodGluZ0NvbG9yfGxpbWl0aW5nQ29uZUFuZ2xlfGxvY2FsfG1hcmtlckVuZHxtYXJrZXJNaWR8bWFya2VyU3RhcnR8bWFya2VySGVpZ2h0fG1hcmtlclVuaXRzfG1hcmtlcldpZHRofG1hc2t8bWFza0NvbnRlbnRVbml0c3xtYXNrVW5pdHN8bWF0aGVtYXRpY2FsfG1vZGV8bnVtT2N0YXZlc3xvZmZzZXR8b3BhY2l0eXxvcGVyYXRvcnxvcmRlcnxvcmllbnR8b3JpZW50YXRpb258b3JpZ2lufG92ZXJmbG93fG92ZXJsaW5lUG9zaXRpb258b3ZlcmxpbmVUaGlja25lc3N8cGFub3NlMXxwYWludE9yZGVyfHBhdGhMZW5ndGh8cGF0dGVybkNvbnRlbnRVbml0c3xwYXR0ZXJuVHJhbnNmb3JtfHBhdHRlcm5Vbml0c3xwb2ludGVyRXZlbnRzfHBvaW50c3xwb2ludHNBdFh8cG9pbnRzQXRZfHBvaW50c0F0WnxwcmVzZXJ2ZUFscGhhfHByZXNlcnZlQXNwZWN0UmF0aW98cHJpbWl0aXZlVW5pdHN8cnxyYWRpdXN8cmVmWHxyZWZZfHJlbmRlcmluZ0ludGVudHxyZXBlYXRDb3VudHxyZXBlYXREdXJ8cmVxdWlyZWRFeHRlbnNpb25zfHJlcXVpcmVkRmVhdHVyZXN8cmVzdGFydHxyZXN1bHR8cm90YXRlfHJ4fHJ5fHNjYWxlfHNlZWR8c2hhcGVSZW5kZXJpbmd8c2xvcGV8c3BhY2luZ3xzcGVjdWxhckNvbnN0YW50fHNwZWN1bGFyRXhwb25lbnR8c3BlZWR8c3ByZWFkTWV0aG9kfHN0YXJ0T2Zmc2V0fHN0ZERldmlhdGlvbnxzdGVtaHxzdGVtdnxzdGl0Y2hUaWxlc3xzdG9wQ29sb3J8c3RvcE9wYWNpdHl8c3RyaWtldGhyb3VnaFBvc2l0aW9ufHN0cmlrZXRocm91Z2hUaGlja25lc3N8c3RyaW5nfHN0cm9rZXxzdHJva2VEYXNoYXJyYXl8c3Ryb2tlRGFzaG9mZnNldHxzdHJva2VMaW5lY2FwfHN0cm9rZUxpbmVqb2lufHN0cm9rZU1pdGVybGltaXR8c3Ryb2tlT3BhY2l0eXxzdHJva2VXaWR0aHxzdXJmYWNlU2NhbGV8c3lzdGVtTGFuZ3VhZ2V8dGFibGVWYWx1ZXN8dGFyZ2V0WHx0YXJnZXRZfHRleHRBbmNob3J8dGV4dERlY29yYXRpb258dGV4dFJlbmRlcmluZ3x0ZXh0TGVuZ3RofHRvfHRyYW5zZm9ybXx1MXx1Mnx1bmRlcmxpbmVQb3NpdGlvbnx1bmRlcmxpbmVUaGlja25lc3N8dW5pY29kZXx1bmljb2RlQmlkaXx1bmljb2RlUmFuZ2V8dW5pdHNQZXJFbXx2QWxwaGFiZXRpY3x2SGFuZ2luZ3x2SWRlb2dyYXBoaWN8dk1hdGhlbWF0aWNhbHx2YWx1ZXN8dmVjdG9yRWZmZWN0fHZlcnNpb258dmVydEFkdll8dmVydE9yaWdpblh8dmVydE9yaWdpbll8dmlld0JveHx2aWV3VGFyZ2V0fHZpc2liaWxpdHl8d2lkdGhzfHdvcmRTcGFjaW5nfHdyaXRpbmdNb2RlfHh8eEhlaWdodHx4MXx4Mnx4Q2hhbm5lbFNlbGVjdG9yfHhsaW5rQWN0dWF0ZXx4bGlua0FyY3JvbGV8eGxpbmtIcmVmfHhsaW5rUm9sZXx4bGlua1Nob3d8eGxpbmtUaXRsZXx4bGlua1R5cGV8eG1sQmFzZXx4bWxuc3x4bWxuc1hsaW5rfHhtbExhbmd8eG1sU3BhY2V8eXx5MXx5Mnx5Q2hhbm5lbFNlbGVjdG9yfHp8em9vbUFuZFBhbnxmb3J8Y2xhc3N8YXV0b2ZvY3VzKXwoKFtEZF1bQWFdW1R0XVtBYV18W0FhXVtScl1bSWldW0FhXXx4KS0uKikpJC87IC8vIGh0dHBzOi8vZXNiZW5jaC5jb20vYmVuY2gvNWJmZWU2OGE0Y2Q3ZTYwMDllZjYxZDIzXG5cbnZhciBpbmRleCA9IG1lbW9pemUoZnVuY3Rpb24gKHByb3ApIHtcbiAgcmV0dXJuIHJlYWN0UHJvcHNSZWdleC50ZXN0KHByb3ApIHx8IHByb3AuY2hhckNvZGVBdCgwKSA9PT0gMTExXG4gIC8qIG8gKi9cbiAgJiYgcHJvcC5jaGFyQ29kZUF0KDEpID09PSAxMTBcbiAgLyogbiAqL1xuICAmJiBwcm9wLmNoYXJDb2RlQXQoMikgPCA5MTtcbn1cbi8qIForMSAqL1xuKTtcblxuZXhwb3J0IGRlZmF1bHQgaW5kZXg7XG4iLCIvKipcclxuICogUmV0dXJucyB0aGUgb2JqZWN0IHR5cGUgb2YgdGhlIGdpdmVuIHBheWxvYWRcclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRUeXBlKHBheWxvYWQpIHtcclxuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocGF5bG9hZCkuc2xpY2UoOCwgLTEpO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgdW5kZWZpbmVkXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcmV0dXJucyB7cGF5bG9hZCBpcyB1bmRlZmluZWR9XHJcbiAqL1xyXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChwYXlsb2FkKSB7XHJcbiAgICByZXR1cm4gZ2V0VHlwZShwYXlsb2FkKSA9PT0gJ1VuZGVmaW5lZCc7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBudWxsXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcmV0dXJucyB7cGF5bG9hZCBpcyBudWxsfVxyXG4gKi9cclxuZnVuY3Rpb24gaXNOdWxsKHBheWxvYWQpIHtcclxuICAgIHJldHVybiBnZXRUeXBlKHBheWxvYWQpID09PSAnTnVsbCc7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhIHBsYWluIEphdmFTY3JpcHQgb2JqZWN0IChleGNsdWRpbmcgc3BlY2lhbCBjbGFzc2VzIG9yIG9iamVjdHMgd2l0aCBvdGhlciBwcm90b3R5cGVzKVxyXG4gKlxyXG4gKiBAcGFyYW0geyp9IHBheWxvYWRcclxuICogQHJldHVybnMge3BheWxvYWQgaXMge1trZXk6IHN0cmluZ106IGFueX19XHJcbiAqL1xyXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHBheWxvYWQpIHtcclxuICAgIGlmIChnZXRUeXBlKHBheWxvYWQpICE9PSAnT2JqZWN0JylcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICByZXR1cm4gKHBheWxvYWQuY29uc3RydWN0b3IgPT09IE9iamVjdCAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YocGF5bG9hZCkgPT09IE9iamVjdC5wcm90b3R5cGUpO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYSBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdCAoZXhjbHVkaW5nIHNwZWNpYWwgY2xhc3NlcyBvciBvYmplY3RzIHdpdGggb3RoZXIgcHJvdG90eXBlcylcclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIHtba2V5OiBzdHJpbmddOiBhbnl9fVxyXG4gKi9cclxuZnVuY3Rpb24gaXNPYmplY3QocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIGlzUGxhaW5PYmplY3QocGF5bG9hZCk7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhbiBhbnkga2luZCBvZiBvYmplY3QgKGluY2x1ZGluZyBzcGVjaWFsIGNsYXNzZXMgb3Igb2JqZWN0cyB3aXRoIGRpZmZlcmVudCBwcm90b3R5cGVzKVxyXG4gKlxyXG4gKiBAcGFyYW0geyp9IHBheWxvYWRcclxuICogQHJldHVybnMge3BheWxvYWQgaXMge1trZXk6IHN0cmluZ106IGFueX19XHJcbiAqL1xyXG5mdW5jdGlvbiBpc0FueU9iamVjdChwYXlsb2FkKSB7XHJcbiAgICByZXR1cm4gZ2V0VHlwZShwYXlsb2FkKSA9PT0gJ09iamVjdCc7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhbiBvYmplY3QgbGlrZSBhIHR5cGUgcGFzc2VkIGluIDwgPlxyXG4gKlxyXG4gKiBVc2FnZTogaXNPYmplY3RMaWtlPHtpZDogYW55fT4ocGF5bG9hZCkgLy8gd2lsbCBtYWtlIHN1cmUgaXQncyBhbiBvYmplY3QgYW5kIGhhcyBhbiBgaWRgIHByb3AuXHJcbiAqXHJcbiAqIEB0ZW1wbGF0ZSBUIHRoaXMgbXVzdCBiZSBwYXNzZWQgaW4gPCA+XHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcmV0dXJucyB7cGF5bG9hZCBpcyBUfVxyXG4gKi9cclxuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHBheWxvYWQpIHtcclxuICAgIHJldHVybiBpc0FueU9iamVjdChwYXlsb2FkKTtcclxufVxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGEgZnVuY3Rpb25cclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIEZ1bmN0aW9ufVxyXG4gKi9cclxuZnVuY3Rpb24gaXNGdW5jdGlvbihwYXlsb2FkKSB7XHJcbiAgICByZXR1cm4gZ2V0VHlwZShwYXlsb2FkKSA9PT0gJ0Z1bmN0aW9uJztcclxufVxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGFuIGFycmF5XHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcmV0dXJucyB7cGF5bG9hZCBpcyB1bmRlZmluZWR9XHJcbiAqL1xyXG5mdW5jdGlvbiBpc0FycmF5KHBheWxvYWQpIHtcclxuICAgIHJldHVybiBnZXRUeXBlKHBheWxvYWQpID09PSAnQXJyYXknO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYSBzdHJpbmdcclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIHN0cmluZ31cclxuICovXHJcbmZ1bmN0aW9uIGlzU3RyaW5nKHBheWxvYWQpIHtcclxuICAgIHJldHVybiBnZXRUeXBlKHBheWxvYWQpID09PSAnU3RyaW5nJztcclxufVxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGEgc3RyaW5nLCBCVVQgcmV0dXJucyBmYWxzZSBmb3IgJydcclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIHN0cmluZ31cclxuICovXHJcbmZ1bmN0aW9uIGlzRnVsbFN0cmluZyhwYXlsb2FkKSB7XHJcbiAgICByZXR1cm4gaXNTdHJpbmcocGF5bG9hZCkgJiYgcGF5bG9hZCAhPT0gJyc7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyAnJ1xyXG4gKlxyXG4gKiBAcGFyYW0geyp9IHBheWxvYWRcclxuICogQHJldHVybnMge3BheWxvYWQgaXMgc3RyaW5nfVxyXG4gKi9cclxuZnVuY3Rpb24gaXNFbXB0eVN0cmluZyhwYXlsb2FkKSB7XHJcbiAgICByZXR1cm4gcGF5bG9hZCA9PT0gJyc7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhIG51bWJlclxyXG4gKlxyXG4gKiBUaGlzIHdpbGwgcmV0dXJuIGZhbHNlIGZvciBOYU5cclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIG51bWJlcn1cclxuICovXHJcbmZ1bmN0aW9uIGlzTnVtYmVyKHBheWxvYWQpIHtcclxuICAgIHJldHVybiAoZ2V0VHlwZShwYXlsb2FkKSA9PT0gJ051bWJlcicgJiYgIWlzTmFOKHBheWxvYWQpKTtcclxufVxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGEgYm9vbGVhblxyXG4gKlxyXG4gKiBAcGFyYW0geyp9IHBheWxvYWRcclxuICogQHJldHVybnMge3BheWxvYWQgaXMgYm9vbGVhbn1cclxuICovXHJcbmZ1bmN0aW9uIGlzQm9vbGVhbihwYXlsb2FkKSB7XHJcbiAgICByZXR1cm4gZ2V0VHlwZShwYXlsb2FkKSA9PT0gJ0Jvb2xlYW4nO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYSByZWd1bGFyIGV4cHJlc3Npb25cclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIFJlZ0V4cH1cclxuICovXHJcbmZ1bmN0aW9uIGlzUmVnRXhwKHBheWxvYWQpIHtcclxuICAgIHJldHVybiBnZXRUeXBlKHBheWxvYWQpID09PSAnUmVnRXhwJztcclxufVxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGEgZGF0ZSwgYW5kIHRoYXQgdGhlIGRhdGUgaXMgVmFsaWRcclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIERhdGV9XHJcbiAqL1xyXG5mdW5jdGlvbiBpc0RhdGUocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIChnZXRUeXBlKHBheWxvYWQpID09PSAnRGF0ZScgJiYgIWlzTmFOKHBheWxvYWQpKTtcclxufVxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGEgU3ltYm9sXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcmV0dXJucyB7cGF5bG9hZCBpcyBzeW1ib2x9XHJcbiAqL1xyXG5mdW5jdGlvbiBpc1N5bWJvbChwYXlsb2FkKSB7XHJcbiAgICByZXR1cm4gKGdldFR5cGUocGF5bG9hZCkgPT09ICdTeW1ib2wnKTtcclxufVxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGEgcHJpbWl0aXZlIHR5cGUgKGVnLiBCb29sZWFuIHwgTnVsbCB8IFVuZGVmaW5lZCB8IE51bWJlciB8IFN0cmluZyB8IFN5bWJvbClcclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHsocGF5bG9hZCBpcyBib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZCB8IG51bWJlciB8IHN0cmluZyB8IHN5bWJvbCl9XHJcbiAqL1xyXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZShwYXlsb2FkKSB7XHJcbiAgICByZXR1cm4gKGlzQm9vbGVhbihwYXlsb2FkKSB8fFxyXG4gICAgICAgIGlzTnVsbChwYXlsb2FkKSB8fFxyXG4gICAgICAgIGlzVW5kZWZpbmVkKHBheWxvYWQpIHx8XHJcbiAgICAgICAgaXNOdW1iZXIocGF5bG9hZCkgfHxcclxuICAgICAgICBpc1N0cmluZyhwYXlsb2FkKSB8fFxyXG4gICAgICAgIGlzU3ltYm9sKHBheWxvYWQpKTtcclxufVxyXG4vKipcclxuICogRG9lcyBhIGdlbmVyaWMgY2hlY2sgdG8gY2hlY2sgdGhhdCB0aGUgZ2l2ZW4gcGF5bG9hZCBpcyBvZiBhIGdpdmVuIHR5cGUuXHJcbiAqIEluIGNhc2VzIGxpa2UgTnVtYmVyLCBpdCB3aWxsIHJldHVybiB0cnVlIGZvciBOYU4gYXMgTmFOIGlzIGEgTnVtYmVyICh0aGFua3MgamF2YXNjcmlwdCEpO1xyXG4gKiBJdCB3aWxsLCBob3dldmVyLCBkaWZmZXJlbnRpYXRlIGJldHdlZW4gb2JqZWN0IGFuZCBudWxsXHJcbiAqXHJcbiAqIEB0ZW1wbGF0ZSBUXHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcGFyYW0ge1R9IHR5cGVcclxuICogQHRocm93cyB7VHlwZUVycm9yfSBXaWxsIHRocm93IHR5cGUgZXJyb3IgaWYgdHlwZSBpcyBhbiBpbnZhbGlkIHR5cGVcclxuICogQHJldHVybnMge3BheWxvYWQgaXMgVH1cclxuICovXHJcbmZ1bmN0aW9uIGlzVHlwZShwYXlsb2FkLCB0eXBlKSB7XHJcbiAgICBpZiAoISh0eXBlIGluc3RhbmNlb2YgRnVuY3Rpb24pKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVHlwZSBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcclxuICAgIH1cclxuICAgIGlmICghdHlwZS5oYXNPd25Qcm9wZXJ0eSgncHJvdG90eXBlJykpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUeXBlIGlzIG5vdCBhIGNsYXNzJyk7XHJcbiAgICB9XHJcbiAgICAvLyBDbGFzc2VzIHVzdWFsbHkgaGF2ZSBuYW1lcyAoYXMgZnVuY3Rpb25zIHVzdWFsbHkgaGF2ZSBuYW1lcylcclxuICAgIHZhciBuYW1lID0gdHlwZS5uYW1lO1xyXG4gICAgcmV0dXJuIChnZXRUeXBlKHBheWxvYWQpID09PSBuYW1lKSB8fCBCb29sZWFuKHBheWxvYWQgJiYgKHBheWxvYWQuY29uc3RydWN0b3IgPT09IHR5cGUpKTtcclxufVxuXG5leHBvcnQgeyBnZXRUeXBlLCBpc1VuZGVmaW5lZCwgaXNOdWxsLCBpc1BsYWluT2JqZWN0LCBpc09iamVjdCwgaXNBbnlPYmplY3QsIGlzT2JqZWN0TGlrZSwgaXNGdW5jdGlvbiwgaXNBcnJheSwgaXNTdHJpbmcsIGlzRnVsbFN0cmluZywgaXNFbXB0eVN0cmluZywgaXNOdW1iZXIsIGlzQm9vbGVhbiwgaXNSZWdFeHAsIGlzRGF0ZSwgaXNTeW1ib2wsIGlzUHJpbWl0aXZlLCBpc1R5cGUgfTtcbiIsImltcG9ydCB7IGlzQXJyYXksIGlzUGxhaW5PYmplY3QsIGlzU3ltYm9sIH0gZnJvbSAnaXMtd2hhdCc7XG5cbmZ1bmN0aW9uIGFzc2lnblByb3AoY2FycnksIGtleSwgbmV3VmFsLCBvcmlnaW5hbE9iamVjdCkge1xyXG4gICAgdmFyIHByb3BUeXBlID0gb3JpZ2luYWxPYmplY3QucHJvcGVydHlJc0VudW1lcmFibGUoa2V5KVxyXG4gICAgICAgID8gJ2VudW1lcmFibGUnXHJcbiAgICAgICAgOiAnbm9uZW51bWVyYWJsZSc7XHJcbiAgICBpZiAocHJvcFR5cGUgPT09ICdlbnVtZXJhYmxlJylcclxuICAgICAgICBjYXJyeVtrZXldID0gbmV3VmFsO1xyXG4gICAgaWYgKHByb3BUeXBlID09PSAnbm9uZW51bWVyYWJsZScpIHtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2FycnksIGtleSwge1xyXG4gICAgICAgICAgICB2YWx1ZTogbmV3VmFsLFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIG1lcmdlUmVjdXJzaXZlbHkob3JpZ2luLCBuZXdDb21lciwgZXh0ZW5zaW9ucykge1xyXG4gICAgLy8gd29yayBkaXJlY3RseSBvbiBuZXdDb21lciBpZiBpdHMgbm90IGFuIG9iamVjdFxyXG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KG5ld0NvbWVyKSkge1xyXG4gICAgICAgIC8vIGV4dGVuZCBtZXJnZSBydWxlc1xyXG4gICAgICAgIGlmIChleHRlbnNpb25zICYmIGlzQXJyYXkoZXh0ZW5zaW9ucykpIHtcclxuICAgICAgICAgICAgZXh0ZW5zaW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChleHRlbmQpIHtcclxuICAgICAgICAgICAgICAgIG5ld0NvbWVyID0gZXh0ZW5kKG9yaWdpbiwgbmV3Q29tZXIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ld0NvbWVyO1xyXG4gICAgfVxyXG4gICAgLy8gZGVmaW5lIG5ld09iamVjdCB0byBtZXJnZSBhbGwgdmFsdWVzIHVwb25cclxuICAgIHZhciBuZXdPYmplY3QgPSB7fTtcclxuICAgIGlmIChpc1BsYWluT2JqZWN0KG9yaWdpbikpIHtcclxuICAgICAgICB2YXIgcHJvcHNfMSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9yaWdpbik7XHJcbiAgICAgICAgdmFyIHN5bWJvbHNfMSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob3JpZ2luKTtcclxuICAgICAgICBuZXdPYmplY3QgPSBwcm9wc18xLmNvbmNhdChzeW1ib2xzXzEpLnJlZHVjZShmdW5jdGlvbiAoY2FycnksIGtleSkge1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHZhciB0YXJnZXRWYWwgPSBvcmlnaW5ba2V5XTtcclxuICAgICAgICAgICAgaWYgKCghaXNTeW1ib2woa2V5KSAmJiAhT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMobmV3Q29tZXIpLmluY2x1ZGVzKGtleSkpIHx8XHJcbiAgICAgICAgICAgICAgICAoaXNTeW1ib2woa2V5KSAmJiAhT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhuZXdDb21lcikuaW5jbHVkZXMoa2V5KSkpIHtcclxuICAgICAgICAgICAgICAgIGFzc2lnblByb3AoY2FycnksIGtleSwgdGFyZ2V0VmFsLCBvcmlnaW4pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjYXJyeTtcclxuICAgICAgICB9LCB7fSk7XHJcbiAgICB9XHJcbiAgICB2YXIgcHJvcHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhuZXdDb21lcik7XHJcbiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMobmV3Q29tZXIpO1xyXG4gICAgdmFyIHJlc3VsdCA9IHByb3BzLmNvbmNhdChzeW1ib2xzKS5yZWR1Y2UoZnVuY3Rpb24gKGNhcnJ5LCBrZXkpIHtcclxuICAgICAgICAvLyByZS1kZWZpbmUgdGhlIG9yaWdpbiBhbmQgbmV3Q29tZXIgYXMgdGFyZ2V0VmFsIGFuZCBuZXdWYWxcclxuICAgICAgICB2YXIgbmV3VmFsID0gbmV3Q29tZXJba2V5XTtcclxuICAgICAgICB2YXIgdGFyZ2V0VmFsID0gKGlzUGxhaW5PYmplY3Qob3JpZ2luKSlcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICA/IG9yaWdpbltrZXldXHJcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xyXG4gICAgICAgIC8vIGV4dGVuZCBtZXJnZSBydWxlc1xyXG4gICAgICAgIGlmIChleHRlbnNpb25zICYmIGlzQXJyYXkoZXh0ZW5zaW9ucykpIHtcclxuICAgICAgICAgICAgZXh0ZW5zaW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChleHRlbmQpIHtcclxuICAgICAgICAgICAgICAgIG5ld1ZhbCA9IGV4dGVuZCh0YXJnZXRWYWwsIG5ld1ZhbCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBXaGVuIG5ld1ZhbCBpcyBhbiBvYmplY3QgZG8gdGhlIG1lcmdlIHJlY3Vyc2l2ZWx5XHJcbiAgICAgICAgaWYgKHRhcmdldFZhbCAhPT0gdW5kZWZpbmVkICYmIGlzUGxhaW5PYmplY3QobmV3VmFsKSkge1xyXG4gICAgICAgICAgICBuZXdWYWwgPSBtZXJnZVJlY3Vyc2l2ZWx5KHRhcmdldFZhbCwgbmV3VmFsLCBleHRlbnNpb25zKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYXNzaWduUHJvcChjYXJyeSwga2V5LCBuZXdWYWwsIG5ld0NvbWVyKTtcclxuICAgICAgICByZXR1cm4gY2Fycnk7XHJcbiAgICB9LCBuZXdPYmplY3QpO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG4vKipcclxuICogTWVyZ2UgYW55dGhpbmcgcmVjdXJzaXZlbHkuXHJcbiAqIE9iamVjdHMgZ2V0IG1lcmdlZCwgc3BlY2lhbCBvYmplY3RzIChjbGFzc2VzIGV0Yy4pIGFyZSByZS1hc3NpZ25lZCBcImFzIGlzXCIuXHJcbiAqIEJhc2ljIHR5cGVzIG92ZXJ3cml0ZSBvYmplY3RzIG9yIG90aGVyIGJhc2ljIHR5cGVzLlxyXG4gKlxyXG4gKiBAcGFyYW0geyhJQ29uZmlnIHwgYW55KX0gb3JpZ2luXHJcbiAqIEBwYXJhbSB7Li4uYW55W119IG5ld0NvbWVyc1xyXG4gKiBAcmV0dXJucyB0aGUgcmVzdWx0XHJcbiAqL1xyXG5mdW5jdGlvbiBtZXJnZShvcmlnaW4pIHtcclxuICAgIHZhciBuZXdDb21lcnMgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgbmV3Q29tZXJzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgdmFyIGV4dGVuc2lvbnMgPSBudWxsO1xyXG4gICAgdmFyIGJhc2UgPSBvcmlnaW47XHJcbiAgICBpZiAoaXNQbGFpbk9iamVjdChvcmlnaW4pICYmIG9yaWdpbi5leHRlbnNpb25zICYmIE9iamVjdC5rZXlzKG9yaWdpbikubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgYmFzZSA9IHt9O1xyXG4gICAgICAgIGV4dGVuc2lvbnMgPSBvcmlnaW4uZXh0ZW5zaW9ucztcclxuICAgIH1cclxuICAgIHJldHVybiBuZXdDb21lcnMucmVkdWNlKGZ1bmN0aW9uIChyZXN1bHQsIG5ld0NvbWVyKSB7XHJcbiAgICAgICAgcmV0dXJuIG1lcmdlUmVjdXJzaXZlbHkocmVzdWx0LCBuZXdDb21lciwgZXh0ZW5zaW9ucyk7XHJcbiAgICB9LCBiYXNlKTtcclxufVxuXG5mdW5jdGlvbiBjb25jYXRBcnJheXMob3JpZ2luVmFsLCBuZXdWYWwpIHtcclxuICAgIGlmIChpc0FycmF5KG9yaWdpblZhbCkgJiYgaXNBcnJheShuZXdWYWwpKSB7XHJcbiAgICAgICAgLy8gY29uY2F0IGxvZ2ljXHJcbiAgICAgICAgcmV0dXJuIG9yaWdpblZhbC5jb25jYXQobmV3VmFsKTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXdWYWw7IC8vIGFsd2F5cyByZXR1cm4gbmV3VmFsIGFzIGZhbGxiYWNrISFcclxufVxuXG5leHBvcnQgZGVmYXVsdCBtZXJnZTtcbmV4cG9ydCB7IG1lcmdlLCBjb25jYXRBcnJheXMgfTtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuOS4wXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgaD1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IscD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHE9bj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHI9bj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx1PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LHY9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksdz1uP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHg9bj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIseT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxhYT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOjYwMTIwLGJhPW4/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6XG42MDExNSxjYT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2O24mJlN5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTtuJiZTeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpO3ZhciB6PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtcbmZ1bmN0aW9uIEEoYSl7Zm9yKHZhciBiPWEubWVzc2FnZSxkPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYixjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKylkKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7YS5tZXNzYWdlPVwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2IrXCI7IHZpc2l0IFwiK2QrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIjtyZXR1cm4gYX12YXIgQj17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sQz17fTtcbmZ1bmN0aW9uIEQoYSxiLGQpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Qzt0aGlzLnVwZGF0ZXI9ZHx8Qn1ELnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0QucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBBKEVycm9yKDg1KSk7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtELnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtmdW5jdGlvbiBFKCl7fUUucHJvdG90eXBlPUQucHJvdG90eXBlO2Z1bmN0aW9uIEYoYSxiLGQpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Qzt0aGlzLnVwZGF0ZXI9ZHx8Qn12YXIgRz1GLnByb3RvdHlwZT1uZXcgRTtcbkcuY29uc3RydWN0b3I9RjtoKEcsRC5wcm90b3R5cGUpO0cuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEg9e2N1cnJlbnQ6bnVsbH0sST17c3VzcGVuc2U6bnVsbH0sSj17Y3VycmVudDpudWxsfSxLPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsZCl7dmFyIGM9dm9pZCAwLGU9e30sZz1udWxsLGs9bnVsbDtpZihudWxsIT1iKWZvcihjIGluIHZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpLGIpSy5jYWxsKGIsYykmJiFMLmhhc093blByb3BlcnR5KGMpJiYoZVtjXT1iW2NdKTt2YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZS5jaGlsZHJlbj1kO2Vsc2UgaWYoMTxmKXtmb3IodmFyIGw9QXJyYXkoZiksbT0wO208ZjttKyspbFttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWx9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGMgaW4gZj1hLmRlZmF1bHRQcm9wcyxmKXZvaWQgMD09PWVbY10mJihlW2NdPWZbY10pO3JldHVybnskJHR5cGVvZjpwLHR5cGU6YSxrZXk6ZyxyZWY6ayxwcm9wczplLF9vd25lcjpKLmN1cnJlbnR9fVxuZnVuY3Rpb24gZGEoYSxiKXtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIE4oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PXB9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIisoXCJcIithKS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgTz0vXFwvKy9nLFA9W107ZnVuY3Rpb24gUShhLGIsZCxjKXtpZihQLmxlbmd0aCl7dmFyIGU9UC5wb3AoKTtlLnJlc3VsdD1hO2Uua2V5UHJlZml4PWI7ZS5mdW5jPWQ7ZS5jb250ZXh0PWM7ZS5jb3VudD0wO3JldHVybiBlfXJldHVybntyZXN1bHQ6YSxrZXlQcmVmaXg6YixmdW5jOmQsY29udGV4dDpjLGNvdW50OjB9fVxuZnVuY3Rpb24gUihhKXthLnJlc3VsdD1udWxsO2Eua2V5UHJlZml4PW51bGw7YS5mdW5jPW51bGw7YS5jb250ZXh0PW51bGw7YS5jb3VudD0wOzEwPlAubGVuZ3RoJiZQLnB1c2goYSl9XG5mdW5jdGlvbiBTKGEsYixkLGMpe3ZhciBlPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1lfHxcImJvb2xlYW5cIj09PWUpYT1udWxsO3ZhciBnPSExO2lmKG51bGw9PT1hKWc9ITA7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpnPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBwOmNhc2UgcTpnPSEwfX1pZihnKXJldHVybiBkKGMsYSxcIlwiPT09Yj9cIi5cIitUKGEsMCk6YiksMTtnPTA7Yj1cIlwiPT09Yj9cIi5cIjpiK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBrPTA7azxhLmxlbmd0aDtrKyspe2U9YVtrXTt2YXIgZj1iK1QoZSxrKTtnKz1TKGUsZixkLGMpfWVsc2UgaWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYT9mPW51bGw6KGY9eiYmYVt6XXx8YVtcIkBAaXRlcmF0b3JcIl0sZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZj9mOm51bGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxrPVxuMDshKGU9YS5uZXh0KCkpLmRvbmU7KWU9ZS52YWx1ZSxmPWIrVChlLGsrKyksZys9UyhlLGYsZCxjKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1lKXRocm93IGQ9XCJcIithLEEoRXJyb3IoMzEpLFwiW29iamVjdCBPYmplY3RdXCI9PT1kP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmQsXCJcIik7cmV0dXJuIGd9ZnVuY3Rpb24gVShhLGIsZCl7cmV0dXJuIG51bGw9PWE/MDpTKGEsXCJcIixiLGQpfWZ1bmN0aW9uIFQoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoYS5rZXkpOmIudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIGVhKGEsYil7YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKX1cbmZ1bmN0aW9uIGZhKGEsYixkKXt2YXIgYz1hLnJlc3VsdCxlPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1YoYSxjLGQsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTpudWxsIT1hJiYoTihhKSYmKGE9ZGEoYSxlKyghYS5rZXl8fGImJmIua2V5PT09YS5rZXk/XCJcIjooXCJcIithLmtleSkucmVwbGFjZShPLFwiJCYvXCIpK1wiL1wiKStkKSksYy5wdXNoKGEpKX1mdW5jdGlvbiBWKGEsYixkLGMsZSl7dmFyIGc9XCJcIjtudWxsIT1kJiYoZz0oXCJcIitkKS5yZXBsYWNlKE8sXCIkJi9cIikrXCIvXCIpO2I9UShiLGcsYyxlKTtVKGEsZmEsYik7UihiKX1mdW5jdGlvbiBXKCl7dmFyIGE9SC5jdXJyZW50O2lmKG51bGw9PT1hKXRocm93IEEoRXJyb3IoMzIxKSk7cmV0dXJuIGF9XG52YXIgWD17Q2hpbGRyZW46e21hcDpmdW5jdGlvbihhLGIsZCl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgYz1bXTtWKGEsYyxudWxsLGIsZCk7cmV0dXJuIGN9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGQpe2lmKG51bGw9PWEpcmV0dXJuIGE7Yj1RKG51bGwsbnVsbCxiLGQpO1UoYSxlYSxiKTtSKGIpfSxjb3VudDpmdW5jdGlvbihhKXtyZXR1cm4gVShhLGZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LG51bGwpfSx0b0FycmF5OmZ1bmN0aW9uKGEpe3ZhciBiPVtdO1YoYSxiLG51bGwsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTtyZXR1cm4gYn0sb25seTpmdW5jdGlvbihhKXtpZighTihhKSl0aHJvdyBBKEVycm9yKDE0MykpO3JldHVybiBhfX0sY3JlYXRlUmVmOmZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19LENvbXBvbmVudDpELFB1cmVDb21wb25lbnQ6RixjcmVhdGVDb250ZXh0OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6dyxfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6Yixcbl9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6dixfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfSxmb3J3YXJkUmVmOmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp4LHJlbmRlcjphfX0sbGF6eTpmdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6Y2EsX2N0b3I6YSxfc3RhdHVzOi0xLF9yZXN1bHQ6bnVsbH19LG1lbW86ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6YmEsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fSx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlQ2FsbGJhY2soYSxiKX0sdXNlQ29udGV4dDpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlQ29udGV4dChhLGIpfSx1c2VFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUVmZmVjdChhLGIpfSx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsXG5iLGQpe3JldHVybiBXKCkudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsZCl9LHVzZURlYnVnVmFsdWU6ZnVuY3Rpb24oKXt9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZU1lbW8oYSxiKX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsZCl7cmV0dXJuIFcoKS51c2VSZWR1Y2VyKGEsYixkKX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3JldHVybiBXKCkudXNlUmVmKGEpfSx1c2VTdGF0ZTpmdW5jdGlvbihhKXtyZXR1cm4gVygpLnVzZVN0YXRlKGEpfSxGcmFnbWVudDpyLFByb2ZpbGVyOnUsU3RyaWN0TW9kZTp0LFN1c3BlbnNlOnksdW5zdGFibGVfU3VzcGVuc2VMaXN0OmFhLGNyZWF0ZUVsZW1lbnQ6TSxjbG9uZUVsZW1lbnQ6ZnVuY3Rpb24oYSxiLGQpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEEoRXJyb3IoMjY3KSxhKTt2YXIgYz12b2lkIDAsZT1cbmgoe30sYS5wcm9wcyksZz1hLmtleSxrPWEucmVmLGY9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGY9Si5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSk7dmFyIGw9dm9pZCAwO2EudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyYmKGw9YS50eXBlLmRlZmF1bHRQcm9wcyk7Zm9yKGMgaW4gYilLLmNhbGwoYixjKSYmIUwuaGFzT3duUHJvcGVydHkoYykmJihlW2NdPXZvaWQgMD09PWJbY10mJnZvaWQgMCE9PWw/bFtjXTpiW2NdKX1jPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09YyllLmNoaWxkcmVuPWQ7ZWxzZSBpZigxPGMpe2w9QXJyYXkoYyk7Zm9yKHZhciBtPTA7bTxjO20rKylsW21dPWFyZ3VtZW50c1ttKzJdO2UuY2hpbGRyZW49bH1yZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxrZXk6ZyxyZWY6ayxwcm9wczplLF9vd25lcjpmfX0sY3JlYXRlRmFjdG9yeTpmdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtcbmIudHlwZT1hO3JldHVybiBifSxpc1ZhbGlkRWxlbWVudDpOLHZlcnNpb246XCIxNi45LjBcIix1bnN0YWJsZV93aXRoU3VzcGVuc2VDb25maWc6ZnVuY3Rpb24oYSxiKXt2YXIgZD1JLnN1c3BlbnNlO0kuc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2EoKX1maW5hbGx5e0kuc3VzcGVuc2U9ZH19LF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntSZWFjdEN1cnJlbnREaXNwYXRjaGVyOkgsUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6SSxSZWFjdEN1cnJlbnRPd25lcjpKLElzU29tZVJlbmRlcmVyQWN0aW5nOntjdXJyZW50OiExfSxhc3NpZ246aH19LFk9e2RlZmF1bHQ6WH0sWj1ZJiZYfHxZO21vZHVsZS5leHBvcnRzPVouZGVmYXVsdHx8WjtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuOS4wXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLG09cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIikscT1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHQoYSl7Zm9yKHZhciBiPWEubWVzc2FnZSxjPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYixkPTE7ZDxhcmd1bWVudHMubGVuZ3RoO2QrKyljKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tkXSk7YS5tZXNzYWdlPVwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2IrXCI7IHZpc2l0IFwiK2MrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIjtyZXR1cm4gYX1pZighYWEpdGhyb3cgdChFcnJvcigyMjcpKTt2YXIgYmE9bnVsbCxjYT17fTtcbmZ1bmN0aW9uIGRhKCl7aWYoYmEpZm9yKHZhciBhIGluIGNhKXt2YXIgYj1jYVthXSxjPWJhLmluZGV4T2YoYSk7aWYoISgtMTxjKSl0aHJvdyB0KEVycm9yKDk2KSxhKTtpZighZWFbY10pe2lmKCFiLmV4dHJhY3RFdmVudHMpdGhyb3cgdChFcnJvcig5NyksYSk7ZWFbY109YjtjPWIuZXZlbnRUeXBlcztmb3IodmFyIGQgaW4gYyl7dmFyIGU9dm9pZCAwO3ZhciBmPWNbZF0saD1iLGc9ZDtpZihmYS5oYXNPd25Qcm9wZXJ0eShnKSl0aHJvdyB0KEVycm9yKDk5KSxnKTtmYVtnXT1mO3ZhciBrPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoayl7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiZoYShrW2VdLGgsZyk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8oaGEoZi5yZWdpc3RyYXRpb25OYW1lLGgsZyksZT0hMCk6ZT0hMTtpZighZSl0aHJvdyB0KEVycm9yKDk4KSxkLGEpO319fX1cbmZ1bmN0aW9uIGhhKGEsYixjKXtpZihpYVthXSl0aHJvdyB0KEVycm9yKDEwMCksYSk7aWFbYV09YjtqYVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBlYT1bXSxmYT17fSxpYT17fSxqYT17fTtmdW5jdGlvbiBrYShhLGIsYyxkLGUsZixoLGcsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobil7dGhpcy5vbkVycm9yKG4pfX12YXIgbGE9ITEsbWE9bnVsbCxuYT0hMSxvYT1udWxsLHBhPXtvbkVycm9yOmZ1bmN0aW9uKGEpe2xhPSEwO21hPWF9fTtmdW5jdGlvbiBxYShhLGIsYyxkLGUsZixoLGcsayl7bGE9ITE7bWE9bnVsbDtrYS5hcHBseShwYSxhcmd1bWVudHMpfVxuZnVuY3Rpb24gcmEoYSxiLGMsZCxlLGYsaCxnLGspe3FhLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihsYSl7aWYobGEpe3ZhciBsPW1hO2xhPSExO21hPW51bGx9ZWxzZSB0aHJvdyB0KEVycm9yKDE5OCkpO25hfHwobmE9ITAsb2E9bCl9fXZhciBzYT1udWxsLHRhPW51bGwsdmE9bnVsbDtmdW5jdGlvbiB3YShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9dmEoYyk7cmEoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1mdW5jdGlvbiB4YShhLGIpe2lmKG51bGw9PWIpdGhyb3cgdChFcnJvcigzMCkpO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1cbmZ1bmN0aW9uIHlhKGEsYixjKXtBcnJheS5pc0FycmF5KGEpP2EuZm9yRWFjaChiLGMpOmEmJmIuY2FsbChjLGEpfXZhciB6YT1udWxsO2Z1bmN0aW9uIEFhKGEpe2lmKGEpe3ZhciBiPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGM9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShiKSlmb3IodmFyIGQ9MDtkPGIubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2QrKyl3YShhLGJbZF0sY1tkXSk7ZWxzZSBiJiZ3YShhLGIsYyk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19ZnVuY3Rpb24gQmEoYSl7bnVsbCE9PWEmJih6YT14YSh6YSxhKSk7YT16YTt6YT1udWxsO2lmKGEpe3lhKGEsQWEpO2lmKHphKXRocm93IHQoRXJyb3IoOTUpKTtpZihuYSl0aHJvdyBhPW9hLG5hPSExLG9hPW51bGwsYTt9fVxudmFyIENhPXtpbmplY3RFdmVudFBsdWdpbk9yZGVyOmZ1bmN0aW9uKGEpe2lmKGJhKXRocm93IHQoRXJyb3IoMTAxKSk7YmE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYSk7ZGEoKX0saW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOmZ1bmN0aW9uKGEpe3ZhciBiPSExLGM7Zm9yKGMgaW4gYSlpZihhLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD1hW2NdO2lmKCFjYS5oYXNPd25Qcm9wZXJ0eShjKXx8Y2FbY10hPT1kKXtpZihjYVtjXSl0aHJvdyB0KEVycm9yKDEwMiksYyk7Y2FbY109ZDtiPSEwfX1iJiZkYSgpfX07XG5mdW5jdGlvbiBEYShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKCFjKXJldHVybiBudWxsO3ZhciBkPXNhKGMpO2lmKCFkKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjKXRocm93IHQoRXJyb3IoMjMxKSxiLHR5cGVvZiBjKTtcbnJldHVybiBjfXZhciBFYT1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxGYT1cIl9fcmVhY3RJbnRlcm5hbEluc3RhbmNlJFwiK0VhLEdhPVwiX19yZWFjdEV2ZW50SGFuZGxlcnMkXCIrRWE7ZnVuY3Rpb24gSGEoYSl7aWYoYVtGYV0pcmV0dXJuIGFbRmFdO2Zvcig7IWFbRmFdOylpZihhLnBhcmVudE5vZGUpYT1hLnBhcmVudE5vZGU7ZWxzZSByZXR1cm4gbnVsbDthPWFbRmFdO3JldHVybiA1PT09YS50YWd8fDY9PT1hLnRhZz9hOm51bGx9ZnVuY3Rpb24gSWEoYSl7YT1hW0ZhXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWc/bnVsbDphfWZ1bmN0aW9uIEphKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt0aHJvdyB0KEVycm9yKDMzKSk7fWZ1bmN0aW9uIEthKGEpe3JldHVybiBhW0dhXXx8bnVsbH1mdW5jdGlvbiBMYShhKXtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfVxuZnVuY3Rpb24gTWEoYSxiLGMpe2lmKGI9RGEoYSxjLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW2JdKSljLl9kaXNwYXRjaExpc3RlbmVycz14YShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz14YShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKX1mdW5jdGlvbiBOYShhKXtpZihhJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKXtmb3IodmFyIGI9YS5fdGFyZ2V0SW5zdCxjPVtdO2I7KWMucHVzaChiKSxiPUxhKGIpO2ZvcihiPWMubGVuZ3RoOzA8Yi0tOylNYShjW2JdLFwiY2FwdHVyZWRcIixhKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKU1hKGNbYl0sXCJidWJibGVkXCIsYSl9fVxuZnVuY3Rpb24gT2EoYSxiLGMpe2EmJmMmJmMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmKGI9RGEoYSxjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpKSYmKGMuX2Rpc3BhdGNoTGlzdGVuZXJzPXhhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPXhhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpKX1mdW5jdGlvbiBQYShhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJk9hKGEuX3RhcmdldEluc3QsbnVsbCxhKX1mdW5jdGlvbiBRYShhKXt5YShhLE5hKX12YXIgUmE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuZnVuY3Rpb24gU2EoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgVGE9e2FuaW1hdGlvbmVuZDpTYShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpTYShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlNhKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlNhKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sVWE9e30sVmE9e307XG5SYSYmKFZhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFRhLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFRhLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFRhLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFRhLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gV2EoYSl7aWYoVWFbYV0pcmV0dXJuIFVhW2FdO2lmKCFUYVthXSlyZXR1cm4gYTt2YXIgYj1UYVthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBWYSlyZXR1cm4gVWFbYV09YltjXTtyZXR1cm4gYX1cbnZhciBYYT1XYShcImFuaW1hdGlvbmVuZFwiKSxZYT1XYShcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxaYT1XYShcImFuaW1hdGlvbnN0YXJ0XCIpLGFiPVdhKFwidHJhbnNpdGlvbmVuZFwiKSxiYj1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksY2I9bnVsbCxkYj1udWxsLGViPW51bGw7XG5mdW5jdGlvbiBmYigpe2lmKGViKXJldHVybiBlYjt2YXIgYSxiPWRiLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGNiP2NiLnZhbHVlOmNiLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGg9Yy1hO2ZvcihkPTE7ZDw9aCYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIGViPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24gZ2IoKXtyZXR1cm4hMH1mdW5jdGlvbiBoYigpe3JldHVybiExfVxuZnVuY3Rpb24geShhLGIsYyxkKXt0aGlzLmRpc3BhdGNoQ29uZmlnPWE7dGhpcy5fdGFyZ2V0SW5zdD1iO3RoaXMubmF0aXZlRXZlbnQ9YzthPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO2Zvcih2YXIgZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJigoYj1hW2VdKT90aGlzW2VdPWIoYyk6XCJ0YXJnZXRcIj09PWU/dGhpcy50YXJnZXQ9ZDp0aGlzW2VdPWNbZV0pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1jLmRlZmF1bHRQcmV2ZW50ZWQ/Yy5kZWZhdWx0UHJldmVudGVkOiExPT09Yy5yZXR1cm5WYWx1ZSk/Z2I6aGI7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1oYjtyZXR1cm4gdGhpc31cbm0oeS5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1nYil9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1nYil9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD1nYn0saXNQZXJzaXN0ZW50OmhiLGRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxcbmI7Zm9yKGIgaW4gYSl0aGlzW2JdPW51bGw7dGhpcy5uYXRpdmVFdmVudD10aGlzLl90YXJnZXRJbnN0PXRoaXMuZGlzcGF0Y2hDb25maWc9bnVsbDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWhiO3RoaXMuX2Rpc3BhdGNoSW5zdGFuY2VzPXRoaXMuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGx9fSk7eS5JbnRlcmZhY2U9e3R5cGU6bnVsbCx0YXJnZXQ6bnVsbCxjdXJyZW50VGFyZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LGV2ZW50UGhhc2U6bnVsbCxidWJibGVzOm51bGwsY2FuY2VsYWJsZTpudWxsLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6bnVsbCxpc1RydXN0ZWQ6bnVsbH07XG55LmV4dGVuZD1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7fWZ1bmN0aW9uIGMoKXtyZXR1cm4gZC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dmFyIGQ9dGhpcztiLnByb3RvdHlwZT1kLnByb3RvdHlwZTt2YXIgZT1uZXcgYjttKGUsYy5wcm90b3R5cGUpO2MucHJvdG90eXBlPWU7Yy5wcm90b3R5cGUuY29uc3RydWN0b3I9YztjLkludGVyZmFjZT1tKHt9LGQuSW50ZXJmYWNlLGEpO2MuZXh0ZW5kPWQuZXh0ZW5kO2liKGMpO3JldHVybiBjfTtpYih5KTtmdW5jdGlvbiBqYihhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1cbmZ1bmN0aW9uIGtiKGEpe2lmKCEoYSBpbnN0YW5jZW9mIHRoaXMpKXRocm93IHQoRXJyb3IoMjc5KSk7YS5kZXN0cnVjdG9yKCk7MTA+dGhpcy5ldmVudFBvb2wubGVuZ3RoJiZ0aGlzLmV2ZW50UG9vbC5wdXNoKGEpfWZ1bmN0aW9uIGliKGEpe2EuZXZlbnRQb29sPVtdO2EuZ2V0UG9vbGVkPWpiO2EucmVsZWFzZT1rYn12YXIgbGI9eS5leHRlbmQoe2RhdGE6bnVsbH0pLG1iPXkuZXh0ZW5kKHtkYXRhOm51bGx9KSxuYj1bOSwxMywyNywzMl0sb2I9UmEmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LHBiPW51bGw7UmEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKHBiPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgcWI9UmEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFwYixzYj1SYSYmKCFvYnx8cGImJjg8cGImJjExPj1wYiksdGI9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksdWI9e2JlZm9yZUlucHV0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQmVmb3JlSW5wdXRcIixjYXB0dXJlZDpcIm9uQmVmb3JlSW5wdXRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl19LGNvbXBvc2l0aW9uRW5kOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25FbmRcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25FbmRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25lbmQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uU3RhcnQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblN0YXJ0XCIsXG5jYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25TdGFydENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblVwZGF0ZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9udXBkYXRlIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfX0sdmI9ITE7XG5mdW5jdGlvbiB3YihhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PW5iLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJibHVyXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24geGIoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgeWI9ITE7ZnVuY3Rpb24gQWIoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIHhiKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDt2Yj0hMDtyZXR1cm4gdGI7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09dGImJnZiP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIEJiKGEsYil7aWYoeWIpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IW9iJiZ3YihhLGIpPyhhPWZiKCksZWI9ZGI9Y2I9bnVsbCx5Yj0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gc2ImJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIENiPXtldmVudFR5cGVzOnViLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dm9pZCAwO3ZhciBmPXZvaWQgMDtpZihvYiliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjplPXViLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjplPXViLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6ZT11Yi5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWU9dm9pZCAwfWVsc2UgeWI/d2IoYSxjKSYmKGU9dWIuY29tcG9zaXRpb25FbmQpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZT11Yi5jb21wb3NpdGlvblN0YXJ0KTtlPyhzYiYmXCJrb1wiIT09Yy5sb2NhbGUmJih5Ynx8ZSE9PXViLmNvbXBvc2l0aW9uU3RhcnQ/ZT09PXViLmNvbXBvc2l0aW9uRW5kJiZ5YiYmKGY9ZmIoKSk6KGNiPWQsZGI9XCJ2YWx1ZVwiaW4gY2I/Y2IudmFsdWU6Y2IudGV4dENvbnRlbnQseWI9XG4hMCkpLGU9bGIuZ2V0UG9vbGVkKGUsYixjLGQpLGY/ZS5kYXRhPWY6KGY9eGIoYyksbnVsbCE9PWYmJihlLmRhdGE9ZikpLFFhKGUpLGY9ZSk6Zj1udWxsOyhhPXFiP0FiKGEsYyk6QmIoYSxjKSk/KGI9bWIuZ2V0UG9vbGVkKHViLmJlZm9yZUlucHV0LGIsYyxkKSxiLmRhdGE9YSxRYShiKSk6Yj1udWxsO3JldHVybiBudWxsPT09Zj9iOm51bGw9PT1iP2Y6W2YsYl19fSxEYj1udWxsLEViPW51bGwsRmI9bnVsbDtmdW5jdGlvbiBHYihhKXtpZihhPXRhKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgRGIpdGhyb3cgdChFcnJvcigyODApKTt2YXIgYj1zYShhLnN0YXRlTm9kZSk7RGIoYS5zdGF0ZU5vZGUsYS50eXBlLGIpfX1mdW5jdGlvbiBIYihhKXtFYj9GYj9GYi5wdXNoKGEpOkZiPVthXTpFYj1hfWZ1bmN0aW9uIEliKCl7aWYoRWIpe3ZhciBhPUViLGI9RmI7RmI9RWI9bnVsbDtHYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspR2IoYlthXSl9fVxuZnVuY3Rpb24gSmIoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBLYihhLGIsYyxkKXtyZXR1cm4gYShiLGMsZCl9ZnVuY3Rpb24gTGIoKXt9dmFyIE1iPUpiLE5iPSExO2Z1bmN0aW9uIE9iKCl7aWYobnVsbCE9PUVifHxudWxsIT09RmIpTGIoKSxJYigpfXZhciBQYj17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBRYihhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIVBiW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1cbmZ1bmN0aW9uIFJiKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX1mdW5jdGlvbiBTYihhKXtpZighUmEpcmV0dXJuITE7YT1cIm9uXCIrYTt2YXIgYj1hIGluIGRvY3VtZW50O2J8fChiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYi5zZXRBdHRyaWJ1dGUoYSxcInJldHVybjtcIiksYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYlthXSk7cmV0dXJuIGJ9ZnVuY3Rpb24gVGIoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIFViKGEpe3ZhciBiPVRiKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiBWYihhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9VWIoYSkpfWZ1bmN0aW9uIFdiKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1UYihhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfXZhciBYYj1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtYYi5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudERpc3BhdGNoZXJcIil8fChYYi5SZWFjdEN1cnJlbnREaXNwYXRjaGVyPXtjdXJyZW50Om51bGx9KTtYYi5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnXCIpfHwoWGIuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc9e3N1c3BlbnNlOm51bGx9KTtcbnZhciBZYj0vXiguKilbXFxcXFxcL10vLEI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixaYj1CP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLCRiPUI/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixhYz1CP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxiYz1CP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxjYz1CP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxkYz1CP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxlYz1CP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGZjPUI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxnYz1CP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixoYz1CP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxpYz1CP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOlxuNjAxMjAsamM9Qj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSxrYz1CP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2O0ImJlN5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTtCJiZTeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpO3ZhciBsYz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gbWMoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPWxjJiZhW2xjXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfVxuZnVuY3Rpb24gb2MoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSBhYzpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSAkYjpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgY2M6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgYmM6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBoYzpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBpYzpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBlYzpyZXR1cm5cIkNvbnRleHQuQ29uc3VtZXJcIjtjYXNlIGRjOnJldHVyblwiQ29udGV4dC5Qcm92aWRlclwiO2Nhc2UgZ2M6dmFyIGI9YS5yZW5kZXI7Yj1iLmRpc3BsYXlOYW1lfHxiLm5hbWV8fFwiXCI7cmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcIilcIjpcblwiRm9yd2FyZFJlZlwiKTtjYXNlIGpjOnJldHVybiBvYyhhLnR5cGUpO2Nhc2Uga2M6aWYoYT0xPT09YS5fc3RhdHVzP2EuX3Jlc3VsdDpudWxsKXJldHVybiBvYyhhKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBwYyhhKXt2YXIgYj1cIlwiO2Rve2E6c3dpdGNoKGEudGFnKXtjYXNlIDM6Y2FzZSA0OmNhc2UgNjpjYXNlIDc6Y2FzZSAxMDpjYXNlIDk6dmFyIGM9XCJcIjticmVhayBhO2RlZmF1bHQ6dmFyIGQ9YS5fZGVidWdPd25lcixlPWEuX2RlYnVnU291cmNlLGY9b2MoYS50eXBlKTtjPW51bGw7ZCYmKGM9b2MoZC50eXBlKSk7ZD1mO2Y9XCJcIjtlP2Y9XCIgKGF0IFwiK2UuZmlsZU5hbWUucmVwbGFjZShZYixcIlwiKStcIjpcIitlLmxpbmVOdW1iZXIrXCIpXCI6YyYmKGY9XCIgKGNyZWF0ZWQgYnkgXCIrYytcIilcIik7Yz1cIlxcbiAgICBpbiBcIisoZHx8XCJVbmtub3duXCIpK2Z9Yis9YzthPWEucmV0dXJufXdoaWxlKGEpO3JldHVybiBifVxudmFyIHFjPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxyYz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LHNjPXt9LHRjPXt9O1xuZnVuY3Rpb24gdWMoYSl7aWYocmMuY2FsbCh0YyxhKSlyZXR1cm4hMDtpZihyYy5jYWxsKHNjLGEpKXJldHVybiExO2lmKHFjLnRlc3QoYSkpcmV0dXJuIHRjW2FdPSEwO3NjW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIHZjKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gd2MoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8dmMoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiBEKGEsYixjLGQsZSxmKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1iO3RoaXMuc2FuaXRpemVVUkw9Zn12YXIgRj17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRChhLDAsITEsYSxudWxsLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtGW2JdPW5ldyBEKGIsMSwhMSxhWzFdLG51bGwsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRChhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRChhLDIsITEsYSxudWxsLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRChhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRChhLDMsITAsYSxudWxsLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRChhLDQsITEsYSxudWxsLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBEKGEsNiwhMSxhLG51bGwsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBEKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTt2YXIgeGM9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiB5YyhhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZSh4YyxcbnljKTtGW2JdPW5ldyBEKGIsMSwhMSxhLG51bGwsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoeGMseWMpO0ZbYl09bmV3IEQoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoeGMseWMpO0ZbYl09bmV3IEQoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBEKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbkYueGxpbmtIcmVmPW5ldyBEKFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBEKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCl9KTtcbmZ1bmN0aW9uIHpjKGEsYixjLGQpe3ZhciBlPUYuaGFzT3duUHJvcGVydHkoYik/RltiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KHdjKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT91YyhiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxuZnVuY3Rpb24gQWMoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fWZ1bmN0aW9uIEJjKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBtKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1cbmZ1bmN0aW9uIENjKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPUFjKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gRGMoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZ6YyhhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gRWMoYSxiKXtEYyhhLGIpO3ZhciBjPUFjKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP0ZjKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJkZjKGEsYi50eXBlLEFjKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gR2MoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hYS5kZWZhdWx0Q2hlY2tlZDthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gRmMoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxhLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfXZhciBIYz17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjaGFuZ2UgY2xpY2sgZm9jdXMgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiBJYyhhLGIsYyl7YT15LmdldFBvb2xlZChIYy5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO0hiKGMpO1FhKGEpO3JldHVybiBhfXZhciBKYz1udWxsLEtjPW51bGw7ZnVuY3Rpb24gTGMoYSl7QmEoYSl9XG5mdW5jdGlvbiBNYyhhKXt2YXIgYj1KYShhKTtpZihXYihiKSlyZXR1cm4gYX1mdW5jdGlvbiBOYyhhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciBPYz0hMTtSYSYmKE9jPVNiKFwiaW5wdXRcIikmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSkpO2Z1bmN0aW9uIFBjKCl7SmMmJihKYy5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixRYyksS2M9SmM9bnVsbCl9ZnVuY3Rpb24gUWMoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJk1jKEtjKSlpZihhPUljKEtjLGEsUmIoYSkpLE5iKUJhKGEpO2Vsc2V7TmI9ITA7dHJ5e0piKExjLGEpfWZpbmFsbHl7TmI9ITEsT2IoKX19fWZ1bmN0aW9uIFJjKGEsYixjKXtcImZvY3VzXCI9PT1hPyhQYygpLEpjPWIsS2M9YyxKYy5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixRYykpOlwiYmx1clwiPT09YSYmUGMoKX1cbmZ1bmN0aW9uIFNjKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIE1jKEtjKX1mdW5jdGlvbiBUYyhhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIE1jKGIpfWZ1bmN0aW9uIFVjKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIE1jKGIpfVxudmFyIFZjPXtldmVudFR5cGVzOkhjLF9pc0lucHV0RXZlbnRTdXBwb3J0ZWQ6T2MsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1iP0phKGIpOndpbmRvdyxmPXZvaWQgMCxoPXZvaWQgMCxnPWUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcInNlbGVjdFwiPT09Z3x8XCJpbnB1dFwiPT09ZyYmXCJmaWxlXCI9PT1lLnR5cGU/Zj1OYzpRYihlKT9PYz9mPVVjOihmPVNjLGg9UmMpOihnPWUubm9kZU5hbWUpJiZcImlucHV0XCI9PT1nLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1lLnR5cGV8fFwicmFkaW9cIj09PWUudHlwZSkmJihmPVRjKTtpZihmJiYoZj1mKGEsYikpKXJldHVybiBJYyhmLGMsZCk7aCYmaChhLGUsYik7XCJibHVyXCI9PT1hJiYoYT1lLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJkZjKGUsXCJudW1iZXJcIixlLnZhbHVlKX19LFdjPXkuZXh0ZW5kKHt2aWV3Om51bGwsZGV0YWlsOm51bGx9KSxYYz17QWx0OlwiYWx0S2V5XCIsXG5Db250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBZYyhhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPVhjW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gWmMoKXtyZXR1cm4gWWN9XG52YXIgJGM9MCxhZD0wLGJkPSExLGNkPSExLGRkPVdjLmV4dGVuZCh7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpaYyxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WDt2YXIgYj0kYzskYz1hLnNjcmVlblg7cmV0dXJuIGJkP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5YLWI6MDooYmQ9ITAsMCl9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WVwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFk7XG52YXIgYj1hZDthZD1hLnNjcmVlblk7cmV0dXJuIGNkP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5ZLWI6MDooY2Q9ITAsMCl9fSksZWQ9ZGQuZXh0ZW5kKHtwb2ludGVySWQ6bnVsbCx3aWR0aDpudWxsLGhlaWdodDpudWxsLHByZXNzdXJlOm51bGwsdGFuZ2VudGlhbFByZXNzdXJlOm51bGwsdGlsdFg6bnVsbCx0aWx0WTpudWxsLHR3aXN0Om51bGwscG9pbnRlclR5cGU6bnVsbCxpc1ByaW1hcnk6bnVsbH0pLGZkPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0scG9pbnRlckVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19LHBvaW50ZXJMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckxlYXZlXCIsXG5kZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19fSxnZD17ZXZlbnRUeXBlczpmZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hLGY9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGUmJihjLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpfHwhZiYmIWUpcmV0dXJuIG51bGw7ZT1kLndpbmRvdz09PWQ/ZDooZT1kLm93bmVyRG9jdW1lbnQpP2UuZGVmYXVsdFZpZXd8fGUucGFyZW50V2luZG93OndpbmRvdztmPyhmPWIsYj0oYj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50KT9IYShiKTpudWxsKTpmPW51bGw7aWYoZj09PWIpcmV0dXJuIG51bGw7dmFyIGg9dm9pZCAwLGc9dm9pZCAwLGs9dm9pZCAwLGw9dm9pZCAwO2lmKFwibW91c2VvdXRcIj09PWF8fFwibW91c2VvdmVyXCI9PT1hKWg9ZGQsZz1mZC5tb3VzZUxlYXZlLGs9ZmQubW91c2VFbnRlcixsPVwibW91c2VcIjtcbmVsc2UgaWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKWg9ZWQsZz1mZC5wb2ludGVyTGVhdmUsaz1mZC5wb2ludGVyRW50ZXIsbD1cInBvaW50ZXJcIjt2YXIgbj1udWxsPT1mP2U6SmEoZik7ZT1udWxsPT1iP2U6SmEoYik7YT1oLmdldFBvb2xlZChnLGYsYyxkKTthLnR5cGU9bCtcImxlYXZlXCI7YS50YXJnZXQ9bjthLnJlbGF0ZWRUYXJnZXQ9ZTtjPWguZ2V0UG9vbGVkKGssYixjLGQpO2MudHlwZT1sK1wiZW50ZXJcIjtjLnRhcmdldD1lO2MucmVsYXRlZFRhcmdldD1uO2Q9YjtpZihmJiZkKWE6e2I9ZjtlPWQ7bD0wO2ZvcihoPWI7aDtoPUxhKGgpKWwrKztoPTA7Zm9yKGs9ZTtrO2s9TGEoaykpaCsrO2Zvcig7MDxsLWg7KWI9TGEoYiksbC0tO2Zvcig7MDxoLWw7KWU9TGEoZSksaC0tO2Zvcig7bC0tOyl7aWYoYj09PWV8fGI9PT1lLmFsdGVybmF0ZSlicmVhayBhO2I9TGEoYik7ZT1MYShlKX1iPW51bGx9ZWxzZSBiPW51bGw7ZT1iO2ZvcihiPVtdO2YmJmYhPT1lOyl7bD1cbmYuYWx0ZXJuYXRlO2lmKG51bGwhPT1sJiZsPT09ZSlicmVhaztiLnB1c2goZik7Zj1MYShmKX1mb3IoZj1bXTtkJiZkIT09ZTspe2w9ZC5hbHRlcm5hdGU7aWYobnVsbCE9PWwmJmw9PT1lKWJyZWFrO2YucHVzaChkKTtkPUxhKGQpfWZvcihkPTA7ZDxiLmxlbmd0aDtkKyspT2EoYltkXSxcImJ1YmJsZWRcIixhKTtmb3IoZD1mLmxlbmd0aDswPGQtLTspT2EoZltkXSxcImNhcHR1cmVkXCIsYyk7cmV0dXJuW2EsY119fTtmdW5jdGlvbiBoZChhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIGlkPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBqZChhLGIpe2lmKGhkKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylpZighaWQuY2FsbChiLGNbZF0pfHwhaGQoYVtjW2RdXSxiW2NbZF1dKSlyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBrZChhLGIpe3JldHVybntyZXNwb25kZXI6YSxwcm9wczpifX1uZXcgTWFwO25ldyBNYXA7bmV3IFNldDtuZXcgTWFwO1xuZnVuY3Rpb24gbGQoYSl7dmFyIGI9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7aWYoMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMTtmb3IoO2IucmV0dXJuOylpZihiPWIucmV0dXJuLDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDF9cmV0dXJuIDM9PT1iLnRhZz8yOjN9ZnVuY3Rpb24gb2QoYSl7aWYoMiE9PWxkKGEpKXRocm93IHQoRXJyb3IoMTg4KSk7fVxuZnVuY3Rpb24gcGQoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9bGQoYSk7aWYoMz09PWIpdGhyb3cgdChFcnJvcigxODgpKTtyZXR1cm4gMT09PWI/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gb2QoZSksYTtpZihmPT09ZClyZXR1cm4gb2QoZSksYjtmPWYuc2libGluZ310aHJvdyB0KEVycm9yKDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGg9ITEsZz1lLmNoaWxkO2c7KXtpZihnPT09Yyl7aD0hMDtjPWU7ZD1mO2JyZWFrfWlmKGc9PT1kKXtoPSEwO2Q9ZTtjPWY7YnJlYWt9Zz1nLnNpYmxpbmd9aWYoIWgpe2ZvcihnPWYuY2hpbGQ7Zzspe2lmKGc9PT1cbmMpe2g9ITA7Yz1mO2Q9ZTticmVha31pZihnPT09ZCl7aD0hMDtkPWY7Yz1lO2JyZWFrfWc9Zy5zaWJsaW5nfWlmKCFoKXRocm93IHQoRXJyb3IoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgdChFcnJvcigxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IHQoRXJyb3IoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBxZChhKXthPXBkKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxudmFyIHJkPXkuZXh0ZW5kKHthbmltYXRpb25OYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxzZD15LmV4dGVuZCh7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLHRkPVdjLmV4dGVuZCh7cmVsYXRlZFRhcmdldDpudWxsfSk7ZnVuY3Rpb24gdWQoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9XG52YXIgdmQ9e0VzYzpcIkVzY2FwZVwiLFNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LHdkPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLFxuMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSx4ZD1XYy5leHRlbmQoe2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9dmRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9dWQoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP3dkW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sbG9jYXRpb246bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwscmVwZWF0Om51bGwsbG9jYWxlOm51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpaYyxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT91ZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT91ZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLHlkPWRkLmV4dGVuZCh7ZGF0YVRyYW5zZmVyOm51bGx9KSx6ZD1XYy5leHRlbmQoe3RvdWNoZXM6bnVsbCx0YXJnZXRUb3VjaGVzOm51bGwsY2hhbmdlZFRvdWNoZXM6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpaY30pLEFkPXkuZXh0ZW5kKHtwcm9wZXJ0eU5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLEJkPWRkLmV4dGVuZCh7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluXG5hPy1hLndoZWVsRGVsdGFYOjB9LGRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjpudWxsLGRlbHRhTW9kZTpudWxsfSksQ2Q9W1tcImJsdXJcIixcImJsdXJcIiwwXSxbXCJjYW5jZWxcIixcImNhbmNlbFwiLDBdLFtcImNsaWNrXCIsXCJjbGlja1wiLDBdLFtcImNsb3NlXCIsXCJjbG9zZVwiLDBdLFtcImNvbnRleHRtZW51XCIsXCJjb250ZXh0TWVudVwiLDBdLFtcImNvcHlcIixcImNvcHlcIiwwXSxbXCJjdXRcIixcImN1dFwiLDBdLFtcImF1eGNsaWNrXCIsXCJhdXhDbGlja1wiLDBdLFtcImRibGNsaWNrXCIsXCJkb3VibGVDbGlja1wiLDBdLFtcImRyYWdlbmRcIixcImRyYWdFbmRcIiwwXSxbXCJkcmFnc3RhcnRcIixcImRyYWdTdGFydFwiLDBdLFtcImRyb3BcIixcImRyb3BcIiwwXSxbXCJmb2N1c1wiLFwiZm9jdXNcIiwwXSxbXCJpbnB1dFwiLFwiaW5wdXRcIiwwXSxbXCJpbnZhbGlkXCIsXCJpbnZhbGlkXCIsMF0sXG5bXCJrZXlkb3duXCIsXCJrZXlEb3duXCIsMF0sW1wia2V5cHJlc3NcIixcImtleVByZXNzXCIsMF0sW1wia2V5dXBcIixcImtleVVwXCIsMF0sW1wibW91c2Vkb3duXCIsXCJtb3VzZURvd25cIiwwXSxbXCJtb3VzZXVwXCIsXCJtb3VzZVVwXCIsMF0sW1wicGFzdGVcIixcInBhc3RlXCIsMF0sW1wicGF1c2VcIixcInBhdXNlXCIsMF0sW1wicGxheVwiLFwicGxheVwiLDBdLFtcInBvaW50ZXJjYW5jZWxcIixcInBvaW50ZXJDYW5jZWxcIiwwXSxbXCJwb2ludGVyZG93blwiLFwicG9pbnRlckRvd25cIiwwXSxbXCJwb2ludGVydXBcIixcInBvaW50ZXJVcFwiLDBdLFtcInJhdGVjaGFuZ2VcIixcInJhdGVDaGFuZ2VcIiwwXSxbXCJyZXNldFwiLFwicmVzZXRcIiwwXSxbXCJzZWVrZWRcIixcInNlZWtlZFwiLDBdLFtcInN1Ym1pdFwiLFwic3VibWl0XCIsMF0sW1widG91Y2hjYW5jZWxcIixcInRvdWNoQ2FuY2VsXCIsMF0sW1widG91Y2hlbmRcIixcInRvdWNoRW5kXCIsMF0sW1widG91Y2hzdGFydFwiLFwidG91Y2hTdGFydFwiLDBdLFtcInZvbHVtZWNoYW5nZVwiLFwidm9sdW1lQ2hhbmdlXCIsMF0sW1wiZHJhZ1wiLFwiZHJhZ1wiLFxuMV0sW1wiZHJhZ2VudGVyXCIsXCJkcmFnRW50ZXJcIiwxXSxbXCJkcmFnZXhpdFwiLFwiZHJhZ0V4aXRcIiwxXSxbXCJkcmFnbGVhdmVcIixcImRyYWdMZWF2ZVwiLDFdLFtcImRyYWdvdmVyXCIsXCJkcmFnT3ZlclwiLDFdLFtcIm1vdXNlbW92ZVwiLFwibW91c2VNb3ZlXCIsMV0sW1wibW91c2VvdXRcIixcIm1vdXNlT3V0XCIsMV0sW1wibW91c2VvdmVyXCIsXCJtb3VzZU92ZXJcIiwxXSxbXCJwb2ludGVybW92ZVwiLFwicG9pbnRlck1vdmVcIiwxXSxbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyT3V0XCIsMV0sW1wicG9pbnRlcm92ZXJcIixcInBvaW50ZXJPdmVyXCIsMV0sW1wic2Nyb2xsXCIsXCJzY3JvbGxcIiwxXSxbXCJ0b2dnbGVcIixcInRvZ2dsZVwiLDFdLFtcInRvdWNobW92ZVwiLFwidG91Y2hNb3ZlXCIsMV0sW1wid2hlZWxcIixcIndoZWVsXCIsMV0sW1wiYWJvcnRcIixcImFib3J0XCIsMl0sW1hhLFwiYW5pbWF0aW9uRW5kXCIsMl0sW1lhLFwiYW5pbWF0aW9uSXRlcmF0aW9uXCIsMl0sW1phLFwiYW5pbWF0aW9uU3RhcnRcIiwyXSxbXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCIsMl0sW1wiY2FucGxheXRocm91Z2hcIixcblwiY2FuUGxheVRocm91Z2hcIiwyXSxbXCJkdXJhdGlvbmNoYW5nZVwiLFwiZHVyYXRpb25DaGFuZ2VcIiwyXSxbXCJlbXB0aWVkXCIsXCJlbXB0aWVkXCIsMl0sW1wiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIiwyXSxbXCJlbmRlZFwiLFwiZW5kZWRcIiwyXSxbXCJlcnJvclwiLFwiZXJyb3JcIiwyXSxbXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIiwyXSxbXCJsb2FkXCIsXCJsb2FkXCIsMl0sW1wibG9hZGVkZGF0YVwiLFwibG9hZGVkRGF0YVwiLDJdLFtcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiLDJdLFtcImxvYWRzdGFydFwiLFwibG9hZFN0YXJ0XCIsMl0sW1wibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIiwyXSxbXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCIsMl0sW1wicHJvZ3Jlc3NcIixcInByb2dyZXNzXCIsMl0sW1wic2Vla2luZ1wiLFwic2Vla2luZ1wiLDJdLFtcInN0YWxsZWRcIixcInN0YWxsZWRcIiwyXSxbXCJzdXNwZW5kXCIsXCJzdXNwZW5kXCIsMl0sW1widGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiLFxuMl0sW2FiLFwidHJhbnNpdGlvbkVuZFwiLDJdLFtcIndhaXRpbmdcIixcIndhaXRpbmdcIiwyXV0sRGQ9e30sRWQ9e30sRmQ9MDtmb3IoO0ZkPENkLmxlbmd0aDtGZCsrKXt2YXIgR2Q9Q2RbRmRdLEhkPUdkWzBdLElkPUdkWzFdLEpkPUdkWzJdLEtkPVwib25cIisoSWRbMF0udG9VcHBlckNhc2UoKStJZC5zbGljZSgxKSksTGQ9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOktkLGNhcHR1cmVkOktkK1wiQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W0hkXSxldmVudFByaW9yaXR5OkpkfTtEZFtJZF09TGQ7RWRbSGRdPUxkfVxudmFyIE1kPXtldmVudFR5cGVzOkRkLGdldEV2ZW50UHJpb3JpdHk6ZnVuY3Rpb24oYSl7YT1FZFthXTtyZXR1cm4gdm9pZCAwIT09YT9hLmV2ZW50UHJpb3JpdHk6Mn0sZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1FZFthXTtpZighZSlyZXR1cm4gbnVsbDtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PXVkKGMpKXJldHVybiBudWxsO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6YT14ZDticmVhaztjYXNlIFwiYmx1clwiOmNhc2UgXCJmb2N1c1wiOmE9dGQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKXJldHVybiBudWxsO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6YT1kZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjphPVxueWQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6YT16ZDticmVhaztjYXNlIFhhOmNhc2UgWWE6Y2FzZSBaYTphPXJkO2JyZWFrO2Nhc2UgYWI6YT1BZDticmVhaztjYXNlIFwic2Nyb2xsXCI6YT1XYzticmVhaztjYXNlIFwid2hlZWxcIjphPUJkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOmE9c2Q7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6YT1lZDticmVhaztkZWZhdWx0OmE9eX1iPWEuZ2V0UG9vbGVkKGUsYixjLGQpO1FhKGIpO3JldHVybiBifX0sTmQ9TWQuZ2V0RXZlbnRQcmlvcml0eSxPZD1bXTtcbmZ1bmN0aW9uIFBkKGEpe3ZhciBiPWEudGFyZ2V0SW5zdCxjPWI7ZG97aWYoIWMpe2EuYW5jZXN0b3JzLnB1c2goYyk7YnJlYWt9dmFyIGQ7Zm9yKGQ9YztkLnJldHVybjspZD1kLnJldHVybjtkPTMhPT1kLnRhZz9udWxsOmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoIWQpYnJlYWs7YS5hbmNlc3RvcnMucHVzaChjKTtjPUhhKGQpfXdoaWxlKGMpO2ZvcihjPTA7YzxhLmFuY2VzdG9ycy5sZW5ndGg7YysrKXtiPWEuYW5jZXN0b3JzW2NdO3ZhciBlPVJiKGEubmF0aXZlRXZlbnQpO2Q9YS50b3BMZXZlbFR5cGU7Zm9yKHZhciBmPWEubmF0aXZlRXZlbnQsaD1udWxsLGc9MDtnPGVhLmxlbmd0aDtnKyspe3ZhciBrPWVhW2ddO2smJihrPWsuZXh0cmFjdEV2ZW50cyhkLGIsZixlKSkmJihoPXhhKGgsaykpfUJhKGgpfX12YXIgUWQ9ITA7ZnVuY3Rpb24gRyhhLGIpe1JkKGIsYSwhMSl9XG5mdW5jdGlvbiBSZChhLGIsYyl7c3dpdGNoKE5kKGIpKXtjYXNlIDA6dmFyIGQ9U2QuYmluZChudWxsLGIsMSk7YnJlYWs7Y2FzZSAxOmQ9VGQuYmluZChudWxsLGIsMSk7YnJlYWs7ZGVmYXVsdDpkPVVkLmJpbmQobnVsbCxiLDEpfWM/YS5hZGRFdmVudExpc3RlbmVyKGIsZCwhMCk6YS5hZGRFdmVudExpc3RlbmVyKGIsZCwhMSl9ZnVuY3Rpb24gU2QoYSxiLGMpe05ifHxMYigpO3ZhciBkPVVkLGU9TmI7TmI9ITA7dHJ5e0tiKGQsYSxiLGMpfWZpbmFsbHl7KE5iPWUpfHxPYigpfX1mdW5jdGlvbiBUZChhLGIsYyl7VWQoYSxiLGMpfVxuZnVuY3Rpb24gVWQoYSxiLGMpe2lmKFFkKXtiPVJiKGMpO2I9SGEoYik7bnVsbD09PWJ8fFwibnVtYmVyXCIhPT10eXBlb2YgYi50YWd8fDI9PT1sZChiKXx8KGI9bnVsbCk7aWYoT2QubGVuZ3RoKXt2YXIgZD1PZC5wb3AoKTtkLnRvcExldmVsVHlwZT1hO2QubmF0aXZlRXZlbnQ9YztkLnRhcmdldEluc3Q9YjthPWR9ZWxzZSBhPXt0b3BMZXZlbFR5cGU6YSxuYXRpdmVFdmVudDpjLHRhcmdldEluc3Q6YixhbmNlc3RvcnM6W119O3RyeXtpZihjPWEsTmIpUGQoYyx2b2lkIDApO2Vsc2V7TmI9ITA7dHJ5e01iKFBkLGMsdm9pZCAwKX1maW5hbGx5e05iPSExLE9iKCl9fX1maW5hbGx5e2EudG9wTGV2ZWxUeXBlPW51bGwsYS5uYXRpdmVFdmVudD1udWxsLGEudGFyZ2V0SW5zdD1udWxsLGEuYW5jZXN0b3JzLmxlbmd0aD0wLDEwPk9kLmxlbmd0aCYmT2QucHVzaChhKX19fXZhciBWZD1uZXcgKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwKTtcbmZ1bmN0aW9uIFdkKGEpe3ZhciBiPVZkLmdldChhKTt2b2lkIDA9PT1iJiYoYj1uZXcgU2V0LFZkLnNldChhLGIpKTtyZXR1cm4gYn1mdW5jdGlvbiBYZChhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19ZnVuY3Rpb24gWWQoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gWmQoYSxiKXt2YXIgYz1ZZChhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1ZZChjKX19ZnVuY3Rpb24gJGQoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT8kZChhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9XG5mdW5jdGlvbiBhZSgpe2Zvcih2YXIgYT13aW5kb3csYj1YZCgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj1YZChhLmRvY3VtZW50KX1yZXR1cm4gYn1mdW5jdGlvbiBiZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxudmFyIGNlPVJhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsZGU9e3NlbGVjdDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvblNlbGVjdFwiLGNhcHR1cmVkOlwib25TZWxlY3RDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1cyBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19LGVlPW51bGwsZmU9bnVsbCxnZT1udWxsLGhlPSExO1xuZnVuY3Rpb24gaWUoYSxiKXt2YXIgYz1iLndpbmRvdz09PWI/Yi5kb2N1bWVudDo5PT09Yi5ub2RlVHlwZT9iOmIub3duZXJEb2N1bWVudDtpZihoZXx8bnVsbD09ZWV8fGVlIT09WGQoYykpcmV0dXJuIG51bGw7Yz1lZTtcInNlbGVjdGlvblN0YXJ0XCJpbiBjJiZiZShjKT9jPXtzdGFydDpjLnNlbGVjdGlvblN0YXJ0LGVuZDpjLnNlbGVjdGlvbkVuZH06KGM9KGMub3duZXJEb2N1bWVudCYmYy5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGM9e2FuY2hvck5vZGU6Yy5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpjLmFuY2hvck9mZnNldCxmb2N1c05vZGU6Yy5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6Yy5mb2N1c09mZnNldH0pO3JldHVybiBnZSYmamQoZ2UsYyk/bnVsbDooZ2U9YyxhPXkuZ2V0UG9vbGVkKGRlLnNlbGVjdCxmZSxhLGIpLGEudHlwZT1cInNlbGVjdFwiLGEudGFyZ2V0PWVlLFFhKGEpLGEpfVxudmFyIGplPXtldmVudFR5cGVzOmRlLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZC53aW5kb3c9PT1kP2QuZG9jdW1lbnQ6OT09PWQubm9kZVR5cGU/ZDpkLm93bmVyRG9jdW1lbnQsZjtpZighKGY9IWUpKXthOntlPVdkKGUpO2Y9amEub25TZWxlY3Q7Zm9yKHZhciBoPTA7aDxmLmxlbmd0aDtoKyspaWYoIWUuaGFzKGZbaF0pKXtlPSExO2JyZWFrIGF9ZT0hMH1mPSFlfWlmKGYpcmV0dXJuIG51bGw7ZT1iP0phKGIpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzXCI6aWYoUWIoZSl8fFwidHJ1ZVwiPT09ZS5jb250ZW50RWRpdGFibGUpZWU9ZSxmZT1iLGdlPW51bGw7YnJlYWs7Y2FzZSBcImJsdXJcIjpnZT1mZT1lZT1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpoZT0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6cmV0dXJuIGhlPSExLGllKGMsZCk7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKGNlKWJyZWFrO1xuY2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpyZXR1cm4gaWUoYyxkKX1yZXR1cm4gbnVsbH19O0NhLmluamVjdEV2ZW50UGx1Z2luT3JkZXIoXCJSZXNwb25kZXJFdmVudFBsdWdpbiBTaW1wbGVFdmVudFBsdWdpbiBFbnRlckxlYXZlRXZlbnRQbHVnaW4gQ2hhbmdlRXZlbnRQbHVnaW4gU2VsZWN0RXZlbnRQbHVnaW4gQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiLnNwbGl0KFwiIFwiKSk7c2E9S2E7dGE9SWE7dmE9SmE7Q2EuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lKHtTaW1wbGVFdmVudFBsdWdpbjpNZCxFbnRlckxlYXZlRXZlbnRQbHVnaW46Z2QsQ2hhbmdlRXZlbnRQbHVnaW46VmMsU2VsZWN0RXZlbnRQbHVnaW46amUsQmVmb3JlSW5wdXRFdmVudFBsdWdpbjpDYn0pO2Z1bmN0aW9uIGtlKGEpe3ZhciBiPVwiXCI7YWEuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGwhPWEmJihiKz1hKX0pO3JldHVybiBifVxuZnVuY3Rpb24gbGUoYSxiKXthPW0oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1rZShiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9ZnVuY3Rpb24gbWUoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK0FjKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBuZShhLGIpe2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpdGhyb3cgdChFcnJvcig5MSkpO3JldHVybiBtKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIG9lKGEsYil7dmFyIGM9Yi52YWx1ZTtpZihudWxsPT1jKXtjPWIuZGVmYXVsdFZhbHVlO2I9Yi5jaGlsZHJlbjtpZihudWxsIT1iKXtpZihudWxsIT1jKXRocm93IHQoRXJyb3IoOTIpKTtpZihBcnJheS5pc0FycmF5KGIpKXtpZighKDE+PWIubGVuZ3RoKSl0aHJvdyB0KEVycm9yKDkzKSk7Yj1iWzBdfWM9Yn1udWxsPT1jJiYoYz1cIlwiKX1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpBYyhjKX19XG5mdW5jdGlvbiBwZShhLGIpe3ZhciBjPUFjKGIudmFsdWUpLGQ9QWMoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBxZShhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiYoYS52YWx1ZT1iKX12YXIgcmU9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gc2UoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiB0ZShhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/c2UoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgdWU9dm9pZCAwLHZlPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PXJlLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle3VlPXVlfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3VlLmlubmVySFRNTD1cIjxzdmc+XCIrYitcIjwvc3ZnPlwiO2ZvcihiPXVlLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIHdlKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgeGU9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLFxuZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0seWU9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKHhlKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3llLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7eGVbYl09eGVbYV19KX0pO2Z1bmN0aW9uIHplKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHx4ZS5oYXNPd25Qcm9wZXJ0eShhKSYmeGVbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gQWUoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9emUoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgQ2U9bSh7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIERlKGEsYil7aWYoYil7aWYoQ2VbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyB0KEVycm9yKDEzNyksYSxcIlwiKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IHQoRXJyb3IoNjApKTtpZighKFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IHQoRXJyb3IoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IHQoRXJyb3IoNjIpLFwiXCIpO319XG5mdW5jdGlvbiBFZShhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19XG5mdW5jdGlvbiBGZShhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz1XZChhKTtiPWphW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXt2YXIgZT1iW2RdO2lmKCFjLmhhcyhlKSl7c3dpdGNoKGUpe2Nhc2UgXCJzY3JvbGxcIjpSZChhLFwic2Nyb2xsXCIsITApO2JyZWFrO2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6UmQoYSxcImZvY3VzXCIsITApO1JkKGEsXCJibHVyXCIsITApO2MuYWRkKFwiYmx1clwiKTtjLmFkZChcImZvY3VzXCIpO2JyZWFrO2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xvc2VcIjpTYihlKSYmUmQoYSxlLCEwKTticmVhaztjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwicmVzZXRcIjpicmVhaztkZWZhdWx0Oi0xPT09YmIuaW5kZXhPZihlKSYmRyhlLGEpfWMuYWRkKGUpfX19ZnVuY3Rpb24gR2UoKXt9dmFyIEhlPW51bGwsSWU9bnVsbDtcbmZ1bmN0aW9uIEplKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1mdW5jdGlvbiBLZShhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwib3B0aW9uXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9dmFyIExlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLE1lPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMDtcbmZ1bmN0aW9uIE5lKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrfXJldHVybiBhfW5ldyBTZXQ7dmFyIE9lPVtdLFBlPS0xO2Z1bmN0aW9uIEgoYSl7MD5QZXx8KGEuY3VycmVudD1PZVtQZV0sT2VbUGVdPW51bGwsUGUtLSl9ZnVuY3Rpb24gSihhLGIpe1BlKys7T2VbUGVdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgUWU9e30sTD17Y3VycmVudDpRZX0sTT17Y3VycmVudDohMX0sUmU9UWU7XG5mdW5jdGlvbiBTZShhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIFFlO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIE4oYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiBUZShhKXtIKE0sYSk7SChMLGEpfWZ1bmN0aW9uIFVlKGEpe0goTSxhKTtIKEwsYSl9XG5mdW5jdGlvbiBWZShhLGIsYyl7aWYoTC5jdXJyZW50IT09UWUpdGhyb3cgdChFcnJvcigxNjgpKTtKKEwsYixhKTtKKE0sYyxhKX1mdW5jdGlvbiBXZShhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7YT1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpaWYoIShlIGluIGEpKXRocm93IHQoRXJyb3IoMTA4KSxvYyhiKXx8XCJVbmtub3duXCIsZSk7cmV0dXJuIG0oe30sYyxkKX1mdW5jdGlvbiBYZShhKXt2YXIgYj1hLnN0YXRlTm9kZTtiPWImJmIuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fFFlO1JlPUwuY3VycmVudDtKKEwsYixhKTtKKE0sTS5jdXJyZW50LGEpO3JldHVybiEwfVxuZnVuY3Rpb24gWWUoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IHQoRXJyb3IoMTY5KSk7Yz8oYj1XZShhLGIsUmUpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YixIKE0sYSksSChMLGEpLEooTCxiLGEpKTpIKE0sYSk7SihNLGMsYSl9XG52YXIgWmU9cS51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksJGU9cS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLGFmPXEudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssYmY9cS51bnN0YWJsZV9zaG91bGRZaWVsZCxjZj1xLnVuc3RhYmxlX3JlcXVlc3RQYWludCxkZj1xLnVuc3RhYmxlX25vdyxlZj1xLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLGZmPXEudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksaGY9cS51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxqZj1xLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LGtmPXEudW5zdGFibGVfTG93UHJpb3JpdHksbGY9cS51bnN0YWJsZV9JZGxlUHJpb3JpdHksbWY9e30sbmY9dm9pZCAwIT09Y2Y/Y2Y6ZnVuY3Rpb24oKXt9LG9mPW51bGwscGY9bnVsbCxxZj0hMSxyZj1kZigpLHNmPTFFND5yZj9kZjpmdW5jdGlvbigpe3JldHVybiBkZigpLXJmfTtcbmZ1bmN0aW9uIHRmKCl7c3dpdGNoKGVmKCkpe2Nhc2UgZmY6cmV0dXJuIDk5O2Nhc2UgaGY6cmV0dXJuIDk4O2Nhc2UgamY6cmV0dXJuIDk3O2Nhc2Uga2Y6cmV0dXJuIDk2O2Nhc2UgbGY6cmV0dXJuIDk1O2RlZmF1bHQ6dGhyb3cgdChFcnJvcigzMzIpKTt9fWZ1bmN0aW9uIHVmKGEpe3N3aXRjaChhKXtjYXNlIDk5OnJldHVybiBmZjtjYXNlIDk4OnJldHVybiBoZjtjYXNlIDk3OnJldHVybiBqZjtjYXNlIDk2OnJldHVybiBrZjtjYXNlIDk1OnJldHVybiBsZjtkZWZhdWx0OnRocm93IHQoRXJyb3IoMzMyKSk7fX1mdW5jdGlvbiB2ZihhLGIpe2E9dWYoYSk7cmV0dXJuIFplKGEsYil9ZnVuY3Rpb24gd2YoYSxiLGMpe2E9dWYoYSk7cmV0dXJuICRlKGEsYixjKX1mdW5jdGlvbiB4ZihhKXtudWxsPT09b2Y/KG9mPVthXSxwZj0kZShmZix5ZikpOm9mLnB1c2goYSk7cmV0dXJuIG1mfWZ1bmN0aW9uIE8oKXtudWxsIT09cGYmJmFmKHBmKTt5ZigpfVxuZnVuY3Rpb24geWYoKXtpZighcWYmJm51bGwhPT1vZil7cWY9ITA7dmFyIGE9MDt0cnl7dmFyIGI9b2Y7dmYoOTksZnVuY3Rpb24oKXtmb3IoO2E8Yi5sZW5ndGg7YSsrKXt2YXIgYz1iW2FdO2RvIGM9YyghMCk7d2hpbGUobnVsbCE9PWMpfX0pO29mPW51bGx9Y2F0Y2goYyl7dGhyb3cgbnVsbCE9PW9mJiYob2Y9b2Yuc2xpY2UoYSsxKSksJGUoZmYsTyksYzt9ZmluYWxseXtxZj0hMX19fWZ1bmN0aW9uIHpmKGEsYil7aWYoMTA3Mzc0MTgyMz09PWIpcmV0dXJuIDk5O2lmKDE9PT1iKXJldHVybiA5NTthPTEwKigxMDczNzQxODIxLWIpLTEwKigxMDczNzQxODIxLWEpO3JldHVybiAwPj1hPzk5OjI1MD49YT85ODo1MjUwPj1hPzk3Ojk1fWZ1bmN0aW9uIEFmKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9bSh7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pfXJldHVybiBifVxuZnVuY3Rpb24gQmYoYSl7dmFyIGI9YS5fcmVzdWx0O3N3aXRjaChhLl9zdGF0dXMpe2Nhc2UgMTpyZXR1cm4gYjtjYXNlIDI6dGhyb3cgYjtjYXNlIDA6dGhyb3cgYjtkZWZhdWx0OmEuX3N0YXR1cz0wO2I9YS5fY3RvcjtiPWIoKTtiLnRoZW4oZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGI9Yi5kZWZhdWx0LGEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1iKX0sZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1iKX0pO3N3aXRjaChhLl9zdGF0dXMpe2Nhc2UgMTpyZXR1cm4gYS5fcmVzdWx0O2Nhc2UgMjp0aHJvdyBhLl9yZXN1bHQ7fWEuX3Jlc3VsdD1iO3Rocm93IGI7fX12YXIgQ2Y9e2N1cnJlbnQ6bnVsbH0sRGY9bnVsbCxFZj1udWxsLEZmPW51bGw7ZnVuY3Rpb24gR2YoKXtGZj1FZj1EZj1udWxsfVxuZnVuY3Rpb24gSGYoYSxiKXt2YXIgYz1hLnR5cGUuX2NvbnRleHQ7SihDZixjLl9jdXJyZW50VmFsdWUsYSk7Yy5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gSWYoYSl7dmFyIGI9Q2YuY3VycmVudDtIKENmLGEpO2EudHlwZS5fY29udGV4dC5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gSmYoYSxiKXtmb3IoO251bGwhPT1hOyl7dmFyIGM9YS5hbHRlcm5hdGU7aWYoYS5jaGlsZEV4cGlyYXRpb25UaW1lPGIpYS5jaGlsZEV4cGlyYXRpb25UaW1lPWIsbnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoYy5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO2Vsc2UgaWYobnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiKWMuY2hpbGRFeHBpcmF0aW9uVGltZT1iO2Vsc2UgYnJlYWs7YT1hLnJldHVybn19XG5mdW5jdGlvbiBLZihhLGIpe0RmPWE7RmY9RWY9bnVsbDthPWEuZGVwZW5kZW5jaWVzO251bGwhPT1hJiZudWxsIT09YS5maXJzdENvbnRleHQmJihhLmV4cGlyYXRpb25UaW1lPj1iJiYoTGY9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfWZ1bmN0aW9uIE1mKGEsYil7aWYoRmYhPT1hJiYhMSE9PWImJjAhPT1iKXtpZihcIm51bWJlclwiIT09dHlwZW9mIGJ8fDEwNzM3NDE4MjM9PT1iKUZmPWEsYj0xMDczNzQxODIzO2I9e2NvbnRleHQ6YSxvYnNlcnZlZEJpdHM6YixuZXh0Om51bGx9O2lmKG51bGw9PT1FZil7aWYobnVsbD09PURmKXRocm93IHQoRXJyb3IoMzA4KSk7RWY9YjtEZi5kZXBlbmRlbmNpZXM9e2V4cGlyYXRpb25UaW1lOjAsZmlyc3RDb250ZXh0OmIscmVzcG9uZGVyczpudWxsfX1lbHNlIEVmPUVmLm5leHQ9Yn1yZXR1cm4gYS5fY3VycmVudFZhbHVlfXZhciBOZj0hMTtcbmZ1bmN0aW9uIE9mKGEpe3JldHVybntiYXNlU3RhdGU6YSxmaXJzdFVwZGF0ZTpudWxsLGxhc3RVcGRhdGU6bnVsbCxmaXJzdENhcHR1cmVkVXBkYXRlOm51bGwsbGFzdENhcHR1cmVkVXBkYXRlOm51bGwsZmlyc3RFZmZlY3Q6bnVsbCxsYXN0RWZmZWN0Om51bGwsZmlyc3RDYXB0dXJlZEVmZmVjdDpudWxsLGxhc3RDYXB0dXJlZEVmZmVjdDpudWxsfX1mdW5jdGlvbiBQZihhKXtyZXR1cm57YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0VXBkYXRlOmEuZmlyc3RVcGRhdGUsbGFzdFVwZGF0ZTphLmxhc3RVcGRhdGUsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19XG5mdW5jdGlvbiBRZihhLGIpe3JldHVybntleHBpcmF0aW9uVGltZTphLHN1c3BlbnNlQ29uZmlnOmIsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsLG5leHRFZmZlY3Q6bnVsbH19ZnVuY3Rpb24gUmYoYSxiKXtudWxsPT09YS5sYXN0VXBkYXRlP2EuZmlyc3RVcGRhdGU9YS5sYXN0VXBkYXRlPWI6KGEubGFzdFVwZGF0ZS5uZXh0PWIsYS5sYXN0VXBkYXRlPWIpfVxuZnVuY3Rpb24gU2YoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtpZihudWxsPT09Yyl7dmFyIGQ9YS51cGRhdGVRdWV1ZTt2YXIgZT1udWxsO251bGw9PT1kJiYoZD1hLnVwZGF0ZVF1ZXVlPU9mKGEubWVtb2l6ZWRTdGF0ZSkpfWVsc2UgZD1hLnVwZGF0ZVF1ZXVlLGU9Yy51cGRhdGVRdWV1ZSxudWxsPT09ZD9udWxsPT09ZT8oZD1hLnVwZGF0ZVF1ZXVlPU9mKGEubWVtb2l6ZWRTdGF0ZSksZT1jLnVwZGF0ZVF1ZXVlPU9mKGMubWVtb2l6ZWRTdGF0ZSkpOmQ9YS51cGRhdGVRdWV1ZT1QZihlKTpudWxsPT09ZSYmKGU9Yy51cGRhdGVRdWV1ZT1QZihkKSk7bnVsbD09PWV8fGQ9PT1lP1JmKGQsYik6bnVsbD09PWQubGFzdFVwZGF0ZXx8bnVsbD09PWUubGFzdFVwZGF0ZT8oUmYoZCxiKSxSZihlLGIpKTooUmYoZCxiKSxlLmxhc3RVcGRhdGU9Yil9XG5mdW5jdGlvbiBUZihhLGIpe3ZhciBjPWEudXBkYXRlUXVldWU7Yz1udWxsPT09Yz9hLnVwZGF0ZVF1ZXVlPU9mKGEubWVtb2l6ZWRTdGF0ZSk6VWYoYSxjKTtudWxsPT09Yy5sYXN0Q2FwdHVyZWRVcGRhdGU/Yy5maXJzdENhcHR1cmVkVXBkYXRlPWMubGFzdENhcHR1cmVkVXBkYXRlPWI6KGMubGFzdENhcHR1cmVkVXBkYXRlLm5leHQ9YixjLmxhc3RDYXB0dXJlZFVwZGF0ZT1iKX1mdW5jdGlvbiBVZihhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZiPT09Yy51cGRhdGVRdWV1ZSYmKGI9YS51cGRhdGVRdWV1ZT1QZihiKSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBWZihhLGIsYyxkLGUsZil7c3dpdGNoKGMudGFnKXtjYXNlIDE6cmV0dXJuIGE9Yy5wYXlsb2FkLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChmLGQsZSk6YTtjYXNlIDM6YS5lZmZlY3RUYWc9YS5lZmZlY3RUYWcmLTIwNDl8NjQ7Y2FzZSAwOmE9Yy5wYXlsb2FkO2U9XCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGYsZCxlKTphO2lmKG51bGw9PT1lfHx2b2lkIDA9PT1lKWJyZWFrO3JldHVybiBtKHt9LGQsZSk7Y2FzZSAyOk5mPSEwfXJldHVybiBkfVxuZnVuY3Rpb24gV2YoYSxiLGMsZCxlKXtOZj0hMTtiPVVmKGEsYik7Zm9yKHZhciBmPWIuYmFzZVN0YXRlLGg9bnVsbCxnPTAsaz1iLmZpcnN0VXBkYXRlLGw9ZjtudWxsIT09azspe3ZhciBuPWsuZXhwaXJhdGlvblRpbWU7bjxlPyhudWxsPT09aCYmKGg9ayxmPWwpLGc8biYmKGc9bikpOihYZihuLGsuc3VzcGVuc2VDb25maWcpLGw9VmYoYSxiLGssbCxjLGQpLG51bGwhPT1rLmNhbGxiYWNrJiYoYS5lZmZlY3RUYWd8PTMyLGsubmV4dEVmZmVjdD1udWxsLG51bGw9PT1iLmxhc3RFZmZlY3Q/Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9azooYi5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9ayxiLmxhc3RFZmZlY3Q9aykpKTtrPWsubmV4dH1uPW51bGw7Zm9yKGs9Yi5maXJzdENhcHR1cmVkVXBkYXRlO251bGwhPT1rOyl7dmFyIHo9ay5leHBpcmF0aW9uVGltZTt6PGU/KG51bGw9PT1uJiYobj1rLG51bGw9PT1oJiYoZj1sKSksZzx6JiYoZz16KSk6KGw9VmYoYSxiLGssbCxjLGQpLG51bGwhPT1cbmsuY2FsbGJhY2smJihhLmVmZmVjdFRhZ3w9MzIsay5uZXh0RWZmZWN0PW51bGwsbnVsbD09PWIubGFzdENhcHR1cmVkRWZmZWN0P2IuZmlyc3RDYXB0dXJlZEVmZmVjdD1iLmxhc3RDYXB0dXJlZEVmZmVjdD1rOihiLmxhc3RDYXB0dXJlZEVmZmVjdC5uZXh0RWZmZWN0PWssYi5sYXN0Q2FwdHVyZWRFZmZlY3Q9aykpKTtrPWsubmV4dH1udWxsPT09aCYmKGIubGFzdFVwZGF0ZT1udWxsKTtudWxsPT09bj9iLmxhc3RDYXB0dXJlZFVwZGF0ZT1udWxsOmEuZWZmZWN0VGFnfD0zMjtudWxsPT09aCYmbnVsbD09PW4mJihmPWwpO2IuYmFzZVN0YXRlPWY7Yi5maXJzdFVwZGF0ZT1oO2IuZmlyc3RDYXB0dXJlZFVwZGF0ZT1uO2EuZXhwaXJhdGlvblRpbWU9ZzthLm1lbW9pemVkU3RhdGU9bH1cbmZ1bmN0aW9uIFlmKGEsYixjKXtudWxsIT09Yi5maXJzdENhcHR1cmVkVXBkYXRlJiYobnVsbCE9PWIubGFzdFVwZGF0ZSYmKGIubGFzdFVwZGF0ZS5uZXh0PWIuZmlyc3RDYXB0dXJlZFVwZGF0ZSxiLmxhc3RVcGRhdGU9Yi5sYXN0Q2FwdHVyZWRVcGRhdGUpLGIuZmlyc3RDYXB0dXJlZFVwZGF0ZT1iLmxhc3RDYXB0dXJlZFVwZGF0ZT1udWxsKTtaZihiLmZpcnN0RWZmZWN0LGMpO2IuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PW51bGw7WmYoYi5maXJzdENhcHR1cmVkRWZmZWN0LGMpO2IuZmlyc3RDYXB0dXJlZEVmZmVjdD1iLmxhc3RDYXB0dXJlZEVmZmVjdD1udWxsfWZ1bmN0aW9uIFpmKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuY2FsbGJhY2s7aWYobnVsbCE9PWMpe2EuY2FsbGJhY2s9bnVsbDt2YXIgZD1iO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjKXRocm93IHQoRXJyb3IoMTkxKSxjKTtjLmNhbGwoZCl9YT1hLm5leHRFZmZlY3R9fVxudmFyICRmPVhiLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLGFnPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO2Z1bmN0aW9uIGJnKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjptKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7ZD1hLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiYwPT09YS5leHBpcmF0aW9uVGltZSYmKGQuYmFzZVN0YXRlPWMpfVxudmFyIGZnPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbEZpYmVyKT8yPT09bGQoYSk6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9Y2coKSxlPSRmLnN1c3BlbnNlO2Q9ZGcoZCxhLGUpO2U9UWYoZCxlKTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7U2YoYSxlKTtlZyhhLGQpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1jZygpLGU9JGYuc3VzcGVuc2U7ZD1kZyhkLGEsZSk7ZT1RZihkLGUpO2UudGFnPTE7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO1NmKGEsZSk7ZWcoYSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGM9Y2coKSxkPSRmLnN1c3BlbnNlO1xuYz1kZyhjLGEsZCk7ZD1RZihjLGQpO2QudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihkLmNhbGxiYWNrPWIpO1NmKGEsZCk7ZWcoYSxjKX19O2Z1bmN0aW9uIGdnKGEsYixjLGQsZSxmLGgpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixoKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IWpkKGMsZCl8fCFqZChlLGYpOiEwfVxuZnVuY3Rpb24gaGcoYSxiLGMpe3ZhciBkPSExLGU9UWU7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9TWYoZik6KGU9TihiKT9SZTpMLmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9TZShhLGUpOlFlKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9Zmc7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFsRmliZXI9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gaWcoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJmZnLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gamcoYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1hZzt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PU1mKGYpOihmPU4oYik/UmU6TC5jdXJyZW50LGUuY29udGV4dD1TZShhLGYpKTtmPWEudXBkYXRlUXVldWU7bnVsbCE9PWYmJihXZihhLGYsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoYmcoYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PVxudHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHwoYj1lLnN0YXRlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmZmcuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksZj1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1mJiYoV2YoYSxmLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSkpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpfXZhciBrZz1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gbGcoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO3ZhciBkPXZvaWQgMDtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgdChFcnJvcigzMDkpKTtkPWMuc3RhdGVOb2RlfWlmKCFkKXRocm93IHQoRXJyb3IoMTQ3KSxhKTt2YXIgZT1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM7Yj09PWFnJiYoYj1kLnJlZnM9e30pO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07Yi5fc3RyaW5nUmVmPWU7cmV0dXJuIGJ9aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBhKXRocm93IHQoRXJyb3IoMjg0KSk7aWYoIWMuX293bmVyKXRocm93IHQoRXJyb3IoMjkwKSxhKTt9cmV0dXJuIGF9XG5mdW5jdGlvbiBtZyhhLGIpe2lmKFwidGV4dGFyZWFcIiE9PWEudHlwZSl0aHJvdyB0KEVycm9yKDMxKSxcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIsXCJcIik7fVxuZnVuY3Rpb24gbmcoYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5lZmZlY3RUYWc9OH19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIsYyl7YT1vZyhhLGIsYyk7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmVmZmVjdFRhZz1cbjIsYyk6ZDtiLmVmZmVjdFRhZz0yO3JldHVybiBjfWZ1bmN0aW9uIGgoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5lZmZlY3RUYWc9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gZyhhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPXBnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXtpZihudWxsIT09YiYmYi5lbGVtZW50VHlwZT09PWMudHlwZSlyZXR1cm4gZD1lKGIsYy5wcm9wcyxkKSxkLnJlZj1sZyhhLGIsYyksZC5yZXR1cm49YSxkO2Q9cWcoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9bGcoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PVxuYy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1yZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10sZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBuKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1zZyhjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24geihhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9cGcoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgWmI6cmV0dXJuIGM9cWcoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksYy5yZWY9bGcoYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlICRiOnJldHVybiBiPXJnKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYn1pZihrZyhiKXx8XG5tYyhiKSlyZXR1cm4gYj1zZyhiLGEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjttZyhhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHgoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpnKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgWmI6cmV0dXJuIGMua2V5PT09ZT9jLnR5cGU9PT1hYz9uKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsZSk6ayhhLGIsYyxkKTpudWxsO2Nhc2UgJGI6cmV0dXJuIGMua2V5PT09ZT9sKGEsYixjLGQpOm51bGx9aWYoa2coYyl8fG1jKGMpKXJldHVybiBudWxsIT09ZT9udWxsOm4oYSxiLGMsZCxudWxsKTttZyhhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIHYoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1cbmEuZ2V0KGMpfHxudWxsLGcoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBaYjpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09YWM/bihiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTprKGIsYSxkLGUpO2Nhc2UgJGI6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGwoYixhLGQsZSl9aWYoa2coZCl8fG1jKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLG4oYixhLGQsZSxudWxsKTttZyhiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIHJiKGUsaCxnLGspe2Zvcih2YXIgbD1udWxsLHU9bnVsbCxuPWgsdz1oPTAsQz1udWxsO251bGwhPT1uJiZ3PGcubGVuZ3RoO3crKyl7bi5pbmRleD53PyhDPW4sbj1udWxsKTpDPW4uc2libGluZzt2YXIgcD14KGUsbixnW3ddLGspO2lmKG51bGw9PT1wKXtudWxsPT09biYmKG49Qyk7YnJlYWt9YSYmXG5uJiZudWxsPT09cC5hbHRlcm5hdGUmJmIoZSxuKTtoPWYocCxoLHcpO251bGw9PT11P2w9cDp1LnNpYmxpbmc9cDt1PXA7bj1DfWlmKHc9PT1nLmxlbmd0aClyZXR1cm4gYyhlLG4pLGw7aWYobnVsbD09PW4pe2Zvcig7dzxnLmxlbmd0aDt3Kyspbj16KGUsZ1t3XSxrKSxudWxsIT09biYmKGg9ZihuLGgsdyksbnVsbD09PXU/bD1uOnUuc2libGluZz1uLHU9bik7cmV0dXJuIGx9Zm9yKG49ZChlLG4pO3c8Zy5sZW5ndGg7dysrKUM9dihuLGUsdyxnW3ddLGspLG51bGwhPT1DJiYoYSYmbnVsbCE9PUMuYWx0ZXJuYXRlJiZuLmRlbGV0ZShudWxsPT09Qy5rZXk/dzpDLmtleSksaD1mKEMsaCx3KSxudWxsPT09dT9sPUM6dS5zaWJsaW5nPUMsdT1DKTthJiZuLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIEJlKGUsaCxnLGspe3ZhciBsPW1jKGcpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBsKXRocm93IHQoRXJyb3IoMTUwKSk7Zz1sLmNhbGwoZyk7XG5pZihudWxsPT1nKXRocm93IHQoRXJyb3IoMTUxKSk7Zm9yKHZhciBuPWw9bnVsbCx1PWgsdz1oPTAsQz1udWxsLHA9Zy5uZXh0KCk7bnVsbCE9PXUmJiFwLmRvbmU7dysrLHA9Zy5uZXh0KCkpe3UuaW5kZXg+dz8oQz11LHU9bnVsbCk6Qz11LnNpYmxpbmc7dmFyIHI9eChlLHUscC52YWx1ZSxrKTtpZihudWxsPT09cil7bnVsbD09PXUmJih1PUMpO2JyZWFrfWEmJnUmJm51bGw9PT1yLmFsdGVybmF0ZSYmYihlLHUpO2g9ZihyLGgsdyk7bnVsbD09PW4/bD1yOm4uc2libGluZz1yO249cjt1PUN9aWYocC5kb25lKXJldHVybiBjKGUsdSksbDtpZihudWxsPT09dSl7Zm9yKDshcC5kb25lO3crKyxwPWcubmV4dCgpKXA9eihlLHAudmFsdWUsayksbnVsbCE9PXAmJihoPWYocCxoLHcpLG51bGw9PT1uP2w9cDpuLnNpYmxpbmc9cCxuPXApO3JldHVybiBsfWZvcih1PWQoZSx1KTshcC5kb25lO3crKyxwPWcubmV4dCgpKXA9dih1LGUsdyxwLnZhbHVlLGspLG51bGwhPT1wJiYoYSYmbnVsbCE9PVxucC5hbHRlcm5hdGUmJnUuZGVsZXRlKG51bGw9PT1wLmtleT93OnAua2V5KSxoPWYocCxoLHcpLG51bGw9PT1uP2w9cDpuLnNpYmxpbmc9cCxuPXApO2EmJnUuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGcpe3ZhciBrPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PWFjJiZudWxsPT09Zi5rZXk7ayYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGw9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihsKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIFpiOmE6e2w9Zi5rZXk7Zm9yKGs9ZDtudWxsIT09azspe2lmKGsua2V5PT09bCl7aWYoNz09PWsudGFnP2YudHlwZT09PWFjOmsuZWxlbWVudFR5cGU9PT1mLnR5cGUpe2MoYSxrLnNpYmxpbmcpO2Q9ZShrLGYudHlwZT09PWFjP2YucHJvcHMuY2hpbGRyZW46Zi5wcm9wcyxnKTtkLnJlZj1sZyhhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1jKGEsXG5rKTticmVha31lbHNlIGIoYSxrKTtrPWsuc2libGluZ31mLnR5cGU9PT1hYz8oZD1zZyhmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxnLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGc9cWcoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsZyksZy5yZWY9bGcoYSxkLGYpLGcucmV0dXJuPWEsYT1nKX1yZXR1cm4gaChhKTtjYXNlICRiOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKXtpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10sZyk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1jKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD1yZyhmLGEubW9kZSxnKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gaChhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFxuXCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmLGcpLGQucmV0dXJuPWEsYT1kKTooYyhhLGQpLGQ9cGcoZixhLm1vZGUsZyksZC5yZXR1cm49YSxhPWQpLGgoYSk7aWYoa2coZikpcmV0dXJuIHJiKGEsZCxmLGcpO2lmKG1jKGYpKXJldHVybiBCZShhLGQsZixnKTtsJiZtZyhhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZiYmIWspc3dpdGNoKGEudGFnKXtjYXNlIDE6Y2FzZSAwOnRocm93IGE9YS50eXBlLHQoRXJyb3IoMTUyKSxhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fFwiQ29tcG9uZW50XCIpO31yZXR1cm4gYyhhLGQpfX12YXIgdGc9bmcoITApLHVnPW5nKCExKSx2Zz17fSx3Zz17Y3VycmVudDp2Z30seGc9e2N1cnJlbnQ6dmd9LHlnPXtjdXJyZW50OnZnfTtmdW5jdGlvbiB6ZyhhKXtpZihhPT09dmcpdGhyb3cgdChFcnJvcigxNzQpKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIEFnKGEsYil7Sih5ZyxiLGEpO0ooeGcsYSxhKTtKKHdnLHZnLGEpO3ZhciBjPWIubm9kZVR5cGU7c3dpdGNoKGMpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOnRlKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDpjPTg9PT1jP2IucGFyZW50Tm9kZTpiLGI9Yy5uYW1lc3BhY2VVUkl8fG51bGwsYz1jLnRhZ05hbWUsYj10ZShiLGMpfUgod2csYSk7Sih3ZyxiLGEpfWZ1bmN0aW9uIEJnKGEpe0god2csYSk7SCh4ZyxhKTtIKHlnLGEpfWZ1bmN0aW9uIENnKGEpe3pnKHlnLmN1cnJlbnQpO3ZhciBiPXpnKHdnLmN1cnJlbnQpO3ZhciBjPXRlKGIsYS50eXBlKTtiIT09YyYmKEooeGcsYSxhKSxKKHdnLGMsYSkpfWZ1bmN0aW9uIERnKGEpe3hnLmN1cnJlbnQ9PT1hJiYoSCh3ZyxhKSxIKHhnLGEpKX12YXIgRWc9MSxGZz0xLEdnPTIsUD17Y3VycmVudDowfTtcbmZ1bmN0aW9uIEhnKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfVxudmFyIElnPTAsSmc9MixLZz00LExnPTgsTWc9MTYsTmc9MzIsT2c9NjQsUGc9MTI4LFFnPVhiLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsUmc9MCxTZz1udWxsLFE9bnVsbCxUZz1udWxsLFVnPW51bGwsUj1udWxsLFZnPW51bGwsV2c9MCxYZz1udWxsLFlnPTAsWmc9ITEsJGc9bnVsbCxhaD0wO2Z1bmN0aW9uIGJoKCl7dGhyb3cgdChFcnJvcigzMjEpKTt9ZnVuY3Rpb24gY2goYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighaGQoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIGRoKGEsYixjLGQsZSxmKXtSZz1mO1NnPWI7VGc9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGw7UWcuY3VycmVudD1udWxsPT09VGc/ZWg6Zmg7Yj1jKGQsZSk7aWYoWmcpe2RvIFpnPSExLGFoKz0xLFRnPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsLFZnPVVnLFhnPVI9UT1udWxsLFFnLmN1cnJlbnQ9ZmgsYj1jKGQsZSk7d2hpbGUoWmcpOyRnPW51bGw7YWg9MH1RZy5jdXJyZW50PWhoO2E9U2c7YS5tZW1vaXplZFN0YXRlPVVnO2EuZXhwaXJhdGlvblRpbWU9V2c7YS51cGRhdGVRdWV1ZT1YZzthLmVmZmVjdFRhZ3w9WWc7YT1udWxsIT09USYmbnVsbCE9PVEubmV4dDtSZz0wO1ZnPVI9VWc9VGc9UT1TZz1udWxsO1dnPTA7WGc9bnVsbDtZZz0wO2lmKGEpdGhyb3cgdChFcnJvcigzMDApKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGloKCl7UWcuY3VycmVudD1oaDtSZz0wO1ZnPVI9VWc9VGc9UT1TZz1udWxsO1dnPTA7WGc9bnVsbDtZZz0wO1pnPSExOyRnPW51bGw7YWg9MH1mdW5jdGlvbiBqaCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwscXVldWU6bnVsbCxiYXNlVXBkYXRlOm51bGwsbmV4dDpudWxsfTtudWxsPT09Uj9VZz1SPWE6Uj1SLm5leHQ9YTtyZXR1cm4gUn1mdW5jdGlvbiBraCgpe2lmKG51bGwhPT1WZylSPVZnLFZnPVIubmV4dCxRPVRnLFRnPW51bGwhPT1RP1EubmV4dDpudWxsO2Vsc2V7aWYobnVsbD09PVRnKXRocm93IHQoRXJyb3IoMzEwKSk7UT1UZzt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpRLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOlEuYmFzZVN0YXRlLHF1ZXVlOlEucXVldWUsYmFzZVVwZGF0ZTpRLmJhc2VVcGRhdGUsbmV4dDpudWxsfTtSPW51bGw9PT1SP1VnPWE6Ui5uZXh0PWE7VGc9US5uZXh0fXJldHVybiBSfVxuZnVuY3Rpb24gbGgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBtaChhKXt2YXIgYj1raCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyB0KEVycm9yKDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO2lmKDA8YWgpe3ZhciBkPWMuZGlzcGF0Y2g7aWYobnVsbCE9PSRnKXt2YXIgZT0kZy5nZXQoYyk7aWYodm9pZCAwIT09ZSl7JGcuZGVsZXRlKGMpO3ZhciBmPWIubWVtb2l6ZWRTdGF0ZTtkbyBmPWEoZixlLmFjdGlvbiksZT1lLm5leHQ7d2hpbGUobnVsbCE9PWUpO2hkKGYsYi5tZW1vaXplZFN0YXRlKXx8KExmPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtiLmJhc2VVcGRhdGU9PT1jLmxhc3QmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWY7cmV0dXJuW2YsZF19fXJldHVybltiLm1lbW9pemVkU3RhdGUsZF19ZD1jLmxhc3Q7dmFyIGg9Yi5iYXNlVXBkYXRlO2Y9Yi5iYXNlU3RhdGU7bnVsbCE9PWg/KG51bGwhPT1kJiYoZC5uZXh0PW51bGwpLGQ9aC5uZXh0KTpkPW51bGwhPT1kP2QubmV4dDpudWxsO2lmKG51bGwhPT1cbmQpe3ZhciBnPWU9bnVsbCxrPWQsbD0hMTtkb3t2YXIgbj1rLmV4cGlyYXRpb25UaW1lO248Umc/KGx8fChsPSEwLGc9aCxlPWYpLG4+V2cmJihXZz1uKSk6KFhmKG4say5zdXNwZW5zZUNvbmZpZyksZj1rLmVhZ2VyUmVkdWNlcj09PWE/ay5lYWdlclN0YXRlOmEoZixrLmFjdGlvbikpO2g9aztrPWsubmV4dH13aGlsZShudWxsIT09ayYmayE9PWQpO2x8fChnPWgsZT1mKTtoZChmLGIubWVtb2l6ZWRTdGF0ZSl8fChMZj0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7Yi5iYXNlVXBkYXRlPWc7Yi5iYXNlU3RhdGU9ZTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIG5oKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtudWxsPT09WGc/KFhnPXtsYXN0RWZmZWN0Om51bGx9LFhnLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihiPVhnLmxhc3RFZmZlY3QsbnVsbD09PWI/WGcubGFzdEVmZmVjdD1hLm5leHQ9YTooYz1iLm5leHQsYi5uZXh0PWEsYS5uZXh0PWMsWGcubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gb2goYSxiLGMsZCl7dmFyIGU9amgoKTtZZ3w9YTtlLm1lbW9pemVkU3RhdGU9bmgoYixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9XG5mdW5jdGlvbiBwaChhLGIsYyxkKXt2YXIgZT1raCgpO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGY9dm9pZCAwO2lmKG51bGwhPT1RKXt2YXIgaD1RLm1lbW9pemVkU3RhdGU7Zj1oLmRlc3Ryb3k7aWYobnVsbCE9PWQmJmNoKGQsaC5kZXBzKSl7bmgoSWcsYyxmLGQpO3JldHVybn19WWd8PWE7ZS5tZW1vaXplZFN0YXRlPW5oKGIsYyxmLGQpfWZ1bmN0aW9uIHFoKGEsYil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGE9YSgpLGIoYSksZnVuY3Rpb24oKXtiKG51bGwpfTtpZihudWxsIT09YiYmdm9pZCAwIT09YilyZXR1cm4gYT1hKCksYi5jdXJyZW50PWEsZnVuY3Rpb24oKXtiLmN1cnJlbnQ9bnVsbH19ZnVuY3Rpb24gcmgoKXt9XG5mdW5jdGlvbiBzaChhLGIsYyl7aWYoISgyNT5haCkpdGhyb3cgdChFcnJvcigzMDEpKTt2YXIgZD1hLmFsdGVybmF0ZTtpZihhPT09U2d8fG51bGwhPT1kJiZkPT09U2cpaWYoWmc9ITAsYT17ZXhwaXJhdGlvblRpbWU6Umcsc3VzcGVuc2VDb25maWc6bnVsbCxhY3Rpb246YyxlYWdlclJlZHVjZXI6bnVsbCxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfSxudWxsPT09JGcmJigkZz1uZXcgTWFwKSxjPSRnLmdldChiKSx2b2lkIDA9PT1jKSRnLnNldChiLGEpO2Vsc2V7Zm9yKGI9YztudWxsIT09Yi5uZXh0OyliPWIubmV4dDtiLm5leHQ9YX1lbHNle3ZhciBlPWNnKCksZj0kZi5zdXNwZW5zZTtlPWRnKGUsYSxmKTtmPXtleHBpcmF0aW9uVGltZTplLHN1c3BlbnNlQ29uZmlnOmYsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07dmFyIGg9Yi5sYXN0O2lmKG51bGw9PT1oKWYubmV4dD1mO2Vsc2V7dmFyIGc9aC5uZXh0O251bGwhPT1nJiZcbihmLm5leHQ9Zyk7aC5uZXh0PWZ9Yi5sYXN0PWY7aWYoMD09PWEuZXhwaXJhdGlvblRpbWUmJihudWxsPT09ZHx8MD09PWQuZXhwaXJhdGlvblRpbWUpJiYoZD1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWQpKXRyeXt2YXIgaz1iLmxhc3RSZW5kZXJlZFN0YXRlLGw9ZChrLGMpO2YuZWFnZXJSZWR1Y2VyPWQ7Zi5lYWdlclN0YXRlPWw7aWYoaGQobCxrKSlyZXR1cm59Y2F0Y2gobil7fWZpbmFsbHl7fWVnKGEsZSl9fVxudmFyIGhoPXtyZWFkQ29udGV4dDpNZix1c2VDYWxsYmFjazpiaCx1c2VDb250ZXh0OmJoLHVzZUVmZmVjdDpiaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmJoLHVzZUxheW91dEVmZmVjdDpiaCx1c2VNZW1vOmJoLHVzZVJlZHVjZXI6YmgsdXNlUmVmOmJoLHVzZVN0YXRlOmJoLHVzZURlYnVnVmFsdWU6YmgsdXNlUmVzcG9uZGVyOmJofSxlaD17cmVhZENvbnRleHQ6TWYsdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtqaCgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfSx1c2VDb250ZXh0Ok1mLHVzZUVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBvaCg1MTYsUGd8T2csYSxiKX0sdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIG9oKDQsS2d8TmcscWguYmluZChudWxsLGIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBvaCg0LFxuS2d8TmcsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPWpoKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWpoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e2xhc3Q6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9c2guYmluZChudWxsLFNnLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpmdW5jdGlvbihhKXt2YXIgYj1qaCgpO2E9e2N1cnJlbnQ6YX07cmV0dXJuIGIubWVtb2l6ZWRTdGF0ZT1hfSx1c2VTdGF0ZTpmdW5jdGlvbihhKXt2YXIgYj1qaCgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9Yi5xdWV1ZT1cbntsYXN0Om51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmxoLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2E9YS5kaXNwYXRjaD1zaC5iaW5kKG51bGwsU2csYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlRGVidWdWYWx1ZTpyaCx1c2VSZXNwb25kZXI6a2R9LGZoPXtyZWFkQ29udGV4dDpNZix1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe3ZhciBjPWtoKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZjaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDpNZix1c2VFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gcGgoNTE2LFBnfE9nLGEsYil9LHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBwaCg0LEtnfE5nLHFoLmJpbmQobnVsbCxcbmIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBwaCg0LEtnfE5nLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1raCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmY2goYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6bWgsdXNlUmVmOmZ1bmN0aW9uKCl7cmV0dXJuIGtoKCkubWVtb2l6ZWRTdGF0ZX0sdXNlU3RhdGU6ZnVuY3Rpb24oYSl7cmV0dXJuIG1oKGxoLGEpfSx1c2VEZWJ1Z1ZhbHVlOnJoLHVzZVJlc3BvbmRlcjprZH0sdGg9bnVsbCx1aD1udWxsLHZoPSExO1xuZnVuY3Rpb24gd2goYSxiKXt2YXIgYz14aCg1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yy5lZmZlY3RUYWc9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfWZ1bmN0aW9uIHloKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgMTM6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiB6aChhKXtpZih2aCl7dmFyIGI9dWg7aWYoYil7dmFyIGM9YjtpZigheWgoYSxiKSl7Yj1OZShjLm5leHRTaWJsaW5nKTtpZighYnx8IXloKGEsYikpe2EuZWZmZWN0VGFnfD0yO3ZoPSExO3RoPWE7cmV0dXJufXdoKHRoLGMpfXRoPWE7dWg9TmUoYi5maXJzdENoaWxkKX1lbHNlIGEuZWZmZWN0VGFnfD0yLHZoPSExLHRoPWF9fWZ1bmN0aW9uIEFoKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTghPT1hLnRhZzspYT1hLnJldHVybjt0aD1hfVxuZnVuY3Rpb24gQmgoYSl7aWYoYSE9PXRoKXJldHVybiExO2lmKCF2aClyZXR1cm4gQWgoYSksdmg9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFLZShiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9dWg7Yjspd2goYSxiKSxiPU5lKGIubmV4dFNpYmxpbmcpO0FoKGEpO3VoPXRoP05lKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfWZ1bmN0aW9uIENoKCl7dWg9dGg9bnVsbDt2aD0hMX12YXIgRGg9WGIuUmVhY3RDdXJyZW50T3duZXIsTGY9ITE7ZnVuY3Rpb24gUyhhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP3VnKGIsbnVsbCxjLGQpOnRnKGIsYS5jaGlsZCxjLGQpfVxuZnVuY3Rpb24gRWgoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO0tmKGIsZSk7ZD1kaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFMZilyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLEZoKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtTKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gR2goYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgaD1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGgmJiFIaChoKSYmdm9pZCAwPT09aC5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9aCxJaChhLGIsaCxkLGUsZik7YT1xZyhjLnR5cGUsbnVsbCxkLG51bGwsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1oPWEuY2hpbGQ7aWYoZTxmJiYoZT1oLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOmpkLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuIEZoKGEsYixmKTtiLmVmZmVjdFRhZ3w9MTthPW9nKGgsZCxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBJaChhLGIsYyxkLGUsZil7cmV0dXJuIG51bGwhPT1hJiZqZChhLm1lbW9pemVkUHJvcHMsZCkmJmEucmVmPT09Yi5yZWYmJihMZj0hMSxlPGYpP0ZoKGEsYixmKTpKaChhLGIsYyxkLGYpfWZ1bmN0aW9uIEtoKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZWZmZWN0VGFnfD0xMjh9ZnVuY3Rpb24gSmgoYSxiLGMsZCxlKXt2YXIgZj1OKGMpP1JlOkwuY3VycmVudDtmPVNlKGIsZik7S2YoYixlKTtjPWRoKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIUxmKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5lZmZlY3RUYWcmPS01MTcsYS5leHBpcmF0aW9uVGltZTw9ZSYmKGEuZXhwaXJhdGlvblRpbWU9MCksRmgoYSxiLGUpO2IuZWZmZWN0VGFnfD0xO1MoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBMaChhLGIsYyxkLGUpe2lmKE4oYykpe3ZhciBmPSEwO1hlKGIpfWVsc2UgZj0hMTtLZihiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksaGcoYixjLGQsZSksamcoYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgaD1iLnN0YXRlTm9kZSxnPWIubWVtb2l6ZWRQcm9wcztoLnByb3BzPWc7dmFyIGs9aC5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9TWYobCk6KGw9TihjKT9SZTpMLmN1cnJlbnQsbD1TZShiLGwpKTt2YXIgbj1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyx6PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBufHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTt6fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgaC5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgaC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoZyE9PWR8fGshPT1sKSYmaWcoYixoLGQsbCk7TmY9ITE7dmFyIHg9Yi5tZW1vaXplZFN0YXRlO2s9aC5zdGF0ZT14O3ZhciB2PWIudXBkYXRlUXVldWU7bnVsbCE9PXYmJihXZihiLHYsZCxoLGUpLGs9Yi5tZW1vaXplZFN0YXRlKTtnIT09ZHx8eCE9PWt8fE0uY3VycmVudHx8TmY/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuJiYoYmcoYixjLG4sZCksaz1iLm1lbW9pemVkU3RhdGUpLChnPU5mfHxnZyhiLGMsZyxkLHgsayxsKSk/KHp8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBoLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBoLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLmNvbXBvbmVudFdpbGxNb3VudCYmaC5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcbmguVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxoLnByb3BzPWQsaC5zdGF0ZT1rLGguY29udGV4dD1sLGQ9Zyk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGQ9ITEpfWVsc2UgaD1iLnN0YXRlTm9kZSxnPWIubWVtb2l6ZWRQcm9wcyxoLnByb3BzPWIudHlwZT09PWIuZWxlbWVudFR5cGU/ZzpBZihiLnR5cGUsZyksaz1oLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlLFwib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD1NZihsKToobD1OKGMpP1JlOkwuY3VycmVudCxsPVNlKGIsbCkpLG49Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsKHo9XG5cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgaC5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGguY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGchPT1kfHxrIT09bCkmJmlnKGIsaCxkLGwpLE5mPSExLGs9Yi5tZW1vaXplZFN0YXRlLHg9aC5zdGF0ZT1rLHY9Yi51cGRhdGVRdWV1ZSxudWxsIT09diYmKFdmKGIsdixkLGgsZSkseD1iLm1lbW9pemVkU3RhdGUpLGchPT1kfHxrIT09eHx8TS5jdXJyZW50fHxOZj8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG4mJihiZyhiLGMsbixkKSx4PWIubWVtb2l6ZWRTdGF0ZSksKG49TmZ8fGdnKGIsYyxnLGQsayx4LGwpKT8oenx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGguVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBoLmNvbXBvbmVudFdpbGxVcGRhdGV8fFxuKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLmNvbXBvbmVudFdpbGxVcGRhdGUmJmguY29tcG9uZW50V2lsbFVwZGF0ZShkLHgsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGguVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJmguVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCx4LGwpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5jb21wb25lbnREaWRVcGRhdGUmJihiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmVmZmVjdFRhZ3w9MjU2KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBoLmNvbXBvbmVudERpZFVwZGF0ZXx8Zz09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgaC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8Zz09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1cbmQsYi5tZW1vaXplZFN0YXRlPXgpLGgucHJvcHM9ZCxoLnN0YXRlPXgsaC5jb250ZXh0PWwsZD1uKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGguY29tcG9uZW50RGlkVXBkYXRlfHxnPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBoLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxnPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksZD0hMSk7cmV0dXJuIE1oKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIE1oKGEsYixjLGQsZSxmKXtLaChhLGIpO3ZhciBoPTAhPT0oYi5lZmZlY3RUYWcmNjQpO2lmKCFkJiYhaClyZXR1cm4gZSYmWWUoYixjLCExKSxGaChhLGIsZik7ZD1iLnN0YXRlTm9kZTtEaC5jdXJyZW50PWI7dmFyIGc9aCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmVmZmVjdFRhZ3w9MTtudWxsIT09YSYmaD8oYi5jaGlsZD10ZyhiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPXRnKGIsbnVsbCxnLGYpKTpTKGEsYixnLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJlllKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gTmgoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9WZShhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZWZShhLGIuY29udGV4dCwhMSk7QWcoYSxiLmNvbnRhaW5lckluZm8pfVxudmFyIE9oPXt9O1xuZnVuY3Rpb24gUGgoYSxiLGMpe3ZhciBkPWIubW9kZSxlPWIucGVuZGluZ1Byb3BzLGY9UC5jdXJyZW50LGg9bnVsbCxnPSExLGs7KGs9MCE9PShiLmVmZmVjdFRhZyY2NCkpfHwoaz0wIT09KGYmR2cpJiYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUpKTtrPyhoPU9oLGc9ITAsYi5lZmZlY3RUYWcmPS02NSk6bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGV8fHZvaWQgMD09PWUuZmFsbGJhY2t8fCEwPT09ZS51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8KGZ8PUZnKTtmJj1FZztKKFAsZixiKTtpZihudWxsPT09YSlpZihnKXtlPWUuZmFsbGJhY2s7YT1zZyhudWxsLGQsMCxudWxsKTthLnJldHVybj1iO2lmKDA9PT0oYi5tb2RlJjIpKWZvcihnPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGEuY2hpbGQ9ZztudWxsIT09ZzspZy5yZXR1cm49YSxnPWcuc2libGluZztjPXNnKGUsZCxjLG51bGwpO2MucmV0dXJuPWI7YS5zaWJsaW5nPVxuYztkPWF9ZWxzZSBkPWM9dWcoYixudWxsLGUuY2hpbGRyZW4sYyk7ZWxzZXtpZihudWxsIT09YS5tZW1vaXplZFN0YXRlKWlmKGY9YS5jaGlsZCxkPWYuc2libGluZyxnKXtlPWUuZmFsbGJhY2s7Yz1vZyhmLGYucGVuZGluZ1Byb3BzLDApO2MucmV0dXJuPWI7aWYoMD09PShiLm1vZGUmMikmJihnPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGchPT1mLmNoaWxkKSlmb3IoYy5jaGlsZD1nO251bGwhPT1nOylnLnJldHVybj1jLGc9Zy5zaWJsaW5nO2U9b2coZCxlLGQuZXhwaXJhdGlvblRpbWUpO2UucmV0dXJuPWI7Yy5zaWJsaW5nPWU7ZD1jO2MuY2hpbGRFeHBpcmF0aW9uVGltZT0wO2M9ZX1lbHNlIGQ9Yz10ZyhiLGYuY2hpbGQsZS5jaGlsZHJlbixjKTtlbHNlIGlmKGY9YS5jaGlsZCxnKXtnPWUuZmFsbGJhY2s7ZT1zZyhudWxsLGQsMCxudWxsKTtlLnJldHVybj1iO2UuY2hpbGQ9ZjtudWxsIT09ZiYmKGYucmV0dXJuPWUpO2lmKDA9PT0oYi5tb2RlJlxuMikpZm9yKGY9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZS5jaGlsZD1mO251bGwhPT1mOylmLnJldHVybj1lLGY9Zi5zaWJsaW5nO2M9c2coZyxkLGMsbnVsbCk7Yy5yZXR1cm49YjtlLnNpYmxpbmc9YztjLmVmZmVjdFRhZ3w9MjtkPWU7ZS5jaGlsZEV4cGlyYXRpb25UaW1lPTB9ZWxzZSBjPWQ9dGcoYixmLGUuY2hpbGRyZW4sYyk7Yi5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGV9Yi5tZW1vaXplZFN0YXRlPWg7Yi5jaGlsZD1kO3JldHVybiBjfWZ1bmN0aW9uIFFoKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFN0YXRlO251bGw9PT1mP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxsYXN0OmQsdGFpbDpjLHRhaWxFeHBpcmF0aW9uOjAsdGFpbE1vZGU6ZX06KGYuaXNCYWNrd2FyZHM9YixmLnJlbmRlcmluZz1udWxsLGYubGFzdD1kLGYudGFpbD1jLGYudGFpbEV4cGlyYXRpb249MCxmLnRhaWxNb2RlPWUpfVxuZnVuY3Rpb24gUmgoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtTKGEsYixkLmNoaWxkcmVuLGMpO2Q9UC5jdXJyZW50O2lmKDAhPT0oZCZHZykpZD1kJkVnfEdnLGIuZWZmZWN0VGFnfD02NDtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZWZmZWN0VGFnJjY0KSlhOmZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtpZigxMz09PWEudGFnKXtpZihudWxsIT09YS5tZW1vaXplZFN0YXRlKXthLmV4cGlyYXRpb25UaW1lPGMmJihhLmV4cGlyYXRpb25UaW1lPWMpO3ZhciBoPWEuYWx0ZXJuYXRlO251bGwhPT1oJiZoLmV4cGlyYXRpb25UaW1lPGMmJihoLmV4cGlyYXRpb25UaW1lPWMpO0pmKGEucmV0dXJuLGMpfX1lbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1cbmIpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9ZCY9RWd9SihQLGQsYik7aWYoMD09PShiLm1vZGUmMikpYi5tZW1vaXplZFN0YXRlPW51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWQ9Yy5hbHRlcm5hdGUsbnVsbCE9PWQmJm51bGw9PT1IZyhkKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO1FoKGIsITEsZSxjLGYpO2JyZWFrO2Nhc2UgXCJiYWNrd2FyZHNcIjpjPW51bGw7ZT1iLmNoaWxkO2ZvcihiLmNoaWxkPW51bGw7bnVsbCE9PWU7KXtkPWUuYWx0ZXJuYXRlO2lmKG51bGwhPT1kJiZudWxsPT09SGcoZCkpe2IuY2hpbGQ9ZTticmVha31kPWUuc2libGluZztlLnNpYmxpbmc9YztjPWU7ZT1kfVFoKGIsITAsYyxudWxsLGYpO2JyZWFrO2Nhc2UgXCJ0b2dldGhlclwiOlFoKGIsXG4hMSxudWxsLG51bGwsdm9pZCAwKTticmVhaztkZWZhdWx0OmIubWVtb2l6ZWRTdGF0ZT1udWxsfXJldHVybiBiLmNoaWxkfWZ1bmN0aW9uIEZoKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTtpZihiLmNoaWxkRXhwaXJhdGlvblRpbWU8YylyZXR1cm4gbnVsbDtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgdChFcnJvcigxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9b2coYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9b2coYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfWZ1bmN0aW9uIFNoKGEpe2EuZWZmZWN0VGFnfD00fVxudmFyIFRoPXZvaWQgMCxVaD12b2lkIDAsVmg9dm9pZCAwLFdoPXZvaWQgMDtUaD1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZigyMD09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUuaW5zdGFuY2UpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O1VoPWZ1bmN0aW9uKCl7fTtcblZoPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFByb3BzO2lmKGYhPT1kKXt2YXIgaD1iLnN0YXRlTm9kZTt6Zyh3Zy5jdXJyZW50KTthPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmY9QmMoaCxmKTtkPUJjKGgsZCk7YT1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6Zj1sZShoLGYpO2Q9bGUoaCxkKTthPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpmPW0oe30sZix7dmFsdWU6dm9pZCAwfSk7ZD1tKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2E9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Zj1uZShoLGYpO2Q9bmUoaCxkKTthPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGYub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGgub25jbGljaz1HZSl9RGUoYyxkKTtoPWM9dm9pZCAwO3ZhciBnPW51bGw7Zm9yKGMgaW4gZilpZighZC5oYXNPd25Qcm9wZXJ0eShjKSYmZi5oYXNPd25Qcm9wZXJ0eShjKSYmbnVsbCE9ZltjXSlpZihcInN0eWxlXCI9PT1cbmMpe3ZhciBrPWZbY107Zm9yKGggaW4gaylrLmhhc093blByb3BlcnR5KGgpJiYoZ3x8KGc9e30pLGdbaF09XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWMmJlwiY2hpbGRyZW5cIiE9PWMmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1jJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09YyYmXCJhdXRvRm9jdXNcIiE9PWMmJihpYS5oYXNPd25Qcm9wZXJ0eShjKT9hfHwoYT1bXSk6KGE9YXx8W10pLnB1c2goYyxudWxsKSk7Zm9yKGMgaW4gZCl7dmFyIGw9ZFtjXTtrPW51bGwhPWY/ZltjXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShjKSYmbCE9PWsmJihudWxsIT1sfHxudWxsIT1rKSlpZihcInN0eWxlXCI9PT1jKWlmKGspe2ZvcihoIGluIGspIWsuaGFzT3duUHJvcGVydHkoaCl8fGwmJmwuaGFzT3duUHJvcGVydHkoaCl8fChnfHwoZz17fSksZ1toXT1cIlwiKTtmb3IoaCBpbiBsKWwuaGFzT3duUHJvcGVydHkoaCkmJmtbaF0hPT1sW2hdJiYoZ3x8XG4oZz17fSksZ1toXT1sW2hdKX1lbHNlIGd8fChhfHwoYT1bXSksYS5wdXNoKGMsZykpLGc9bDtlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Yz8obD1sP2wuX19odG1sOnZvaWQgMCxrPWs/ay5fX2h0bWw6dm9pZCAwLG51bGwhPWwmJmshPT1sJiYoYT1hfHxbXSkucHVzaChjLFwiXCIrbCkpOlwiY2hpbGRyZW5cIj09PWM/az09PWx8fFwic3RyaW5nXCIhPT10eXBlb2YgbCYmXCJudW1iZXJcIiE9PXR5cGVvZiBsfHwoYT1hfHxbXSkucHVzaChjLFwiXCIrbCk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWMmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1jJiYoaWEuaGFzT3duUHJvcGVydHkoYyk/KG51bGwhPWwmJkZlKGUsYyksYXx8az09PWx8fChhPVtdKSk6KGE9YXx8W10pLnB1c2goYyxsKSl9ZyYmKGE9YXx8W10pLnB1c2goXCJzdHlsZVwiLGcpO2U9YTsoYi51cGRhdGVRdWV1ZT1lKSYmU2goYil9fTtXaD1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmU2goYil9O1xuZnVuY3Rpb24gJGgoYSxiKXtzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gYWkoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDE6TihhLnR5cGUpJiZUZShhKTt2YXIgYj1hLmVmZmVjdFRhZztyZXR1cm4gYiYyMDQ4PyhhLmVmZmVjdFRhZz1iJi0yMDQ5fDY0LGEpOm51bGw7Y2FzZSAzOkJnKGEpO1VlKGEpO2I9YS5lZmZlY3RUYWc7aWYoMCE9PShiJjY0KSl0aHJvdyB0KEVycm9yKDI4NSkpO2EuZWZmZWN0VGFnPWImLTIwNDl8NjQ7cmV0dXJuIGE7Y2FzZSA1OnJldHVybiBEZyhhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIEgoUCxhKSxiPWEuZWZmZWN0VGFnLGImMjA0OD8oYS5lZmZlY3RUYWc9YiYtMjA0OXw2NCxhKTpudWxsO2Nhc2UgMTg6cmV0dXJuIG51bGw7Y2FzZSAxOTpyZXR1cm4gSChQLGEpLG51bGw7Y2FzZSA0OnJldHVybiBCZyhhKSxudWxsO2Nhc2UgMTA6cmV0dXJuIElmKGEpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19ZnVuY3Rpb24gYmkoYSxiKXtyZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazpwYyhiKX19XG52YXIgY2k9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7ZnVuY3Rpb24gZGkoYSxiKXt2YXIgYz1iLnNvdXJjZSxkPWIuc3RhY2s7bnVsbD09PWQmJm51bGwhPT1jJiYoZD1wYyhjKSk7bnVsbCE9PWMmJm9jKGMudHlwZSk7Yj1iLnZhbHVlO251bGwhPT1hJiYxPT09YS50YWcmJm9jKGEudHlwZSk7dHJ5e2NvbnNvbGUuZXJyb3IoYil9Y2F0Y2goZSl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGU7fSl9fWZ1bmN0aW9uIGVpKGEsYil7dHJ5e2IucHJvcHM9YS5tZW1vaXplZFByb3BzLGIuc3RhdGU9YS5tZW1vaXplZFN0YXRlLGIuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChjKXtmaShhLGMpfX1mdW5jdGlvbiBnaShhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtmaShhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBoaShhLGIsYyl7Yz1jLnVwZGF0ZVF1ZXVlO2M9bnVsbCE9PWM/Yy5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWMpe3ZhciBkPWM9Yy5uZXh0O2Rve2lmKChkLnRhZyZhKSE9PUlnKXt2YXIgZT1kLmRlc3Ryb3k7ZC5kZXN0cm95PXZvaWQgMDt2b2lkIDAhPT1lJiZlKCl9KGQudGFnJmIpIT09SWcmJihlPWQuY3JlYXRlLGQuZGVzdHJveT1lKCkpO2Q9ZC5uZXh0fXdoaWxlKGQhPT1jKX19XG5mdW5jdGlvbiBpaShhLGIpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBqaSYmamkoYSk7c3dpdGNoKGEudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6dmFyIGM9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09YyYmKGM9Yy5sYXN0RWZmZWN0LG51bGwhPT1jKSl7dmFyIGQ9Yy5uZXh0O3ZmKDk3PGI/OTc6YixmdW5jdGlvbigpe3ZhciBiPWQ7ZG97dmFyIGM9Yi5kZXN0cm95O2lmKHZvaWQgMCE9PWMpe3ZhciBoPWE7dHJ5e2MoKX1jYXRjaChnKXtmaShoLGcpfX1iPWIubmV4dH13aGlsZShiIT09ZCl9KX1icmVhaztjYXNlIDE6Z2koYSk7Yj1hLnN0YXRlTm9kZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsVW5tb3VudCYmZWkoYSxiKTticmVhaztjYXNlIDU6Z2koYSk7YnJlYWs7Y2FzZSA0OmtpKGEsYil9fVxuZnVuY3Rpb24gbGkoYSxiKXtmb3IodmFyIGM9YTs7KWlmKGlpKGMsYiksbnVsbCE9PWMuY2hpbGQmJjQhPT1jLnRhZyljLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZDtlbHNle2lmKGM9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1hKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fWZ1bmN0aW9uIG1pKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gbmkoYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYobWkoYikpe3ZhciBjPWI7YnJlYWsgYX1iPWIucmV0dXJufXRocm93IHQoRXJyb3IoMTYwKSk7fWI9Yy5zdGF0ZU5vZGU7c3dpdGNoKGMudGFnKXtjYXNlIDU6dmFyIGQ9ITE7YnJlYWs7Y2FzZSAzOmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7ZGVmYXVsdDp0aHJvdyB0KEVycm9yKDE2MSkpO31jLmVmZmVjdFRhZyYxNiYmKHdlKGIsXCJcIiksYy5lZmZlY3RUYWcmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxtaShjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWcmJjE4IT09Yy50YWc7KXtpZihjLmVmZmVjdFRhZyYyKWNvbnRpbnVlIGI7XG5pZihudWxsPT09Yy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZH1pZighKGMuZWZmZWN0VGFnJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWZvcih2YXIgZT1hOzspe3ZhciBmPTU9PT1lLnRhZ3x8Nj09PWUudGFnO2lmKGZ8fDIwPT09ZS50YWcpe3ZhciBoPWY/ZS5zdGF0ZU5vZGU6ZS5zdGF0ZU5vZGUuaW5zdGFuY2U7aWYoYylpZihkKXtmPWI7dmFyIGc9aDtoPWM7OD09PWYubm9kZVR5cGU/Zi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShnLGgpOmYuaW5zZXJ0QmVmb3JlKGcsaCl9ZWxzZSBiLmluc2VydEJlZm9yZShoLGMpO2Vsc2UgZD8oZz1iLDg9PT1nLm5vZGVUeXBlPyhmPWcucGFyZW50Tm9kZSxmLmluc2VydEJlZm9yZShoLGcpKTooZj1nLGYuYXBwZW5kQ2hpbGQoaCkpLGc9Zy5fcmVhY3RSb290Q29udGFpbmVyLG51bGwhPT1nJiZ2b2lkIDAhPT1nfHxudWxsIT09Zi5vbmNsaWNrfHwoZi5vbmNsaWNrPUdlKSk6XG5iLmFwcGVuZENoaWxkKGgpfWVsc2UgaWYoNCE9PWUudGFnJiZudWxsIT09ZS5jaGlsZCl7ZS5jaGlsZC5yZXR1cm49ZTtlPWUuY2hpbGQ7Y29udGludWV9aWYoZT09PWEpYnJlYWs7Zm9yKDtudWxsPT09ZS5zaWJsaW5nOyl7aWYobnVsbD09PWUucmV0dXJufHxlLnJldHVybj09PWEpcmV0dXJuO2U9ZS5yZXR1cm59ZS5zaWJsaW5nLnJldHVybj1lLnJldHVybjtlPWUuc2libGluZ319XG5mdW5jdGlvbiBraShhLGIpe2Zvcih2YXIgYz1hLGQ9ITEsZT12b2lkIDAsZj12b2lkIDA7Oyl7aWYoIWQpe2Q9Yy5yZXR1cm47YTpmb3IoOzspe2lmKG51bGw9PT1kKXRocm93IHQoRXJyb3IoMTYwKSk7ZT1kLnN0YXRlTm9kZTtzd2l0Y2goZC50YWcpe2Nhc2UgNTpmPSExO2JyZWFrIGE7Y2FzZSAzOmU9ZS5jb250YWluZXJJbmZvO2Y9ITA7YnJlYWsgYTtjYXNlIDQ6ZT1lLmNvbnRhaW5lckluZm87Zj0hMDticmVhayBhfWQ9ZC5yZXR1cm59ZD0hMH1pZig1PT09Yy50YWd8fDY9PT1jLnRhZylpZihsaShjLGIpLGYpe3ZhciBoPWUsZz1jLnN0YXRlTm9kZTs4PT09aC5ub2RlVHlwZT9oLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZyk6aC5yZW1vdmVDaGlsZChnKX1lbHNlIGUucmVtb3ZlQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoMjA9PT1jLnRhZylnPWMuc3RhdGVOb2RlLmluc3RhbmNlLGxpKGMsYiksZj8oaD1lLDg9PT1oLm5vZGVUeXBlP2gucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChnKTpcbmgucmVtb3ZlQ2hpbGQoZykpOmUucmVtb3ZlQ2hpbGQoZyk7ZWxzZSBpZig0PT09Yy50YWcpe2lmKG51bGwhPT1jLmNoaWxkKXtlPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87Zj0hMDtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX19ZWxzZSBpZihpaShjLGIpLG51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YSlicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YSlyZXR1cm47Yz1jLnJldHVybjs0PT09Yy50YWcmJihkPSExKX1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX1cbmZ1bmN0aW9uIG9pKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6aGkoS2csTGcsYik7YnJlYWs7Y2FzZSAxOmJyZWFrO2Nhc2UgNTp2YXIgYz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXt2YXIgZD1iLm1lbW9pemVkUHJvcHMsZT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDthPWIudHlwZTt2YXIgZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09Zil7Y1tHYV09ZDtcImlucHV0XCI9PT1hJiZcInJhZGlvXCI9PT1kLnR5cGUmJm51bGwhPWQubmFtZSYmRGMoYyxkKTtFZShhLGUpO2I9RWUoYSxkKTtmb3IoZT0wO2U8Zi5sZW5ndGg7ZSs9Mil7dmFyIGg9ZltlXSxnPWZbZSsxXTtcInN0eWxlXCI9PT1oP0FlKGMsZyk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09aD92ZShjLGcpOlwiY2hpbGRyZW5cIj09PWg/d2UoYyxnKTp6YyhjLGgsZyxiKX1zd2l0Y2goYSl7Y2FzZSBcImlucHV0XCI6RWMoYyxkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpwZShjLFxuZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWQubXVsdGlwbGUsYT1kLnZhbHVlLG51bGwhPWE/bWUoYywhIWQubXVsdGlwbGUsYSwhMSk6YiE9PSEhZC5tdWx0aXBsZSYmKG51bGwhPWQuZGVmYXVsdFZhbHVlP21lKGMsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTptZShjLCEhZC5tdWx0aXBsZSxkLm11bHRpcGxlP1tdOlwiXCIsITEpKX19fWJyZWFrO2Nhc2UgNjppZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgdChFcnJvcigxNjIpKTtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yi5tZW1vaXplZFByb3BzO2JyZWFrO2Nhc2UgMzpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6Yz1iO251bGw9PT1iLm1lbW9pemVkU3RhdGU/ZD0hMTooZD0hMCxjPWIuY2hpbGQscGk9c2YoKSk7aWYobnVsbCE9PWMpYTpmb3IoYT1jOzspe2lmKDU9PT1hLnRhZylmPWEuc3RhdGVOb2RlLGQ/KGY9XG5mLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLnNldFByb3BlcnR5P2Yuc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6Zi5kaXNwbGF5PVwibm9uZVwiKTooZj1hLnN0YXRlTm9kZSxlPWEubWVtb2l6ZWRQcm9wcy5zdHlsZSxlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbCxmLnN0eWxlLmRpc3BsYXk9emUoXCJkaXNwbGF5XCIsZSkpO2Vsc2UgaWYoNj09PWEudGFnKWEuc3RhdGVOb2RlLm5vZGVWYWx1ZT1kP1wiXCI6YS5tZW1vaXplZFByb3BzO2Vsc2UgaWYoMTM9PT1hLnRhZyYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSl7Zj1hLmNoaWxkLnNpYmxpbmc7Zi5yZXR1cm49YTthPWY7Y29udGludWV9ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWMpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09XG5hLnJldHVybnx8YS5yZXR1cm49PT1jKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfXFpKGIpO2JyZWFrO2Nhc2UgMTk6cWkoYik7YnJlYWs7Y2FzZSAxNzpicmVhaztjYXNlIDIwOmJyZWFrO2RlZmF1bHQ6dGhyb3cgdChFcnJvcigxNjMpKTt9fWZ1bmN0aW9uIHFpKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IGNpKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9cmkuYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19dmFyIHNpPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO1xuZnVuY3Rpb24gdGkoYSxiLGMpe2M9UWYoYyxudWxsKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXt1aXx8KHVpPSEwLHZpPWQpO2RpKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gd2koYSxiLGMpe2M9UWYoYyxudWxsKTtjLnRhZz0zO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7ZGkoYSxiKTtyZXR1cm4gZChlKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PXhpP3hpPW5ldyBTZXQoW3RoaXNdKTp4aS5hZGQodGhpcyksZGkoYSxiKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9XG52YXIgeWk9TWF0aC5jZWlsLHppPVhiLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsQWk9WGIuUmVhY3RDdXJyZW50T3duZXIsVD0wLEJpPTgsQ2k9MTYsRGk9MzIsRWk9MCxGaT0xLEdpPTIsSGk9MyxJaT00LFU9VCxKaT1udWxsLFY9bnVsbCxXPTAsWD1FaSxLaT0xMDczNzQxODIzLExpPTEwNzM3NDE4MjMsTWk9bnVsbCxOaT0hMSxwaT0wLE9pPTUwMCxZPW51bGwsdWk9ITEsdmk9bnVsbCx4aT1udWxsLFBpPSExLFFpPW51bGwsUmk9OTAsU2k9MCxUaT1udWxsLFVpPTAsVmk9bnVsbCxXaT0wO2Z1bmN0aW9uIGNnKCl7cmV0dXJuKFUmKENpfERpKSkhPT1UPzEwNzM3NDE4MjEtKHNmKCkvMTB8MCk6MCE9PVdpP1dpOldpPTEwNzM3NDE4MjEtKHNmKCkvMTB8MCl9XG5mdW5jdGlvbiBkZyhhLGIsYyl7Yj1iLm1vZGU7aWYoMD09PShiJjIpKXJldHVybiAxMDczNzQxODIzO3ZhciBkPXRmKCk7aWYoMD09PShiJjQpKXJldHVybiA5OT09PWQ/MTA3Mzc0MTgyMzoxMDczNzQxODIyO2lmKChVJkNpKSE9PVQpcmV0dXJuIFc7aWYobnVsbCE9PWMpYT0xMDczNzQxODIxLTI1KigoKDEwNzM3NDE4MjEtYSsoYy50aW1lb3V0TXN8MHx8NUUzKS8xMCkvMjV8MCkrMSk7ZWxzZSBzd2l0Y2goZCl7Y2FzZSA5OTphPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA5ODphPTEwNzM3NDE4MjEtMTAqKCgoMTA3Mzc0MTgyMS1hKzE1KS8xMHwwKSsxKTticmVhaztjYXNlIDk3OmNhc2UgOTY6YT0xMDczNzQxODIxLTI1KigoKDEwNzM3NDE4MjEtYSs1MDApLzI1fDApKzEpO2JyZWFrO2Nhc2UgOTU6YT0xO2JyZWFrO2RlZmF1bHQ6dGhyb3cgdChFcnJvcigzMjYpKTt9bnVsbCE9PUppJiZhPT09VyYmLS1hO3JldHVybiBhfXZhciBYaT0wO1xuZnVuY3Rpb24gZWcoYSxiKXtpZig1MDxVaSl0aHJvdyBVaT0wLFZpPW51bGwsdChFcnJvcigxODUpKTthPVlpKGEsYik7aWYobnVsbCE9PWEpe2EucGluZ1RpbWU9MDt2YXIgYz10ZigpO2lmKDEwNzM3NDE4MjM9PT1iKWlmKChVJkJpKSE9PVQmJihVJihDaXxEaSkpPT09VClmb3IodmFyIGQ9WihhLDEwNzM3NDE4MjMsITApO251bGwhPT1kOylkPWQoITApO2Vsc2UgWmkoYSw5OSwxMDczNzQxODIzKSxVPT09VCYmTygpO2Vsc2UgWmkoYSxjLGIpOyhVJjQpPT09VHx8OTghPT1jJiY5OSE9PWN8fChudWxsPT09VGk/VGk9bmV3IE1hcChbW2EsYl1dKTooYz1UaS5nZXQoYSksKHZvaWQgMD09PWN8fGM+YikmJlRpLnNldChhLGIpKSl9fVxuZnVuY3Rpb24gWWkoYSxiKXthLmV4cGlyYXRpb25UaW1lPGImJihhLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZjLmV4cGlyYXRpb25UaW1lPGImJihjLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBkPWEucmV0dXJuLGU9bnVsbDtpZihudWxsPT09ZCYmMz09PWEudGFnKWU9YS5zdGF0ZU5vZGU7ZWxzZSBmb3IoO251bGwhPT1kOyl7Yz1kLmFsdGVybmF0ZTtkLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGQuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihjLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7aWYobnVsbD09PWQucmV0dXJuJiYzPT09ZC50YWcpe2U9ZC5zdGF0ZU5vZGU7YnJlYWt9ZD1kLnJldHVybn1udWxsIT09ZSYmKGI+ZS5maXJzdFBlbmRpbmdUaW1lJiYoZS5maXJzdFBlbmRpbmdUaW1lPWIpLGE9ZS5sYXN0UGVuZGluZ1RpbWUsMD09PWF8fGI8YSkmJihlLmxhc3RQZW5kaW5nVGltZT1cbmIpO3JldHVybiBlfWZ1bmN0aW9uIFppKGEsYixjKXtpZihhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU8Yyl7dmFyIGQ9YS5jYWxsYmFja05vZGU7bnVsbCE9PWQmJmQhPT1tZiYmYWYoZCk7YS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPWM7MTA3Mzc0MTgyMz09PWM/YS5jYWxsYmFja05vZGU9eGYoJGkuYmluZChudWxsLGEsWi5iaW5kKG51bGwsYSxjKSkpOihkPW51bGwsMSE9PWMmJihkPXt0aW1lb3V0OjEwKigxMDczNzQxODIxLWMpLXNmKCl9KSxhLmNhbGxiYWNrTm9kZT13ZihiLCRpLmJpbmQobnVsbCxhLFouYmluZChudWxsLGEsYykpLGQpKX19ZnVuY3Rpb24gJGkoYSxiLGMpe3ZhciBkPWEuY2FsbGJhY2tOb2RlLGU9bnVsbDt0cnl7cmV0dXJuIGU9YihjKSxudWxsIT09ZT8kaS5iaW5kKG51bGwsYSxlKTpudWxsfWZpbmFsbHl7bnVsbD09PWUmJmQ9PT1hLmNhbGxiYWNrTm9kZSYmKGEuY2FsbGJhY2tOb2RlPW51bGwsYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTApfX1cbmZ1bmN0aW9uIGFqKCl7KFUmKDF8Q2l8RGkpKT09PVQmJihiaigpLGNqKCkpfWZ1bmN0aW9uIGRqKGEsYil7dmFyIGM9YS5maXJzdEJhdGNoO3JldHVybiBudWxsIT09YyYmYy5fZGVmZXImJmMuX2V4cGlyYXRpb25UaW1lPj1iPyh3Zig5NyxmdW5jdGlvbigpe2MuX29uQ29tcGxldGUoKTtyZXR1cm4gbnVsbH0pLCEwKTohMX1mdW5jdGlvbiBiaigpe2lmKG51bGwhPT1UaSl7dmFyIGE9VGk7VGk9bnVsbDthLmZvckVhY2goZnVuY3Rpb24oYSxjKXt4ZihaLmJpbmQobnVsbCxjLGEpKX0pO08oKX19ZnVuY3Rpb24gZWooYSxiKXt2YXIgYz1VO1V8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7VT1jLFU9PT1UJiZPKCl9fWZ1bmN0aW9uIGZqKGEsYixjLGQpe3ZhciBlPVU7VXw9NDt0cnl7cmV0dXJuIHZmKDk4LGEuYmluZChudWxsLGIsYyxkKSl9ZmluYWxseXtVPWUsVT09PVQmJk8oKX19XG5mdW5jdGlvbiBnaihhLGIpe3ZhciBjPVU7VSY9LTI7VXw9Qmk7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7VT1jLFU9PT1UJiZPKCl9fVxuZnVuY3Rpb24gaGooYSxiKXthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO3ZhciBjPWEudGltZW91dEhhbmRsZTstMSE9PWMmJihhLnRpbWVvdXRIYW5kbGU9LTEsTWUoYykpO2lmKG51bGwhPT1WKWZvcihjPVYucmV0dXJuO251bGwhPT1jOyl7dmFyIGQ9Yztzd2l0Y2goZC50YWcpe2Nhc2UgMTp2YXIgZT1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWUmJnZvaWQgMCE9PWUmJlRlKGQpO2JyZWFrO2Nhc2UgMzpCZyhkKTtVZShkKTticmVhaztjYXNlIDU6RGcoZCk7YnJlYWs7Y2FzZSA0OkJnKGQpO2JyZWFrO2Nhc2UgMTM6SChQLGQpO2JyZWFrO2Nhc2UgMTk6SChQLGQpO2JyZWFrO2Nhc2UgMTA6SWYoZCl9Yz1jLnJldHVybn1KaT1hO1Y9b2coYS5jdXJyZW50LG51bGwsYik7Vz1iO1g9RWk7TGk9S2k9MTA3Mzc0MTgyMztNaT1udWxsO05pPSExfVxuZnVuY3Rpb24gWihhLGIsYyl7aWYoKFUmKENpfERpKSkhPT1UKXRocm93IHQoRXJyb3IoMzI3KSk7aWYoYS5maXJzdFBlbmRpbmdUaW1lPGIpcmV0dXJuIG51bGw7aWYoYyYmYS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPT09YilyZXR1cm4gaWouYmluZChudWxsLGEpO2NqKCk7aWYoYSE9PUppfHxiIT09VyloaihhLGIpO2Vsc2UgaWYoWD09PUhpKWlmKE5pKWhqKGEsYik7ZWxzZXt2YXIgZD1hLmxhc3RQZW5kaW5nVGltZTtpZihkPGIpcmV0dXJuIFouYmluZChudWxsLGEsZCl9aWYobnVsbCE9PVYpe2Q9VTtVfD1DaTt2YXIgZT16aS5jdXJyZW50O251bGw9PT1lJiYoZT1oaCk7emkuY3VycmVudD1oaDtpZihjKXtpZigxMDczNzQxODIzIT09Yil7dmFyIGY9Y2coKTtpZihmPGIpcmV0dXJuIFU9ZCxHZigpLHppLmN1cnJlbnQ9ZSxaLmJpbmQobnVsbCxhLGYpfX1lbHNlIFdpPTA7ZG8gdHJ5e2lmKGMpZm9yKDtudWxsIT09VjspVj1qaihWKTtlbHNlIGZvcig7bnVsbCE9PVYmJiFiZigpOylWPVxuamooVik7YnJlYWt9Y2F0Y2gocmIpe0dmKCk7aWgoKTtmPVY7aWYobnVsbD09PWZ8fG51bGw9PT1mLnJldHVybil0aHJvdyBoaihhLGIpLFU9ZCxyYjthOnt2YXIgaD1hLGc9Zi5yZXR1cm4saz1mLGw9cmIsbj1XO2suZWZmZWN0VGFnfD0xMDI0O2suZmlyc3RFZmZlY3Q9ay5sYXN0RWZmZWN0PW51bGw7aWYobnVsbCE9PWwmJlwib2JqZWN0XCI9PT10eXBlb2YgbCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGwudGhlbil7dmFyIHo9bCx4PTAhPT0oUC5jdXJyZW50JkZnKTtsPWc7ZG97dmFyIHY7aWYodj0xMz09PWwudGFnKW51bGwhPT1sLm1lbW9pemVkU3RhdGU/dj0hMToodj1sLm1lbW9pemVkUHJvcHMsdj12b2lkIDA9PT12LmZhbGxiYWNrPyExOiEwIT09di51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjaz8hMDp4PyExOiEwKTtpZih2KXtnPWwudXBkYXRlUXVldWU7bnVsbD09PWc/KGc9bmV3IFNldCxnLmFkZCh6KSxsLnVwZGF0ZVF1ZXVlPWcpOmcuYWRkKHopO2lmKDA9PT0obC5tb2RlJlxuMikpe2wuZWZmZWN0VGFnfD02NDtrLmVmZmVjdFRhZyY9LTE5NTc7MT09PWsudGFnJiYobnVsbD09PWsuYWx0ZXJuYXRlP2sudGFnPTE3OihuPVFmKDEwNzM3NDE4MjMsbnVsbCksbi50YWc9MixTZihrLG4pKSk7ay5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO2JyZWFrIGF9az1oO2g9bjt4PWsucGluZ0NhY2hlO251bGw9PT14Pyh4PWsucGluZ0NhY2hlPW5ldyBzaSxnPW5ldyBTZXQseC5zZXQoeixnKSk6KGc9eC5nZXQoeiksdm9pZCAwPT09ZyYmKGc9bmV3IFNldCx4LnNldCh6LGcpKSk7Zy5oYXMoaCl8fChnLmFkZChoKSxrPWtqLmJpbmQobnVsbCxrLHosaCksei50aGVuKGssaykpO2wuZWZmZWN0VGFnfD0yMDQ4O2wuZXhwaXJhdGlvblRpbWU9bjticmVhayBhfWw9bC5yZXR1cm59d2hpbGUobnVsbCE9PWwpO2w9RXJyb3IoKG9jKGsudHlwZSl8fFwiQSBSZWFjdCBjb21wb25lbnRcIikrXCIgc3VzcGVuZGVkIHdoaWxlIHJlbmRlcmluZywgYnV0IG5vIGZhbGxiYWNrIFVJIHdhcyBzcGVjaWZpZWQuXFxuXFxuQWRkIGEgPFN1c3BlbnNlIGZhbGxiYWNrPS4uLj4gY29tcG9uZW50IGhpZ2hlciBpbiB0aGUgdHJlZSB0byBwcm92aWRlIGEgbG9hZGluZyBpbmRpY2F0b3Igb3IgcGxhY2Vob2xkZXIgdG8gZGlzcGxheS5cIitcbnBjKGspKX1YIT09SWkmJihYPUZpKTtsPWJpKGwsayk7az1nO2Rve3N3aXRjaChrLnRhZyl7Y2FzZSAzOmsuZWZmZWN0VGFnfD0yMDQ4O2suZXhwaXJhdGlvblRpbWU9bjtuPXRpKGssbCxuKTtUZihrLG4pO2JyZWFrIGE7Y2FzZSAxOmlmKHo9bCxoPWsudHlwZSxnPWsuc3RhdGVOb2RlLDA9PT0oay5lZmZlY3RUYWcmNjQpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGguZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09ZyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09eGl8fCF4aS5oYXMoZykpKSl7ay5lZmZlY3RUYWd8PTIwNDg7ay5leHBpcmF0aW9uVGltZT1uO249d2koayx6LG4pO1RmKGssbik7YnJlYWsgYX19az1rLnJldHVybn13aGlsZShudWxsIT09ayl9Vj1saihmKX13aGlsZSgxKTtVPWQ7R2YoKTt6aS5jdXJyZW50PWU7aWYobnVsbCE9PVYpcmV0dXJuIFouYmluZChudWxsLGEsYil9YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZTtcbmEuZmluaXNoZWRFeHBpcmF0aW9uVGltZT1iO2lmKGRqKGEsYikpcmV0dXJuIG51bGw7Smk9bnVsbDtzd2l0Y2goWCl7Y2FzZSBFaTp0aHJvdyB0KEVycm9yKDMyOCkpO2Nhc2UgRmk6cmV0dXJuIGQ9YS5sYXN0UGVuZGluZ1RpbWUsZDxiP1ouYmluZChudWxsLGEsZCk6Yz9pai5iaW5kKG51bGwsYSk6KGhqKGEsYikseGYoWi5iaW5kKG51bGwsYSxiKSksbnVsbCk7Y2FzZSBHaTppZigxMDczNzQxODIzPT09S2kmJiFjJiYoYz1waStPaS1zZigpLDEwPGMpKXtpZihOaSlyZXR1cm4gaGooYSxiKSxaLmJpbmQobnVsbCxhLGIpO2Q9YS5sYXN0UGVuZGluZ1RpbWU7aWYoZDxiKXJldHVybiBaLmJpbmQobnVsbCxhLGQpO2EudGltZW91dEhhbmRsZT1MZShpai5iaW5kKG51bGwsYSksYyk7cmV0dXJuIG51bGx9cmV0dXJuIGlqLmJpbmQobnVsbCxhKTtjYXNlIEhpOmlmKCFjKXtpZihOaSlyZXR1cm4gaGooYSxiKSxaLmJpbmQobnVsbCxhLGIpO2M9YS5sYXN0UGVuZGluZ1RpbWU7aWYoYzxiKXJldHVybiBaLmJpbmQobnVsbCxcbmEsYyk7MTA3Mzc0MTgyMyE9PUxpP2M9MTAqKDEwNzM3NDE4MjEtTGkpLXNmKCk6MTA3Mzc0MTgyMz09PUtpP2M9MDooYz0xMCooMTA3Mzc0MTgyMS1LaSktNUUzLGQ9c2YoKSxiPTEwKigxMDczNzQxODIxLWIpLWQsYz1kLWMsMD5jJiYoYz0wKSxjPSgxMjA+Yz8xMjA6NDgwPmM/NDgwOjEwODA+Yz8xMDgwOjE5MjA+Yz8xOTIwOjNFMz5jPzNFMzo0MzIwPmM/NDMyMDoxOTYwKnlpKGMvMTk2MCkpLWMsYjxjJiYoYz1iKSk7aWYoMTA8YylyZXR1cm4gYS50aW1lb3V0SGFuZGxlPUxlKGlqLmJpbmQobnVsbCxhKSxjKSxudWxsfXJldHVybiBpai5iaW5kKG51bGwsYSk7Y2FzZSBJaTpyZXR1cm4hYyYmMTA3Mzc0MTgyMyE9PUtpJiZudWxsIT09TWkmJihkPUtpLGU9TWksYj1lLmJ1c3lNaW5EdXJhdGlvbk1zfDAsMD49Yj9iPTA6KGM9ZS5idXN5RGVsYXlNc3wwLGQ9c2YoKS0oMTAqKDEwNzM3NDE4MjEtZCktKGUudGltZW91dE1zfDB8fDVFMykpLGI9ZDw9Yz8wOmMrYi1kKSwxMDxiKT8oYS50aW1lb3V0SGFuZGxlPVxuTGUoaWouYmluZChudWxsLGEpLGIpLG51bGwpOmlqLmJpbmQobnVsbCxhKTtkZWZhdWx0OnRocm93IHQoRXJyb3IoMzI5KSk7fX1mdW5jdGlvbiBYZihhLGIpe2E8S2kmJjE8YSYmKEtpPWEpO251bGwhPT1iJiZhPExpJiYxPGEmJihMaT1hLE1pPWIpfWZ1bmN0aW9uIGpqKGEpe3ZhciBiPW1qKGEuYWx0ZXJuYXRlLGEsVyk7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iJiYoYj1saihhKSk7QWkuY3VycmVudD1udWxsO3JldHVybiBifVxuZnVuY3Rpb24gbGooYSl7Vj1hO2Rve3ZhciBiPVYuYWx0ZXJuYXRlO2E9Vi5yZXR1cm47aWYoMD09PShWLmVmZmVjdFRhZyYxMDI0KSl7YTp7dmFyIGM9YjtiPVY7dmFyIGQ9VyxlPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmJyZWFrO2Nhc2UgMTY6YnJlYWs7Y2FzZSAxNTpjYXNlIDA6YnJlYWs7Y2FzZSAxOk4oYi50eXBlKSYmVGUoYik7YnJlYWs7Y2FzZSAzOkJnKGIpO1VlKGIpO2Q9Yi5zdGF0ZU5vZGU7ZC5wZW5kaW5nQ29udGV4dCYmKGQuY29udGV4dD1kLnBlbmRpbmdDb250ZXh0LGQucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWN8fG51bGw9PT1jLmNoaWxkKUJoKGIpLGIuZWZmZWN0VGFnJj0tMztVaChiKTticmVhaztjYXNlIDU6RGcoYik7ZD16Zyh5Zy5jdXJyZW50KTt2YXIgZj1iLnR5cGU7aWYobnVsbCE9PWMmJm51bGwhPWIuc3RhdGVOb2RlKVZoKGMsYixmLGUsZCksYy5yZWYhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpO2Vsc2UgaWYoZSl7dmFyIGg9XG56Zyh3Zy5jdXJyZW50KTtpZihCaChiKSl7Yz1iO2U9dm9pZCAwO2Y9Yy5zdGF0ZU5vZGU7dmFyIGc9Yy50eXBlLGs9Yy5tZW1vaXplZFByb3BzO2ZbRmFdPWM7ZltHYV09aztzd2l0Y2goZyl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpHKFwibG9hZFwiLGYpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcih2YXIgbD0wO2w8YmIubGVuZ3RoO2wrKylHKGJiW2xdLGYpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixmKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixmKTtHKFwibG9hZFwiLGYpO2JyZWFrO2Nhc2UgXCJmb3JtXCI6RyhcInJlc2V0XCIsZik7RyhcInN1Ym1pdFwiLGYpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RyhcInRvZ2dsZVwiLGYpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOkNjKGYsayk7RyhcImludmFsaWRcIixmKTtGZShkLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmYuX3dyYXBwZXJTdGF0ZT1cbnt3YXNNdWx0aXBsZTohIWsubXVsdGlwbGV9O0coXCJpbnZhbGlkXCIsZik7RmUoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOm9lKGYsayksRyhcImludmFsaWRcIixmKSxGZShkLFwib25DaGFuZ2VcIil9RGUoZyxrKTtsPW51bGw7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiYoaD1rW2VdLFwiY2hpbGRyZW5cIj09PWU/XCJzdHJpbmdcIj09PXR5cGVvZiBoP2YudGV4dENvbnRlbnQhPT1oJiYobD1bXCJjaGlsZHJlblwiLGhdKTpcIm51bWJlclwiPT09dHlwZW9mIGgmJmYudGV4dENvbnRlbnQhPT1cIlwiK2gmJihsPVtcImNoaWxkcmVuXCIsXCJcIitoXSk6aWEuaGFzT3duUHJvcGVydHkoZSkmJm51bGwhPWgmJkZlKGQsZSkpO3N3aXRjaChnKXtjYXNlIFwiaW5wdXRcIjpWYihmKTtHYyhmLGssITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZiKGYpO3FlKGYsayk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrLm9uQ2xpY2smJlxuKGYub25jbGljaz1HZSl9ZD1sO2MudXBkYXRlUXVldWU9ZDtudWxsIT09ZCYmU2goYil9ZWxzZXtrPWY7Yz1lO2c9YjtsPTk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50O2g9PT1yZS5odG1sJiYoaD1zZShrKSk7aD09PXJlLmh0bWw/XCJzY3JpcHRcIj09PWs/KGs9bC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGsuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsbD1rLnJlbW92ZUNoaWxkKGsuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2YgYy5pcz9sPWwuY3JlYXRlRWxlbWVudChrLHtpczpjLmlzfSk6KGw9bC5jcmVhdGVFbGVtZW50KGspLFwic2VsZWN0XCI9PT1rJiYoaz1sLGMubXVsdGlwbGU/ay5tdWx0aXBsZT0hMDpjLnNpemUmJihrLnNpemU9Yy5zaXplKSkpOmw9bC5jcmVhdGVFbGVtZW50TlMoaCxrKTtrPWw7a1tGYV09ZztrW0dhXT1jO2M9aztUaChjLGIsITEsITEpO2c9Yzt2YXIgbj1kLHo9RWUoZixlKTtzd2l0Y2goZil7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpHKFwibG9hZFwiLFxuZyk7ZD1lO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihkPTA7ZDxiYi5sZW5ndGg7ZCsrKUcoYmJbZF0sZyk7ZD1lO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixnKTtkPWU7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RyhcImVycm9yXCIsZyk7RyhcImxvYWRcIixnKTtkPWU7YnJlYWs7Y2FzZSBcImZvcm1cIjpHKFwicmVzZXRcIixnKTtHKFwic3VibWl0XCIsZyk7ZD1lO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RyhcInRvZ2dsZVwiLGcpO2Q9ZTticmVhaztjYXNlIFwiaW5wdXRcIjpDYyhnLGUpO2Q9QmMoZyxlKTtHKFwiaW52YWxpZFwiLGcpO0ZlKG4sXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZD1sZShnLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpnLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZS5tdWx0aXBsZX07ZD1tKHt9LGUse3ZhbHVlOnZvaWQgMH0pO0coXCJpbnZhbGlkXCIsZyk7RmUobixcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOm9lKGcsXG5lKTtkPW5lKGcsZSk7RyhcImludmFsaWRcIixnKTtGZShuLFwib25DaGFuZ2VcIik7YnJlYWs7ZGVmYXVsdDpkPWV9RGUoZixkKTtrPXZvaWQgMDtsPWY7aD1nO3ZhciB4PWQ7Zm9yKGsgaW4geClpZih4Lmhhc093blByb3BlcnR5KGspKXt2YXIgdj14W2tdO1wic3R5bGVcIj09PWs/QWUoaCx2KTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1rPyh2PXY/di5fX2h0bWw6dm9pZCAwLG51bGwhPXYmJnZlKGgsdikpOlwiY2hpbGRyZW5cIj09PWs/XCJzdHJpbmdcIj09PXR5cGVvZiB2PyhcInRleHRhcmVhXCIhPT1sfHxcIlwiIT09dikmJndlKGgsdik6XCJudW1iZXJcIj09PXR5cGVvZiB2JiZ3ZShoLFwiXCIrdik6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWsmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1rJiZcImF1dG9Gb2N1c1wiIT09ayYmKGlhLmhhc093blByb3BlcnR5KGspP251bGwhPXYmJkZlKG4sayk6bnVsbCE9diYmemMoaCxrLHYseikpfXN3aXRjaChmKXtjYXNlIFwiaW5wdXRcIjpWYihnKTtcbkdjKGcsZSwhMSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmIoZyk7cWUoZyxlKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9ZS52YWx1ZSYmZy5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrQWMoZS52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkPWc7Zz1lO2QubXVsdGlwbGU9ISFnLm11bHRpcGxlO2s9Zy52YWx1ZTtudWxsIT1rP21lKGQsISFnLm11bHRpcGxlLGssITEpOm51bGwhPWcuZGVmYXVsdFZhbHVlJiZtZShkLCEhZy5tdWx0aXBsZSxnLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoZy5vbmNsaWNrPUdlKX1KZShmLGUpJiZTaChiKTtiLnN0YXRlTm9kZT1jfW51bGwhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfWVsc2UgaWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IHQoRXJyb3IoMTY2KSk7YnJlYWs7Y2FzZSA2OmlmKGMmJm51bGwhPWIuc3RhdGVOb2RlKVdoKGMsYixjLm1lbW9pemVkUHJvcHMsXG5lKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZSYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IHQoRXJyb3IoMTY2KSk7Yz16Zyh5Zy5jdXJyZW50KTt6Zyh3Zy5jdXJyZW50KTtCaChiKT8oZD1iLnN0YXRlTm9kZSxjPWIubWVtb2l6ZWRQcm9wcyxkW0ZhXT1iLGQubm9kZVZhbHVlIT09YyYmU2goYikpOihkPWIsYz0oOT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGUpLGNbRmFdPWIsZC5zdGF0ZU5vZGU9Yyl9YnJlYWs7Y2FzZSAxMTpicmVhaztjYXNlIDEzOkgoUCxiKTtlPWIubWVtb2l6ZWRTdGF0ZTtpZigwIT09KGIuZWZmZWN0VGFnJjY0KSl7Yi5leHBpcmF0aW9uVGltZT1kO2JyZWFrIGF9ZD1udWxsIT09ZTtlPSExO251bGw9PT1jP0JoKGIpOihmPWMubWVtb2l6ZWRTdGF0ZSxlPW51bGwhPT1mLGR8fG51bGw9PT1mfHwoZj1jLmNoaWxkLnNpYmxpbmcsbnVsbCE9PWYmJihnPWIuZmlyc3RFZmZlY3QsbnVsbCE9PWc/KGIuZmlyc3RFZmZlY3Q9XG5mLGYubmV4dEVmZmVjdD1nKTooYi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9ZixmLm5leHRFZmZlY3Q9bnVsbCksZi5lZmZlY3RUYWc9OCkpKTtpZihkJiYhZSYmMCE9PShiLm1vZGUmMikpaWYobnVsbD09PWMmJiEwIT09Yi5tZW1vaXplZFByb3BzLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwwIT09KFAuY3VycmVudCZGZykpWD09PUVpJiYoWD1HaSk7ZWxzZSBpZihYPT09RWl8fFg9PT1HaSlYPUhpO2lmKGR8fGUpYi5lZmZlY3RUYWd8PTQ7YnJlYWs7Y2FzZSA3OmJyZWFrO2Nhc2UgODpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgNDpCZyhiKTtVaChiKTticmVhaztjYXNlIDEwOklmKGIpO2JyZWFrO2Nhc2UgOTpicmVhaztjYXNlIDE0OmJyZWFrO2Nhc2UgMTc6TihiLnR5cGUpJiZUZShiKTticmVhaztjYXNlIDE4OmJyZWFrO2Nhc2UgMTk6SChQLGIpO2U9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1lKWJyZWFrO2Y9MCE9PShiLmVmZmVjdFRhZyY2NCk7Zz1lLnJlbmRlcmluZztcbmlmKG51bGw9PT1nKWlmKGYpJGgoZSwhMSk7ZWxzZXtpZihYIT09RWl8fG51bGwhPT1jJiYwIT09KGMuZWZmZWN0VGFnJjY0KSlmb3IoYz1iLmNoaWxkO251bGwhPT1jOyl7Zz1IZyhjKTtpZihudWxsIT09Zyl7Yi5lZmZlY3RUYWd8PTY0OyRoKGUsITEpO2M9Zy51cGRhdGVRdWV1ZTtudWxsIT09YyYmKGIudXBkYXRlUXVldWU9YyxiLmVmZmVjdFRhZ3w9NCk7Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9bnVsbDtmb3IoYz1iLmNoaWxkO251bGwhPT1jOyllPWMsZj1kLGUuZWZmZWN0VGFnJj0yLGUubmV4dEVmZmVjdD1udWxsLGUuZmlyc3RFZmZlY3Q9bnVsbCxlLmxhc3RFZmZlY3Q9bnVsbCxnPWUuYWx0ZXJuYXRlLG51bGw9PT1nPyhlLmNoaWxkRXhwaXJhdGlvblRpbWU9MCxlLmV4cGlyYXRpb25UaW1lPWYsZS5jaGlsZD1udWxsLGUubWVtb2l6ZWRQcm9wcz1udWxsLGUubWVtb2l6ZWRTdGF0ZT1udWxsLGUudXBkYXRlUXVldWU9bnVsbCxlLmRlcGVuZGVuY2llcz1udWxsKTooZS5jaGlsZEV4cGlyYXRpb25UaW1lPVxuZy5jaGlsZEV4cGlyYXRpb25UaW1lLGUuZXhwaXJhdGlvblRpbWU9Zy5leHBpcmF0aW9uVGltZSxlLmNoaWxkPWcuY2hpbGQsZS5tZW1vaXplZFByb3BzPWcubWVtb2l6ZWRQcm9wcyxlLm1lbW9pemVkU3RhdGU9Zy5tZW1vaXplZFN0YXRlLGUudXBkYXRlUXVldWU9Zy51cGRhdGVRdWV1ZSxmPWcuZGVwZW5kZW5jaWVzLGUuZGVwZW5kZW5jaWVzPW51bGw9PT1mP251bGw6e2V4cGlyYXRpb25UaW1lOmYuZXhwaXJhdGlvblRpbWUsZmlyc3RDb250ZXh0OmYuZmlyc3RDb250ZXh0LHJlc3BvbmRlcnM6Zi5yZXNwb25kZXJzfSksYz1jLnNpYmxpbmc7SihQLFAuY3VycmVudCZFZ3xHZyxiKTtiPWIuY2hpbGQ7YnJlYWsgYX1jPWMuc2libGluZ319ZWxzZXtpZighZilpZihjPUhnKGcpLG51bGwhPT1jKXtpZihiLmVmZmVjdFRhZ3w9NjQsZj0hMCwkaChlLCEwKSxudWxsPT09ZS50YWlsJiZcImhpZGRlblwiPT09ZS50YWlsTW9kZSl7ZD1jLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiYoYi51cGRhdGVRdWV1ZT1cbmQsYi5lZmZlY3RUYWd8PTQpO2I9Yi5sYXN0RWZmZWN0PWUubGFzdEVmZmVjdDtudWxsIT09YiYmKGIubmV4dEVmZmVjdD1udWxsKTticmVha319ZWxzZSBzZigpPmUudGFpbEV4cGlyYXRpb24mJjE8ZCYmKGIuZWZmZWN0VGFnfD02NCxmPSEwLCRoKGUsITEpLGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPWQtMSk7ZS5pc0JhY2t3YXJkcz8oZy5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1nKTooZD1lLmxhc3QsbnVsbCE9PWQ/ZC5zaWJsaW5nPWc6Yi5jaGlsZD1nLGUubGFzdD1nKX1pZihudWxsIT09ZS50YWlsKXswPT09ZS50YWlsRXhwaXJhdGlvbiYmKGUudGFpbEV4cGlyYXRpb249c2YoKSs1MDApO2Q9ZS50YWlsO2UucmVuZGVyaW5nPWQ7ZS50YWlsPWQuc2libGluZztlLmxhc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0O2Quc2libGluZz1udWxsO2M9UC5jdXJyZW50O2M9Zj9jJkVnfEdnOmMmRWc7SihQLGMsYik7Yj1kO2JyZWFrIGF9YnJlYWs7Y2FzZSAyMDpicmVhaztcbmRlZmF1bHQ6dGhyb3cgdChFcnJvcigxNTYpKTt9Yj1udWxsfWQ9VjtpZigxPT09V3x8MSE9PWQuY2hpbGRFeHBpcmF0aW9uVGltZSl7Yz0wO2ZvcihlPWQuY2hpbGQ7bnVsbCE9PWU7KWY9ZS5leHBpcmF0aW9uVGltZSxnPWUuY2hpbGRFeHBpcmF0aW9uVGltZSxmPmMmJihjPWYpLGc+YyYmKGM9ZyksZT1lLnNpYmxpbmc7ZC5jaGlsZEV4cGlyYXRpb25UaW1lPWN9aWYobnVsbCE9PWIpcmV0dXJuIGI7bnVsbCE9PWEmJjA9PT0oYS5lZmZlY3RUYWcmMTAyNCkmJihudWxsPT09YS5maXJzdEVmZmVjdCYmKGEuZmlyc3RFZmZlY3Q9Vi5maXJzdEVmZmVjdCksbnVsbCE9PVYubGFzdEVmZmVjdCYmKG51bGwhPT1hLmxhc3RFZmZlY3QmJihhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1WLmZpcnN0RWZmZWN0KSxhLmxhc3RFZmZlY3Q9Vi5sYXN0RWZmZWN0KSwxPFYuZWZmZWN0VGFnJiYobnVsbCE9PWEubGFzdEVmZmVjdD9hLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1WOmEuZmlyc3RFZmZlY3Q9VixcbmEubGFzdEVmZmVjdD1WKSl9ZWxzZXtiPWFpKFYsVyk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZWZmZWN0VGFnJj0xMDIzLGI7bnVsbCE9PWEmJihhLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1udWxsLGEuZWZmZWN0VGFnfD0xMDI0KX1iPVYuc2libGluZztpZihudWxsIT09YilyZXR1cm4gYjtWPWF9d2hpbGUobnVsbCE9PVYpO1g9PT1FaSYmKFg9SWkpO3JldHVybiBudWxsfWZ1bmN0aW9uIGlqKGEpe3ZhciBiPXRmKCk7dmYoOTksbmouYmluZChudWxsLGEsYikpO251bGwhPT1RaSYmd2YoOTcsZnVuY3Rpb24oKXtjaigpO3JldHVybiBudWxsfSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBuaihhLGIpe2NqKCk7aWYoKFUmKENpfERpKSkhPT1UKXRocm93IHQoRXJyb3IoMzI3KSk7dmFyIGM9YS5maW5pc2hlZFdvcmssZD1hLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDtpZihjPT09YS5jdXJyZW50KXRocm93IHQoRXJyb3IoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDthLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MDt2YXIgZT1jLmV4cGlyYXRpb25UaW1lLGY9Yy5jaGlsZEV4cGlyYXRpb25UaW1lO2U9Zj5lP2Y6ZTthLmZpcnN0UGVuZGluZ1RpbWU9ZTtlPGEubGFzdFBlbmRpbmdUaW1lJiYoYS5sYXN0UGVuZGluZ1RpbWU9ZSk7YT09PUppJiYoVj1KaT1udWxsLFc9MCk7MTxjLmVmZmVjdFRhZz9udWxsIT09Yy5sYXN0RWZmZWN0PyhjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGU9Yy5maXJzdEVmZmVjdCk6ZT1jOmU9Yy5maXJzdEVmZmVjdDtcbmlmKG51bGwhPT1lKXtmPVU7VXw9RGk7QWkuY3VycmVudD1udWxsO0hlPVFkO3ZhciBoPWFlKCk7aWYoYmUoaCkpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGgpdmFyIGc9e3N0YXJ0Omguc2VsZWN0aW9uU3RhcnQsZW5kOmguc2VsZWN0aW9uRW5kfTtlbHNlIGE6e2c9KGc9aC5vd25lckRvY3VtZW50KSYmZy5kZWZhdWx0Vmlld3x8d2luZG93O3ZhciBrPWcuZ2V0U2VsZWN0aW9uJiZnLmdldFNlbGVjdGlvbigpO2lmKGsmJjAhPT1rLnJhbmdlQ291bnQpe2c9ay5hbmNob3JOb2RlO3ZhciBsPWsuYW5jaG9yT2Zmc2V0LG49ay5mb2N1c05vZGU7az1rLmZvY3VzT2Zmc2V0O3RyeXtnLm5vZGVUeXBlLG4ubm9kZVR5cGV9Y2F0Y2goemIpe2c9bnVsbDticmVhayBhfXZhciB6PTAseD0tMSx2PS0xLHJiPTAsQmU9MCx1PWgsdz1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIEM7Oyl7dSE9PWd8fDAhPT1sJiYzIT09dS5ub2RlVHlwZXx8KHg9eitsKTt1IT09bnx8MCE9PWsmJjMhPT11Lm5vZGVUeXBlfHxcbih2PXorayk7Mz09PXUubm9kZVR5cGUmJih6Kz11Lm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0oQz11LmZpcnN0Q2hpbGQpKWJyZWFrO3c9dTt1PUN9Zm9yKDs7KXtpZih1PT09aClicmVhayBiO3c9PT1nJiYrK3JiPT09bCYmKHg9eik7dz09PW4mJisrQmU9PT1rJiYodj16KTtpZihudWxsIT09KEM9dS5uZXh0U2libGluZykpYnJlYWs7dT13O3c9dS5wYXJlbnROb2RlfXU9Q31nPS0xPT09eHx8LTE9PT12P251bGw6e3N0YXJ0OngsZW5kOnZ9fWVsc2UgZz1udWxsfWc9Z3x8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgZz1udWxsO0llPXtmb2N1c2VkRWxlbTpoLHNlbGVjdGlvblJhbmdlOmd9O1FkPSExO1k9ZTtkbyB0cnl7Zm9yKDtudWxsIT09WTspe2lmKDAhPT0oWS5lZmZlY3RUYWcmMjU2KSl7dmFyIEk9WS5hbHRlcm5hdGU7aD1ZO3N3aXRjaChoLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpoaShKZyxJZyxoKTticmVhaztjYXNlIDE6aWYoaC5lZmZlY3RUYWcmMjU2JiZudWxsIT09XG5JKXt2YXIgRT1JLm1lbW9pemVkUHJvcHMsdWE9SS5tZW1vaXplZFN0YXRlLGdoPWguc3RhdGVOb2RlLG9qPWdoLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGguZWxlbWVudFR5cGU9PT1oLnR5cGU/RTpBZihoLnR5cGUsRSksdWEpO2doLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPW9qfWJyZWFrO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OmJyZWFrO2RlZmF1bHQ6dGhyb3cgdChFcnJvcigxNjMpKTt9fVk9WS5uZXh0RWZmZWN0fX1jYXRjaCh6Yil7aWYobnVsbD09PVkpdGhyb3cgdChFcnJvcigzMzApKTtmaShZLHpiKTtZPVkubmV4dEVmZmVjdH13aGlsZShudWxsIT09WSk7WT1lO2RvIHRyeXtmb3IoST1iO251bGwhPT1ZOyl7dmFyIEE9WS5lZmZlY3RUYWc7QSYxNiYmd2UoWS5zdGF0ZU5vZGUsXCJcIik7aWYoQSYxMjgpe3ZhciBwPVkuYWx0ZXJuYXRlO2lmKG51bGwhPT1wKXt2YXIgcj1wLnJlZjtudWxsIT09ciYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiByP1xucihudWxsKTpyLmN1cnJlbnQ9bnVsbCl9fXN3aXRjaChBJjE0KXtjYXNlIDI6bmkoWSk7WS5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjpuaShZKTtZLmVmZmVjdFRhZyY9LTM7b2koWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSA0Om9pKFkuYWx0ZXJuYXRlLFkpO2JyZWFrO2Nhc2UgODpFPVk7a2koRSxJKTtFLnJldHVybj1udWxsO0UuY2hpbGQ9bnVsbDtFLm1lbW9pemVkU3RhdGU9bnVsbDtFLnVwZGF0ZVF1ZXVlPW51bGw7RS5kZXBlbmRlbmNpZXM9bnVsbDt2YXIgSz1FLmFsdGVybmF0ZTtudWxsIT09SyYmKEsucmV0dXJuPW51bGwsSy5jaGlsZD1udWxsLEsubWVtb2l6ZWRTdGF0ZT1udWxsLEsudXBkYXRlUXVldWU9bnVsbCxLLmRlcGVuZGVuY2llcz1udWxsKX1ZPVkubmV4dEVmZmVjdH19Y2F0Y2goemIpe2lmKG51bGw9PT1ZKXRocm93IHQoRXJyb3IoMzMwKSk7ZmkoWSx6Yik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO3I9SWU7cD1hZSgpO0E9ci5mb2N1c2VkRWxlbTtcbkk9ci5zZWxlY3Rpb25SYW5nZTtpZihwIT09QSYmQSYmQS5vd25lckRvY3VtZW50JiYkZChBLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LEEpKXtudWxsIT09SSYmYmUoQSkmJihwPUkuc3RhcnQscj1JLmVuZCx2b2lkIDA9PT1yJiYocj1wKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBBPyhBLnNlbGVjdGlvblN0YXJ0PXAsQS5zZWxlY3Rpb25FbmQ9TWF0aC5taW4ocixBLnZhbHVlLmxlbmd0aCkpOihyPShwPUEub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZwLmRlZmF1bHRWaWV3fHx3aW5kb3csci5nZXRTZWxlY3Rpb24mJihyPXIuZ2V0U2VsZWN0aW9uKCksRT1BLnRleHRDb250ZW50Lmxlbmd0aCxLPU1hdGgubWluKEkuc3RhcnQsRSksST12b2lkIDA9PT1JLmVuZD9LOk1hdGgubWluKEkuZW5kLEUpLCFyLmV4dGVuZCYmSz5JJiYoRT1JLEk9SyxLPUUpLEU9WmQoQSxLKSx1YT1aZChBLEkpLEUmJnVhJiYoMSE9PXIucmFuZ2VDb3VudHx8ci5hbmNob3JOb2RlIT09RS5ub2RlfHxyLmFuY2hvck9mZnNldCE9PVxuRS5vZmZzZXR8fHIuZm9jdXNOb2RlIT09dWEubm9kZXx8ci5mb2N1c09mZnNldCE9PXVhLm9mZnNldCkmJihwPXAuY3JlYXRlUmFuZ2UoKSxwLnNldFN0YXJ0KEUubm9kZSxFLm9mZnNldCksci5yZW1vdmVBbGxSYW5nZXMoKSxLPkk/KHIuYWRkUmFuZ2UocCksci5leHRlbmQodWEubm9kZSx1YS5vZmZzZXQpKToocC5zZXRFbmQodWEubm9kZSx1YS5vZmZzZXQpLHIuYWRkUmFuZ2UocCkpKSkpKTtwPVtdO2ZvcihyPUE7cj1yLnBhcmVudE5vZGU7KTE9PT1yLm5vZGVUeXBlJiZwLnB1c2goe2VsZW1lbnQ6cixsZWZ0OnIuc2Nyb2xsTGVmdCx0b3A6ci5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgQS5mb2N1cyYmQS5mb2N1cygpO2ZvcihBPTA7QTxwLmxlbmd0aDtBKyspcj1wW0FdLHIuZWxlbWVudC5zY3JvbGxMZWZ0PXIubGVmdCxyLmVsZW1lbnQuc2Nyb2xsVG9wPXIudG9wfUllPW51bGw7UWQ9ISFIZTtIZT1udWxsO2EuY3VycmVudD1jO1k9ZTtkbyB0cnl7Zm9yKEE9ZDtudWxsIT09XG5ZOyl7dmFyICRhPVkuZWZmZWN0VGFnO2lmKCRhJjM2KXt2YXIgbmM9WS5hbHRlcm5hdGU7cD1ZO3I9QTtzd2l0Y2gocC50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6aGkoTWcsTmcscCk7YnJlYWs7Y2FzZSAxOnZhciBtZD1wLnN0YXRlTm9kZTtpZihwLmVmZmVjdFRhZyY0KWlmKG51bGw9PT1uYyltZC5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIEZqPXAuZWxlbWVudFR5cGU9PT1wLnR5cGU/bmMubWVtb2l6ZWRQcm9wczpBZihwLnR5cGUsbmMubWVtb2l6ZWRQcm9wcyk7bWQuY29tcG9uZW50RGlkVXBkYXRlKEZqLG5jLm1lbW9pemVkU3RhdGUsbWQuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfXZhciBYaD1wLnVwZGF0ZVF1ZXVlO251bGwhPT1YaCYmWWYocCxYaCxtZCxyKTticmVhaztjYXNlIDM6dmFyIFloPXAudXBkYXRlUXVldWU7aWYobnVsbCE9PVloKXtLPW51bGw7aWYobnVsbCE9PXAuY2hpbGQpc3dpdGNoKHAuY2hpbGQudGFnKXtjYXNlIDU6Sz1cbnAuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTpLPXAuY2hpbGQuc3RhdGVOb2RlfVlmKHAsWWgsSyxyKX1icmVhaztjYXNlIDU6dmFyIEdqPXAuc3RhdGVOb2RlO251bGw9PT1uYyYmcC5lZmZlY3RUYWcmNCYmKHI9R2osSmUocC50eXBlLHAubWVtb2l6ZWRQcm9wcykmJnIuZm9jdXMoKSk7YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6Y2FzZSAxOTpjYXNlIDE3OmNhc2UgMjA6YnJlYWs7ZGVmYXVsdDp0aHJvdyB0KEVycm9yKDE2MykpO319aWYoJGEmMTI4KXt2YXIgbmQ9WS5yZWY7aWYobnVsbCE9PW5kKXt2YXIgWmg9WS5zdGF0ZU5vZGU7c3dpdGNoKFkudGFnKXtjYXNlIDU6dmFyIGdmPVpoO2JyZWFrO2RlZmF1bHQ6Z2Y9Wmh9XCJmdW5jdGlvblwiPT09dHlwZW9mIG5kP25kKGdmKTpuZC5jdXJyZW50PWdmfX0kYSY1MTImJihQaT0hMCk7WT1ZLm5leHRFZmZlY3R9fWNhdGNoKHpiKXtpZihudWxsPT09WSl0aHJvdyB0KEVycm9yKDMzMCkpO1xuZmkoWSx6Yik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO1k9bnVsbDtuZigpO1U9Zn1lbHNlIGEuY3VycmVudD1jO2lmKFBpKVBpPSExLFFpPWEsU2k9ZCxSaT1iO2Vsc2UgZm9yKFk9ZTtudWxsIT09WTspYj1ZLm5leHRFZmZlY3QsWS5uZXh0RWZmZWN0PW51bGwsWT1iO2I9YS5maXJzdFBlbmRpbmdUaW1lOzAhPT1iPygkYT1jZygpLCRhPXpmKCRhLGIpLFppKGEsJGEsYikpOnhpPW51bGw7XCJmdW5jdGlvblwiPT09dHlwZW9mIHBqJiZwaihjLnN0YXRlTm9kZSxkKTsxMDczNzQxODIzPT09Yj9hPT09Vmk/VWkrKzooVWk9MCxWaT1hKTpVaT0wO2lmKHVpKXRocm93IHVpPSExLGE9dmksdmk9bnVsbCxhO2lmKChVJkJpKSE9PVQpcmV0dXJuIG51bGw7TygpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gY2ooKXtpZihudWxsPT09UWkpcmV0dXJuITE7dmFyIGE9UWksYj1TaSxjPVJpO1FpPW51bGw7U2k9MDtSaT05MDtyZXR1cm4gdmYoOTc8Yz85NzpjLHFqLmJpbmQobnVsbCxhLGIpKX1mdW5jdGlvbiBxaihhKXtpZigoVSYoQ2l8RGkpKSE9PVQpdGhyb3cgdChFcnJvcigzMzEpKTt2YXIgYj1VO1V8PURpO2ZvcihhPWEuY3VycmVudC5maXJzdEVmZmVjdDtudWxsIT09YTspe3RyeXt2YXIgYz1hO2lmKDAhPT0oYy5lZmZlY3RUYWcmNTEyKSlzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6aGkoUGcsSWcsYyksaGkoSWcsT2csYyl9fWNhdGNoKGQpe2lmKG51bGw9PT1hKXRocm93IHQoRXJyb3IoMzMwKSk7ZmkoYSxkKX1jPWEubmV4dEVmZmVjdDthLm5leHRFZmZlY3Q9bnVsbDthPWN9VT1iO08oKTtyZXR1cm4hMH1cbmZ1bmN0aW9uIHJqKGEsYixjKXtiPWJpKGMsYik7Yj10aShhLGIsMTA3Mzc0MTgyMyk7U2YoYSxiKTthPVlpKGEsMTA3Mzc0MTgyMyk7bnVsbCE9PWEmJlppKGEsOTksMTA3Mzc0MTgyMyl9ZnVuY3Rpb24gZmkoYSxiKXtpZigzPT09YS50YWcpcmooYSxhLGIpO2Vsc2UgZm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7aWYoMz09PWMudGFnKXtyaihjLGEsYik7YnJlYWt9ZWxzZSBpZigxPT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT14aXx8IXhpLmhhcyhkKSkpe2E9YmkoYixhKTthPXdpKGMsYSwxMDczNzQxODIzKTtTZihjLGEpO2M9WWkoYywxMDczNzQxODIzKTtudWxsIT09YyYmWmkoYyw5OSwxMDczNzQxODIzKTticmVha319Yz1jLnJldHVybn19XG5mdW5jdGlvbiBraihhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO0ppPT09YSYmVz09PWM/WD09PUhpfHxYPT09R2kmJjEwNzM3NDE4MjM9PT1LaSYmc2YoKS1waTxPaT9oaihhLFcpOk5pPSEwOmEubGFzdFBlbmRpbmdUaW1lPGN8fChiPWEucGluZ1RpbWUsMCE9PWImJmI8Y3x8KGEucGluZ1RpbWU9YyxhLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9PT1jJiYoYS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTAsYS5maW5pc2hlZFdvcms9bnVsbCksYj1jZygpLGI9emYoYixjKSxaaShhLGIsYykpKX1mdW5jdGlvbiByaShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtjPWNnKCk7Yj1kZyhjLGEsbnVsbCk7Yz16ZihjLGIpO2E9WWkoYSxiKTtudWxsIT09YSYmWmkoYSxjLGIpfXZhciBtaj12b2lkIDA7XG5taj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZTtpZihudWxsIT09YSl7dmFyIGU9Yi5wZW5kaW5nUHJvcHM7aWYoYS5tZW1vaXplZFByb3BzIT09ZXx8TS5jdXJyZW50KUxmPSEwO2Vsc2UgaWYoZDxjKXtMZj0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpOaChiKTtDaCgpO2JyZWFrO2Nhc2UgNTpDZyhiKTtpZihiLm1vZGUmNCYmMSE9PWMmJmUuaGlkZGVuKXJldHVybiBiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT0xLG51bGw7YnJlYWs7Y2FzZSAxOk4oYi50eXBlKSYmWGUoYik7YnJlYWs7Y2FzZSA0OkFnKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpIZihiLGIubWVtb2l6ZWRQcm9wcy52YWx1ZSk7YnJlYWs7Y2FzZSAxMzppZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXtkPWIuY2hpbGQuY2hpbGRFeHBpcmF0aW9uVGltZTtpZigwIT09ZCYmZD49YylyZXR1cm4gUGgoYSxiLGMpO0ooUCxQLmN1cnJlbnQmXG5FZyxiKTtiPUZoKGEsYixjKTtyZXR1cm4gbnVsbCE9PWI/Yi5zaWJsaW5nOm51bGx9SihQLFAuY3VycmVudCZFZyxiKTticmVhaztjYXNlIDE5OmQ9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPj1jO2lmKDAhPT0oYS5lZmZlY3RUYWcmNjQpKXtpZihkKXJldHVybiBSaChhLGIsYyk7Yi5lZmZlY3RUYWd8PTY0fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCk7SihQLFAuY3VycmVudCxiKTtpZighZClyZXR1cm4gbnVsbH1yZXR1cm4gRmgoYSxiLGMpfX1lbHNlIExmPSExO2IuZXhwaXJhdGlvblRpbWU9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPWIudHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7YT1iLnBlbmRpbmdQcm9wcztlPVNlKGIsTC5jdXJyZW50KTtLZihiLGMpO2U9ZGgobnVsbCxiLGQsYSxlLGMpO2IuZWZmZWN0VGFnfD0xO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZSYmXG5udWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mKXtiLnRhZz0xO2loKCk7aWYoTihkKSl7dmFyIGY9ITA7WGUoYil9ZWxzZSBmPSExO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGw7dmFyIGg9ZC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGgmJmJnKGIsZCxoLGEpO2UudXBkYXRlcj1mZztiLnN0YXRlTm9kZT1lO2UuX3JlYWN0SW50ZXJuYWxGaWJlcj1iO2pnKGIsZCxhLGMpO2I9TWgobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsUyhudWxsLGIsZSxjKSxiPWIuY2hpbGQ7cmV0dXJuIGI7Y2FzZSAxNjplPWIuZWxlbWVudFR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1CZihlKTtiLnR5cGU9ZTtmPWIudGFnPXNqKGUpO1xuYT1BZihlLGEpO3N3aXRjaChmKXtjYXNlIDA6Yj1KaChudWxsLGIsZSxhLGMpO2JyZWFrO2Nhc2UgMTpiPUxoKG51bGwsYixlLGEsYyk7YnJlYWs7Y2FzZSAxMTpiPUVoKG51bGwsYixlLGEsYyk7YnJlYWs7Y2FzZSAxNDpiPUdoKG51bGwsYixlLEFmKGUudHlwZSxhKSxkLGMpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgdChFcnJvcigzMDYpLGUsXCJcIik7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6QWYoZCxlKSxKaChhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6QWYoZCxlKSxMaChhLGIsZCxlLGMpO2Nhc2UgMzpOaChiKTtkPWIudXBkYXRlUXVldWU7aWYobnVsbD09PWQpdGhyb3cgdChFcnJvcigyODIpKTtlPWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1lP2UuZWxlbWVudDpudWxsO1dmKGIsZCxiLnBlbmRpbmdQcm9wcyxcbm51bGwsYyk7ZD1iLm1lbW9pemVkU3RhdGUuZWxlbWVudDtpZihkPT09ZSlDaCgpLGI9RmgoYSxiLGMpO2Vsc2V7ZT1iLnN0YXRlTm9kZTtpZihlPShudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpJiZlLmh5ZHJhdGUpdWg9TmUoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSx0aD1iLGU9dmg9ITA7ZT8oYi5lZmZlY3RUYWd8PTIsYi5jaGlsZD11ZyhiLG51bGwsZCxjKSk6KFMoYSxiLGQsYyksQ2goKSk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gQ2coYiksbnVsbD09PWEmJnpoKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxoPWUuY2hpbGRyZW4sS2UoZCxlKT9oPW51bGw6bnVsbCE9PWYmJktlKGQsZikmJihiLmVmZmVjdFRhZ3w9MTYpLEtoKGEsYiksYi5tb2RlJjQmJjEhPT1jJiZlLmhpZGRlbj8oYi5leHBpcmF0aW9uVGltZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU9MSxiPW51bGwpOlxuKFMoYSxiLGgsYyksYj1iLmNoaWxkKSxiO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJnpoKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gUGgoYSxiLGMpO2Nhc2UgNDpyZXR1cm4gQWcoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9dGcoYixudWxsLGQsYyk6UyhhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkFmKGQsZSksRWgoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFMoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBTKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIFMoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2g9Yi5tZW1vaXplZFByb3BzO1xuZj1lLnZhbHVlO0hmKGIsZik7aWYobnVsbCE9PWgpe3ZhciBnPWgudmFsdWU7Zj1oZChnLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhnLGYpOjEwNzM3NDE4MjMpfDA7aWYoMD09PWYpe2lmKGguY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhTS5jdXJyZW50KXtiPUZoKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihnPWIuY2hpbGQsbnVsbCE9PWcmJihnLnJldHVybj1iKTtudWxsIT09Zzspe3ZhciBrPWcuZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1rKXtoPWcuY2hpbGQ7Zm9yKHZhciBsPWsuZmlyc3RDb250ZXh0O251bGwhPT1sOyl7aWYobC5jb250ZXh0PT09ZCYmMCE9PShsLm9ic2VydmVkQml0cyZmKSl7MT09PWcudGFnJiYobD1RZihjLG51bGwpLGwudGFnPTIsU2YoZyxsKSk7Zy5leHBpcmF0aW9uVGltZTxjJiYoZy5leHBpcmF0aW9uVGltZT1jKTtsPWcuYWx0ZXJuYXRlO251bGwhPT1sJiZsLmV4cGlyYXRpb25UaW1lPFxuYyYmKGwuZXhwaXJhdGlvblRpbWU9Yyk7SmYoZy5yZXR1cm4sYyk7ay5leHBpcmF0aW9uVGltZTxjJiYoay5leHBpcmF0aW9uVGltZT1jKTticmVha31sPWwubmV4dH19ZWxzZSBoPTEwPT09Zy50YWc/Zy50eXBlPT09Yi50eXBlP251bGw6Zy5jaGlsZDpnLmNoaWxkO2lmKG51bGwhPT1oKWgucmV0dXJuPWc7ZWxzZSBmb3IoaD1nO251bGwhPT1oOyl7aWYoaD09PWIpe2g9bnVsbDticmVha31nPWguc2libGluZztpZihudWxsIT09Zyl7Zy5yZXR1cm49aC5yZXR1cm47aD1nO2JyZWFrfWg9aC5yZXR1cm59Zz1ofX1TKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGY9Yi5wZW5kaW5nUHJvcHMsZD1mLmNoaWxkcmVuLEtmKGIsYyksZT1NZihlLGYudW5zdGFibGVfb2JzZXJ2ZWRCaXRzKSxkPWQoZSksYi5lZmZlY3RUYWd8PTEsUyhhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGU9Yi50eXBlLGY9QWYoZSxiLnBlbmRpbmdQcm9wcyksXG5mPUFmKGUudHlwZSxmKSxHaChhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4gSWgoYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkFmKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLGIudGFnPTEsTihkKT8oYT0hMCxYZShiKSk6YT0hMSxLZihiLGMpLGhnKGIsZCxlLGMpLGpnKGIsZCxlLGMpLE1oKG51bGwsYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4gUmgoYSxiLGMpfXRocm93IHQoRXJyb3IoMTU2KSk7fTt2YXIgcGo9bnVsbCxqaT1udWxsO1xuZnVuY3Rpb24gdGooYSl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pcmV0dXJuITE7dmFyIGI9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKGIuaXNEaXNhYmxlZHx8IWIuc3VwcG9ydHNGaWJlcilyZXR1cm4hMDt0cnl7dmFyIGM9Yi5pbmplY3QoYSk7cGo9ZnVuY3Rpb24oYSl7dHJ5e2Iub25Db21taXRGaWJlclJvb3QoYyxhLHZvaWQgMCw2ND09PShhLmN1cnJlbnQuZWZmZWN0VGFnJjY0KSl9Y2F0Y2goZSl7fX07amk9ZnVuY3Rpb24oYSl7dHJ5e2Iub25Db21taXRGaWJlclVubW91bnQoYyxhKX1jYXRjaChlKXt9fX1jYXRjaChkKXt9cmV0dXJuITB9XG5mdW5jdGlvbiB1aihhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZGVwZW5kZW5jaWVzPXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuZWZmZWN0VGFnPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5jaGlsZEV4cGlyYXRpb25UaW1lPXRoaXMuZXhwaXJhdGlvblRpbWU9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIHhoKGEsYixjLGQpe3JldHVybiBuZXcgdWooYSxiLGMsZCl9XG5mdW5jdGlvbiBIaChhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfWZ1bmN0aW9uIHNqKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBIaChhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09Z2MpcmV0dXJuIDExO2lmKGE9PT1qYylyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiBvZyhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPXhoKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMuZWZmZWN0VGFnPTAsYy5uZXh0RWZmZWN0PW51bGwsYy5maXJzdEVmZmVjdD1udWxsLGMubGFzdEVmZmVjdD1udWxsKTtjLmNoaWxkRXhwaXJhdGlvblRpbWU9YS5jaGlsZEV4cGlyYXRpb25UaW1lO2MuZXhwaXJhdGlvblRpbWU9YS5leHBpcmF0aW9uVGltZTtjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtiPWEuZGVwZW5kZW5jaWVzO2MuZGVwZW5kZW5jaWVzPW51bGw9PT1iP251bGw6e2V4cGlyYXRpb25UaW1lOmIuZXhwaXJhdGlvblRpbWUsXG5maXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHQscmVzcG9uZGVyczpiLnJlc3BvbmRlcnN9O2Muc2libGluZz1hLnNpYmxpbmc7Yy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24gcWcoYSxiLGMsZCxlLGYpe3ZhciBoPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKUhoKGEpJiYoaD0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSloPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIGFjOnJldHVybiBzZyhjLmNoaWxkcmVuLGUsZixiKTtjYXNlIGZjOmg9ODtlfD03O2JyZWFrO2Nhc2UgYmM6aD04O2V8PTE7YnJlYWs7Y2FzZSBjYzpyZXR1cm4gYT14aCgxMixjLGIsZXw4KSxhLmVsZW1lbnRUeXBlPWNjLGEudHlwZT1jYyxhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIGhjOnJldHVybiBhPXhoKDEzLGMsYixlKSxhLnR5cGU9aGMsYS5lbGVtZW50VHlwZT1oYyxhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIGljOnJldHVybiBhPXhoKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPWljLGEuZXhwaXJhdGlvblRpbWU9ZixhO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBkYzpoPVxuMTA7YnJlYWsgYTtjYXNlIGVjOmg9OTticmVhayBhO2Nhc2UgZ2M6aD0xMTticmVhayBhO2Nhc2UgamM6aD0xNDticmVhayBhO2Nhc2Uga2M6aD0xNjtkPW51bGw7YnJlYWsgYX10aHJvdyB0KEVycm9yKDEzMCksbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpO31iPXhoKGgsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmV4cGlyYXRpb25UaW1lPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gc2coYSxiLGMsZCl7YT14aCg3LGEsZCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gcGcoYSxiLGMpe2E9eGgoNixhLG51bGwsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfVxuZnVuY3Rpb24gcmcoYSxiLGMpe2I9eGgoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IuZXhwaXJhdGlvblRpbWU9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiB2aihhLGIsYyl7dGhpcy50YWc9Yjt0aGlzLmN1cnJlbnQ9bnVsbDt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLnBpbmdDYWNoZT10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO3RoaXMuZmluaXNoZWRXb3JrPW51bGw7dGhpcy50aW1lb3V0SGFuZGxlPS0xO3RoaXMucGVuZGluZ0NvbnRleHQ9dGhpcy5jb250ZXh0PW51bGw7dGhpcy5oeWRyYXRlPWM7dGhpcy5jYWxsYmFja05vZGU9dGhpcy5maXJzdEJhdGNoPW51bGw7dGhpcy5waW5nVGltZT10aGlzLmxhc3RQZW5kaW5nVGltZT10aGlzLmZpcnN0UGVuZGluZ1RpbWU9dGhpcy5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTB9ZnVuY3Rpb24gd2ooYSxiLGMpe2E9bmV3IHZqKGEsYixjKTtiPXhoKDMsbnVsbCxudWxsLDI9PT1iPzc6MT09PWI/MzowKTthLmN1cnJlbnQ9YjtyZXR1cm4gYi5zdGF0ZU5vZGU9YX1cbmZ1bmN0aW9uIHhqKGEsYixjLGQsZSxmKXt2YXIgaD1iLmN1cnJlbnQ7YTppZihjKXtjPWMuX3JlYWN0SW50ZXJuYWxGaWJlcjtiOntpZigyIT09bGQoYyl8fDEhPT1jLnRhZyl0aHJvdyB0KEVycm9yKDE3MCkpO3ZhciBnPWM7ZG97c3dpdGNoKGcudGFnKXtjYXNlIDM6Zz1nLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGI7Y2FzZSAxOmlmKE4oZy50eXBlKSl7Zz1nLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBifX1nPWcucmV0dXJufXdoaWxlKG51bGwhPT1nKTt0aHJvdyB0KEVycm9yKDE3MSkpO31pZigxPT09Yy50YWcpe3ZhciBrPWMudHlwZTtpZihOKGspKXtjPVdlKGMsayxnKTticmVhayBhfX1jPWd9ZWxzZSBjPVFlO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9ZjtlPVFmKGQsZSk7ZS5wYXlsb2FkPXtlbGVtZW50OmF9O2I9dm9pZCAwPT09Yj9udWxsOmI7bnVsbCE9PWImJlxuKGUuY2FsbGJhY2s9Yik7U2YoaCxlKTtlZyhoLGQpO3JldHVybiBkfWZ1bmN0aW9uIHlqKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPWNnKCksaD0kZi5zdXNwZW5zZTtlPWRnKGYsZSxoKTtyZXR1cm4geGooYSxiLGMsZSxoLGQpfWZ1bmN0aW9uIHpqKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gQWooYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjokYixrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbkRiPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6RWMoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPUthKGQpO2lmKCFlKXRocm93IHQoRXJyb3IoOTApKTtXYihkKTtFYyhkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6cGUoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJm1lKGEsISFjLm11bHRpcGxlLGIsITEpfX07XG5mdW5jdGlvbiBCaihhKXt2YXIgYj0xMDczNzQxODIxLTI1KigoKDEwNzM3NDE4MjEtY2coKSs1MDApLzI1fDApKzEpO2I8PVhpJiYtLWI7dGhpcy5fZXhwaXJhdGlvblRpbWU9WGk9Yjt0aGlzLl9yb290PWE7dGhpcy5fY2FsbGJhY2tzPXRoaXMuX25leHQ9bnVsbDt0aGlzLl9oYXNDaGlsZHJlbj10aGlzLl9kaWRDb21wbGV0ZT0hMTt0aGlzLl9jaGlsZHJlbj1udWxsO3RoaXMuX2RlZmVyPSEwfUJqLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7aWYoIXRoaXMuX2RlZmVyKXRocm93IHQoRXJyb3IoMjUwKSk7dGhpcy5faGFzQ2hpbGRyZW49ITA7dGhpcy5fY2hpbGRyZW49YTt2YXIgYj10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYz10aGlzLl9leHBpcmF0aW9uVGltZSxkPW5ldyBDajt4aihhLGIsbnVsbCxjLG51bGwsZC5fb25Db21taXQpO3JldHVybiBkfTtcbkJqLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbXBsZXRlKWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbkJqLnByb3RvdHlwZS5jb21taXQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYj1hLmZpcnN0QmF0Y2g7aWYoIXRoaXMuX2RlZmVyfHxudWxsPT09Yil0aHJvdyB0KEVycm9yKDI1MSkpO2lmKHRoaXMuX2hhc0NoaWxkcmVuKXt2YXIgYz10aGlzLl9leHBpcmF0aW9uVGltZTtpZihiIT09dGhpcyl7dGhpcy5faGFzQ2hpbGRyZW4mJihjPXRoaXMuX2V4cGlyYXRpb25UaW1lPWIuX2V4cGlyYXRpb25UaW1lLHRoaXMucmVuZGVyKHRoaXMuX2NoaWxkcmVuKSk7Zm9yKHZhciBkPW51bGwsZT1iO2UhPT10aGlzOylkPWUsZT1lLl9uZXh0O2lmKG51bGw9PT1kKXRocm93IHQoRXJyb3IoMjUxKSk7ZC5fbmV4dD1lLl9uZXh0O3RoaXMuX25leHQ9YjthLmZpcnN0QmF0Y2g9dGhpc310aGlzLl9kZWZlcj0hMTtiPWM7aWYoKFUmKENpfERpKSkhPT1UKXRocm93IHQoRXJyb3IoMjUzKSk7eGYoWi5iaW5kKG51bGwsYSxiKSk7TygpO2I9dGhpcy5fbmV4dDt0aGlzLl9uZXh0PVxubnVsbDtiPWEuZmlyc3RCYXRjaD1iO251bGwhPT1iJiZiLl9oYXNDaGlsZHJlbiYmYi5yZW5kZXIoYi5fY2hpbGRyZW4pfWVsc2UgdGhpcy5fbmV4dD1udWxsLHRoaXMuX2RlZmVyPSExfTtCai5wcm90b3R5cGUuX29uQ29tcGxldGU9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tcGxldGUpe3RoaXMuX2RpZENvbXBsZXRlPSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKykoMCxhW2JdKSgpfX07ZnVuY3Rpb24gQ2ooKXt0aGlzLl9jYWxsYmFja3M9bnVsbDt0aGlzLl9kaWRDb21taXQ9ITE7dGhpcy5fb25Db21taXQ9dGhpcy5fb25Db21taXQuYmluZCh0aGlzKX1Dai5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21taXQpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xuQ2oucHJvdG90eXBlLl9vbkNvbW1pdD1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21taXQpe3RoaXMuX2RpZENvbW1pdD0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGMpdGhyb3cgdChFcnJvcigxOTEpLGMpO2MoKX19fTtmdW5jdGlvbiBEaihhLGIsYyl7dGhpcy5faW50ZXJuYWxSb290PXdqKGEsYixjKX1mdW5jdGlvbiBFaihhLGIpe3RoaXMuX2ludGVybmFsUm9vdD13aihhLDIsYil9RWoucHJvdG90eXBlLnJlbmRlcj1Eai5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5faW50ZXJuYWxSb290LGQ9bmV3IENqO2I9dm9pZCAwPT09Yj9udWxsOmI7bnVsbCE9PWImJmQudGhlbihiKTt5aihhLGMsbnVsbCxkLl9vbkNvbW1pdCk7cmV0dXJuIGR9O1xuRWoucHJvdG90eXBlLnVubW91bnQ9RGoucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5faW50ZXJuYWxSb290LGM9bmV3IENqO2E9dm9pZCAwPT09YT9udWxsOmE7bnVsbCE9PWEmJmMudGhlbihhKTt5aihudWxsLGIsbnVsbCxjLl9vbkNvbW1pdCk7cmV0dXJuIGN9O0VqLnByb3RvdHlwZS5jcmVhdGVCYXRjaD1mdW5jdGlvbigpe3ZhciBhPW5ldyBCaih0aGlzKSxiPWEuX2V4cGlyYXRpb25UaW1lLGM9dGhpcy5faW50ZXJuYWxSb290LGQ9Yy5maXJzdEJhdGNoO2lmKG51bGw9PT1kKWMuZmlyc3RCYXRjaD1hLGEuX25leHQ9bnVsbDtlbHNle2ZvcihjPW51bGw7bnVsbCE9PWQmJmQuX2V4cGlyYXRpb25UaW1lPj1iOyljPWQsZD1kLl9uZXh0O2EuX25leHQ9ZDtudWxsIT09YyYmKGMuX25leHQ9YSl9cmV0dXJuIGF9O1xuZnVuY3Rpb24gSGooYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfUpiPWVqO0tiPWZqO0xiPWFqO01iPWZ1bmN0aW9uKGEsYil7dmFyIGM9VTtVfD0yO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1U9YyxVPT09VCYmTygpfX07ZnVuY3Rpb24gSWooYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyBEaihhLDAsYil9XG5mdW5jdGlvbiBKaihhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcixoPXZvaWQgMDtpZihmKXtoPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGc9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9emooaCk7Zy5jYWxsKGEpfX15aihiLGgsYSxlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPUlqKGMsZCk7aD1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBrPWU7ZT1mdW5jdGlvbigpe3ZhciBhPXpqKGgpO2suY2FsbChhKX19Z2ooZnVuY3Rpb24oKXt5aihiLGgsYSxlKX0pfXJldHVybiB6aihoKX1mdW5jdGlvbiBLaihhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCFIaihiKSl0aHJvdyB0KEVycm9yKDIwMCkpO3JldHVybiBBaihhLGIsbnVsbCxjKX1cbnZhciBOaj17Y3JlYXRlUG9ydGFsOktqLGZpbmRET01Ob2RlOmZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpYT1udWxsO2Vsc2UgaWYoMSE9PWEubm9kZVR5cGUpe3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjtpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgdChFcnJvcigxODgpKTt0aHJvdyB0KEVycm9yKDI2OCksT2JqZWN0LmtleXMoYSkpO31hPXFkKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX1yZXR1cm4gYX0saHlkcmF0ZTpmdW5jdGlvbihhLGIsYyl7aWYoIUhqKGIpKXRocm93IHQoRXJyb3IoMjAwKSk7cmV0dXJuIEpqKG51bGwsYSxiLCEwLGMpfSxyZW5kZXI6ZnVuY3Rpb24oYSxiLGMpe2lmKCFIaihiKSl0aHJvdyB0KEVycm9yKDIwMCkpO3JldHVybiBKaihudWxsLGEsYiwhMSxjKX0sdW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI6ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIUhqKGMpKXRocm93IHQoRXJyb3IoMjAwKSk7XG5pZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXIpdGhyb3cgdChFcnJvcigzOCkpO3JldHVybiBKaihhLGIsYywhMSxkKX0sdW5tb3VudENvbXBvbmVudEF0Tm9kZTpmdW5jdGlvbihhKXtpZighSGooYSkpdGhyb3cgdChFcnJvcig0MCkpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KGdqKGZ1bmN0aW9uKCl7SmoobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbH0pfSksITApOiExfSx1bnN0YWJsZV9jcmVhdGVQb3J0YWw6ZnVuY3Rpb24oKXtyZXR1cm4gS2ouYXBwbHkodm9pZCAwLGFyZ3VtZW50cyl9LHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOmVqLHVuc3RhYmxlX2ludGVyYWN0aXZlVXBkYXRlczpmdW5jdGlvbihhLGIsYyxkKXthaigpO3JldHVybiBmaihhLGIsYyxkKX0sdW5zdGFibGVfZGlzY3JldGVVcGRhdGVzOmZqLHVuc3RhYmxlX2ZsdXNoRGlzY3JldGVVcGRhdGVzOmFqLGZsdXNoU3luYzpmdW5jdGlvbihhLFxuYil7aWYoKFUmKENpfERpKSkhPT1UKXRocm93IHQoRXJyb3IoMTg3KSk7dmFyIGM9VTtVfD0xO3RyeXtyZXR1cm4gdmYoOTksYS5iaW5kKG51bGwsYikpfWZpbmFsbHl7VT1jLE8oKX19LHVuc3RhYmxlX2NyZWF0ZVJvb3Q6TGosdW5zdGFibGVfY3JlYXRlU3luY1Jvb3Q6TWosdW5zdGFibGVfZmx1c2hDb250cm9sbGVkOmZ1bmN0aW9uKGEpe3ZhciBiPVU7VXw9MTt0cnl7dmYoOTksYSl9ZmluYWxseXtVPWIsVT09PVQmJk8oKX19LF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntFdmVudHM6W0lhLEphLEthLENhLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSxmYSxRYSxmdW5jdGlvbihhKXt5YShhLFBhKX0sSGIsSWIsVWQsQmEsY2ose2N1cnJlbnQ6ITF9XX19O1xuZnVuY3Rpb24gTGooYSxiKXtpZighSGooYSkpdGhyb3cgdChFcnJvcigyOTkpLFwidW5zdGFibGVfY3JlYXRlUm9vdFwiKTtyZXR1cm4gbmV3IEVqKGEsbnVsbCE9YiYmITA9PT1iLmh5ZHJhdGUpfWZ1bmN0aW9uIE1qKGEsYil7aWYoIUhqKGEpKXRocm93IHQoRXJyb3IoMjk5KSxcInVuc3RhYmxlX2NyZWF0ZVJvb3RcIik7cmV0dXJuIG5ldyBEaihhLDEsbnVsbCE9YiYmITA9PT1iLmh5ZHJhdGUpfVxuKGZ1bmN0aW9uKGEpe3ZhciBiPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIHRqKG0oe30sYSx7b3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpYYi5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9cWQoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH0sZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoOm51bGwsc2NoZWR1bGVSZWZyZXNoOm51bGwsc2NoZWR1bGVSb290Om51bGwsc2V0UmVmcmVzaEhhbmRsZXI6bnVsbCxnZXRDdXJyZW50RmliZXI6bnVsbH0pKX0pKHtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpIYSxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE2LjkuMFwiLFxucmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7dmFyIE9qPXtkZWZhdWx0Ok5qfSxQaj1PaiYmTmp8fE9qO21vZHVsZS5leHBvcnRzPVBqLmRlZmF1bHR8fFBqO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MC4xNS4wXG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGQ9dm9pZCAwLGU9dm9pZCAwLGc9dm9pZCAwLG09dm9pZCAwLG49dm9pZCAwO2V4cG9ydHMudW5zdGFibGVfbm93PXZvaWQgMDtleHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPXZvaWQgMDtcbmlmKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciBwPW51bGwscT1udWxsLHI9ZnVuY3Rpb24oKXtpZihudWxsIT09cCl0cnl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtwKCEwLGEpO3A9bnVsbH1jYXRjaChiKXt0aHJvdyBzZXRUaW1lb3V0KHIsMCksYjt9fTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBEYXRlLm5vdygpfTtkPWZ1bmN0aW9uKGEpe251bGwhPT1wP3NldFRpbWVvdXQoZCwwLGEpOihwPWEsc2V0VGltZW91dChyLDApKX07ZT1mdW5jdGlvbihhLGIpe3E9c2V0VGltZW91dChhLGIpfTtnPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHEpfTttPWZ1bmN0aW9uKCl7cmV0dXJuITF9O249ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbigpe319ZWxzZXt2YXIgdD13aW5kb3cucGVyZm9ybWFuY2UsdT13aW5kb3cuRGF0ZSx2PXdpbmRvdy5zZXRUaW1lb3V0LFxudz13aW5kb3cuY2xlYXJUaW1lb3V0LHg9d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSx5PXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZTtcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUmJihcImZ1bmN0aW9uXCIhPT10eXBlb2YgeCYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgeSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpKTtleHBvcnRzLnVuc3RhYmxlX25vdz1cIm9iamVjdFwiPT09dHlwZW9mIHQmJlxuXCJmdW5jdGlvblwiPT09dHlwZW9mIHQubm93P2Z1bmN0aW9uKCl7cmV0dXJuIHQubm93KCl9OmZ1bmN0aW9uKCl7cmV0dXJuIHUubm93KCl9O3ZhciB6PSExLEE9bnVsbCxCPS0xLEM9LTEsRD0zMy4zMyxFPS0xLEY9LTEsRz0wLEg9ITE7bT1mdW5jdGlvbigpe3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpPj1HfTtuPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKGEpezA+YXx8MTI1PGE/Y29uc29sZS5lcnJvcihcImZvcmNlRnJhbWVSYXRlIHRha2VzIGEgcG9zaXRpdmUgaW50IGJldHdlZW4gMCBhbmQgMTI1LCBmb3JjaW5nIGZyYW1lcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3QgdW5zdXBwb3J0ZWRcIik6MDxhPyhEPU1hdGguZmxvb3IoMUUzL2EpLEg9ITApOihEPTMzLjMzLEg9ITEpfTt2YXIgSj1mdW5jdGlvbigpe2lmKG51bGwhPT1BKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpLGI9MDxHLWE7dHJ5e0EoYixcbmEpfHwoQT1udWxsKX1jYXRjaChjKXt0aHJvdyBJLnBvc3RNZXNzYWdlKG51bGwpLGM7fX19LEs9bmV3IE1lc3NhZ2VDaGFubmVsLEk9Sy5wb3J0MjtLLnBvcnQxLm9ubWVzc2FnZT1KO3ZhciBMPWZ1bmN0aW9uKGEpe2lmKG51bGw9PT1BKUY9RT0tMSx6PSExO2Vsc2V7ej0hMDt4KGZ1bmN0aW9uKGEpe3coQik7TChhKX0pO3ZhciBiPWZ1bmN0aW9uKCl7Rz1leHBvcnRzLnVuc3RhYmxlX25vdygpK0QvMjtKKCk7Qj12KGIsMypEKX07Qj12KGIsMypEKTtpZigtMSE9PUUmJi4xPGEtRSl7dmFyIGM9YS1FOyFIJiYtMSE9PUYmJmM8RCYmRjxEJiYoRD1jPEY/RjpjLDguMzM+RCYmKEQ9OC4zMykpO0Y9Y31FPWE7Rz1hK0Q7SS5wb3N0TWVzc2FnZShudWxsKX19O2Q9ZnVuY3Rpb24oYSl7QT1hO3p8fCh6PSEwLHgoZnVuY3Rpb24oYSl7TChhKX0pKX07ZT1mdW5jdGlvbihhLGIpe0M9dihmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfTtnPWZ1bmN0aW9uKCl7dyhDKTtcbkM9LTF9fXZhciBNPW51bGwsTj1udWxsLE89bnVsbCxQPTMsUT0hMSxSPSExLFM9ITE7XG5mdW5jdGlvbiBUKGEsYil7dmFyIGM9YS5uZXh0O2lmKGM9PT1hKU09bnVsbDtlbHNle2E9PT1NJiYoTT1jKTt2YXIgZj1hLnByZXZpb3VzO2YubmV4dD1jO2MucHJldmlvdXM9Zn1hLm5leHQ9YS5wcmV2aW91cz1udWxsO2M9YS5jYWxsYmFjaztmPVA7dmFyIGw9TztQPWEucHJpb3JpdHlMZXZlbDtPPWE7dHJ5e3ZhciBoPWEuZXhwaXJhdGlvblRpbWU8PWI7c3dpdGNoKFApe2Nhc2UgMTp2YXIgaz1jKGgpO2JyZWFrO2Nhc2UgMjprPWMoaCk7YnJlYWs7Y2FzZSAzOms9YyhoKTticmVhaztjYXNlIDQ6az1jKGgpO2JyZWFrO2Nhc2UgNTprPWMoaCl9fWNhdGNoKFope3Rocm93IFo7fWZpbmFsbHl7UD1mLE89bH1pZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgaylpZihiPWEuZXhwaXJhdGlvblRpbWUsYS5jYWxsYmFjaz1rLG51bGw9PT1NKU09YS5uZXh0PWEucHJldmlvdXM9YTtlbHNle2s9bnVsbDtoPU07ZG97aWYoYjw9aC5leHBpcmF0aW9uVGltZSl7az1oO2JyZWFrfWg9aC5uZXh0fXdoaWxlKGghPT1cbk0pO251bGw9PT1rP2s9TTprPT09TSYmKE09YSk7Yj1rLnByZXZpb3VzO2IubmV4dD1rLnByZXZpb3VzPWE7YS5uZXh0PWs7YS5wcmV2aW91cz1ifX1mdW5jdGlvbiBVKGEpe2lmKG51bGwhPT1OJiZOLnN0YXJ0VGltZTw9YSl7ZG97dmFyIGI9TixjPWIubmV4dDtpZihiPT09YylOPW51bGw7ZWxzZXtOPWM7dmFyIGY9Yi5wcmV2aW91cztmLm5leHQ9YztjLnByZXZpb3VzPWZ9Yi5uZXh0PWIucHJldmlvdXM9bnVsbDtWKGIsYi5leHBpcmF0aW9uVGltZSl9d2hpbGUobnVsbCE9PU4mJk4uc3RhcnRUaW1lPD1hKX19ZnVuY3Rpb24gVyhhKXtTPSExO1UoYSk7Unx8KG51bGwhPT1NPyhSPSEwLGQoWCkpOm51bGwhPT1OJiZlKFcsTi5zdGFydFRpbWUtYSkpfVxuZnVuY3Rpb24gWChhLGIpe1I9ITE7UyYmKFM9ITEsZygpKTtVKGIpO1E9ITA7dHJ5e2lmKCFhKWZvcig7bnVsbCE9PU0mJk0uZXhwaXJhdGlvblRpbWU8PWI7KVQoTSxiKSxiPWV4cG9ydHMudW5zdGFibGVfbm93KCksVShiKTtlbHNlIGlmKG51bGwhPT1NKXtkbyBUKE0sYiksYj1leHBvcnRzLnVuc3RhYmxlX25vdygpLFUoYik7d2hpbGUobnVsbCE9PU0mJiFtKCkpfWlmKG51bGwhPT1NKXJldHVybiEwO251bGwhPT1OJiZlKFcsTi5zdGFydFRpbWUtYik7cmV0dXJuITF9ZmluYWxseXtRPSExfX1mdW5jdGlvbiBZKGEpe3N3aXRjaChhKXtjYXNlIDE6cmV0dXJuLTE7Y2FzZSAyOnJldHVybiAyNTA7Y2FzZSA1OnJldHVybiAxMDczNzQxODIzO2Nhc2UgNDpyZXR1cm4gMUU0O2RlZmF1bHQ6cmV0dXJuIDVFM319XG5mdW5jdGlvbiBWKGEsYil7aWYobnVsbD09PU0pTT1hLm5leHQ9YS5wcmV2aW91cz1hO2Vsc2V7dmFyIGM9bnVsbCxmPU07ZG97aWYoYjxmLmV4cGlyYXRpb25UaW1lKXtjPWY7YnJlYWt9Zj1mLm5leHR9d2hpbGUoZiE9PU0pO251bGw9PT1jP2M9TTpjPT09TSYmKE09YSk7Yj1jLnByZXZpb3VzO2IubmV4dD1jLnByZXZpb3VzPWE7YS5uZXh0PWM7YS5wcmV2aW91cz1ifX12YXIgYWE9bjtleHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtcbmV4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9UDtQPWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXtQPWN9fTtleHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKFApe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPVB9dmFyIGM9UDtQPWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtQPWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGY9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXt2YXIgbD1jLmRlbGF5O2w9XCJudW1iZXJcIj09PXR5cGVvZiBsJiYwPGw/ZitsOmY7Yz1cIm51bWJlclwiPT09dHlwZW9mIGMudGltZW91dD9jLnRpbWVvdXQ6WShhKX1lbHNlIGM9WShhKSxsPWY7Yz1sK2M7YT17Y2FsbGJhY2s6Yixwcmlvcml0eUxldmVsOmEsc3RhcnRUaW1lOmwsZXhwaXJhdGlvblRpbWU6YyxuZXh0Om51bGwscHJldmlvdXM6bnVsbH07aWYobD5mKXtjPWw7aWYobnVsbD09PU4pTj1hLm5leHQ9YS5wcmV2aW91cz1hO2Vsc2V7Yj1udWxsO3ZhciBoPU47ZG97aWYoYzxoLnN0YXJ0VGltZSl7Yj1oO2JyZWFrfWg9aC5uZXh0fXdoaWxlKGghPT1OKTtudWxsPT09Yj9iPU46Yj09PU4mJihOPWEpO2M9Yi5wcmV2aW91cztjLm5leHQ9Yi5wcmV2aW91cz1hO2EubmV4dD1iO2EucHJldmlvdXM9XG5jfW51bGw9PT1NJiZOPT09YSYmKFM/ZygpOlM9ITAsZShXLGwtZikpfWVsc2UgVihhLGMpLFJ8fFF8fChSPSEwLGQoWCkpO3JldHVybiBhfTtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPWEubmV4dDtpZihudWxsIT09Yil7aWYoYT09PWIpYT09PU0/TT1udWxsOmE9PT1OJiYoTj1udWxsKTtlbHNle2E9PT1NP009YjphPT09TiYmKE49Yik7dmFyIGM9YS5wcmV2aW91cztjLm5leHQ9YjtiLnByZXZpb3VzPWN9YS5uZXh0PWEucHJldmlvdXM9bnVsbH19O2V4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPVA7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9UDtQPWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e1A9Y319fTtleHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIFB9O1xuZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7VShhKTtyZXR1cm4gbnVsbCE9PU8mJm51bGwhPT1NJiZNLnN0YXJ0VGltZTw9YSYmTS5leHBpcmF0aW9uVGltZTxPLmV4cGlyYXRpb25UaW1lfHxtKCl9O2V4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PWFhO2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtSfHxRfHwoUj0hMCxkKFgpKX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBNfTtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuOS4wXG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtcbnZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOlxuNjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmZ1bmRhbWVudGFsXCIpOjYwMTE3LHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpOjYwMTE4O2Z1bmN0aW9uIHgoYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIGg6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm4gdX19Y2FzZSB0OmNhc2UgcjpjYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiB5KGEpe3JldHVybiB4KGEpPT09bX1leHBvcnRzLnR5cGVPZj14O2V4cG9ydHMuQXN5bmNNb2RlPWw7XG5leHBvcnRzLkNvbmN1cnJlbnRNb2RlPW07ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aztleHBvcnRzLkNvbnRleHRQcm92aWRlcj1oO2V4cG9ydHMuRWxlbWVudD1jO2V4cG9ydHMuRm9yd2FyZFJlZj1uO2V4cG9ydHMuRnJhZ21lbnQ9ZTtleHBvcnRzLkxhenk9dDtleHBvcnRzLk1lbW89cjtleHBvcnRzLlBvcnRhbD1kO2V4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09dnx8YS4kJHR5cGVvZj09PXcpfTtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpfHx4KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPXk7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4geChhKT09PWt9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHgoYSk9PT1ofTtcbmV4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geChhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geChhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB4KGEpPT09dH07ZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHgoYSk9PT1yfTtleHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB4KGEpPT09ZH07ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB4KGEpPT09Z307ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHgoYSk9PT1mfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHgoYSk9PT1wfTtcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9ndWQgPSByZXF1aXJlKCdndWQnKTtcblxudmFyIF9ndWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ3VkKTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIE1BWF9TSUdORURfMzFfQklUX0lOVCA9IDEwNzM3NDE4MjM7XG5cbi8vIElubGluZWQgT2JqZWN0LmlzIHBvbHlmaWxsLlxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzXG5mdW5jdGlvbiBvYmplY3RJcyh4LCB5KSB7XG4gIGlmICh4ID09PSB5KSB7XG4gICAgcmV0dXJuIHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRXZlbnRFbWl0dGVyKHZhbHVlKSB7XG4gIHZhciBoYW5kbGVycyA9IFtdO1xuICByZXR1cm4ge1xuICAgIG9uOiBmdW5jdGlvbiBvbihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xuICAgIH0sXG4gICAgb2ZmOiBmdW5jdGlvbiBvZmYoaGFuZGxlcikge1xuICAgICAgaGFuZGxlcnMgPSBoYW5kbGVycy5maWx0ZXIoZnVuY3Rpb24gKGgpIHtcbiAgICAgICAgcmV0dXJuIGggIT09IGhhbmRsZXI7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQobmV3VmFsdWUsIGNoYW5nZWRCaXRzKSB7XG4gICAgICB2YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgaGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gaGFuZGxlcih2YWx1ZSwgY2hhbmdlZEJpdHMpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBvbmx5Q2hpbGQoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pID8gY2hpbGRyZW5bMF0gOiBjaGlsZHJlbjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUmVhY3RDb250ZXh0KGRlZmF1bHRWYWx1ZSwgY2FsY3VsYXRlQ2hhbmdlZEJpdHMpIHtcbiAgdmFyIF9Qcm92aWRlciRjaGlsZENvbnRleCwgX0NvbnN1bWVyJGNvbnRleHRUeXBlO1xuXG4gIHZhciBjb250ZXh0UHJvcCA9ICdfX2NyZWF0ZS1yZWFjdC1jb250ZXh0LScgKyAoMCwgX2d1ZDIuZGVmYXVsdCkoKSArICdfXyc7XG5cbiAgdmFyIFByb3ZpZGVyID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoUHJvdmlkZXIsIF9Db21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gUHJvdmlkZXIoKSB7XG4gICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUHJvdmlkZXIpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9Db21wb25lbnQuY2FsbC5hcHBseShfQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuZW1pdHRlciA9IGNyZWF0ZUV2ZW50RW1pdHRlcihfdGhpcy5wcm9wcy52YWx1ZSksIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cblxuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgcmV0dXJuIF9yZWYgPSB7fSwgX3JlZltjb250ZXh0UHJvcF0gPSB0aGlzLmVtaXR0ZXIsIF9yZWY7XG4gICAgfTtcblxuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLnZhbHVlICE9PSBuZXh0UHJvcHMudmFsdWUpIHtcbiAgICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy5wcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gbmV4dFByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgY2hhbmdlZEJpdHMgPSB2b2lkIDA7XG5cbiAgICAgICAgaWYgKG9iamVjdElzKG9sZFZhbHVlLCBuZXdWYWx1ZSkpIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IDA7IC8vIE5vIGNoYW5nZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gdHlwZW9mIGNhbGN1bGF0ZUNoYW5nZWRCaXRzID09PSAnZnVuY3Rpb24nID8gY2FsY3VsYXRlQ2hhbmdlZEJpdHMob2xkVmFsdWUsIG5ld1ZhbHVlKSA6IE1BWF9TSUdORURfMzFfQklUX0lOVDtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KSgoY2hhbmdlZEJpdHMgJiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQpID09PSBjaGFuZ2VkQml0cywgJ2NhbGN1bGF0ZUNoYW5nZWRCaXRzOiBFeHBlY3RlZCB0aGUgcmV0dXJuIHZhbHVlIHRvIGJlIGEgJyArICczMS1iaXQgaW50ZWdlci4gSW5zdGVhZCByZWNlaXZlZDogJXMnLCBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hhbmdlZEJpdHMgfD0gMDtcblxuICAgICAgICAgIGlmIChjaGFuZ2VkQml0cyAhPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0dGVyLnNldChuZXh0UHJvcHMudmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgUHJvdmlkZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH07XG5cbiAgICByZXR1cm4gUHJvdmlkZXI7XG4gIH0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbiAgUHJvdmlkZXIuY2hpbGRDb250ZXh0VHlwZXMgPSAoX1Byb3ZpZGVyJGNoaWxkQ29udGV4ID0ge30sIF9Qcm92aWRlciRjaGlsZENvbnRleFtjb250ZXh0UHJvcF0gPSBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLCBfUHJvdmlkZXIkY2hpbGRDb250ZXgpO1xuXG4gIHZhciBDb25zdW1lciA9IGZ1bmN0aW9uIChfQ29tcG9uZW50Mikge1xuICAgIF9pbmhlcml0cyhDb25zdW1lciwgX0NvbXBvbmVudDIpO1xuXG4gICAgZnVuY3Rpb24gQ29uc3VtZXIoKSB7XG4gICAgICB2YXIgX3RlbXAyLCBfdGhpczIsIF9yZXQyO1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29uc3VtZXIpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmV0MiA9IChfdGVtcDIgPSAoX3RoaXMyID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudDIuY2FsbC5hcHBseShfQ29tcG9uZW50MiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpczIpLCBfdGhpczIuc3RhdGUgPSB7XG4gICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgfSwgX3RoaXMyLm9uVXBkYXRlID0gZnVuY3Rpb24gKG5ld1ZhbHVlLCBjaGFuZ2VkQml0cykge1xuICAgICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gX3RoaXMyLm9ic2VydmVkQml0cyB8IDA7XG4gICAgICAgIGlmICgob2JzZXJ2ZWRCaXRzICYgY2hhbmdlZEJpdHMpICE9PSAwKSB7XG4gICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHsgdmFsdWU6IF90aGlzMi5nZXRWYWx1ZSgpIH0pO1xuICAgICAgICB9XG4gICAgICB9LCBfdGVtcDIpLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpczIsIF9yZXQyKTtcbiAgICB9XG5cbiAgICBDb25zdW1lci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gbmV4dFByb3BzLm9ic2VydmVkQml0cztcblxuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgLy8gU3Vic2NyaWJlIHRvIGFsbCBjaGFuZ2VzIGJ5IGRlZmF1bHRcbiAgICAgIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBDb25zdW1lci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub24odGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG4gICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gdGhpcy5wcm9wcy5vYnNlcnZlZEJpdHM7XG5cbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIC8vIFN1YnNjcmliZSB0byBhbGwgY2hhbmdlcyBieSBkZWZhdWx0XG4gICAgICA6IG9ic2VydmVkQml0cztcbiAgICB9O1xuXG4gICAgQ29uc3VtZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9mZih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQ29uc3VtZXIucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24gZ2V0VmFsdWUoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5nZXQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIENvbnN1bWVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gb25seUNoaWxkKHRoaXMucHJvcHMuY2hpbGRyZW4pKHRoaXMuc3RhdGUudmFsdWUpO1xuICAgIH07XG5cbiAgICByZXR1cm4gQ29uc3VtZXI7XG4gIH0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbiAgQ29uc3VtZXIuY29udGV4dFR5cGVzID0gKF9Db25zdW1lciRjb250ZXh0VHlwZSA9IHt9LCBfQ29uc3VtZXIkY29udGV4dFR5cGVbY29udGV4dFByb3BdID0gX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsIF9Db25zdW1lciRjb250ZXh0VHlwZSk7XG5cblxuICByZXR1cm4ge1xuICAgIFByb3ZpZGVyOiBQcm92aWRlcixcbiAgICBDb25zdW1lcjogQ29uc3VtZXJcbiAgfTtcbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlUmVhY3RDb250ZXh0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCcuL2VtcHR5RnVuY3Rpb24nKTtcblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIHdhcm5pbmcgPSBlbXB0eUZ1bmN0aW9uO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24gcHJpbnRXYXJuaW5nKGZvcm1hdCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICsgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgIH0pO1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKHgpIHt9XG4gIH07XG5cbiAgd2FybmluZyA9IGZ1bmN0aW9uIHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArICdtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuXG4gICAgaWYgKGZvcm1hdC5pbmRleE9mKCdGYWlsZWQgQ29tcG9zaXRlIHByb3BUeXBlOiAnKSA9PT0gMCkge1xuICAgICAgcmV0dXJuOyAvLyBJZ25vcmUgQ29tcG9zaXRlQ29tcG9uZW50IHByb3B0eXBlIGNoZWNrLlxuICAgIH1cblxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMiA+IDIgPyBfbGVuMiAtIDIgOiAwKSwgX2tleTIgPSAyOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTIgLSAyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIHByaW50V2FybmluZy5hcHBseSh1bmRlZmluZWQsIFtmb3JtYXRdLmNvbmNhdChhcmdzKSk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxuZnVuY3Rpb24gbWFrZUVtcHR5RnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGFyZztcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGFjY2VwdHMgYW5kIGRpc2NhcmRzIGlucHV0czsgaXQgaGFzIG5vIHNpZGUgZWZmZWN0cy4gVGhpcyBpc1xuICogcHJpbWFyaWx5IHVzZWZ1bCBpZGlvbWF0aWNhbGx5IGZvciBvdmVycmlkYWJsZSBmdW5jdGlvbiBlbmRwb2ludHMgd2hpY2hcbiAqIGFsd2F5cyBuZWVkIHRvIGJlIGNhbGxhYmxlLCBzaW5jZSBKUyBsYWNrcyBhIG51bGwtY2FsbCBpZGlvbSBhbGEgQ29jb2EuXG4gKi9cbnZhciBlbXB0eUZ1bmN0aW9uID0gZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9O1xuXG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zID0gbWFrZUVtcHR5RnVuY3Rpb247XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2UgPSBtYWtlRW1wdHlGdW5jdGlvbihmYWxzZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKHRydWUpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGwgPSBtYWtlRW1wdHlGdW5jdGlvbihudWxsKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUaGlzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcztcbn07XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zQXJndW1lbnQgPSBmdW5jdGlvbiAoYXJnKSB7XG4gIHJldHVybiBhcmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVtcHR5RnVuY3Rpb247IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgQXhpb3MgPSByZXF1aXJlKCcuL2NvcmUvQXhpb3MnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vY29yZS9tZXJnZUNvbmZpZycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuYXhpb3MuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhheGlvcy5kZWZhdWx0cywgaW5zdGFuY2VDb25maWcpKTtcbn07XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuIiwiLyohXG4gKiBEZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgQnVmZmVyXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQnVmZmVyIChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPSBudWxsICYmIG9iai5jb25zdHJ1Y3RvciAhPSBudWxsICYmXG4gICAgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9tZXJnZUNvbmZpZycpO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gYXJndW1lbnRzWzFdIHx8IHt9O1xuICAgIGNvbmZpZy51cmwgPSBhcmd1bWVudHNbMF07XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICB9XG5cbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QgPyBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCkgOiAnZ2V0JztcblxuICAvLyBIb29rIHVwIGludGVyY2VwdG9ycyBtaWRkbGV3YXJlXG4gIHZhciBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QsIHVuZGVmaW5lZF07XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB3aGlsZSAoY2hhaW4ubGVuZ3RoKSB7XG4gICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLCBjaGFpbi5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcblxuQXhpb3MucHJvdG90eXBlLmdldFVyaSA9IGZ1bmN0aW9uIGdldFVyaShjb25maWcpIHtcbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgcmV0dXJuIGJ1aWxkVVJMKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKS5yZXBsYWNlKC9eXFw/LywgJycpO1xufTtcblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWRcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc0Fic29sdXRlVVJMJyk7XG52YXIgY29tYmluZVVSTHMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBTdXBwb3J0IGJhc2VVUkwgY29uZmlnXG4gIGlmIChjb25maWcuYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChjb25maWcudXJsKSkge1xuICAgIGNvbmZpZy51cmwgPSBjb21iaW5lVVJMcyhjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gIH1cblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzIHx8IHt9XG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4oZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsIG5vcm1hbGl6ZWROYW1lKSB7XG4gIHV0aWxzLmZvckVhY2goaGVhZGVycywgZnVuY3Rpb24gcHJvY2Vzc0hlYWRlcih2YWx1ZSwgbmFtZSkge1xuICAgIGlmIChuYW1lICE9PSBub3JtYWxpemVkTmFtZSAmJiBuYW1lLnRvVXBwZXJDYXNlKCkgPT09IG5vcm1hbGl6ZWROYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZE5hbWVdID0gdmFsdWU7XG4gICAgICBkZWxldGUgaGVhZGVyc1tuYW1lXTtcbiAgICB9XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIG51bGwsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVcGRhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZywgZXJyb3IgY29kZSwgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvciB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBlcnJvci5jb25maWcgPSBjb25maWc7XG4gIGlmIChjb2RlKSB7XG4gICAgZXJyb3IuY29kZSA9IGNvZGU7XG4gIH1cblxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgZXJyb3IuaXNBeGlvc0Vycm9yID0gdHJ1ZTtcblxuICBlcnJvci50b0pTT04gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZyxcbiAgICAgIGNvZGU6IHRoaXMuY29kZVxuICAgIH07XG4gIH07XG4gIHJldHVybiBlcnJvcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLy8gSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbnZhciBpZ25vcmVEdXBsaWNhdGVPZiA9IFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZi5pbmRleE9mKGtleSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSAocGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSA6IFtdKS5jb25jYXQoW3ZhbF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3RcbiAgLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHZhciBtc2llID0gLyhtc2llfHRyaWRlbnQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICAgIHZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgIHZhciBvcmlnaW5VUkw7XG5cbiAgICAgIC8qKlxuICAgICogUGFyc2UgYSBVUkwgdG8gZGlzY292ZXIgaXQncyBjb21wb25lbnRzXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgVVJMIHRvIGJlIHBhcnNlZFxuICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAqL1xuICAgICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgICAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgICAgICAgaWYgKG1zaWUpIHtcbiAgICAgICAgLy8gSUUgbmVlZHMgYXR0cmlidXRlIHNldCB0d2ljZSB0byBub3JtYWxpemUgcHJvcGVydGllc1xuICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgICB9XG5cbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0LFxuICAgICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3RuYW1lOiB1cmxQYXJzaW5nTm9kZS5ob3N0bmFtZSxcbiAgICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgICAvKipcbiAgICAqIERldGVybWluZSBpZiBhIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RVUkwgVGhlIFVSTCB0byB0ZXN0XG4gICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgKi9cbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgICByZXR1cm4gKHBhcnNlZC5wcm90b2NvbCA9PT0gb3JpZ2luVVJMLnByb3RvY29sICYmXG4gICAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVVJMLmhvc3QpO1xuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgICB2YXIgY29va2llID0gW107XG4gICAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGRcXCtcXC1cXC5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59O1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VIYXMob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VIYXM7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSYXdUYWc7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvYmplY3RUb1N0cmluZztcbiIsInZhciBtZW1vaXplQ2FwcGVkID0gcmVxdWlyZSgnLi9fbWVtb2l6ZUNhcHBlZCcpO1xuXG4vKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVQcm9wTmFtZSA9IC9bXi5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwkKSkvZztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggYmFja3NsYXNoZXMgaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVFc2NhcGVDaGFyID0gL1xcXFwoXFxcXCk/L2c7XG5cbi8qKlxuICogQ29udmVydHMgYHN0cmluZ2AgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqL1xudmFyIHN0cmluZ1RvUGF0aCA9IG1lbW9pemVDYXBwZWQoZnVuY3Rpb24oc3RyaW5nKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgaWYgKHN0cmluZy5jaGFyQ29kZUF0KDApID09PSA0NiAvKiAuICovKSB7XG4gICAgcmVzdWx0LnB1c2goJycpO1xuICB9XG4gIHN0cmluZy5yZXBsYWNlKHJlUHJvcE5hbWUsIGZ1bmN0aW9uKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdWJTdHJpbmcpIHtcbiAgICByZXN1bHQucHVzaChxdW90ZSA/IHN1YlN0cmluZy5yZXBsYWNlKHJlRXNjYXBlQ2hhciwgJyQxJykgOiAobnVtYmVyIHx8IG1hdGNoKSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gc3RyaW5nVG9QYXRoO1xuIiwidmFyIG1lbW9pemUgPSByZXF1aXJlKCcuL21lbW9pemUnKTtcblxuLyoqIFVzZWQgYXMgdGhlIG1heGltdW0gbWVtb2l6ZSBjYWNoZSBzaXplLiAqL1xudmFyIE1BWF9NRU1PSVpFX1NJWkUgPSA1MDA7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1lbW9pemVgIHdoaWNoIGNsZWFycyB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24nc1xuICogY2FjaGUgd2hlbiBpdCBleGNlZWRzIGBNQVhfTUVNT0laRV9TSVpFYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG1lbW9pemVDYXBwZWQoZnVuYykge1xuICB2YXIgcmVzdWx0ID0gbWVtb2l6ZShmdW5jLCBmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoY2FjaGUuc2l6ZSA9PT0gTUFYX01FTU9JWkVfU0laRSkge1xuICAgICAgY2FjaGUuY2xlYXIoKTtcbiAgICB9XG4gICAgcmV0dXJuIGtleTtcbiAgfSk7XG5cbiAgdmFyIGNhY2hlID0gcmVzdWx0LmNhY2hlO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1lbW9pemVDYXBwZWQ7XG4iLCJ2YXIgTWFwQ2FjaGUgPSByZXF1aXJlKCcuL19NYXBDYWNoZScpO1xuXG4vKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG1lbW9pemVzIHRoZSByZXN1bHQgb2YgYGZ1bmNgLiBJZiBgcmVzb2x2ZXJgIGlzXG4gKiBwcm92aWRlZCwgaXQgZGV0ZXJtaW5lcyB0aGUgY2FjaGUga2V5IGZvciBzdG9yaW5nIHRoZSByZXN1bHQgYmFzZWQgb24gdGhlXG4gKiBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uLiBCeSBkZWZhdWx0LCB0aGUgZmlyc3QgYXJndW1lbnRcbiAqIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbiBpcyB1c2VkIGFzIHRoZSBtYXAgY2FjaGUga2V5LiBUaGUgYGZ1bmNgXG4gKiBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBtZW1vaXplZCBmdW5jdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogVGhlIGNhY2hlIGlzIGV4cG9zZWQgYXMgdGhlIGBjYWNoZWAgcHJvcGVydHkgb24gdGhlIG1lbW9pemVkXG4gKiBmdW5jdGlvbi4gSXRzIGNyZWF0aW9uIG1heSBiZSBjdXN0b21pemVkIGJ5IHJlcGxhY2luZyB0aGUgYF8ubWVtb2l6ZS5DYWNoZWBcbiAqIGNvbnN0cnVjdG9yIHdpdGggb25lIHdob3NlIGluc3RhbmNlcyBpbXBsZW1lbnQgdGhlXG4gKiBbYE1hcGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXByb3BlcnRpZXMtb2YtdGhlLW1hcC1wcm90b3R5cGUtb2JqZWN0KVxuICogbWV0aG9kIGludGVyZmFjZSBvZiBgY2xlYXJgLCBgZGVsZXRlYCwgYGdldGAsIGBoYXNgLCBhbmQgYHNldGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmVzb2x2ZXJdIFRoZSBmdW5jdGlvbiB0byByZXNvbHZlIHRoZSBjYWNoZSBrZXkuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2MnOiAzLCAnZCc6IDQgfTtcbiAqXG4gKiB2YXIgdmFsdWVzID0gXy5tZW1vaXplKF8udmFsdWVzKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWzEsIDJdXG4gKlxuICogdmFsdWVzKG90aGVyKTtcbiAqIC8vID0+IFszLCA0XVxuICpcbiAqIG9iamVjdC5hID0gMjtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWzEsIDJdXG4gKlxuICogLy8gTW9kaWZ5IHRoZSByZXN1bHQgY2FjaGUuXG4gKiB2YWx1ZXMuY2FjaGUuc2V0KG9iamVjdCwgWydhJywgJ2InXSk7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsnYScsICdiJ11cbiAqXG4gKiAvLyBSZXBsYWNlIGBfLm1lbW9pemUuQ2FjaGVgLlxuICogXy5tZW1vaXplLkNhY2hlID0gV2Vha01hcDtcbiAqL1xuZnVuY3Rpb24gbWVtb2l6ZShmdW5jLCByZXNvbHZlcikge1xuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJyB8fCAocmVzb2x2ZXIgIT0gbnVsbCAmJiB0eXBlb2YgcmVzb2x2ZXIgIT0gJ2Z1bmN0aW9uJykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgdmFyIG1lbW9pemVkID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgIGtleSA9IHJlc29sdmVyID8gcmVzb2x2ZXIuYXBwbHkodGhpcywgYXJncykgOiBhcmdzWzBdLFxuICAgICAgICBjYWNoZSA9IG1lbW9pemVkLmNhY2hlO1xuXG4gICAgaWYgKGNhY2hlLmhhcyhrZXkpKSB7XG4gICAgICByZXR1cm4gY2FjaGUuZ2V0KGtleSk7XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIG1lbW9pemVkLmNhY2hlID0gY2FjaGUuc2V0KGtleSwgcmVzdWx0KSB8fCBjYWNoZTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBtZW1vaXplZC5jYWNoZSA9IG5ldyAobWVtb2l6ZS5DYWNoZSB8fCBNYXBDYWNoZSk7XG4gIHJldHVybiBtZW1vaXplZDtcbn1cblxuLy8gRXhwb3NlIGBNYXBDYWNoZWAuXG5tZW1vaXplLkNhY2hlID0gTWFwQ2FjaGU7XG5cbm1vZHVsZS5leHBvcnRzID0gbWVtb2l6ZTtcbiIsInZhciBIYXNoID0gcmVxdWlyZSgnLi9fSGFzaCcpLFxuICAgIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICB0aGlzLnNpemUgPSAwO1xuICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVDbGVhcjtcbiIsInZhciBoYXNoQ2xlYXIgPSByZXF1aXJlKCcuL19oYXNoQ2xlYXInKSxcbiAgICBoYXNoRGVsZXRlID0gcmVxdWlyZSgnLi9faGFzaERlbGV0ZScpLFxuICAgIGhhc2hHZXQgPSByZXF1aXJlKCcuL19oYXNoR2V0JyksXG4gICAgaGFzaEhhcyA9IHJlcXVpcmUoJy4vX2hhc2hIYXMnKSxcbiAgICBoYXNoU2V0ID0gcmVxdWlyZSgnLi9faGFzaFNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoYXNoIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbkhhc2gucHJvdG90eXBlLmNsZWFyID0gaGFzaENsZWFyO1xuSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbkhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG5IYXNoLnByb3RvdHlwZS5oYXMgPSBoYXNoSGFzO1xuSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBIYXNoO1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgSGFzaFxuICovXG5mdW5jdGlvbiBoYXNoQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoQ2xlYXI7XG4iLCJ2YXIgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaXNGdW5jdGlvbicpLFxuICAgIGlzTWFza2VkID0gcmVxdWlyZSgnLi9faXNNYXNrZWQnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICB0b1NvdXJjZSA9IHJlcXVpcmUoJy4vX3RvU291cmNlJyk7XG5cbi8qKlxuICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gKi9cbnZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbnZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbnZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwYXR0ZXJuID0gaXNGdW5jdGlvbih2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzTmF0aXZlO1xuIiwidmFyIGNvcmVKc0RhdGEgPSByZXF1aXJlKCcuL19jb3JlSnNEYXRhJyk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtZXRob2RzIG1hc3F1ZXJhZGluZyBhcyBuYXRpdmUuICovXG52YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgdmFyIHVpZCA9IC9bXi5dKyQvLmV4ZWMoY29yZUpzRGF0YSAmJiBjb3JlSnNEYXRhLmtleXMgJiYgY29yZUpzRGF0YS5rZXlzLklFX1BST1RPIHx8ICcnKTtcbiAgcmV0dXJuIHVpZCA/ICgnU3ltYm9sKHNyYylfMS4nICsgdWlkKSA6ICcnO1xufSgpKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc01hc2tlZChmdW5jKSB7XG4gIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNNYXNrZWQ7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xudmFyIGNvcmVKc0RhdGEgPSByb290WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxubW9kdWxlLmV4cG9ydHMgPSBjb3JlSnNEYXRhO1xuIiwiLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VmFsdWU7XG4iLCIvKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hEZWxldGU7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoR2V0O1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgcmV0dXJuIG5hdGl2ZUNyZWF0ZSA/IChkYXRhW2tleV0gIT09IHVuZGVmaW5lZCkgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaEhhcztcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaFNldDtcbiIsIi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBbXTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVDbGVhcjtcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgZGF0YS5wb3AoKTtcbiAgfSBlbHNlIHtcbiAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gIH1cbiAgLS10aGlzLnNpemU7XG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZURlbGV0ZTtcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQgOiBkYXRhW2luZGV4XVsxXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVHZXQ7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUhhcztcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICArK3RoaXMuc2l6ZTtcbiAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSBlbHNlIHtcbiAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZVNldDtcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZURlbGV0ZTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgIDogKHZhbHVlID09PSBudWxsKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0tleWFibGU7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBtYXAgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmdldChrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlR2V0O1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVIYXM7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLFxuICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlU2V0O1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGFycmF5TWFwID0gcmVxdWlyZSgnLi9fYXJyYXlNYXAnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDA7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udG9TdHJpbmcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9TdHJpbmdgIHdoaWNoIGRvZXNuJ3QgY29udmVydCBudWxsaXNoXG4gKiB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5ncy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRvU3RyaW5nKHZhbHVlKSB7XG4gIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgLy8gUmVjdXJzaXZlbHkgY29udmVydCB2YWx1ZXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIGJhc2VUb1N0cmluZykgKyAnJztcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN5bWJvbFRvU3RyaW5nID8gc3ltYm9sVG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgfVxuICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVRvU3RyaW5nO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FyZ3VtZW50c2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICovXG5mdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJnc1RhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNBcmd1bWVudHM7XG4iLCJ2YXIgYmFzZUNsb25lID0gcmVxdWlyZSgnLi9fYmFzZUNsb25lJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGNsb25pbmcuICovXG52YXIgQ0xPTkVfREVFUF9GTEFHID0gMSxcbiAgICBDTE9ORV9TWU1CT0xTX0ZMQUcgPSA0O1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVXaXRoYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBjbG9uZXMgYHZhbHVlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmVjdXJzaXZlbHkgY2xvbmUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGRlZXAgY2xvbmVkIHZhbHVlLlxuICogQHNlZSBfLmNsb25lV2l0aFxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBjdXN0b21pemVyKHZhbHVlKSB7XG4gKiAgIGlmIChfLmlzRWxlbWVudCh2YWx1ZSkpIHtcbiAqICAgICByZXR1cm4gdmFsdWUuY2xvbmVOb2RlKHRydWUpO1xuICogICB9XG4gKiB9XG4gKlxuICogdmFyIGVsID0gXy5jbG9uZURlZXBXaXRoKGRvY3VtZW50LmJvZHksIGN1c3RvbWl6ZXIpO1xuICpcbiAqIGNvbnNvbGUubG9nKGVsID09PSBkb2N1bWVudC5ib2R5KTtcbiAqIC8vID0+IGZhbHNlXG4gKiBjb25zb2xlLmxvZyhlbC5ub2RlTmFtZSk7XG4gKiAvLyA9PiAnQk9EWSdcbiAqIGNvbnNvbGUubG9nKGVsLmNoaWxkTm9kZXMubGVuZ3RoKTtcbiAqIC8vID0+IDIwXG4gKi9cbmZ1bmN0aW9uIGNsb25lRGVlcFdpdGgodmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbWl6ZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb25lRGVlcFdpdGg7XG4iLCJ2YXIgU3RhY2sgPSByZXF1aXJlKCcuL19TdGFjaycpLFxuICAgIGFycmF5RWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5RWFjaCcpLFxuICAgIGFzc2lnblZhbHVlID0gcmVxdWlyZSgnLi9fYXNzaWduVmFsdWUnKSxcbiAgICBiYXNlQXNzaWduID0gcmVxdWlyZSgnLi9fYmFzZUFzc2lnbicpLFxuICAgIGJhc2VBc3NpZ25JbiA9IHJlcXVpcmUoJy4vX2Jhc2VBc3NpZ25JbicpLFxuICAgIGNsb25lQnVmZmVyID0gcmVxdWlyZSgnLi9fY2xvbmVCdWZmZXInKSxcbiAgICBjb3B5QXJyYXkgPSByZXF1aXJlKCcuL19jb3B5QXJyYXknKSxcbiAgICBjb3B5U3ltYm9scyA9IHJlcXVpcmUoJy4vX2NvcHlTeW1ib2xzJyksXG4gICAgY29weVN5bWJvbHNJbiA9IHJlcXVpcmUoJy4vX2NvcHlTeW1ib2xzSW4nKSxcbiAgICBnZXRBbGxLZXlzID0gcmVxdWlyZSgnLi9fZ2V0QWxsS2V5cycpLFxuICAgIGdldEFsbEtleXNJbiA9IHJlcXVpcmUoJy4vX2dldEFsbEtleXNJbicpLFxuICAgIGdldFRhZyA9IHJlcXVpcmUoJy4vX2dldFRhZycpLFxuICAgIGluaXRDbG9uZUFycmF5ID0gcmVxdWlyZSgnLi9faW5pdENsb25lQXJyYXknKSxcbiAgICBpbml0Q2xvbmVCeVRhZyA9IHJlcXVpcmUoJy4vX2luaXRDbG9uZUJ5VGFnJyksXG4gICAgaW5pdENsb25lT2JqZWN0ID0gcmVxdWlyZSgnLi9faW5pdENsb25lT2JqZWN0JyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzQnVmZmVyID0gcmVxdWlyZSgnLi9pc0J1ZmZlcicpLFxuICAgIGlzTWFwID0gcmVxdWlyZSgnLi9pc01hcCcpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGlzU2V0ID0gcmVxdWlyZSgnLi9pc1NldCcpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgY2xvbmluZy4gKi9cbnZhciBDTE9ORV9ERUVQX0ZMQUcgPSAxLFxuICAgIENMT05FX0ZMQVRfRkxBRyA9IDIsXG4gICAgQ0xPTkVfU1lNQk9MU19GTEFHID0gNDtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBzdXBwb3J0ZWQgYnkgYF8uY2xvbmVgLiAqL1xudmFyIGNsb25lYWJsZVRhZ3MgPSB7fTtcbmNsb25lYWJsZVRhZ3NbYXJnc1RhZ10gPSBjbG9uZWFibGVUYWdzW2FycmF5VGFnXSA9XG5jbG9uZWFibGVUYWdzW2FycmF5QnVmZmVyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0YVZpZXdUYWddID1cbmNsb25lYWJsZVRhZ3NbYm9vbFRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGVUYWddID1cbmNsb25lYWJsZVRhZ3NbZmxvYXQzMlRhZ10gPSBjbG9uZWFibGVUYWdzW2Zsb2F0NjRUYWddID1cbmNsb25lYWJsZVRhZ3NbaW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW2ludDE2VGFnXSA9XG5jbG9uZWFibGVUYWdzW2ludDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbbWFwVGFnXSA9XG5jbG9uZWFibGVUYWdzW251bWJlclRhZ10gPSBjbG9uZWFibGVUYWdzW29iamVjdFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tyZWdleHBUYWddID0gY2xvbmVhYmxlVGFnc1tzZXRUYWddID1cbmNsb25lYWJsZVRhZ3Nbc3RyaW5nVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc3ltYm9sVGFnXSA9XG5jbG9uZWFibGVUYWdzW3VpbnQ4VGFnXSA9IGNsb25lYWJsZVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9XG5jbG9uZWFibGVUYWdzW3VpbnQxNlRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuY2xvbmVhYmxlVGFnc1tlcnJvclRhZ10gPSBjbG9uZWFibGVUYWdzW2Z1bmNUYWddID1cbmNsb25lYWJsZVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbG9uZWAgYW5kIGBfLmNsb25lRGVlcGAgd2hpY2ggdHJhY2tzXG4gKiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gKiAgMSAtIERlZXAgY2xvbmVcbiAqICAyIC0gRmxhdHRlbiBpbmhlcml0ZWQgcHJvcGVydGllc1xuICogIDQgLSBDbG9uZSBzeW1ib2xzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICogQHBhcmFtIHtzdHJpbmd9IFtrZXldIFRoZSBrZXkgb2YgYHZhbHVlYC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgcGFyZW50IG9iamVjdCBvZiBgdmFsdWVgLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGFuZCB0aGVpciBjbG9uZSBjb3VudGVycGFydHMuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBiYXNlQ2xvbmUodmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgb2JqZWN0LCBzdGFjaykge1xuICB2YXIgcmVzdWx0LFxuICAgICAgaXNEZWVwID0gYml0bWFzayAmIENMT05FX0RFRVBfRkxBRyxcbiAgICAgIGlzRmxhdCA9IGJpdG1hc2sgJiBDTE9ORV9GTEFUX0ZMQUcsXG4gICAgICBpc0Z1bGwgPSBiaXRtYXNrICYgQ0xPTkVfU1lNQk9MU19GTEFHO1xuXG4gIGlmIChjdXN0b21pemVyKSB7XG4gICAgcmVzdWx0ID0gb2JqZWN0ID8gY3VzdG9taXplcih2YWx1ZSwga2V5LCBvYmplY3QsIHN0YWNrKSA6IGN1c3RvbWl6ZXIodmFsdWUpO1xuICB9XG4gIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSk7XG4gIGlmIChpc0Fycikge1xuICAgIHJlc3VsdCA9IGluaXRDbG9uZUFycmF5KHZhbHVlKTtcbiAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgcmV0dXJuIGNvcHlBcnJheSh2YWx1ZSwgcmVzdWx0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSksXG4gICAgICAgIGlzRnVuYyA9IHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWc7XG5cbiAgICBpZiAoaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY2xvbmVCdWZmZXIodmFsdWUsIGlzRGVlcCk7XG4gICAgfVxuICAgIGlmICh0YWcgPT0gb2JqZWN0VGFnIHx8IHRhZyA9PSBhcmdzVGFnIHx8IChpc0Z1bmMgJiYgIW9iamVjdCkpIHtcbiAgICAgIHJlc3VsdCA9IChpc0ZsYXQgfHwgaXNGdW5jKSA/IHt9IDogaW5pdENsb25lT2JqZWN0KHZhbHVlKTtcbiAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgIHJldHVybiBpc0ZsYXRcbiAgICAgICAgICA/IGNvcHlTeW1ib2xzSW4odmFsdWUsIGJhc2VBc3NpZ25JbihyZXN1bHQsIHZhbHVlKSlcbiAgICAgICAgICA6IGNvcHlTeW1ib2xzKHZhbHVlLCBiYXNlQXNzaWduKHJlc3VsdCwgdmFsdWUpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFjbG9uZWFibGVUYWdzW3RhZ10pIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdCA/IHZhbHVlIDoge307XG4gICAgICB9XG4gICAgICByZXN1bHQgPSBpbml0Q2xvbmVCeVRhZyh2YWx1ZSwgdGFnLCBpc0RlZXApO1xuICAgIH1cbiAgfVxuICAvLyBDaGVjayBmb3IgY2lyY3VsYXIgcmVmZXJlbmNlcyBhbmQgcmV0dXJuIGl0cyBjb3JyZXNwb25kaW5nIGNsb25lLlxuICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldCh2YWx1ZSk7XG4gIGlmIChzdGFja2VkKSB7XG4gICAgcmV0dXJuIHN0YWNrZWQ7XG4gIH1cbiAgc3RhY2suc2V0KHZhbHVlLCByZXN1bHQpO1xuXG4gIGlmIChpc1NldCh2YWx1ZSkpIHtcbiAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlKSB7XG4gICAgICByZXN1bHQuYWRkKGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3ViVmFsdWUsIHZhbHVlLCBzdGFjaykpO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKGlzTWFwKHZhbHVlKSkge1xuICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgICAgcmVzdWx0LnNldChrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBrZXlzRnVuYyA9IGlzRnVsbFxuICAgID8gKGlzRmxhdCA/IGdldEFsbEtleXNJbiA6IGdldEFsbEtleXMpXG4gICAgOiAoaXNGbGF0ID8ga2V5c0luIDoga2V5cyk7XG5cbiAgdmFyIHByb3BzID0gaXNBcnIgPyB1bmRlZmluZWQgOiBrZXlzRnVuYyh2YWx1ZSk7XG4gIGFycmF5RWFjaChwcm9wcyB8fCB2YWx1ZSwgZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgIGlmIChwcm9wcykge1xuICAgICAga2V5ID0gc3ViVmFsdWU7XG4gICAgICBzdWJWYWx1ZSA9IHZhbHVlW2tleV07XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IHBvcHVsYXRlIGNsb25lIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgYXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUNsb25lO1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIFN0YWNrXG4gKi9cbmZ1bmN0aW9uIHN0YWNrQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrQ2xlYXI7XG4iLCIvKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0RlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgcmVzdWx0ID0gZGF0YVsnZGVsZXRlJ10oa2V5KTtcblxuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tEZWxldGU7XG4iLCIvKipcbiAqIEdldHMgdGhlIHN0YWNrIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tHZXQ7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBhIHN0YWNrIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrSGFzO1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpLFxuICAgIE1hcENhY2hlID0gcmVxdWlyZSgnLi9fTWFwQ2FjaGUnKTtcblxuLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG52YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuLyoqXG4gKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBzdGFjayBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChkYXRhIGluc3RhbmNlb2YgTGlzdENhY2hlKSB7XG4gICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICBpZiAoIU1hcCB8fCAocGFpcnMubGVuZ3RoIDwgTEFSR0VfQVJSQVlfU0laRSAtIDEpKSB7XG4gICAgICBwYWlycy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB0aGlzLnNpemUgPSArK2RhdGEuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gIH1cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tTZXQ7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlFYWNoKGFycmF5LCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlFYWNoO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpO1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgdmFyIGZ1bmMgPSBnZXROYXRpdmUoT2JqZWN0LCAnZGVmaW5lUHJvcGVydHknKTtcbiAgICBmdW5jKHt9LCAnJywge30pO1xuICAgIHJldHVybiBmdW5jO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZpbmVQcm9wZXJ0eTtcbiIsInZhciBjb3B5T2JqZWN0ID0gcmVxdWlyZSgnLi9fY29weU9iamVjdCcpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VBc3NpZ24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VBc3NpZ247XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRpbWVzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHNcbiAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGluZGV4KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VUaW1lcztcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gKiAvLyA9PiBbZmFsc2UsIGZhbHNlXVxuICovXG5mdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHViRmFsc2U7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG52YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTtcbnR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xudHlwZWRBcnJheVRhZ3NbYXJnc1RhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZXJyb3JUYWddID0gdHlwZWRBcnJheVRhZ3NbZnVuY1RhZ10gPVxudHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbc2V0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3N0cmluZ1RhZ10gPVxudHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1R5cGVkQXJyYXlgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzVHlwZWRBcnJheTtcbiIsInZhciBpc1Byb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2lzUHJvdG90eXBlJyksXG4gICAgbmF0aXZlS2V5cyA9IHJlcXVpcmUoJy4vX25hdGl2ZUtleXMnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VLZXlzO1xuIiwidmFyIG92ZXJBcmcgPSByZXF1aXJlKCcuL19vdmVyQXJnJyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVLZXlzID0gb3ZlckFyZyhPYmplY3Qua2V5cywgT2JqZWN0KTtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXRpdmVLZXlzO1xuIiwidmFyIGNvcHlPYmplY3QgPSByZXF1aXJlKCcuL19jb3B5T2JqZWN0JyksXG4gICAga2V5c0luID0gcmVxdWlyZSgnLi9rZXlzSW4nKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25JbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gKiBvciBgY3VzdG9taXplcmAgZnVuY3Rpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gYmFzZUFzc2lnbkluKG9iamVjdCwgc291cmNlKSB7XG4gIHJldHVybiBvYmplY3QgJiYgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VBc3NpZ25JbjtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICBpc1Byb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2lzUHJvdG90eXBlJyksXG4gICAgbmF0aXZlS2V5c0luID0gcmVxdWlyZSgnLi9fbmF0aXZlS2V5c0luJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c0luYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzSW4ob2JqZWN0KSB7XG4gIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzSW4ob2JqZWN0KTtcbiAgfVxuICB2YXIgaXNQcm90byA9IGlzUHJvdG90eXBlKG9iamVjdCksXG4gICAgICByZXN1bHQgPSBbXTtcblxuICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKCEoa2V5ID09ICdjb25zdHJ1Y3RvcicgJiYgKGlzUHJvdG8gfHwgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUtleXNJbjtcbiIsIi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlXG4gKiBbYE9iamVjdC5rZXlzYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBleGNlcHQgdGhhdCBpdCBpbmNsdWRlcyBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBuYXRpdmVLZXlzSW4ob2JqZWN0KSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgaWYgKG9iamVjdCAhPSBudWxsKSB7XG4gICAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdGl2ZUtleXNJbjtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyByb290LkJ1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICBhbGxvY1Vuc2FmZSA9IEJ1ZmZlciA/IEJ1ZmZlci5hbGxvY1Vuc2FmZSA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgIGBidWZmZXJgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIFRoZSBidWZmZXIgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge0J1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGJ1ZmZlci5cbiAqL1xuZnVuY3Rpb24gY2xvbmVCdWZmZXIoYnVmZmVyLCBpc0RlZXApIHtcbiAgaWYgKGlzRGVlcCkge1xuICAgIHJldHVybiBidWZmZXIuc2xpY2UoKTtcbiAgfVxuICB2YXIgbGVuZ3RoID0gYnVmZmVyLmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IGFsbG9jVW5zYWZlID8gYWxsb2NVbnNhZmUobGVuZ3RoKSA6IG5ldyBidWZmZXIuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICBidWZmZXIuY29weShyZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb25lQnVmZmVyO1xuIiwidmFyIGNvcHlPYmplY3QgPSByZXF1aXJlKCcuL19jb3B5T2JqZWN0JyksXG4gICAgZ2V0U3ltYm9scyA9IHJlcXVpcmUoJy4vX2dldFN5bWJvbHMnKTtcblxuLyoqXG4gKiBDb3BpZXMgb3duIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyB0by5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlTeW1ib2xzKHNvdXJjZSwgb2JqZWN0KSB7XG4gIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9scyhzb3VyY2UpLCBvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcHlTeW1ib2xzO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZmlsdGVyYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5RmlsdGVyKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5RmlsdGVyO1xuIiwidmFyIGNvcHlPYmplY3QgPSByZXF1aXJlKCcuL19jb3B5T2JqZWN0JyksXG4gICAgZ2V0U3ltYm9sc0luID0gcmVxdWlyZSgnLi9fZ2V0U3ltYm9sc0luJyk7XG5cbi8qKlxuICogQ29waWVzIG93biBhbmQgaW5oZXJpdGVkIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyB0by5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlTeW1ib2xzSW4oc291cmNlLCBvYmplY3QpIHtcbiAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzSW4oc291cmNlKSwgb2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb3B5U3ltYm9sc0luO1xuIiwidmFyIGJhc2VHZXRBbGxLZXlzID0gcmVxdWlyZSgnLi9fYmFzZUdldEFsbEtleXMnKSxcbiAgICBnZXRTeW1ib2xzSW4gPSByZXF1aXJlKCcuL19nZXRTeW1ib2xzSW4nKSxcbiAgICBrZXlzSW4gPSByZXF1aXJlKCcuL2tleXNJbicpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGdldEFsbEtleXNJbihvYmplY3QpIHtcbiAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0luLCBnZXRTeW1ib2xzSW4pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEFsbEtleXNJbjtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgRGF0YVZpZXcgPSBnZXROYXRpdmUocm9vdCwgJ0RhdGFWaWV3Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gRGF0YVZpZXc7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFByb21pc2UgPSBnZXROYXRpdmUocm9vdCwgJ1Byb21pc2UnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBQcm9taXNlO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBTZXQgPSBnZXROYXRpdmUocm9vdCwgJ1NldCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNldDtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgV2Vha01hcCA9IGdldE5hdGl2ZShyb290LCAnV2Vha01hcCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdlYWtNYXA7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEluaXRpYWxpemVzIGFuIGFycmF5IGNsb25lLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICovXG5mdW5jdGlvbiBpbml0Q2xvbmVBcnJheShhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gbmV3IGFycmF5LmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgLy8gQWRkIHByb3BlcnRpZXMgYXNzaWduZWQgYnkgYFJlZ0V4cCNleGVjYC5cbiAgaWYgKGxlbmd0aCAmJiB0eXBlb2YgYXJyYXlbMF0gPT0gJ3N0cmluZycgJiYgaGFzT3duUHJvcGVydHkuY2FsbChhcnJheSwgJ2luZGV4JykpIHtcbiAgICByZXN1bHQuaW5kZXggPSBhcnJheS5pbmRleDtcbiAgICByZXN1bHQuaW5wdXQgPSBhcnJheS5pbnB1dDtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluaXRDbG9uZUFycmF5O1xuIiwidmFyIGNsb25lQXJyYXlCdWZmZXIgPSByZXF1aXJlKCcuL19jbG9uZUFycmF5QnVmZmVyJyksXG4gICAgY2xvbmVEYXRhVmlldyA9IHJlcXVpcmUoJy4vX2Nsb25lRGF0YVZpZXcnKSxcbiAgICBjbG9uZVJlZ0V4cCA9IHJlcXVpcmUoJy4vX2Nsb25lUmVnRXhwJyksXG4gICAgY2xvbmVTeW1ib2wgPSByZXF1aXJlKCcuL19jbG9uZVN5bWJvbCcpLFxuICAgIGNsb25lVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vX2Nsb25lVHlwZWRBcnJheScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqXG4gKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUgYmFzZWQgb24gaXRzIGB0b1N0cmluZ1RhZ2AuXG4gKlxuICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjbG9uaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTWFwYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBgU2V0YCwgb3IgYFN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAqL1xuZnVuY3Rpb24gaW5pdENsb25lQnlUYWcob2JqZWN0LCB0YWcsIGlzRGVlcCkge1xuICB2YXIgQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgcmV0dXJuIGNsb25lQXJyYXlCdWZmZXIob2JqZWN0KTtcblxuICAgIGNhc2UgYm9vbFRhZzpcbiAgICBjYXNlIGRhdGVUYWc6XG4gICAgICByZXR1cm4gbmV3IEN0b3IoK29iamVjdCk7XG5cbiAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgcmV0dXJuIGNsb25lRGF0YVZpZXcob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgY2FzZSBmbG9hdDMyVGFnOiBjYXNlIGZsb2F0NjRUYWc6XG4gICAgY2FzZSBpbnQ4VGFnOiBjYXNlIGludDE2VGFnOiBjYXNlIGludDMyVGFnOlxuICAgIGNhc2UgdWludDhUYWc6IGNhc2UgdWludDhDbGFtcGVkVGFnOiBjYXNlIHVpbnQxNlRhZzogY2FzZSB1aW50MzJUYWc6XG4gICAgICByZXR1cm4gY2xvbmVUeXBlZEFycmF5KG9iamVjdCwgaXNEZWVwKTtcblxuICAgIGNhc2UgbWFwVGFnOlxuICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgY2FzZSBudW1iZXJUYWc6XG4gICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICByZXR1cm4gbmV3IEN0b3Iob2JqZWN0KTtcblxuICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgICAgcmV0dXJuIGNsb25lUmVnRXhwKG9iamVjdCk7XG5cbiAgICBjYXNlIHNldFRhZzpcbiAgICAgIHJldHVybiBuZXcgQ3RvcjtcblxuICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgcmV0dXJuIGNsb25lU3ltYm9sKG9iamVjdCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbml0Q2xvbmVCeVRhZztcbiIsInZhciBjbG9uZUFycmF5QnVmZmVyID0gcmVxdWlyZSgnLi9fY2xvbmVBcnJheUJ1ZmZlcicpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgZGF0YVZpZXdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YVZpZXcgVGhlIGRhdGEgdmlldyB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgZGF0YSB2aWV3LlxuICovXG5mdW5jdGlvbiBjbG9uZURhdGFWaWV3KGRhdGFWaWV3LCBpc0RlZXApIHtcbiAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIoZGF0YVZpZXcuYnVmZmVyKSA6IGRhdGFWaWV3LmJ1ZmZlcjtcbiAgcmV0dXJuIG5ldyBkYXRhVmlldy5jb25zdHJ1Y3RvcihidWZmZXIsIGRhdGFWaWV3LmJ5dGVPZmZzZXQsIGRhdGFWaWV3LmJ5dGVMZW5ndGgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb25lRGF0YVZpZXc7XG4iLCIvKiogVXNlZCB0byBtYXRjaCBgUmVnRXhwYCBmbGFncyBmcm9tIHRoZWlyIGNvZXJjZWQgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUZsYWdzID0gL1xcdyokLztcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHJlZ2V4cGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWdleHAgVGhlIHJlZ2V4cCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCByZWdleHAuXG4gKi9cbmZ1bmN0aW9uIGNsb25lUmVnRXhwKHJlZ2V4cCkge1xuICB2YXIgcmVzdWx0ID0gbmV3IHJlZ2V4cC5jb25zdHJ1Y3RvcihyZWdleHAuc291cmNlLCByZUZsYWdzLmV4ZWMocmVnZXhwKSk7XG4gIHJlc3VsdC5sYXN0SW5kZXggPSByZWdleHAubGFzdEluZGV4O1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb25lUmVnRXhwO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGBzeW1ib2xgIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHN5bWJvbCBUaGUgc3ltYm9sIG9iamVjdCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBzeW1ib2wgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBjbG9uZVN5bWJvbChzeW1ib2wpIHtcbiAgcmV0dXJuIHN5bWJvbFZhbHVlT2YgPyBPYmplY3Qoc3ltYm9sVmFsdWVPZi5jYWxsKHN5bWJvbCkpIDoge307XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVTeW1ib2w7XG4iLCJ2YXIgY2xvbmVBcnJheUJ1ZmZlciA9IHJlcXVpcmUoJy4vX2Nsb25lQXJyYXlCdWZmZXInKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHR5cGVkQXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gdHlwZWRBcnJheSBUaGUgdHlwZWQgYXJyYXkgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHR5cGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBjbG9uZVR5cGVkQXJyYXkodHlwZWRBcnJheSwgaXNEZWVwKSB7XG4gIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKHR5cGVkQXJyYXkuYnVmZmVyKSA6IHR5cGVkQXJyYXkuYnVmZmVyO1xuICByZXR1cm4gbmV3IHR5cGVkQXJyYXkuY29uc3RydWN0b3IoYnVmZmVyLCB0eXBlZEFycmF5LmJ5dGVPZmZzZXQsIHR5cGVkQXJyYXkubGVuZ3RoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZVR5cGVkQXJyYXk7XG4iLCJ2YXIgYmFzZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX2Jhc2VDcmVhdGUnKSxcbiAgICBnZXRQcm90b3R5cGUgPSByZXF1aXJlKCcuL19nZXRQcm90b3R5cGUnKSxcbiAgICBpc1Byb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2lzUHJvdG90eXBlJyk7XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAqL1xuZnVuY3Rpb24gaW5pdENsb25lT2JqZWN0KG9iamVjdCkge1xuICByZXR1cm4gKHR5cGVvZiBvYmplY3QuY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNQcm90b3R5cGUob2JqZWN0KSlcbiAgICA/IGJhc2VDcmVhdGUoZ2V0UHJvdG90eXBlKG9iamVjdCkpXG4gICAgOiB7fTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbml0Q2xvbmVPYmplY3Q7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdENyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY3JlYXRlYCB3aXRob3V0IHN1cHBvcnQgZm9yIGFzc2lnbmluZ1xuICogcHJvcGVydGllcyB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm90byBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gKi9cbnZhciBiYXNlQ3JlYXRlID0gKGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBvYmplY3QoKSB7fVxuICByZXR1cm4gZnVuY3Rpb24ocHJvdG8pIHtcbiAgICBpZiAoIWlzT2JqZWN0KHByb3RvKSkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICBpZiAob2JqZWN0Q3JlYXRlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0Q3JlYXRlKHByb3RvKTtcbiAgICB9XG4gICAgb2JqZWN0LnByb3RvdHlwZSA9IHByb3RvO1xuICAgIHZhciByZXN1bHQgPSBuZXcgb2JqZWN0O1xuICAgIG9iamVjdC5wcm90b3R5cGUgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn0oKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUNyZWF0ZTtcbiIsInZhciBiYXNlSXNNYXAgPSByZXF1aXJlKCcuL19iYXNlSXNNYXAnKSxcbiAgICBiYXNlVW5hcnkgPSByZXF1aXJlKCcuL19iYXNlVW5hcnknKSxcbiAgICBub2RlVXRpbCA9IHJlcXVpcmUoJy4vX25vZGVVdGlsJyk7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzTWFwID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNNYXA7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBNYXBgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG1hcCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTWFwKG5ldyBNYXApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNNYXAobmV3IFdlYWtNYXApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzTWFwID0gbm9kZUlzTWFwID8gYmFzZVVuYXJ5KG5vZGVJc01hcCkgOiBiYXNlSXNNYXA7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNNYXA7XG4iLCJ2YXIgZ2V0VGFnID0gcmVxdWlyZSgnLi9fZ2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWFwYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG1hcCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNNYXAodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSBtYXBUYWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzTWFwO1xuIiwidmFyIGJhc2VJc1NldCA9IHJlcXVpcmUoJy4vX2Jhc2VJc1NldCcpLFxuICAgIGJhc2VVbmFyeSA9IHJlcXVpcmUoJy4vX2Jhc2VVbmFyeScpLFxuICAgIG5vZGVVdGlsID0gcmVxdWlyZSgnLi9fbm9kZVV0aWwnKTtcblxuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbnZhciBub2RlSXNTZXQgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1NldDtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFNldGAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2V0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTZXQobmV3IFNldCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1NldChuZXcgV2Vha1NldCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNTZXQgPSBub2RlSXNTZXQgPyBiYXNlVW5hcnkobm9kZUlzU2V0KSA6IGJhc2VJc1NldDtcblxubW9kdWxlLmV4cG9ydHMgPSBpc1NldDtcbiIsInZhciBnZXRUYWcgPSByZXF1aXJlKCcuL19nZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc2V0VGFnID0gJ1tvYmplY3QgU2V0XSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNTZXRgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2V0LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1NldCh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IHNldFRhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNTZXQ7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgY29weUFycmF5ID0gcmVxdWlyZSgnLi9fY29weUFycmF5JyksXG4gICAgZ2V0VGFnID0gcmVxdWlyZSgnLi9fZ2V0VGFnJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyksXG4gICAgaXNTdHJpbmcgPSByZXF1aXJlKCcuL2lzU3RyaW5nJyksXG4gICAgaXRlcmF0b3JUb0FycmF5ID0gcmVxdWlyZSgnLi9faXRlcmF0b3JUb0FycmF5JyksXG4gICAgbWFwVG9BcnJheSA9IHJlcXVpcmUoJy4vX21hcFRvQXJyYXknKSxcbiAgICBzZXRUb0FycmF5ID0gcmVxdWlyZSgnLi9fc2V0VG9BcnJheScpLFxuICAgIHN0cmluZ1RvQXJyYXkgPSByZXF1aXJlKCcuL19zdHJpbmdUb0FycmF5JyksXG4gICAgdmFsdWVzID0gcmVxdWlyZSgnLi92YWx1ZXMnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1JdGVyYXRvciA9IFN5bWJvbCA/IFN5bWJvbC5pdGVyYXRvciA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9BcnJheSh7ICdhJzogMSwgJ2InOiAyIH0pO1xuICogLy8gPT4gWzEsIDJdXG4gKlxuICogXy50b0FycmF5KCdhYmMnKTtcbiAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICpcbiAqIF8udG9BcnJheSgxKTtcbiAqIC8vID0+IFtdXG4gKlxuICogXy50b0FycmF5KG51bGwpO1xuICogLy8gPT4gW11cbiAqL1xuZnVuY3Rpb24gdG9BcnJheSh2YWx1ZSkge1xuICBpZiAoIXZhbHVlKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIGlmIChpc0FycmF5TGlrZSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gaXNTdHJpbmcodmFsdWUpID8gc3RyaW5nVG9BcnJheSh2YWx1ZSkgOiBjb3B5QXJyYXkodmFsdWUpO1xuICB9XG4gIGlmIChzeW1JdGVyYXRvciAmJiB2YWx1ZVtzeW1JdGVyYXRvcl0pIHtcbiAgICByZXR1cm4gaXRlcmF0b3JUb0FycmF5KHZhbHVlW3N5bUl0ZXJhdG9yXSgpKTtcbiAgfVxuICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKSxcbiAgICAgIGZ1bmMgPSB0YWcgPT0gbWFwVGFnID8gbWFwVG9BcnJheSA6ICh0YWcgPT0gc2V0VGFnID8gc2V0VG9BcnJheSA6IHZhbHVlcyk7XG5cbiAgcmV0dXJuIGZ1bmModmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvQXJyYXk7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3RyaW5nYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3RyaW5nLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTdHJpbmcoJ2FiYycpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTdHJpbmcoMSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8XG4gICAgKCFpc0FycmF5KHZhbHVlKSAmJiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN0cmluZ1RhZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNTdHJpbmc7XG4iLCIvKipcbiAqIENvbnZlcnRzIGBpdGVyYXRvcmAgdG8gYW4gYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBpdGVyYXRvciBUaGUgaXRlcmF0b3IgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBpdGVyYXRvclRvQXJyYXkoaXRlcmF0b3IpIHtcbiAgdmFyIGRhdGEsXG4gICAgICByZXN1bHQgPSBbXTtcblxuICB3aGlsZSAoIShkYXRhID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgcmVzdWx0LnB1c2goZGF0YS52YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpdGVyYXRvclRvQXJyYXk7XG4iLCIvKipcbiAqIENvbnZlcnRzIGFuIEFTQ0lJIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhc2NpaVRvQXJyYXkoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcuc3BsaXQoJycpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzY2lpVG9BcnJheTtcbiIsIi8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjaGFyYWN0ZXIgY2xhc3Nlcy4gKi9cbnZhciByc0FzdHJhbFJhbmdlID0gJ1xcXFx1ZDgwMC1cXFxcdWRmZmYnLFxuICAgIHJzQ29tYm9NYXJrc1JhbmdlID0gJ1xcXFx1MDMwMC1cXFxcdTAzNmYnLFxuICAgIHJlQ29tYm9IYWxmTWFya3NSYW5nZSA9ICdcXFxcdWZlMjAtXFxcXHVmZTJmJyxcbiAgICByc0NvbWJvU3ltYm9sc1JhbmdlID0gJ1xcXFx1MjBkMC1cXFxcdTIwZmYnLFxuICAgIHJzQ29tYm9SYW5nZSA9IHJzQ29tYm9NYXJrc1JhbmdlICsgcmVDb21ib0hhbGZNYXJrc1JhbmdlICsgcnNDb21ib1N5bWJvbHNSYW5nZSxcbiAgICByc1ZhclJhbmdlID0gJ1xcXFx1ZmUwZVxcXFx1ZmUwZic7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjYXB0dXJlIGdyb3Vwcy4gKi9cbnZhciByc0FzdHJhbCA9ICdbJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgcnNDb21ibyA9ICdbJyArIHJzQ29tYm9SYW5nZSArICddJyxcbiAgICByc0ZpdHogPSAnXFxcXHVkODNjW1xcXFx1ZGZmYi1cXFxcdWRmZmZdJyxcbiAgICByc01vZGlmaWVyID0gJyg/OicgKyByc0NvbWJvICsgJ3wnICsgcnNGaXR6ICsgJyknLFxuICAgIHJzTm9uQXN0cmFsID0gJ1teJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgcnNSZWdpb25hbCA9ICcoPzpcXFxcdWQ4M2NbXFxcXHVkZGU2LVxcXFx1ZGRmZl0pezJ9JyxcbiAgICByc1N1cnJQYWlyID0gJ1tcXFxcdWQ4MDAtXFxcXHVkYmZmXVtcXFxcdWRjMDAtXFxcXHVkZmZmXScsXG4gICAgcnNaV0ogPSAnXFxcXHUyMDBkJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIHJlZ2V4ZXMuICovXG52YXIgcmVPcHRNb2QgPSByc01vZGlmaWVyICsgJz8nLFxuICAgIHJzT3B0VmFyID0gJ1snICsgcnNWYXJSYW5nZSArICddPycsXG4gICAgcnNPcHRKb2luID0gJyg/OicgKyByc1pXSiArICcoPzonICsgW3JzTm9uQXN0cmFsLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc09wdFZhciArIHJlT3B0TW9kICsgJykqJyxcbiAgICByc1NlcSA9IHJzT3B0VmFyICsgcmVPcHRNb2QgKyByc09wdEpvaW4sXG4gICAgcnNTeW1ib2wgPSAnKD86JyArIFtyc05vbkFzdHJhbCArIHJzQ29tYm8gKyAnPycsIHJzQ29tYm8sIHJzUmVnaW9uYWwsIHJzU3VyclBhaXIsIHJzQXN0cmFsXS5qb2luKCd8JykgKyAnKSc7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIFtzdHJpbmcgc3ltYm9sc10oaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtdW5pY29kZSkuICovXG52YXIgcmVVbmljb2RlID0gUmVnRXhwKHJzRml0eiArICcoPz0nICsgcnNGaXR6ICsgJyl8JyArIHJzU3ltYm9sICsgcnNTZXEsICdnJyk7XG5cbi8qKlxuICogQ29udmVydHMgYSBVbmljb2RlIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiB1bmljb2RlVG9BcnJheShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5tYXRjaChyZVVuaWNvZGUpIHx8IFtdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHVuaWNvZGVUb0FycmF5O1xuIiwidmFyIGJhc2VWYWx1ZXMgPSByZXF1aXJlKCcuL19iYXNlVmFsdWVzJyksXG4gICAga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eSB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8udmFsdWVzKG5ldyBGb28pO1xuICogLy8gPT4gWzEsIDJdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKlxuICogXy52YWx1ZXMoJ2hpJyk7XG4gKiAvLyA9PiBbJ2gnLCAnaSddXG4gKi9cbmZ1bmN0aW9uIHZhbHVlcyhvYmplY3QpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlVmFsdWVzKG9iamVjdCwga2V5cyhvYmplY3QpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB2YWx1ZXM7XG4iLCJ2YXIgYXJyYXlNYXAgPSByZXF1aXJlKCcuL19hcnJheU1hcCcpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnZhbHVlc2AgYW5kIGBfLnZhbHVlc0luYCB3aGljaCBjcmVhdGVzIGFuXG4gKiBhcnJheSBvZiBgb2JqZWN0YCBwcm9wZXJ0eSB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvcGVydHkgbmFtZXNcbiAqIG9mIGBwcm9wc2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBnZXQgdmFsdWVzIGZvci5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gYmFzZVZhbHVlcyhvYmplY3QsIHByb3BzKSB7XG4gIHJldHVybiBhcnJheU1hcChwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIG9iamVjdFtrZXldO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVmFsdWVzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2hhcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImxvZGFzaC9oYXNcIikpO1xuXG52YXIgX2lzU2NoZW1hID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2lzU2NoZW1hXCIpKTtcblxudmFyIENvbmRpdGlvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIENvbmRpdGlvbihyZWZzLCBvcHRpb25zKSB7XG4gICAgdGhpcy5yZWZzID0gcmVmcztcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpcy5mbiA9IG9wdGlvbnM7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCEoMCwgX2hhcy5kZWZhdWx0KShvcHRpb25zLCAnaXMnKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignYGlzOmAgaXMgcmVxdWlyZWQgZm9yIGB3aGVuKClgIGNvbmRpdGlvbnMnKTtcbiAgICBpZiAoIW9wdGlvbnMudGhlbiAmJiAhb3B0aW9ucy5vdGhlcndpc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VpdGhlciBgdGhlbjpgIG9yIGBvdGhlcndpc2U6YCBpcyByZXF1aXJlZCBmb3IgYHdoZW4oKWAgY29uZGl0aW9ucycpO1xuICAgIHZhciBpcyA9IG9wdGlvbnMuaXMsXG4gICAgICAgIHRoZW4gPSBvcHRpb25zLnRoZW4sXG4gICAgICAgIG90aGVyd2lzZSA9IG9wdGlvbnMub3RoZXJ3aXNlO1xuICAgIHZhciBjaGVjayA9IHR5cGVvZiBpcyA9PT0gJ2Z1bmN0aW9uJyA/IGlzIDogZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHZhbHVlcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgdmFsdWVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsdWVzLmV2ZXJ5KGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IGlzO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHRoaXMuZm4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3MucG9wKCk7XG4gICAgICB2YXIgc2NoZW1hID0gYXJncy5wb3AoKTtcbiAgICAgIHZhciBicmFuY2ggPSBjaGVjay5hcHBseSh2b2lkIDAsIGFyZ3MpID8gdGhlbiA6IG90aGVyd2lzZTtcbiAgICAgIGlmICghYnJhbmNoKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgaWYgKHR5cGVvZiBicmFuY2ggPT09ICdmdW5jdGlvbicpIHJldHVybiBicmFuY2goc2NoZW1hKTtcbiAgICAgIHJldHVybiBzY2hlbWEuY29uY2F0KGJyYW5jaC5yZXNvbHZlKG9wdGlvbnMpKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIF9wcm90byA9IENvbmRpdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlc29sdmUgPSBmdW5jdGlvbiByZXNvbHZlKGJhc2UsIG9wdGlvbnMpIHtcbiAgICB2YXIgdmFsdWVzID0gdGhpcy5yZWZzLm1hcChmdW5jdGlvbiAocmVmKSB7XG4gICAgICByZXR1cm4gcmVmLmdldFZhbHVlKG9wdGlvbnMpO1xuICAgIH0pO1xuICAgIHZhciBzY2hlbWEgPSB0aGlzLmZuLmFwcGx5KGJhc2UsIHZhbHVlcy5jb25jYXQoYmFzZSwgb3B0aW9ucykpO1xuICAgIGlmIChzY2hlbWEgPT09IHVuZGVmaW5lZCB8fCBzY2hlbWEgPT09IGJhc2UpIHJldHVybiBiYXNlO1xuICAgIGlmICghKDAsIF9pc1NjaGVtYS5kZWZhdWx0KShzY2hlbWEpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdjb25kaXRpb25zIG11c3QgcmV0dXJuIGEgc2NoZW1hIG9iamVjdCcpO1xuICAgIHJldHVybiBzY2hlbWEucmVzb2x2ZShvcHRpb25zKTtcbiAgfTtcblxuICByZXR1cm4gQ29uZGl0aW9uO1xufSgpO1xuXG52YXIgX2RlZmF1bHQgPSBDb25kaXRpb247XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gcHJlcGVuZERlZXA7XG5cbnZhciBfaGFzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibG9kYXNoL2hhc1wiKSk7XG5cbnZhciBfaXNTY2hlbWEgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2lzU2NoZW1hXCIpKTtcblxudmFyIGlzT2JqZWN0ID0gZnVuY3Rpb24gaXNPYmplY3Qob2JqKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XG59O1xuXG5mdW5jdGlvbiBwcmVwZW5kRGVlcCh0YXJnZXQsIHNvdXJjZSkge1xuICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgaWYgKCgwLCBfaGFzLmRlZmF1bHQpKHNvdXJjZSwga2V5KSkge1xuICAgICAgdmFyIHNvdXJjZVZhbCA9IHNvdXJjZVtrZXldLFxuICAgICAgICAgIHRhcmdldFZhbCA9IHRhcmdldFtrZXldO1xuXG4gICAgICBpZiAodGFyZ2V0VmFsID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2VWYWw7XG4gICAgICB9IGVsc2UgaWYgKHRhcmdldFZhbCA9PT0gc291cmNlVmFsKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSBlbHNlIGlmICgoMCwgX2lzU2NoZW1hLmRlZmF1bHQpKHRhcmdldFZhbCkpIHtcbiAgICAgICAgaWYgKCgwLCBfaXNTY2hlbWEuZGVmYXVsdCkoc291cmNlVmFsKSkgdGFyZ2V0W2tleV0gPSBzb3VyY2VWYWwuY29uY2F0KHRhcmdldFZhbCk7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHRhcmdldFZhbCkpIHtcbiAgICAgICAgaWYgKGlzT2JqZWN0KHNvdXJjZVZhbCkpIHRhcmdldFtrZXldID0gcHJlcGVuZERlZXAodGFyZ2V0VmFsLCBzb3VyY2VWYWwpO1xuICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHRhcmdldFZhbCkpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc291cmNlVmFsKSkgdGFyZ2V0W2tleV0gPSBzb3VyY2VWYWwuY29uY2F0KHRhcmdldFZhbCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmNyZWF0ZUVycm9yRmFjdG9yeSA9IGNyZWF0ZUVycm9yRmFjdG9yeTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZVZhbGlkYXRpb247XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9tYXBWYWx1ZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJsb2Rhc2gvbWFwVmFsdWVzXCIpKTtcblxudmFyIF9WYWxpZGF0aW9uRXJyb3IgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9WYWxpZGF0aW9uRXJyb3JcIikpO1xuXG52YXIgX1JlZmVyZW5jZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL1JlZmVyZW5jZVwiKSk7XG5cbnZhciBfc3luY2hyb25vdXNQcm9taXNlID0gcmVxdWlyZShcInN5bmNocm9ub3VzLXByb21pc2VcIik7XG5cbnZhciBmb3JtYXRFcnJvciA9IF9WYWxpZGF0aW9uRXJyb3IuZGVmYXVsdC5mb3JtYXRFcnJvcjtcblxudmFyIHRoZW5hYmxlID0gZnVuY3Rpb24gdGhlbmFibGUocCkge1xuICByZXR1cm4gcCAmJiB0eXBlb2YgcC50aGVuID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBwLmNhdGNoID09PSAnZnVuY3Rpb24nO1xufTtcblxuZnVuY3Rpb24gcnVuVGVzdCh0ZXN0Rm4sIGN0eCwgdmFsdWUsIHN5bmMpIHtcbiAgdmFyIHJlc3VsdCA9IHRlc3RGbi5jYWxsKGN0eCwgdmFsdWUpO1xuICBpZiAoIXN5bmMpIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzdWx0KTtcblxuICBpZiAodGhlbmFibGUocmVzdWx0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlZhbGlkYXRpb24gdGVzdCBvZiB0eXBlOiBcXFwiXCIgKyBjdHgudHlwZSArIFwiXFxcIiByZXR1cm5lZCBhIFByb21pc2UgZHVyaW5nIGEgc3luY2hyb25vdXMgdmFsaWRhdGUuIFwiICsgXCJUaGlzIHRlc3Qgd2lsbCBmaW5pc2ggYWZ0ZXIgdGhlIHZhbGlkYXRlIGNhbGwgaGFzIHJldHVybmVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIF9zeW5jaHJvbm91c1Byb21pc2UuU3luY2hyb25vdXNQcm9taXNlLnJlc29sdmUocmVzdWx0KTtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVBhcmFtcyhvbGRQYXJhbXMsIG5ld1BhcmFtcywgcmVzb2x2ZSkge1xuICByZXR1cm4gKDAsIF9tYXBWYWx1ZXMuZGVmYXVsdCkoKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgb2xkUGFyYW1zLCBuZXdQYXJhbXMpLCByZXNvbHZlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRXJyb3JGYWN0b3J5KF9yZWYpIHtcbiAgdmFyIHZhbHVlID0gX3JlZi52YWx1ZSxcbiAgICAgIGxhYmVsID0gX3JlZi5sYWJlbCxcbiAgICAgIHJlc29sdmUgPSBfcmVmLnJlc29sdmUsXG4gICAgICBvcmlnaW5hbFZhbHVlID0gX3JlZi5vcmlnaW5hbFZhbHVlLFxuICAgICAgb3B0cyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoX3JlZiwgW1widmFsdWVcIiwgXCJsYWJlbFwiLCBcInJlc29sdmVcIiwgXCJvcmlnaW5hbFZhbHVlXCJdKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZUVycm9yKF90ZW1wKSB7XG4gICAgdmFyIF9yZWYyID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICAgIF9yZWYyJHBhdGggPSBfcmVmMi5wYXRoLFxuICAgICAgICBwYXRoID0gX3JlZjIkcGF0aCA9PT0gdm9pZCAwID8gb3B0cy5wYXRoIDogX3JlZjIkcGF0aCxcbiAgICAgICAgX3JlZjIkbWVzc2FnZSA9IF9yZWYyLm1lc3NhZ2UsXG4gICAgICAgIG1lc3NhZ2UgPSBfcmVmMiRtZXNzYWdlID09PSB2b2lkIDAgPyBvcHRzLm1lc3NhZ2UgOiBfcmVmMiRtZXNzYWdlLFxuICAgICAgICBfcmVmMiR0eXBlID0gX3JlZjIudHlwZSxcbiAgICAgICAgdHlwZSA9IF9yZWYyJHR5cGUgPT09IHZvaWQgMCA/IG9wdHMubmFtZSA6IF9yZWYyJHR5cGUsXG4gICAgICAgIHBhcmFtcyA9IF9yZWYyLnBhcmFtcztcblxuICAgIHBhcmFtcyA9ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgcGF0aDogcGF0aCxcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIG9yaWdpbmFsVmFsdWU6IG9yaWdpbmFsVmFsdWUsXG4gICAgICBsYWJlbDogbGFiZWxcbiAgICB9LCByZXNvbHZlUGFyYW1zKG9wdHMucGFyYW1zLCBwYXJhbXMsIHJlc29sdmUpKTtcbiAgICByZXR1cm4gKDAsIF9leHRlbmRzMi5kZWZhdWx0KShuZXcgX1ZhbGlkYXRpb25FcnJvci5kZWZhdWx0KGZvcm1hdEVycm9yKG1lc3NhZ2UsIHBhcmFtcyksIHZhbHVlLCBwYXRoLCB0eXBlKSwge1xuICAgICAgcGFyYW1zOiBwYXJhbXNcbiAgICB9KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVmFsaWRhdGlvbihvcHRpb25zKSB7XG4gIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lLFxuICAgICAgbWVzc2FnZSA9IG9wdGlvbnMubWVzc2FnZSxcbiAgICAgIHRlc3QgPSBvcHRpb25zLnRlc3QsXG4gICAgICBwYXJhbXMgPSBvcHRpb25zLnBhcmFtcztcblxuICBmdW5jdGlvbiB2YWxpZGF0ZShfcmVmMykge1xuICAgIHZhciB2YWx1ZSA9IF9yZWYzLnZhbHVlLFxuICAgICAgICBwYXRoID0gX3JlZjMucGF0aCxcbiAgICAgICAgbGFiZWwgPSBfcmVmMy5sYWJlbCxcbiAgICAgICAgb3B0aW9ucyA9IF9yZWYzLm9wdGlvbnMsXG4gICAgICAgIG9yaWdpbmFsVmFsdWUgPSBfcmVmMy5vcmlnaW5hbFZhbHVlLFxuICAgICAgICBzeW5jID0gX3JlZjMuc3luYyxcbiAgICAgICAgcmVzdCA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoX3JlZjMsIFtcInZhbHVlXCIsIFwicGF0aFwiLCBcImxhYmVsXCIsIFwib3B0aW9uc1wiLCBcIm9yaWdpbmFsVmFsdWVcIiwgXCJzeW5jXCJdKTtcbiAgICB2YXIgcGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG5cbiAgICB2YXIgcmVzb2x2ZSA9IGZ1bmN0aW9uIHJlc29sdmUoaXRlbSkge1xuICAgICAgcmV0dXJuIF9SZWZlcmVuY2UuZGVmYXVsdC5pc1JlZihpdGVtKSA/IGl0ZW0uZ2V0VmFsdWUoe1xuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgICBjb250ZXh0OiBvcHRpb25zLmNvbnRleHRcbiAgICAgIH0pIDogaXRlbTtcbiAgICB9O1xuXG4gICAgdmFyIGNyZWF0ZUVycm9yID0gY3JlYXRlRXJyb3JGYWN0b3J5KHtcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBwYXRoOiBwYXRoLFxuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgb3JpZ2luYWxWYWx1ZTogb3JpZ2luYWxWYWx1ZSxcbiAgICAgIHBhcmFtczogcGFyYW1zLFxuICAgICAgbGFiZWw6IGxhYmVsLFxuICAgICAgcmVzb2x2ZTogcmVzb2x2ZSxcbiAgICAgIG5hbWU6IG5hbWVcbiAgICB9KTtcbiAgICB2YXIgY3R4ID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICBwYXRoOiBwYXRoLFxuICAgICAgcGFyZW50OiBwYXJlbnQsXG4gICAgICB0eXBlOiBuYW1lLFxuICAgICAgY3JlYXRlRXJyb3I6IGNyZWF0ZUVycm9yLFxuICAgICAgcmVzb2x2ZTogcmVzb2x2ZSxcbiAgICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgICB9LCByZXN0KTtcbiAgICByZXR1cm4gcnVuVGVzdCh0ZXN0LCBjdHgsIHZhbHVlLCBzeW5jKS50aGVuKGZ1bmN0aW9uICh2YWxpZE9yRXJyb3IpIHtcbiAgICAgIGlmIChfVmFsaWRhdGlvbkVycm9yLmRlZmF1bHQuaXNFcnJvcih2YWxpZE9yRXJyb3IpKSB0aHJvdyB2YWxpZE9yRXJyb3I7ZWxzZSBpZiAoIXZhbGlkT3JFcnJvcikgdGhyb3cgY3JlYXRlRXJyb3IoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhbGlkYXRlLk9QVElPTlMgPSBvcHRpb25zO1xuICByZXR1cm4gdmFsaWRhdGU7XG59IiwidmFyIGNyZWF0ZUJhc2VGb3IgPSByZXF1aXJlKCcuL19jcmVhdGVCYXNlRm9yJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGJhc2VGb3JPd25gIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYG9iamVjdGBcbiAqIHByb3BlcnRpZXMgcmV0dXJuZWQgYnkgYGtleXNGdW5jYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LlxuICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG52YXIgYmFzZUZvciA9IGNyZWF0ZUJhc2VGb3IoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRm9yO1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgYmFzZSBmdW5jdGlvbiBmb3IgbWV0aG9kcyBsaWtlIGBfLmZvckluYCBhbmQgYF8uZm9yT3duYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVCYXNlRm9yKGZyb21SaWdodCkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSwga2V5c0Z1bmMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgaXRlcmFibGUgPSBPYmplY3Qob2JqZWN0KSxcbiAgICAgICAgcHJvcHMgPSBrZXlzRnVuYyhvYmplY3QpLFxuICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIHZhciBrZXkgPSBwcm9wc1tmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XTtcbiAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Q7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQmFzZUZvcjtcbiIsInZhciBiYXNlSXNNYXRjaCA9IHJlcXVpcmUoJy4vX2Jhc2VJc01hdGNoJyksXG4gICAgZ2V0TWF0Y2hEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWF0Y2hEYXRhJyksXG4gICAgbWF0Y2hlc1N0cmljdENvbXBhcmFibGUgPSByZXF1aXJlKCcuL19tYXRjaGVzU3RyaWN0Q29tcGFyYWJsZScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNvdXJjZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlTWF0Y2hlcyhzb3VyY2UpIHtcbiAgdmFyIG1hdGNoRGF0YSA9IGdldE1hdGNoRGF0YShzb3VyY2UpO1xuICBpZiAobWF0Y2hEYXRhLmxlbmd0aCA9PSAxICYmIG1hdGNoRGF0YVswXVsyXSkge1xuICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShtYXRjaERhdGFbMF1bMF0sIG1hdGNoRGF0YVswXVsxXSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgPT09IHNvdXJjZSB8fCBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlTWF0Y2hlcztcbiIsInZhciBTdGFjayA9IHJlcXVpcmUoJy4vX1N0YWNrJyksXG4gICAgYmFzZUlzRXF1YWwgPSByZXF1aXJlKCcuL19iYXNlSXNFcXVhbCcpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXRjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gKiBAcGFyYW0ge0FycmF5fSBtYXRjaERhdGEgVGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIHRvIG1hdGNoLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhLCBjdXN0b21pemVyKSB7XG4gIHZhciBpbmRleCA9IG1hdGNoRGF0YS5sZW5ndGgsXG4gICAgICBsZW5ndGggPSBpbmRleCxcbiAgICAgIG5vQ3VzdG9taXplciA9ICFjdXN0b21pemVyO1xuXG4gIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgIHJldHVybiAhbGVuZ3RoO1xuICB9XG4gIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIHZhciBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICBpZiAoKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKVxuICAgICAgICAgID8gZGF0YVsxXSAhPT0gb2JqZWN0W2RhdGFbMF1dXG4gICAgICAgICAgOiAhKGRhdGFbMF0gaW4gb2JqZWN0KVxuICAgICAgICApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICB2YXIga2V5ID0gZGF0YVswXSxcbiAgICAgICAgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgc3JjVmFsdWUgPSBkYXRhWzFdO1xuXG4gICAgaWYgKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKSB7XG4gICAgICBpZiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHN0YWNrID0gbmV3IFN0YWNrO1xuICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjayk7XG4gICAgICB9XG4gICAgICBpZiAoIShyZXN1bHQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICA6IHJlc3VsdFxuICAgICAgICAgICkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNNYXRjaDtcbiIsInZhciBTdGFjayA9IHJlcXVpcmUoJy4vX1N0YWNrJyksXG4gICAgZXF1YWxBcnJheXMgPSByZXF1aXJlKCcuL19lcXVhbEFycmF5cycpLFxuICAgIGVxdWFsQnlUYWcgPSByZXF1aXJlKCcuL19lcXVhbEJ5VGFnJyksXG4gICAgZXF1YWxPYmplY3RzID0gcmVxdWlyZSgnLi9fZXF1YWxPYmplY3RzJyksXG4gICAgZ2V0VGFnID0gcmVxdWlyZSgnLi9fZ2V0VGFnJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzQnVmZmVyID0gcmVxdWlyZSgnLi9pc0J1ZmZlcicpLFxuICAgIGlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vaXNUeXBlZEFycmF5Jyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbGAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICogZGVlcCBjb21wYXJpc29ucyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICogcmVmZXJlbmNlcyB0byBiZSBjb21wYXJlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzRXF1YWxEZWVwKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIG9iaklzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgb3RoSXNBcnIgPSBpc0FycmF5KG90aGVyKSxcbiAgICAgIG9ialRhZyA9IG9iaklzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob2JqZWN0KSxcbiAgICAgIG90aFRhZyA9IG90aElzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob3RoZXIpO1xuXG4gIG9ialRhZyA9IG9ialRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb2JqVGFnO1xuICBvdGhUYWcgPSBvdGhUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG90aFRhZztcblxuICB2YXIgb2JqSXNPYmogPSBvYmpUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgb3RoSXNPYmogPSBvdGhUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgaXNTYW1lVGFnID0gb2JqVGFnID09IG90aFRhZztcblxuICBpZiAoaXNTYW1lVGFnICYmIGlzQnVmZmVyKG9iamVjdCkpIHtcbiAgICBpZiAoIWlzQnVmZmVyKG90aGVyKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBvYmpJc0FyciA9IHRydWU7XG4gICAgb2JqSXNPYmogPSBmYWxzZTtcbiAgfVxuICBpZiAoaXNTYW1lVGFnICYmICFvYmpJc09iaikge1xuICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgcmV0dXJuIChvYmpJc0FyciB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KSlcbiAgICAgID8gZXF1YWxBcnJheXMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaylcbiAgICAgIDogZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCBvYmpUYWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICB9XG4gIGlmICghKGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRykpIHtcbiAgICB2YXIgb2JqSXNXcmFwcGVkID0gb2JqSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdfX3dyYXBwZWRfXycpLFxuICAgICAgICBvdGhJc1dyYXBwZWQgPSBvdGhJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCAnX193cmFwcGVkX18nKTtcblxuICAgIGlmIChvYmpJc1dyYXBwZWQgfHwgb3RoSXNXcmFwcGVkKSB7XG4gICAgICB2YXIgb2JqVW53cmFwcGVkID0gb2JqSXNXcmFwcGVkID8gb2JqZWN0LnZhbHVlKCkgOiBvYmplY3QsXG4gICAgICAgICAgb3RoVW53cmFwcGVkID0gb3RoSXNXcmFwcGVkID8gb3RoZXIudmFsdWUoKSA6IG90aGVyO1xuXG4gICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgcmV0dXJuIGVxdWFsRnVuYyhvYmpVbndyYXBwZWQsIG90aFVud3JhcHBlZCwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spO1xuICAgIH1cbiAgfVxuICBpZiAoIWlzU2FtZVRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICByZXR1cm4gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc0VxdWFsRGVlcDtcbiIsInZhciBNYXBDYWNoZSA9IHJlcXVpcmUoJy4vX01hcENhY2hlJyksXG4gICAgc2V0Q2FjaGVBZGQgPSByZXF1aXJlKCcuL19zZXRDYWNoZUFkZCcpLFxuICAgIHNldENhY2hlSGFzID0gcmVxdWlyZSgnLi9fc2V0Q2FjaGVIYXMnKTtcblxuLyoqXG4gKlxuICogQ3JlYXRlcyBhbiBhcnJheSBjYWNoZSBvYmplY3QgdG8gc3RvcmUgdW5pcXVlIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTZXRDYWNoZSh2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMgPT0gbnVsbCA/IDAgOiB2YWx1ZXMubGVuZ3RoO1xuXG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGU7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdGhpcy5hZGQodmFsdWVzW2luZGV4XSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFNldENhY2hlYC5cblNldENhY2hlLnByb3RvdHlwZS5hZGQgPSBTZXRDYWNoZS5wcm90b3R5cGUucHVzaCA9IHNldENhY2hlQWRkO1xuU2V0Q2FjaGUucHJvdG90eXBlLmhhcyA9IHNldENhY2hlSGFzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNldENhY2hlO1xuIiwiLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIEFkZHMgYHZhbHVlYCB0byB0aGUgYXJyYXkgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGFkZFxuICogQG1lbWJlck9mIFNldENhY2hlXG4gKiBAYWxpYXMgcHVzaFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2FjaGUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVBZGQodmFsdWUpIHtcbiAgdGhpcy5fX2RhdGFfXy5zZXQodmFsdWUsIEhBU0hfVU5ERUZJTkVEKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0Q2FjaGVBZGQ7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIHRoZSBhcnJheSBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHNldENhY2hlSGFzKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0Q2FjaGVIYXM7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zb21lYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlTb21lKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5U29tZTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGEgYGNhY2hlYCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gY2FjaGUgVGhlIGNhY2hlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGNhY2hlSGFzKGNhY2hlLCBrZXkpIHtcbiAgcmV0dXJuIGNhY2hlLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhY2hlSGFzO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIFVpbnQ4QXJyYXkgPSByZXF1aXJlKCcuL19VaW50OEFycmF5JyksXG4gICAgZXEgPSByZXF1aXJlKCcuL2VxJyksXG4gICAgZXF1YWxBcnJheXMgPSByZXF1aXJlKCcuL19lcXVhbEFycmF5cycpLFxuICAgIG1hcFRvQXJyYXkgPSByZXF1aXJlKCcuL19tYXBUb0FycmF5JyksXG4gICAgc2V0VG9BcnJheSA9IHJlcXVpcmUoJy4vX3NldFRvQXJyYXknKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XSc7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xWYWx1ZU9mID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by52YWx1ZU9mIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgY29tcGFyaW5nIG9iamVjdHMgb2ZcbiAqIHRoZSBzYW1lIGB0b1N0cmluZ1RhZ2AuXG4gKlxuICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjb21wYXJpbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgb3IgYFN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdHMgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIHRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgKG9iamVjdC5ieXRlT2Zmc2V0ICE9IG90aGVyLmJ5dGVPZmZzZXQpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IG9iamVjdC5idWZmZXI7XG4gICAgICBvdGhlciA9IG90aGVyLmJ1ZmZlcjtcblxuICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgIWVxdWFsRnVuYyhuZXcgVWludDhBcnJheShvYmplY3QpLCBuZXcgVWludDhBcnJheShvdGhlcikpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgY2FzZSBib29sVGFnOlxuICAgIGNhc2UgZGF0ZVRhZzpcbiAgICBjYXNlIG51bWJlclRhZzpcbiAgICAgIC8vIENvZXJjZSBib29sZWFucyB0byBgMWAgb3IgYDBgIGFuZCBkYXRlcyB0byBtaWxsaXNlY29uZHMuXG4gICAgICAvLyBJbnZhbGlkIGRhdGVzIGFyZSBjb2VyY2VkIHRvIGBOYU5gLlxuICAgICAgcmV0dXJuIGVxKCtvYmplY3QsICtvdGhlcik7XG5cbiAgICBjYXNlIGVycm9yVGFnOlxuICAgICAgcmV0dXJuIG9iamVjdC5uYW1lID09IG90aGVyLm5hbWUgJiYgb2JqZWN0Lm1lc3NhZ2UgPT0gb3RoZXIubWVzc2FnZTtcblxuICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgLy8gQ29lcmNlIHJlZ2V4ZXMgdG8gc3RyaW5ncyBhbmQgdHJlYXQgc3RyaW5ncywgcHJpbWl0aXZlcyBhbmQgb2JqZWN0cyxcbiAgICAgIC8vIGFzIGVxdWFsLiBTZWUgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudG9zdHJpbmdcbiAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICByZXR1cm4gb2JqZWN0ID09IChvdGhlciArICcnKTtcblxuICAgIGNhc2UgbWFwVGFnOlxuICAgICAgdmFyIGNvbnZlcnQgPSBtYXBUb0FycmF5O1xuXG4gICAgY2FzZSBzZXRUYWc6XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHO1xuICAgICAgY29udmVydCB8fCAoY29udmVydCA9IHNldFRvQXJyYXkpO1xuXG4gICAgICBpZiAob2JqZWN0LnNpemUgIT0gb3RoZXIuc2l6ZSAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgIH1cbiAgICAgIGJpdG1hc2sgfD0gQ09NUEFSRV9VTk9SREVSRURfRkxBRztcblxuICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gICAgICB2YXIgcmVzdWx0ID0gZXF1YWxBcnJheXMoY29udmVydChvYmplY3QpLCBjb252ZXJ0KG90aGVyKSwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgIGlmIChzeW1ib2xWYWx1ZU9mKSB7XG4gICAgICAgIHJldHVybiBzeW1ib2xWYWx1ZU9mLmNhbGwob2JqZWN0KSA9PSBzeW1ib2xWYWx1ZU9mLmNhbGwob3RoZXIpO1xuICAgICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcXVhbEJ5VGFnO1xuIiwidmFyIGdldEFsbEtleXMgPSByZXF1aXJlKCcuL19nZXRBbGxLZXlzJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIG9iamVjdHMgd2l0aCBzdXBwb3J0IGZvclxuICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgIG9ialByb3BzID0gZ2V0QWxsS2V5cyhvYmplY3QpLFxuICAgICAgb2JqTGVuZ3RoID0gb2JqUHJvcHMubGVuZ3RoLFxuICAgICAgb3RoUHJvcHMgPSBnZXRBbGxLZXlzKG90aGVyKSxcbiAgICAgIG90aExlbmd0aCA9IG90aFByb3BzLmxlbmd0aDtcblxuICBpZiAob2JqTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBpbmRleCA9IG9iakxlbmd0aDtcbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICB2YXIga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgIGlmICghKGlzUGFydGlhbCA/IGtleSBpbiBvdGhlciA6IGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsIGtleSkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgaWYgKHN0YWNrZWQgJiYgc3RhY2suZ2V0KG90aGVyKSkge1xuICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICB9XG4gIHZhciByZXN1bHQgPSB0cnVlO1xuICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gIHN0YWNrLnNldChvdGhlciwgb2JqZWN0KTtcblxuICB2YXIgc2tpcEN0b3IgPSBpc1BhcnRpYWw7XG4gIHdoaWxlICgrK2luZGV4IDwgb2JqTGVuZ3RoKSB7XG4gICAga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2tleV07XG5cbiAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgb2JqVmFsdWUsIGtleSwgb3RoZXIsIG9iamVjdCwgc3RhY2spXG4gICAgICAgIDogY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUsIGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2spO1xuICAgIH1cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBpZiAoIShjb21wYXJlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgPyAob2JqVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhvYmpWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSlcbiAgICAgICAgICA6IGNvbXBhcmVkXG4gICAgICAgICkpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHNraXBDdG9yIHx8IChza2lwQ3RvciA9IGtleSA9PSAnY29uc3RydWN0b3InKTtcbiAgfVxuICBpZiAocmVzdWx0ICYmICFza2lwQ3Rvcikge1xuICAgIHZhciBvYmpDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yLFxuICAgICAgICBvdGhDdG9yID0gb3RoZXIuY29uc3RydWN0b3I7XG5cbiAgICAvLyBOb24gYE9iamVjdGAgb2JqZWN0IGluc3RhbmNlcyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVhbC5cbiAgICBpZiAob2JqQ3RvciAhPSBvdGhDdG9yICYmXG4gICAgICAgICgnY29uc3RydWN0b3InIGluIG9iamVjdCAmJiAnY29uc3RydWN0b3InIGluIG90aGVyKSAmJlxuICAgICAgICAhKHR5cGVvZiBvYmpDdG9yID09ICdmdW5jdGlvbicgJiYgb2JqQ3RvciBpbnN0YW5jZW9mIG9iakN0b3IgJiZcbiAgICAgICAgICB0eXBlb2Ygb3RoQ3RvciA9PSAnZnVuY3Rpb24nICYmIG90aEN0b3IgaW5zdGFuY2VvZiBvdGhDdG9yKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxdWFsT2JqZWN0cztcbiIsInZhciBpc1N0cmljdENvbXBhcmFibGUgPSByZXF1aXJlKCcuL19pc1N0cmljdENvbXBhcmFibGUnKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3Mgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbWF0Y2ggZGF0YSBvZiBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gZ2V0TWF0Y2hEYXRhKG9iamVjdCkge1xuICB2YXIgcmVzdWx0ID0ga2V5cyhvYmplY3QpLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICB2YXIga2V5ID0gcmVzdWx0W2xlbmd0aF0sXG4gICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICByZXN1bHRbbGVuZ3RoXSA9IFtrZXksIHZhbHVlLCBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpXTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE1hdGNoRGF0YTtcbiIsInZhciBiYXNlSXNFcXVhbCA9IHJlcXVpcmUoJy4vX2Jhc2VJc0VxdWFsJyksXG4gICAgZ2V0ID0gcmVxdWlyZSgnLi9nZXQnKSxcbiAgICBoYXNJbiA9IHJlcXVpcmUoJy4vaGFzSW4nKSxcbiAgICBpc0tleSA9IHJlcXVpcmUoJy4vX2lzS2V5JyksXG4gICAgaXNTdHJpY3RDb21wYXJhYmxlID0gcmVxdWlyZSgnLi9faXNTdHJpY3RDb21wYXJhYmxlJyksXG4gICAgbWF0Y2hlc1N0cmljdENvbXBhcmFibGUgPSByZXF1aXJlKCcuL19tYXRjaGVzU3RyaWN0Q29tcGFyYWJsZScpLFxuICAgIHRvS2V5ID0gcmVxdWlyZSgnLi9fdG9LZXknKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNQcm9wZXJ0eWAgd2hpY2ggZG9lc24ndCBjbG9uZSBgc3JjVmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIHNyY1ZhbHVlKSB7XG4gIGlmIChpc0tleShwYXRoKSAmJiBpc1N0cmljdENvbXBhcmFibGUoc3JjVmFsdWUpKSB7XG4gICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKHRvS2V5KHBhdGgpLCBzcmNWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBvYmpWYWx1ZSA9IGdldChvYmplY3QsIHBhdGgpO1xuICAgIHJldHVybiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvYmpWYWx1ZSA9PT0gc3JjVmFsdWUpXG4gICAgICA/IGhhc0luKG9iamVjdCwgcGF0aClcbiAgICAgIDogYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VNYXRjaGVzUHJvcGVydHk7XG4iLCJ2YXIgYmFzZUdldCA9IHJlcXVpcmUoJy4vX2Jhc2VHZXQnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuIElmIHRoZSByZXNvbHZlZCB2YWx1ZSBpc1xuICogYHVuZGVmaW5lZGAsIHRoZSBgZGVmYXVsdFZhbHVlYCBpcyByZXR1cm5lZCBpbiBpdHMgcGxhY2UuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjcuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGZvciBgdW5kZWZpbmVkYCByZXNvbHZlZCB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gKlxuICogXy5nZXQob2JqZWN0LCAnYVswXS5iLmMnKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLmdldChvYmplY3QsIFsnYScsICcwJywgJ2InLCAnYyddKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLmdldChvYmplY3QsICdhLmIuYycsICdkZWZhdWx0Jyk7XG4gKiAvLyA9PiAnZGVmYXVsdCdcbiAqL1xuZnVuY3Rpb24gZ2V0KG9iamVjdCwgcGF0aCwgZGVmYXVsdFZhbHVlKSB7XG4gIHZhciByZXN1bHQgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFZhbHVlIDogcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldDtcbiIsInZhciBiYXNlSGFzSW4gPSByZXF1aXJlKCcuL19iYXNlSGFzSW4nKSxcbiAgICBoYXNQYXRoID0gcmVxdWlyZSgnLi9faGFzUGF0aCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgcGF0aGAgaXMgYSBkaXJlY3Qgb3IgaW5oZXJpdGVkIHByb3BlcnR5IG9mIGBvYmplY3RgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IF8uY3JlYXRlKHsgJ2EnOiBfLmNyZWF0ZSh7ICdiJzogMiB9KSB9KTtcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgJ2EuYicpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgJ2InKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGhhc0luKG9iamVjdCwgcGF0aCkge1xuICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzUGF0aChvYmplY3QsIHBhdGgsIGJhc2VIYXNJbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzSW47XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc0luYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGtleSBUaGUga2V5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSGFzSW4ob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGtleSBpbiBPYmplY3Qob2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSGFzSW47XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGZpcnN0IGFyZ3VtZW50IGl0IHJlY2VpdmVzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0geyp9IHZhbHVlIEFueSB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICpcbiAqIGNvbnNvbGUubG9nKF8uaWRlbnRpdHkob2JqZWN0KSA9PT0gb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaWRlbnRpdHkodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlkZW50aXR5O1xuIiwidmFyIGJhc2VQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2Jhc2VQcm9wZXJ0eScpLFxuICAgIGJhc2VQcm9wZXJ0eURlZXAgPSByZXF1aXJlKCcuL19iYXNlUHJvcGVydHlEZWVwJyksXG4gICAgaXNLZXkgPSByZXF1aXJlKCcuL19pc0tleScpLFxuICAgIHRvS2V5ID0gcmVxdWlyZSgnLi9fdG9LZXknKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBbXG4gKiAgIHsgJ2EnOiB7ICdiJzogMiB9IH0sXG4gKiAgIHsgJ2EnOiB7ICdiJzogMSB9IH1cbiAqIF07XG4gKlxuICogXy5tYXAob2JqZWN0cywgXy5wcm9wZXJ0eSgnYS5iJykpO1xuICogLy8gPT4gWzIsIDFdXG4gKlxuICogXy5tYXAoXy5zb3J0Qnkob2JqZWN0cywgXy5wcm9wZXJ0eShbJ2EnLCAnYiddKSksICdhLmInKTtcbiAqIC8vID0+IFsxLCAyXVxuICovXG5mdW5jdGlvbiBwcm9wZXJ0eShwYXRoKSB7XG4gIHJldHVybiBpc0tleShwYXRoKSA/IGJhc2VQcm9wZXJ0eSh0b0tleShwYXRoKSkgOiBiYXNlUHJvcGVydHlEZWVwKHBhdGgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHByb3BlcnR5O1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wcm9wZXJ0eWAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlUHJvcGVydHkoa2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlUHJvcGVydHk7XG4iLCJ2YXIgYmFzZUdldCA9IHJlcXVpcmUoJy4vX2Jhc2VHZXQnKTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VQcm9wZXJ0eWAgd2hpY2ggc3VwcG9ydHMgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlUHJvcGVydHlEZWVwKHBhdGgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVByb3BlcnR5RGVlcDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9pbmhlcml0cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9pbmhlcml0c1wiKSk7XG5cbnZhciBfbWl4ZWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL21peGVkXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gQm9vbGVhblNjaGVtYTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuXG5mdW5jdGlvbiBCb29sZWFuU2NoZW1hKCkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBCb29sZWFuU2NoZW1hKSkgcmV0dXJuIG5ldyBCb29sZWFuU2NoZW1hKCk7XG5cbiAgX21peGVkLmRlZmF1bHQuY2FsbCh0aGlzLCB7XG4gICAgdHlwZTogJ2Jvb2xlYW4nXG4gIH0pO1xuXG4gIHRoaXMud2l0aE11dGF0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICBfdGhpcy50cmFuc2Zvcm0oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAoIXRoaXMuaXNUeXBlKHZhbHVlKSkge1xuICAgICAgICBpZiAoL14odHJ1ZXwxKSQvaS50ZXN0KHZhbHVlKSkgcmV0dXJuIHRydWU7XG4gICAgICAgIGlmICgvXihmYWxzZXwwKSQvaS50ZXN0KHZhbHVlKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSk7XG4gIH0pO1xufVxuXG4oMCwgX2luaGVyaXRzLmRlZmF1bHQpKEJvb2xlYW5TY2hlbWEsIF9taXhlZC5kZWZhdWx0LCB7XG4gIF90eXBlQ2hlY2s6IGZ1bmN0aW9uIF90eXBlQ2hlY2sodikge1xuICAgIGlmICh2IGluc3RhbmNlb2YgQm9vbGVhbikgdiA9IHYudmFsdWVPZigpO1xuICAgIHJldHVybiB0eXBlb2YgdiA9PT0gJ2Jvb2xlYW4nO1xuICB9XG59KTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gU3RyaW5nU2NoZW1hO1xuXG52YXIgX2luaGVyaXRzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2luaGVyaXRzXCIpKTtcblxudmFyIF9taXhlZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbWl4ZWRcIikpO1xuXG52YXIgX2xvY2FsZSA9IHJlcXVpcmUoXCIuL2xvY2FsZVwiKTtcblxudmFyIF9pc0Fic2VudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9pc0Fic2VudFwiKSk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxudmFyIHJFbWFpbCA9IC9eKCgoW2Etel18XFxkfFshI1xcJCUmJ1xcKlxcK1xcLVxcLz1cXD9cXF5fYHtcXHx9fl18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKyhcXC4oW2Etel18XFxkfFshI1xcJCUmJ1xcKlxcK1xcLVxcLz1cXD9cXF5fYHtcXHx9fl18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKykqKXwoKFxceDIyKSgoKChcXHgyMHxcXHgwOSkqKFxceDBkXFx4MGEpKT8oXFx4MjB8XFx4MDkpKyk/KChbXFx4MDEtXFx4MDhcXHgwYlxceDBjXFx4MGUtXFx4MWZcXHg3Zl18XFx4MjF8W1xceDIzLVxceDViXXxbXFx4NWQtXFx4N2VdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoXFxcXChbXFx4MDEtXFx4MDlcXHgwYlxceDBjXFx4MGQtXFx4N2ZdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSkpKSooKChcXHgyMHxcXHgwOSkqKFxceDBkXFx4MGEpKT8oXFx4MjB8XFx4MDkpKyk/KFxceDIyKSkpQCgoKFthLXpdfFxcZHxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KChbYS16XXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKFthLXpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKihbYS16XXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKSlcXC4pKygoW2Etel18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCgoW2Etel18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKFthLXpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKihbYS16XXxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkpKSQvaTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cbnZhciByVXJsID0gL14oKGh0dHBzP3xmdHApOik/XFwvXFwvKCgoKFthLXpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCglW1xcZGEtZl17Mn0pfFshXFwkJidcXChcXClcXCpcXCssOz1dfDopKkApPygoKFxcZHxbMS05XVxcZHwxXFxkXFxkfDJbMC00XVxcZHwyNVswLTVdKVxcLihcXGR8WzEtOV1cXGR8MVxcZFxcZHwyWzAtNF1cXGR8MjVbMC01XSlcXC4oXFxkfFsxLTldXFxkfDFcXGRcXGR8MlswLTRdXFxkfDI1WzAtNV0pXFwuKFxcZHxbMS05XVxcZHwxXFxkXFxkfDJbMC00XVxcZHwyNVswLTVdKSl8KCgoW2Etel18XFxkfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoKFthLXpdfFxcZHxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkoW2Etel18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkqKFthLXpdfFxcZHxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkpKVxcLikrKChbYS16XXxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KChbYS16XXxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkoW2Etel18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkqKFthLXpdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSkpXFwuPykoOlxcZCopPykoXFwvKCgoW2Etel18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KCVbXFxkYS1mXXsyfSl8WyFcXCQmJ1xcKFxcKVxcKlxcKyw7PV18OnxAKSsoXFwvKChbYS16XXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoJVtcXGRhLWZdezJ9KXxbIVxcJCYnXFwoXFwpXFwqXFwrLDs9XXw6fEApKikqKT8pPyhcXD8oKChbYS16XXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoJVtcXGRhLWZdezJ9KXxbIVxcJCYnXFwoXFwpXFwqXFwrLDs9XXw6fEApfFtcXHVFMDAwLVxcdUY4RkZdfFxcL3xcXD8pKik/KFxcIygoKFthLXpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCglW1xcZGEtZl17Mn0pfFshXFwkJidcXChcXClcXCpcXCssOz1dfDp8QCl8XFwvfFxcPykqKT8kL2k7XG5cbnZhciBpc1RyaW1tZWQgPSBmdW5jdGlvbiBpc1RyaW1tZWQodmFsdWUpIHtcbiAgcmV0dXJuICgwLCBfaXNBYnNlbnQuZGVmYXVsdCkodmFsdWUpIHx8IHZhbHVlID09PSB2YWx1ZS50cmltKCk7XG59O1xuXG5mdW5jdGlvbiBTdHJpbmdTY2hlbWEoKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFN0cmluZ1NjaGVtYSkpIHJldHVybiBuZXcgU3RyaW5nU2NoZW1hKCk7XG5cbiAgX21peGVkLmRlZmF1bHQuY2FsbCh0aGlzLCB7XG4gICAgdHlwZTogJ3N0cmluZydcbiAgfSk7XG5cbiAgdGhpcy53aXRoTXV0YXRpb24oZnVuY3Rpb24gKCkge1xuICAgIF90aGlzLnRyYW5zZm9ybShmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLmlzVHlwZSh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHZhbHVlLnRvU3RyaW5nID8gdmFsdWUudG9TdHJpbmcoKSA6IHZhbHVlO1xuICAgIH0pO1xuICB9KTtcbn1cblxuKDAsIF9pbmhlcml0cy5kZWZhdWx0KShTdHJpbmdTY2hlbWEsIF9taXhlZC5kZWZhdWx0LCB7XG4gIF90eXBlQ2hlY2s6IGZ1bmN0aW9uIF90eXBlQ2hlY2sodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBTdHJpbmcpIHZhbHVlID0gdmFsdWUudmFsdWVPZigpO1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xuICB9LFxuICBfaXNQcmVzZW50OiBmdW5jdGlvbiBfaXNQcmVzZW50KHZhbHVlKSB7XG4gICAgcmV0dXJuIF9taXhlZC5kZWZhdWx0LnByb3RvdHlwZS5fY2FzdC5jYWxsKHRoaXMsIHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPiAwO1xuICB9LFxuICBsZW5ndGg6IGZ1bmN0aW9uIGxlbmd0aChfbGVuZ3RoLCBtZXNzYWdlKSB7XG4gICAgaWYgKG1lc3NhZ2UgPT09IHZvaWQgMCkge1xuICAgICAgbWVzc2FnZSA9IF9sb2NhbGUuc3RyaW5nLmxlbmd0aDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50ZXN0KHtcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBuYW1lOiAnbGVuZ3RoJyxcbiAgICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBsZW5ndGg6IF9sZW5ndGhcbiAgICAgIH0sXG4gICAgICB0ZXN0OiBmdW5jdGlvbiB0ZXN0KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2lzQWJzZW50LmRlZmF1bHQpKHZhbHVlKSB8fCB2YWx1ZS5sZW5ndGggPT09IHRoaXMucmVzb2x2ZShfbGVuZ3RoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgbWluOiBmdW5jdGlvbiBtaW4oX21pbiwgbWVzc2FnZSkge1xuICAgIGlmIChtZXNzYWdlID09PSB2b2lkIDApIHtcbiAgICAgIG1lc3NhZ2UgPSBfbG9jYWxlLnN0cmluZy5taW47XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudGVzdCh7XG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgbmFtZTogJ21pbicsXG4gICAgICBleGNsdXNpdmU6IHRydWUsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgbWluOiBfbWluXG4gICAgICB9LFxuICAgICAgdGVzdDogZnVuY3Rpb24gdGVzdCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gKDAsIF9pc0Fic2VudC5kZWZhdWx0KSh2YWx1ZSkgfHwgdmFsdWUubGVuZ3RoID49IHRoaXMucmVzb2x2ZShfbWluKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgbWF4OiBmdW5jdGlvbiBtYXgoX21heCwgbWVzc2FnZSkge1xuICAgIGlmIChtZXNzYWdlID09PSB2b2lkIDApIHtcbiAgICAgIG1lc3NhZ2UgPSBfbG9jYWxlLnN0cmluZy5tYXg7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudGVzdCh7XG4gICAgICBuYW1lOiAnbWF4JyxcbiAgICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgbWF4OiBfbWF4XG4gICAgICB9LFxuICAgICAgdGVzdDogZnVuY3Rpb24gdGVzdCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gKDAsIF9pc0Fic2VudC5kZWZhdWx0KSh2YWx1ZSkgfHwgdmFsdWUubGVuZ3RoIDw9IHRoaXMucmVzb2x2ZShfbWF4KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgbWF0Y2hlczogZnVuY3Rpb24gbWF0Y2hlcyhyZWdleCwgb3B0aW9ucykge1xuICAgIHZhciBleGNsdWRlRW1wdHlTdHJpbmcgPSBmYWxzZTtcbiAgICB2YXIgbWVzc2FnZTtcblxuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICBpZiAob3B0aW9ucy5tZXNzYWdlIHx8IG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2V4Y2x1ZGVFbXB0eVN0cmluZycpKSB7XG4gICAgICAgIGV4Y2x1ZGVFbXB0eVN0cmluZyA9IG9wdGlvbnMuZXhjbHVkZUVtcHR5U3RyaW5nO1xuICAgICAgICBtZXNzYWdlID0gb3B0aW9ucy5tZXNzYWdlO1xuICAgICAgfSBlbHNlIG1lc3NhZ2UgPSBvcHRpb25zO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnRlc3Qoe1xuICAgICAgbWVzc2FnZTogbWVzc2FnZSB8fCBfbG9jYWxlLnN0cmluZy5tYXRjaGVzLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIHJlZ2V4OiByZWdleFxuICAgICAgfSxcbiAgICAgIHRlc3Q6IGZ1bmN0aW9uIHRlc3QodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfaXNBYnNlbnQuZGVmYXVsdCkodmFsdWUpIHx8IHZhbHVlID09PSAnJyAmJiBleGNsdWRlRW1wdHlTdHJpbmcgfHwgcmVnZXgudGVzdCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gIGVtYWlsOiBmdW5jdGlvbiBlbWFpbChtZXNzYWdlKSB7XG4gICAgaWYgKG1lc3NhZ2UgPT09IHZvaWQgMCkge1xuICAgICAgbWVzc2FnZSA9IF9sb2NhbGUuc3RyaW5nLmVtYWlsO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLm1hdGNoZXMockVtYWlsLCB7XG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgZXhjbHVkZUVtcHR5U3RyaW5nOiB0cnVlXG4gICAgfSk7XG4gIH0sXG4gIHVybDogZnVuY3Rpb24gdXJsKG1lc3NhZ2UpIHtcbiAgICBpZiAobWVzc2FnZSA9PT0gdm9pZCAwKSB7XG4gICAgICBtZXNzYWdlID0gX2xvY2FsZS5zdHJpbmcudXJsO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLm1hdGNoZXMoclVybCwge1xuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIGV4Y2x1ZGVFbXB0eVN0cmluZzogdHJ1ZVxuICAgIH0pO1xuICB9LFxuICAvLy0tIHRyYW5zZm9ybXMgLS1cbiAgZW5zdXJlOiBmdW5jdGlvbiBlbnN1cmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGVmYXVsdCgnJykudHJhbnNmb3JtKGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHJldHVybiB2YWwgPT09IG51bGwgPyAnJyA6IHZhbDtcbiAgICB9KTtcbiAgfSxcbiAgdHJpbTogZnVuY3Rpb24gdHJpbShtZXNzYWdlKSB7XG4gICAgaWYgKG1lc3NhZ2UgPT09IHZvaWQgMCkge1xuICAgICAgbWVzc2FnZSA9IF9sb2NhbGUuc3RyaW5nLnRyaW07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtKGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHJldHVybiB2YWwgIT0gbnVsbCA/IHZhbC50cmltKCkgOiB2YWw7XG4gICAgfSkudGVzdCh7XG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgbmFtZTogJ3RyaW0nLFxuICAgICAgdGVzdDogaXNUcmltbWVkXG4gICAgfSk7XG4gIH0sXG4gIGxvd2VyY2FzZTogZnVuY3Rpb24gbG93ZXJjYXNlKG1lc3NhZ2UpIHtcbiAgICBpZiAobWVzc2FnZSA9PT0gdm9pZCAwKSB7XG4gICAgICBtZXNzYWdlID0gX2xvY2FsZS5zdHJpbmcubG93ZXJjYXNlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybShmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiAhKDAsIF9pc0Fic2VudC5kZWZhdWx0KSh2YWx1ZSkgPyB2YWx1ZS50b0xvd2VyQ2FzZSgpIDogdmFsdWU7XG4gICAgfSkudGVzdCh7XG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgbmFtZTogJ3N0cmluZ19jYXNlJyxcbiAgICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcbiAgICAgIHRlc3Q6IGZ1bmN0aW9uIHRlc3QodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfaXNBYnNlbnQuZGVmYXVsdCkodmFsdWUpIHx8IHZhbHVlID09PSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuICB1cHBlcmNhc2U6IGZ1bmN0aW9uIHVwcGVyY2FzZShtZXNzYWdlKSB7XG4gICAgaWYgKG1lc3NhZ2UgPT09IHZvaWQgMCkge1xuICAgICAgbWVzc2FnZSA9IF9sb2NhbGUuc3RyaW5nLnVwcGVyY2FzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gISgwLCBfaXNBYnNlbnQuZGVmYXVsdCkodmFsdWUpID8gdmFsdWUudG9VcHBlckNhc2UoKSA6IHZhbHVlO1xuICAgIH0pLnRlc3Qoe1xuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG5hbWU6ICdzdHJpbmdfY2FzZScsXG4gICAgICBleGNsdXNpdmU6IHRydWUsXG4gICAgICB0ZXN0OiBmdW5jdGlvbiB0ZXN0KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2lzQWJzZW50LmRlZmF1bHQpKHZhbHVlKSB8fCB2YWx1ZSA9PT0gdmFsdWUudG9VcHBlckNhc2UoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IE51bWJlclNjaGVtYTtcblxudmFyIF9pbmhlcml0cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9pbmhlcml0c1wiKSk7XG5cbnZhciBfbWl4ZWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL21peGVkXCIpKTtcblxudmFyIF9sb2NhbGUgPSByZXF1aXJlKFwiLi9sb2NhbGVcIik7XG5cbnZhciBfaXNBYnNlbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvaXNBYnNlbnRcIikpO1xuXG52YXIgaXNOYU4gPSBmdW5jdGlvbiBpc05hTih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gK3ZhbHVlO1xufTtcblxudmFyIGlzSW50ZWdlciA9IGZ1bmN0aW9uIGlzSW50ZWdlcih2YWwpIHtcbiAgcmV0dXJuICgwLCBfaXNBYnNlbnQuZGVmYXVsdCkodmFsKSB8fCB2YWwgPT09ICh2YWwgfCAwKTtcbn07XG5cbmZ1bmN0aW9uIE51bWJlclNjaGVtYSgpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTnVtYmVyU2NoZW1hKSkgcmV0dXJuIG5ldyBOdW1iZXJTY2hlbWEoKTtcblxuICBfbWl4ZWQuZGVmYXVsdC5jYWxsKHRoaXMsIHtcbiAgICB0eXBlOiAnbnVtYmVyJ1xuICB9KTtcblxuICB0aGlzLndpdGhNdXRhdGlvbihmdW5jdGlvbiAoKSB7XG4gICAgX3RoaXMudHJhbnNmb3JtKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgdmFyIHBhcnNlZCA9IHZhbHVlO1xuXG4gICAgICBpZiAodHlwZW9mIHBhcnNlZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGFyc2VkID0gcGFyc2VkLnJlcGxhY2UoL1xccy9nLCAnJyk7XG4gICAgICAgIGlmIChwYXJzZWQgPT09ICcnKSByZXR1cm4gTmFOOyAvLyBkb24ndCB1c2UgcGFyc2VGbG9hdCB0byBhdm9pZCBwb3NpdGl2ZXMgb24gYWxwaGEtbnVtZXJpYyBzdHJpbmdzXG5cbiAgICAgICAgcGFyc2VkID0gK3BhcnNlZDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuaXNUeXBlKHBhcnNlZCkpIHJldHVybiBwYXJzZWQ7XG4gICAgICByZXR1cm4gcGFyc2VGbG9hdChwYXJzZWQpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuKDAsIF9pbmhlcml0cy5kZWZhdWx0KShOdW1iZXJTY2hlbWEsIF9taXhlZC5kZWZhdWx0LCB7XG4gIF90eXBlQ2hlY2s6IGZ1bmN0aW9uIF90eXBlQ2hlY2sodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBOdW1iZXIpIHZhbHVlID0gdmFsdWUudmFsdWVPZigpO1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmICFpc05hTih2YWx1ZSk7XG4gIH0sXG4gIG1pbjogZnVuY3Rpb24gbWluKF9taW4sIG1lc3NhZ2UpIHtcbiAgICBpZiAobWVzc2FnZSA9PT0gdm9pZCAwKSB7XG4gICAgICBtZXNzYWdlID0gX2xvY2FsZS5udW1iZXIubWluO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnRlc3Qoe1xuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG5hbWU6ICdtaW4nLFxuICAgICAgZXhjbHVzaXZlOiB0cnVlLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIG1pbjogX21pblxuICAgICAgfSxcbiAgICAgIHRlc3Q6IGZ1bmN0aW9uIHRlc3QodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfaXNBYnNlbnQuZGVmYXVsdCkodmFsdWUpIHx8IHZhbHVlID49IHRoaXMucmVzb2x2ZShfbWluKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgbWF4OiBmdW5jdGlvbiBtYXgoX21heCwgbWVzc2FnZSkge1xuICAgIGlmIChtZXNzYWdlID09PSB2b2lkIDApIHtcbiAgICAgIG1lc3NhZ2UgPSBfbG9jYWxlLm51bWJlci5tYXg7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudGVzdCh7XG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgbmFtZTogJ21heCcsXG4gICAgICBleGNsdXNpdmU6IHRydWUsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgbWF4OiBfbWF4XG4gICAgICB9LFxuICAgICAgdGVzdDogZnVuY3Rpb24gdGVzdCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gKDAsIF9pc0Fic2VudC5kZWZhdWx0KSh2YWx1ZSkgfHwgdmFsdWUgPD0gdGhpcy5yZXNvbHZlKF9tYXgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuICBsZXNzVGhhbjogZnVuY3Rpb24gbGVzc1RoYW4obGVzcywgbWVzc2FnZSkge1xuICAgIGlmIChtZXNzYWdlID09PSB2b2lkIDApIHtcbiAgICAgIG1lc3NhZ2UgPSBfbG9jYWxlLm51bWJlci5sZXNzVGhhbjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50ZXN0KHtcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBuYW1lOiAnbWF4JyxcbiAgICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBsZXNzOiBsZXNzXG4gICAgICB9LFxuICAgICAgdGVzdDogZnVuY3Rpb24gdGVzdCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gKDAsIF9pc0Fic2VudC5kZWZhdWx0KSh2YWx1ZSkgfHwgdmFsdWUgPCB0aGlzLnJlc29sdmUobGVzcyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gIG1vcmVUaGFuOiBmdW5jdGlvbiBtb3JlVGhhbihtb3JlLCBtZXNzYWdlKSB7XG4gICAgaWYgKG1lc3NhZ2UgPT09IHZvaWQgMCkge1xuICAgICAgbWVzc2FnZSA9IF9sb2NhbGUubnVtYmVyLm1vcmVUaGFuO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnRlc3Qoe1xuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG5hbWU6ICdtaW4nLFxuICAgICAgZXhjbHVzaXZlOiB0cnVlLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIG1vcmU6IG1vcmVcbiAgICAgIH0sXG4gICAgICB0ZXN0OiBmdW5jdGlvbiB0ZXN0KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2lzQWJzZW50LmRlZmF1bHQpKHZhbHVlKSB8fCB2YWx1ZSA+IHRoaXMucmVzb2x2ZShtb3JlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgcG9zaXRpdmU6IGZ1bmN0aW9uIHBvc2l0aXZlKG1zZykge1xuICAgIGlmIChtc2cgPT09IHZvaWQgMCkge1xuICAgICAgbXNnID0gX2xvY2FsZS5udW1iZXIucG9zaXRpdmU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubW9yZVRoYW4oMCwgbXNnKTtcbiAgfSxcbiAgbmVnYXRpdmU6IGZ1bmN0aW9uIG5lZ2F0aXZlKG1zZykge1xuICAgIGlmIChtc2cgPT09IHZvaWQgMCkge1xuICAgICAgbXNnID0gX2xvY2FsZS5udW1iZXIubmVnYXRpdmU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubGVzc1RoYW4oMCwgbXNnKTtcbiAgfSxcbiAgaW50ZWdlcjogZnVuY3Rpb24gaW50ZWdlcihtZXNzYWdlKSB7XG4gICAgaWYgKG1lc3NhZ2UgPT09IHZvaWQgMCkge1xuICAgICAgbWVzc2FnZSA9IF9sb2NhbGUubnVtYmVyLmludGVnZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudGVzdCh7XG4gICAgICBuYW1lOiAnaW50ZWdlcicsXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgdGVzdDogaXNJbnRlZ2VyXG4gICAgfSk7XG4gIH0sXG4gIHRydW5jYXRlOiBmdW5jdGlvbiB0cnVuY2F0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gISgwLCBfaXNBYnNlbnQuZGVmYXVsdCkodmFsdWUpID8gdmFsdWUgfCAwIDogdmFsdWU7XG4gICAgfSk7XG4gIH0sXG4gIHJvdW5kOiBmdW5jdGlvbiByb3VuZChtZXRob2QpIHtcbiAgICB2YXIgYXZhaWwgPSBbJ2NlaWwnLCAnZmxvb3InLCAncm91bmQnLCAndHJ1bmMnXTtcbiAgICBtZXRob2QgPSBtZXRob2QgJiYgbWV0aG9kLnRvTG93ZXJDYXNlKCkgfHwgJ3JvdW5kJzsgLy8gdGhpcyBleGlzdHMgZm9yIHN5bWVtdHJ5IHdpdGggdGhlIG5ldyBNYXRoLnRydW5jXG5cbiAgICBpZiAobWV0aG9kID09PSAndHJ1bmMnKSByZXR1cm4gdGhpcy50cnVuY2F0ZSgpO1xuICAgIGlmIChhdmFpbC5pbmRleE9mKG1ldGhvZC50b0xvd2VyQ2FzZSgpKSA9PT0gLTEpIHRocm93IG5ldyBUeXBlRXJyb3IoJ09ubHkgdmFsaWQgb3B0aW9ucyBmb3Igcm91bmQoKSBhcmU6ICcgKyBhdmFpbC5qb2luKCcsICcpKTtcbiAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gISgwLCBfaXNBYnNlbnQuZGVmYXVsdCkodmFsdWUpID8gTWF0aFttZXRob2RdKHZhbHVlKSA6IHZhbHVlO1xuICAgIH0pO1xuICB9XG59KTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX21peGVkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9taXhlZFwiKSk7XG5cbnZhciBfaW5oZXJpdHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvaW5oZXJpdHNcIikpO1xuXG52YXIgX2lzb2RhdGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvaXNvZGF0ZVwiKSk7XG5cbnZhciBfbG9jYWxlID0gcmVxdWlyZShcIi4vbG9jYWxlXCIpO1xuXG52YXIgX2lzQWJzZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2lzQWJzZW50XCIpKTtcblxudmFyIF9SZWZlcmVuY2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1JlZmVyZW5jZVwiKSk7XG5cbnZhciBpbnZhbGlkRGF0ZSA9IG5ldyBEYXRlKCcnKTtcblxudmFyIGlzRGF0ZSA9IGZ1bmN0aW9uIGlzRGF0ZShvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBEYXRlXSc7XG59O1xuXG52YXIgX2RlZmF1bHQgPSBEYXRlU2NoZW1hO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5cbmZ1bmN0aW9uIERhdGVTY2hlbWEoKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIERhdGVTY2hlbWEpKSByZXR1cm4gbmV3IERhdGVTY2hlbWEoKTtcblxuICBfbWl4ZWQuZGVmYXVsdC5jYWxsKHRoaXMsIHtcbiAgICB0eXBlOiAnZGF0ZSdcbiAgfSk7XG5cbiAgdGhpcy53aXRoTXV0YXRpb24oZnVuY3Rpb24gKCkge1xuICAgIF90aGlzLnRyYW5zZm9ybShmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLmlzVHlwZSh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICAgIHZhbHVlID0gKDAsIF9pc29kYXRlLmRlZmF1bHQpKHZhbHVlKTtcbiAgICAgIHJldHVybiB2YWx1ZSA/IG5ldyBEYXRlKHZhbHVlKSA6IGludmFsaWREYXRlO1xuICAgIH0pO1xuICB9KTtcbn1cblxuKDAsIF9pbmhlcml0cy5kZWZhdWx0KShEYXRlU2NoZW1hLCBfbWl4ZWQuZGVmYXVsdCwge1xuICBfdHlwZUNoZWNrOiBmdW5jdGlvbiBfdHlwZUNoZWNrKHYpIHtcbiAgICByZXR1cm4gaXNEYXRlKHYpICYmICFpc05hTih2LmdldFRpbWUoKSk7XG4gIH0sXG4gIG1pbjogZnVuY3Rpb24gbWluKF9taW4sIG1lc3NhZ2UpIHtcbiAgICBpZiAobWVzc2FnZSA9PT0gdm9pZCAwKSB7XG4gICAgICBtZXNzYWdlID0gX2xvY2FsZS5kYXRlLm1pbjtcbiAgICB9XG5cbiAgICB2YXIgbGltaXQgPSBfbWluO1xuXG4gICAgaWYgKCFfUmVmZXJlbmNlLmRlZmF1bHQuaXNSZWYobGltaXQpKSB7XG4gICAgICBsaW1pdCA9IHRoaXMuY2FzdChfbWluKTtcbiAgICAgIGlmICghdGhpcy5fdHlwZUNoZWNrKGxpbWl0KSkgdGhyb3cgbmV3IFR5cGVFcnJvcignYG1pbmAgbXVzdCBiZSBhIERhdGUgb3IgYSB2YWx1ZSB0aGF0IGNhbiBiZSBgY2FzdCgpYCB0byBhIERhdGUnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50ZXN0KHtcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBuYW1lOiAnbWluJyxcbiAgICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBtaW46IF9taW5cbiAgICAgIH0sXG4gICAgICB0ZXN0OiBmdW5jdGlvbiB0ZXN0KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2lzQWJzZW50LmRlZmF1bHQpKHZhbHVlKSB8fCB2YWx1ZSA+PSB0aGlzLnJlc29sdmUobGltaXQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuICBtYXg6IGZ1bmN0aW9uIG1heChfbWF4LCBtZXNzYWdlKSB7XG4gICAgaWYgKG1lc3NhZ2UgPT09IHZvaWQgMCkge1xuICAgICAgbWVzc2FnZSA9IF9sb2NhbGUuZGF0ZS5tYXg7XG4gICAgfVxuXG4gICAgdmFyIGxpbWl0ID0gX21heDtcblxuICAgIGlmICghX1JlZmVyZW5jZS5kZWZhdWx0LmlzUmVmKGxpbWl0KSkge1xuICAgICAgbGltaXQgPSB0aGlzLmNhc3QoX21heCk7XG4gICAgICBpZiAoIXRoaXMuX3R5cGVDaGVjayhsaW1pdCkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2BtYXhgIG11c3QgYmUgYSBEYXRlIG9yIGEgdmFsdWUgdGhhdCBjYW4gYmUgYGNhc3QoKWAgdG8gYSBEYXRlJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudGVzdCh7XG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgbmFtZTogJ21heCcsXG4gICAgICBleGNsdXNpdmU6IHRydWUsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgbWF4OiBfbWF4XG4gICAgICB9LFxuICAgICAgdGVzdDogZnVuY3Rpb24gdGVzdCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gKDAsIF9pc0Fic2VudC5kZWZhdWx0KSh2YWx1ZSkgfHwgdmFsdWUgPD0gdGhpcy5yZXNvbHZlKGxpbWl0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gcGFyc2VJc29EYXRlO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuXG4vKipcbiAqXG4gKiBEYXRlLnBhcnNlIHdpdGggcHJvZ3Jlc3NpdmUgZW5oYW5jZW1lbnQgZm9yIElTTyA4NjAxIDxodHRwczovL2dpdGh1Yi5jb20vY3Nub3Zlci9qcy1pc284NjAxPlxuICogTk9OLUNPTkZPUk1BTlQgRURJVElPTi5cbiAqIMKpIDIwMTEgQ29saW4gU25vdmVyIDxodHRwOi8vemV0YWZsZWV0LmNvbT5cbiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICovXG4vLyAgICAgICAgICAgICAgMSBZWVlZICAgICAgICAgICAgICAgICAyIE1NICAgICAgICAzIEREICAgICAgICAgICAgICA0IEhIICAgICA1IG1tICAgICAgICA2IHNzICAgICAgICAgICAgNyBtc2VjICAgICAgICAgOCBaIDkgwrEgICAgMTAgdHpISCAgICAxMSB0em1tXG52YXIgaXNvUmVnID0gL14oXFxkezR9fFsrXFwtXVxcZHs2fSkoPzotPyhcXGR7Mn0pKD86LT8oXFxkezJ9KSk/KT8oPzpbIFRdPyhcXGR7Mn0pOj8oXFxkezJ9KSg/Ojo/KFxcZHsyfSkoPzpbLFxcLl0oXFxkezEsfSkpPyk/KD86KFopfChbK1xcLV0pKFxcZHsyfSkoPzo6PyhcXGR7Mn0pKT8pPyk/JC87XG5cbmZ1bmN0aW9uIHBhcnNlSXNvRGF0ZShkYXRlKSB7XG4gIHZhciBudW1lcmljS2V5cyA9IFsxLCA0LCA1LCA2LCA3LCAxMCwgMTFdLFxuICAgICAgbWludXRlc09mZnNldCA9IDAsXG4gICAgICB0aW1lc3RhbXAsXG4gICAgICBzdHJ1Y3Q7XG5cbiAgaWYgKHN0cnVjdCA9IGlzb1JlZy5leGVjKGRhdGUpKSB7XG4gICAgLy8gYXZvaWQgTmFOIHRpbWVzdGFtcHMgY2F1c2VkIGJ5IOKAnHVuZGVmaW5lZOKAnSB2YWx1ZXMgYmVpbmcgcGFzc2VkIHRvIERhdGUuVVRDXG4gICAgZm9yICh2YXIgaSA9IDAsIGs7IGsgPSBudW1lcmljS2V5c1tpXTsgKytpKSB7XG4gICAgICBzdHJ1Y3Rba10gPSArc3RydWN0W2tdIHx8IDA7XG4gICAgfSAvLyBhbGxvdyB1bmRlZmluZWQgZGF5cyBhbmQgbW9udGhzXG5cblxuICAgIHN0cnVjdFsyXSA9ICgrc3RydWN0WzJdIHx8IDEpIC0gMTtcbiAgICBzdHJ1Y3RbM10gPSArc3RydWN0WzNdIHx8IDE7IC8vIGFsbG93IGFyYml0cmFyeSBzdWItc2Vjb25kIHByZWNpc2lvbiBiZXlvbmQgbWlsbGlzZWNvbmRzXG5cbiAgICBzdHJ1Y3RbN10gPSBzdHJ1Y3RbN10gPyBTdHJpbmcoc3RydWN0WzddKS5zdWJzdHIoMCwgMykgOiAwOyAvLyB0aW1lc3RhbXBzIHdpdGhvdXQgdGltZXpvbmUgaWRlbnRpZmllcnMgc2hvdWxkIGJlIGNvbnNpZGVyZWQgbG9jYWwgdGltZVxuXG4gICAgaWYgKChzdHJ1Y3RbOF0gPT09IHVuZGVmaW5lZCB8fCBzdHJ1Y3RbOF0gPT09ICcnKSAmJiAoc3RydWN0WzldID09PSB1bmRlZmluZWQgfHwgc3RydWN0WzldID09PSAnJykpIHRpbWVzdGFtcCA9ICtuZXcgRGF0ZShzdHJ1Y3RbMV0sIHN0cnVjdFsyXSwgc3RydWN0WzNdLCBzdHJ1Y3RbNF0sIHN0cnVjdFs1XSwgc3RydWN0WzZdLCBzdHJ1Y3RbN10pO2Vsc2Uge1xuICAgICAgaWYgKHN0cnVjdFs4XSAhPT0gJ1onICYmIHN0cnVjdFs5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG1pbnV0ZXNPZmZzZXQgPSBzdHJ1Y3RbMTBdICogNjAgKyBzdHJ1Y3RbMTFdO1xuICAgICAgICBpZiAoc3RydWN0WzldID09PSAnKycpIG1pbnV0ZXNPZmZzZXQgPSAwIC0gbWludXRlc09mZnNldDtcbiAgICAgIH1cblxuICAgICAgdGltZXN0YW1wID0gRGF0ZS5VVEMoc3RydWN0WzFdLCBzdHJ1Y3RbMl0sIHN0cnVjdFszXSwgc3RydWN0WzRdLCBzdHJ1Y3RbNV0gKyBtaW51dGVzT2Zmc2V0LCBzdHJ1Y3RbNl0sIHN0cnVjdFs3XSk7XG4gICAgfVxuICB9IGVsc2UgdGltZXN0YW1wID0gRGF0ZS5wYXJzZSA/IERhdGUucGFyc2UoZGF0ZSkgOiBOYU47XG5cbiAgcmV0dXJuIHRpbWVzdGFtcDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKTtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBPYmplY3RTY2hlbWE7XG5cbnZhciBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90YWdnZWRUZW1wbGF0ZUxpdGVyYWxMb29zZVwiKSk7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX2hhcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImxvZGFzaC9oYXNcIikpO1xuXG52YXIgX3NuYWtlQ2FzZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJsb2Rhc2gvc25ha2VDYXNlXCIpKTtcblxudmFyIF9jYW1lbENhc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibG9kYXNoL2NhbWVsQ2FzZVwiKSk7XG5cbnZhciBfbWFwS2V5cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImxvZGFzaC9tYXBLZXlzXCIpKTtcblxudmFyIF9tYXBWYWx1ZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJsb2Rhc2gvbWFwVmFsdWVzXCIpKTtcblxudmFyIF9wcm9wZXJ0eUV4cHIgPSByZXF1aXJlKFwicHJvcGVydHktZXhwclwiKTtcblxudmFyIF9taXhlZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbWl4ZWRcIikpO1xuXG52YXIgX2xvY2FsZSA9IHJlcXVpcmUoXCIuL2xvY2FsZS5qc1wiKTtcblxudmFyIF9zb3J0RmllbGRzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL3NvcnRGaWVsZHNcIikpO1xuXG52YXIgX3NvcnRCeUtleU9yZGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL3NvcnRCeUtleU9yZGVyXCIpKTtcblxudmFyIF9pbmhlcml0cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9pbmhlcml0c1wiKSk7XG5cbnZhciBfbWFrZVBhdGggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvbWFrZVBhdGhcIikpO1xuXG52YXIgX3J1blZhbGlkYXRpb25zID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vdXRpbC9ydW5WYWxpZGF0aW9uc1wiKSk7XG5cbmZ1bmN0aW9uIF90ZW1wbGF0ZU9iamVjdDIoKSB7XG4gIHZhciBkYXRhID0gKDAsIF90YWdnZWRUZW1wbGF0ZUxpdGVyYWxMb29zZTIuZGVmYXVsdCkoW1wiXCIsIFwiLlwiLCBcIlwiXSk7XG5cbiAgX3RlbXBsYXRlT2JqZWN0MiA9IGZ1bmN0aW9uIF90ZW1wbGF0ZU9iamVjdDIoKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIF90ZW1wbGF0ZU9iamVjdCgpIHtcbiAgdmFyIGRhdGEgPSAoMCwgX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbExvb3NlMi5kZWZhdWx0KShbXCJcIiwgXCIuXCIsIFwiXCJdKTtcblxuICBfdGVtcGxhdGVPYmplY3QgPSBmdW5jdGlvbiBfdGVtcGxhdGVPYmplY3QoKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbnZhciBpc09iamVjdCA9IGZ1bmN0aW9uIGlzT2JqZWN0KG9iaikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xufTtcblxuZnVuY3Rpb24gdW5rbm93bihjdHgsIHZhbHVlKSB7XG4gIHZhciBrbm93biA9IE9iamVjdC5rZXlzKGN0eC5maWVsZHMpO1xuICByZXR1cm4gT2JqZWN0LmtleXModmFsdWUpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGtub3duLmluZGV4T2Yoa2V5KSA9PT0gLTE7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBPYmplY3RTY2hlbWEoc3BlYykge1xuICB2YXIgX3RoaXMyID0gdGhpcztcblxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgT2JqZWN0U2NoZW1hKSkgcmV0dXJuIG5ldyBPYmplY3RTY2hlbWEoc3BlYyk7XG5cbiAgX21peGVkLmRlZmF1bHQuY2FsbCh0aGlzLCB7XG4gICAgdHlwZTogJ29iamVjdCcsXG4gICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAoIXRoaXMuX25vZGVzLmxlbmd0aCkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIHZhciBkZnQgPSB7fTtcblxuICAgICAgdGhpcy5fbm9kZXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGRmdFtrZXldID0gX3RoaXMuZmllbGRzW2tleV0uZGVmYXVsdCA/IF90aGlzLmZpZWxkc1trZXldLmRlZmF1bHQoKSA6IHVuZGVmaW5lZDtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gZGZ0O1xuICAgIH1cbiAgfSk7XG5cbiAgdGhpcy5maWVsZHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLl9ub2RlcyA9IFtdO1xuICB0aGlzLl9leGNsdWRlZEVkZ2VzID0gW107XG4gIHRoaXMud2l0aE11dGF0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICBfdGhpczIudHJhbnNmb3JtKGZ1bmN0aW9uIGNvZXJjZSh2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2YWx1ZSA9IEpTT04ucGFyc2UodmFsdWUpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICB2YWx1ZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuaXNUeXBlKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSk7XG5cbiAgICBpZiAoc3BlYykge1xuICAgICAgX3RoaXMyLnNoYXBlKHNwZWMpO1xuICAgIH1cbiAgfSk7XG59XG5cbigwLCBfaW5oZXJpdHMuZGVmYXVsdCkoT2JqZWN0U2NoZW1hLCBfbWl4ZWQuZGVmYXVsdCwge1xuICBfdHlwZUNoZWNrOiBmdW5jdGlvbiBfdHlwZUNoZWNrKHZhbHVlKSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHZhbHVlKSB8fCB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XG4gIH0sXG4gIF9jYXN0OiBmdW5jdGlvbiBfY2FzdChfdmFsdWUsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWUgPSBfbWl4ZWQuZGVmYXVsdC5wcm90b3R5cGUuX2Nhc3QuY2FsbCh0aGlzLCBfdmFsdWUsIG9wdGlvbnMpOyAvL3Nob3VsZCBpZ25vcmUgbnVsbHMgaGVyZVxuXG5cbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHRoaXMuZGVmYXVsdCgpO1xuICAgIGlmICghdGhpcy5fdHlwZUNoZWNrKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgIHZhciBmaWVsZHMgPSB0aGlzLmZpZWxkcztcbiAgICB2YXIgc3RyaXAgPSB0aGlzLl9vcHRpb24oJ3N0cmlwVW5rbm93bicsIG9wdGlvbnMpID09PSB0cnVlO1xuXG4gICAgdmFyIHByb3BzID0gdGhpcy5fbm9kZXMuY29uY2F0KE9iamVjdC5rZXlzKHZhbHVlKS5maWx0ZXIoZnVuY3Rpb24gKHYpIHtcbiAgICAgIHJldHVybiBfdGhpczMuX25vZGVzLmluZGV4T2YodikgPT09IC0xO1xuICAgIH0pKTtcblxuICAgIHZhciBpbnRlcm1lZGlhdGVWYWx1ZSA9IHt9OyAvLyBpcyBmaWxsZWQgZHVyaW5nIHRoZSB0cmFuc2Zvcm0gYmVsb3dcblxuICAgIHZhciBpbm5lck9wdGlvbnMgPSAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBvcHRpb25zLCB7XG4gICAgICBwYXJlbnQ6IGludGVybWVkaWF0ZVZhbHVlLFxuICAgICAgX192YWxpZGF0aW5nOiBmYWxzZVxuICAgIH0pO1xuICAgIHZhciBpc0NoYW5nZWQgPSBmYWxzZTtcbiAgICBwcm9wcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICB2YXIgZmllbGQgPSBmaWVsZHNbcHJvcF07XG4gICAgICB2YXIgZXhpc3RzID0gKDAsIF9oYXMuZGVmYXVsdCkodmFsdWUsIHByb3ApO1xuXG4gICAgICBpZiAoZmllbGQpIHtcbiAgICAgICAgdmFyIGZpZWxkVmFsdWU7XG4gICAgICAgIHZhciBzdHJpY3QgPSBmaWVsZC5fb3B0aW9ucyAmJiBmaWVsZC5fb3B0aW9ucy5zdHJpY3Q7IC8vIHNhZmUgdG8gbXV0YXRlIHNpbmNlIHRoaXMgaXMgZmlyZWQgaW4gc2VxdWVuY2VcblxuICAgICAgICBpbm5lck9wdGlvbnMucGF0aCA9ICgwLCBfbWFrZVBhdGguZGVmYXVsdCkoX3RlbXBsYXRlT2JqZWN0KCksIG9wdGlvbnMucGF0aCwgcHJvcCk7XG4gICAgICAgIGlubmVyT3B0aW9ucy52YWx1ZSA9IHZhbHVlW3Byb3BdO1xuICAgICAgICBmaWVsZCA9IGZpZWxkLnJlc29sdmUoaW5uZXJPcHRpb25zKTtcblxuICAgICAgICBpZiAoZmllbGQuX3N0cmlwID09PSB0cnVlKSB7XG4gICAgICAgICAgaXNDaGFuZ2VkID0gaXNDaGFuZ2VkIHx8IHByb3AgaW4gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZmllbGRWYWx1ZSA9ICFvcHRpb25zLl9fdmFsaWRhdGluZyB8fCAhc3RyaWN0ID8gZmllbGQuY2FzdCh2YWx1ZVtwcm9wXSwgaW5uZXJPcHRpb25zKSA6IHZhbHVlW3Byb3BdO1xuICAgICAgICBpZiAoZmllbGRWYWx1ZSAhPT0gdW5kZWZpbmVkKSBpbnRlcm1lZGlhdGVWYWx1ZVtwcm9wXSA9IGZpZWxkVmFsdWU7XG4gICAgICB9IGVsc2UgaWYgKGV4aXN0cyAmJiAhc3RyaXApIGludGVybWVkaWF0ZVZhbHVlW3Byb3BdID0gdmFsdWVbcHJvcF07XG5cbiAgICAgIGlmIChpbnRlcm1lZGlhdGVWYWx1ZVtwcm9wXSAhPT0gdmFsdWVbcHJvcF0pIGlzQ2hhbmdlZCA9IHRydWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIGlzQ2hhbmdlZCA/IGludGVybWVkaWF0ZVZhbHVlIDogdmFsdWU7XG4gIH0sXG4gIF92YWxpZGF0ZTogZnVuY3Rpb24gX3ZhbGlkYXRlKF92YWx1ZSwgb3B0cykge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0cyA9IHt9O1xuICAgIH1cblxuICAgIHZhciBlbmRFYXJseSwgcmVjdXJzaXZlO1xuICAgIHZhciBzeW5jID0gb3B0cy5zeW5jO1xuICAgIHZhciBlcnJvcnMgPSBbXTtcbiAgICB2YXIgb3JpZ2luYWxWYWx1ZSA9IG9wdHMub3JpZ2luYWxWYWx1ZSAhPSBudWxsID8gb3B0cy5vcmlnaW5hbFZhbHVlIDogX3ZhbHVlO1xuICAgIGVuZEVhcmx5ID0gdGhpcy5fb3B0aW9uKCdhYm9ydEVhcmx5Jywgb3B0cyk7XG4gICAgcmVjdXJzaXZlID0gdGhpcy5fb3B0aW9uKCdyZWN1cnNpdmUnLCBvcHRzKTtcbiAgICBvcHRzID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgb3B0cywge1xuICAgICAgX192YWxpZGF0aW5nOiB0cnVlLFxuICAgICAgb3JpZ2luYWxWYWx1ZTogb3JpZ2luYWxWYWx1ZVxuICAgIH0pO1xuICAgIHJldHVybiBfbWl4ZWQuZGVmYXVsdC5wcm90b3R5cGUuX3ZhbGlkYXRlLmNhbGwodGhpcywgX3ZhbHVlLCBvcHRzKS5jYXRjaCgoMCwgX3J1blZhbGlkYXRpb25zLnByb3BhZ2F0ZUVycm9ycykoZW5kRWFybHksIGVycm9ycykpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAoIXJlY3Vyc2l2ZSB8fCAhaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIC8vIG9ubHkgaXRlcmF0ZSB0aG91Z2ggYWN0dWFsIG9iamVjdHNcbiAgICAgICAgaWYgKGVycm9ycy5sZW5ndGgpIHRocm93IGVycm9yc1swXTtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuXG4gICAgICBvcmlnaW5hbFZhbHVlID0gb3JpZ2luYWxWYWx1ZSB8fCB2YWx1ZTtcblxuICAgICAgdmFyIHZhbGlkYXRpb25zID0gX3RoaXM0Ll9ub2Rlcy5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgcGF0aCA9ICgwLCBfbWFrZVBhdGguZGVmYXVsdCkoX3RlbXBsYXRlT2JqZWN0MigpLCBvcHRzLnBhdGgsIGtleSk7XG4gICAgICAgIHZhciBmaWVsZCA9IF90aGlzNC5maWVsZHNba2V5XTtcbiAgICAgICAgdmFyIGlubmVyT3B0aW9ucyA9ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIG9wdHMsIHtcbiAgICAgICAgICBwYXRoOiBwYXRoLFxuICAgICAgICAgIHBhcmVudDogdmFsdWUsXG4gICAgICAgICAgb3JpZ2luYWxWYWx1ZTogb3JpZ2luYWxWYWx1ZVtrZXldXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChmaWVsZCAmJiBmaWVsZC52YWxpZGF0ZSkge1xuICAgICAgICAgIC8vIGlubmVyIGZpZWxkcyBhcmUgYWx3YXlzIHN0cmljdDpcbiAgICAgICAgICAvLyAxLiB0aGlzIGlzbid0IHN0cmljdCBzbyB0aGUgY2FzdGluZyB3aWxsIGFsc28gaGF2ZSBjYXN0IGlubmVyIHZhbHVlc1xuICAgICAgICAgIC8vIDIuIHRoaXMgaXMgc3RyaWN0IGluIHdoaWNoIGNhc2UgdGhlIG5lc3RlZCB2YWx1ZXMgd2VyZW4ndCBjYXN0IGVpdGhlclxuICAgICAgICAgIGlubmVyT3B0aW9ucy5zdHJpY3QgPSB0cnVlO1xuICAgICAgICAgIHJldHVybiBmaWVsZC52YWxpZGF0ZSh2YWx1ZVtrZXldLCBpbm5lck9wdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0cnVlKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gKDAsIF9ydW5WYWxpZGF0aW9ucy5kZWZhdWx0KSh7XG4gICAgICAgIHN5bmM6IHN5bmMsXG4gICAgICAgIHZhbGlkYXRpb25zOiB2YWxpZGF0aW9ucyxcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBlcnJvcnM6IGVycm9ycyxcbiAgICAgICAgZW5kRWFybHk6IGVuZEVhcmx5LFxuICAgICAgICBwYXRoOiBvcHRzLnBhdGgsXG4gICAgICAgIHNvcnQ6ICgwLCBfc29ydEJ5S2V5T3JkZXIuZGVmYXVsdCkoX3RoaXM0LmZpZWxkcylcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9LFxuICBjb25jYXQ6IGZ1bmN0aW9uIGNvbmNhdChzY2hlbWEpIHtcbiAgICB2YXIgbmV4dCA9IF9taXhlZC5kZWZhdWx0LnByb3RvdHlwZS5jb25jYXQuY2FsbCh0aGlzLCBzY2hlbWEpO1xuXG4gICAgbmV4dC5fbm9kZXMgPSAoMCwgX3NvcnRGaWVsZHMuZGVmYXVsdCkobmV4dC5maWVsZHMsIG5leHQuX2V4Y2x1ZGVkRWRnZXMpO1xuICAgIHJldHVybiBuZXh0O1xuICB9LFxuICBzaGFwZTogZnVuY3Rpb24gc2hhcGUoc2NoZW1hLCBleGNsdWRlcykge1xuICAgIGlmIChleGNsdWRlcyA9PT0gdm9pZCAwKSB7XG4gICAgICBleGNsdWRlcyA9IFtdO1xuICAgIH1cblxuICAgIHZhciBuZXh0ID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciBmaWVsZHMgPSAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKG5leHQuZmllbGRzLCBzY2hlbWEpO1xuICAgIG5leHQuZmllbGRzID0gZmllbGRzO1xuXG4gICAgaWYgKGV4Y2x1ZGVzLmxlbmd0aCkge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGV4Y2x1ZGVzWzBdKSkgZXhjbHVkZXMgPSBbZXhjbHVkZXNdO1xuICAgICAgdmFyIGtleXMgPSBleGNsdWRlcy5tYXAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgdmFyIGZpcnN0ID0gX3JlZlswXSxcbiAgICAgICAgICAgIHNlY29uZCA9IF9yZWZbMV07XG4gICAgICAgIHJldHVybiBmaXJzdCArIFwiLVwiICsgc2Vjb25kO1xuICAgICAgfSk7XG4gICAgICBuZXh0Ll9leGNsdWRlZEVkZ2VzID0gbmV4dC5fZXhjbHVkZWRFZGdlcy5jb25jYXQoa2V5cyk7XG4gICAgfVxuXG4gICAgbmV4dC5fbm9kZXMgPSAoMCwgX3NvcnRGaWVsZHMuZGVmYXVsdCkoZmllbGRzLCBuZXh0Ll9leGNsdWRlZEVkZ2VzKTtcbiAgICByZXR1cm4gbmV4dDtcbiAgfSxcbiAgZnJvbTogZnVuY3Rpb24gZnJvbShfZnJvbSwgdG8sIGFsaWFzKSB7XG4gICAgdmFyIGZyb21HZXR0ZXIgPSAoMCwgX3Byb3BlcnR5RXhwci5nZXR0ZXIpKF9mcm9tLCB0cnVlKTtcbiAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0oZnVuY3Rpb24gKG9iaikge1xuICAgICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gb2JqO1xuICAgICAgdmFyIG5ld09iaiA9IG9iajtcblxuICAgICAgaWYgKCgwLCBfaGFzLmRlZmF1bHQpKG9iaiwgX2Zyb20pKSB7XG4gICAgICAgIG5ld09iaiA9ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIG9iaik7XG4gICAgICAgIGlmICghYWxpYXMpIGRlbGV0ZSBuZXdPYmpbX2Zyb21dO1xuICAgICAgICBuZXdPYmpbdG9dID0gZnJvbUdldHRlcihvYmopO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3T2JqO1xuICAgIH0pO1xuICB9LFxuICBub1Vua25vd246IGZ1bmN0aW9uIG5vVW5rbm93bihub0FsbG93LCBtZXNzYWdlKSB7XG4gICAgaWYgKG5vQWxsb3cgPT09IHZvaWQgMCkge1xuICAgICAgbm9BbGxvdyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKG1lc3NhZ2UgPT09IHZvaWQgMCkge1xuICAgICAgbWVzc2FnZSA9IF9sb2NhbGUub2JqZWN0Lm5vVW5rbm93bjtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG5vQWxsb3cgPT09ICdzdHJpbmcnKSB7XG4gICAgICBtZXNzYWdlID0gbm9BbGxvdztcbiAgICAgIG5vQWxsb3cgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBuZXh0ID0gdGhpcy50ZXN0KHtcbiAgICAgIG5hbWU6ICdub1Vua25vd24nLFxuICAgICAgZXhjbHVzaXZlOiB0cnVlLFxuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIHRlc3Q6IGZ1bmN0aW9uIHRlc3QodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09IG51bGwgfHwgIW5vQWxsb3cgfHwgdW5rbm93bih0aGlzLnNjaGVtYSwgdmFsdWUpLmxlbmd0aCA9PT0gMDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBuZXh0Ll9vcHRpb25zLnN0cmlwVW5rbm93biA9IG5vQWxsb3c7XG4gICAgcmV0dXJuIG5leHQ7XG4gIH0sXG4gIHVua25vd246IGZ1bmN0aW9uIHVua25vd24oYWxsb3csIG1lc3NhZ2UpIHtcbiAgICBpZiAoYWxsb3cgPT09IHZvaWQgMCkge1xuICAgICAgYWxsb3cgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChtZXNzYWdlID09PSB2b2lkIDApIHtcbiAgICAgIG1lc3NhZ2UgPSBfbG9jYWxlLm9iamVjdC5ub1Vua25vd247XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubm9Vbmtub3duKCFhbGxvdywgbWVzc2FnZSk7XG4gIH0sXG4gIHRyYW5zZm9ybUtleXM6IGZ1bmN0aW9uIHRyYW5zZm9ybUtleXMoZm4pIHtcbiAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0oZnVuY3Rpb24gKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiAoMCwgX21hcEtleXMuZGVmYXVsdCkob2JqLCBmdW5jdGlvbiAoXywga2V5KSB7XG4gICAgICAgIHJldHVybiBmbihrZXkpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0sXG4gIGNhbWVsQ2FzZTogZnVuY3Rpb24gY2FtZWxDYXNlKCkge1xuICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybUtleXMoX2NhbWVsQ2FzZTIuZGVmYXVsdCk7XG4gIH0sXG4gIHNuYWtlQ2FzZTogZnVuY3Rpb24gc25ha2VDYXNlKCkge1xuICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybUtleXMoX3NuYWtlQ2FzZTIuZGVmYXVsdCk7XG4gIH0sXG4gIGNvbnN0YW50Q2FzZTogZnVuY3Rpb24gY29uc3RhbnRDYXNlKCkge1xuICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybUtleXMoZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuICgwLCBfc25ha2VDYXNlMi5kZWZhdWx0KShrZXkpLnRvVXBwZXJDYXNlKCk7XG4gICAgfSk7XG4gIH0sXG4gIGRlc2NyaWJlOiBmdW5jdGlvbiBkZXNjcmliZSgpIHtcbiAgICB2YXIgYmFzZSA9IF9taXhlZC5kZWZhdWx0LnByb3RvdHlwZS5kZXNjcmliZS5jYWxsKHRoaXMpO1xuXG4gICAgYmFzZS5maWVsZHMgPSAoMCwgX21hcFZhbHVlcy5kZWZhdWx0KSh0aGlzLmZpZWxkcywgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUuZGVzY3JpYmUoKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYmFzZTtcbiAgfVxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsInZhciBjcmVhdGVDb21wb3VuZGVyID0gcmVxdWlyZSgnLi9fY3JlYXRlQ29tcG91bmRlcicpO1xuXG4vKipcbiAqIENvbnZlcnRzIGBzdHJpbmdgIHRvXG4gKiBbc25ha2UgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU25ha2VfY2FzZSkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IFN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNuYWtlIGNhc2VkIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5zbmFrZUNhc2UoJ0ZvbyBCYXInKTtcbiAqIC8vID0+ICdmb29fYmFyJ1xuICpcbiAqIF8uc25ha2VDYXNlKCdmb29CYXInKTtcbiAqIC8vID0+ICdmb29fYmFyJ1xuICpcbiAqIF8uc25ha2VDYXNlKCctLUZPTy1CQVItLScpO1xuICogLy8gPT4gJ2Zvb19iYXInXG4gKi9cbnZhciBzbmFrZUNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICdfJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNuYWtlQ2FzZTtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICogQHBhcmFtIHtib29sZWFufSBbaW5pdEFjY3VtXSBTcGVjaWZ5IHVzaW5nIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAqICB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlSZWR1Y2UoYXJyYXksIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgaWYgKGluaXRBY2N1bSAmJiBsZW5ndGgpIHtcbiAgICBhY2N1bXVsYXRvciA9IGFycmF5WysraW5kZXhdO1xuICB9XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICB9XG4gIHJldHVybiBhY2N1bXVsYXRvcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheVJlZHVjZTtcbiIsInZhciBkZWJ1cnJMZXR0ZXIgPSByZXF1aXJlKCcuL19kZWJ1cnJMZXR0ZXInKSxcbiAgICB0b1N0cmluZyA9IHJlcXVpcmUoJy4vdG9TdHJpbmcnKTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggTGF0aW4gVW5pY29kZSBsZXR0ZXJzIChleGNsdWRpbmcgbWF0aGVtYXRpY2FsIG9wZXJhdG9ycykuICovXG52YXIgcmVMYXRpbiA9IC9bXFx4YzAtXFx4ZDZcXHhkOC1cXHhmNlxceGY4LVxceGZmXFx1MDEwMC1cXHUwMTdmXS9nO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2hhcmFjdGVyIGNsYXNzZXMuICovXG52YXIgcnNDb21ib01hcmtzUmFuZ2UgPSAnXFxcXHUwMzAwLVxcXFx1MDM2ZicsXG4gICAgcmVDb21ib0hhbGZNYXJrc1JhbmdlID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLFxuICAgIHJzQ29tYm9TeW1ib2xzUmFuZ2UgPSAnXFxcXHUyMGQwLVxcXFx1MjBmZicsXG4gICAgcnNDb21ib1JhbmdlID0gcnNDb21ib01hcmtzUmFuZ2UgKyByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgKyByc0NvbWJvU3ltYm9sc1JhbmdlO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG52YXIgcnNDb21ibyA9ICdbJyArIHJzQ29tYm9SYW5nZSArICddJztcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3NdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrcykgYW5kXG4gKiBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzIGZvciBzeW1ib2xzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3NfZm9yX1N5bWJvbHMpLlxuICovXG52YXIgcmVDb21ib01hcmsgPSBSZWdFeHAocnNDb21ibywgJ2cnKTtcblxuLyoqXG4gKiBEZWJ1cnJzIGBzdHJpbmdgIGJ5IGNvbnZlcnRpbmdcbiAqIFtMYXRpbi0xIFN1cHBsZW1lbnRdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhdGluLTFfU3VwcGxlbWVudF8oVW5pY29kZV9ibG9jaykjQ2hhcmFjdGVyX3RhYmxlKVxuICogYW5kIFtMYXRpbiBFeHRlbmRlZC1BXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MYXRpbl9FeHRlbmRlZC1BKVxuICogbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzIGFuZCByZW1vdmluZ1xuICogW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgU3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBkZWJ1cnIuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBkZWJ1cnJlZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZGVidXJyKCdkw6lqw6AgdnUnKTtcbiAqIC8vID0+ICdkZWphIHZ1J1xuICovXG5mdW5jdGlvbiBkZWJ1cnIoc3RyaW5nKSB7XG4gIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gIHJldHVybiBzdHJpbmcgJiYgc3RyaW5nLnJlcGxhY2UocmVMYXRpbiwgZGVidXJyTGV0dGVyKS5yZXBsYWNlKHJlQ29tYm9NYXJrLCAnJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGVidXJyO1xuIiwidmFyIGJhc2VQcm9wZXJ0eU9mID0gcmVxdWlyZSgnLi9fYmFzZVByb3BlcnR5T2YnKTtcblxuLyoqIFVzZWQgdG8gbWFwIExhdGluIFVuaWNvZGUgbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLiAqL1xudmFyIGRlYnVycmVkTGV0dGVycyA9IHtcbiAgLy8gTGF0aW4tMSBTdXBwbGVtZW50IGJsb2NrLlxuICAnXFx4YzAnOiAnQScsICAnXFx4YzEnOiAnQScsICdcXHhjMic6ICdBJywgJ1xceGMzJzogJ0EnLCAnXFx4YzQnOiAnQScsICdcXHhjNSc6ICdBJyxcbiAgJ1xceGUwJzogJ2EnLCAgJ1xceGUxJzogJ2EnLCAnXFx4ZTInOiAnYScsICdcXHhlMyc6ICdhJywgJ1xceGU0JzogJ2EnLCAnXFx4ZTUnOiAnYScsXG4gICdcXHhjNyc6ICdDJywgICdcXHhlNyc6ICdjJyxcbiAgJ1xceGQwJzogJ0QnLCAgJ1xceGYwJzogJ2QnLFxuICAnXFx4YzgnOiAnRScsICAnXFx4YzknOiAnRScsICdcXHhjYSc6ICdFJywgJ1xceGNiJzogJ0UnLFxuICAnXFx4ZTgnOiAnZScsICAnXFx4ZTknOiAnZScsICdcXHhlYSc6ICdlJywgJ1xceGViJzogJ2UnLFxuICAnXFx4Y2MnOiAnSScsICAnXFx4Y2QnOiAnSScsICdcXHhjZSc6ICdJJywgJ1xceGNmJzogJ0knLFxuICAnXFx4ZWMnOiAnaScsICAnXFx4ZWQnOiAnaScsICdcXHhlZSc6ICdpJywgJ1xceGVmJzogJ2knLFxuICAnXFx4ZDEnOiAnTicsICAnXFx4ZjEnOiAnbicsXG4gICdcXHhkMic6ICdPJywgICdcXHhkMyc6ICdPJywgJ1xceGQ0JzogJ08nLCAnXFx4ZDUnOiAnTycsICdcXHhkNic6ICdPJywgJ1xceGQ4JzogJ08nLFxuICAnXFx4ZjInOiAnbycsICAnXFx4ZjMnOiAnbycsICdcXHhmNCc6ICdvJywgJ1xceGY1JzogJ28nLCAnXFx4ZjYnOiAnbycsICdcXHhmOCc6ICdvJyxcbiAgJ1xceGQ5JzogJ1UnLCAgJ1xceGRhJzogJ1UnLCAnXFx4ZGInOiAnVScsICdcXHhkYyc6ICdVJyxcbiAgJ1xceGY5JzogJ3UnLCAgJ1xceGZhJzogJ3UnLCAnXFx4ZmInOiAndScsICdcXHhmYyc6ICd1JyxcbiAgJ1xceGRkJzogJ1knLCAgJ1xceGZkJzogJ3knLCAnXFx4ZmYnOiAneScsXG4gICdcXHhjNic6ICdBZScsICdcXHhlNic6ICdhZScsXG4gICdcXHhkZSc6ICdUaCcsICdcXHhmZSc6ICd0aCcsXG4gICdcXHhkZic6ICdzcycsXG4gIC8vIExhdGluIEV4dGVuZGVkLUEgYmxvY2suXG4gICdcXHUwMTAwJzogJ0EnLCAgJ1xcdTAxMDInOiAnQScsICdcXHUwMTA0JzogJ0EnLFxuICAnXFx1MDEwMSc6ICdhJywgICdcXHUwMTAzJzogJ2EnLCAnXFx1MDEwNSc6ICdhJyxcbiAgJ1xcdTAxMDYnOiAnQycsICAnXFx1MDEwOCc6ICdDJywgJ1xcdTAxMGEnOiAnQycsICdcXHUwMTBjJzogJ0MnLFxuICAnXFx1MDEwNyc6ICdjJywgICdcXHUwMTA5JzogJ2MnLCAnXFx1MDEwYic6ICdjJywgJ1xcdTAxMGQnOiAnYycsXG4gICdcXHUwMTBlJzogJ0QnLCAgJ1xcdTAxMTAnOiAnRCcsICdcXHUwMTBmJzogJ2QnLCAnXFx1MDExMSc6ICdkJyxcbiAgJ1xcdTAxMTInOiAnRScsICAnXFx1MDExNCc6ICdFJywgJ1xcdTAxMTYnOiAnRScsICdcXHUwMTE4JzogJ0UnLCAnXFx1MDExYSc6ICdFJyxcbiAgJ1xcdTAxMTMnOiAnZScsICAnXFx1MDExNSc6ICdlJywgJ1xcdTAxMTcnOiAnZScsICdcXHUwMTE5JzogJ2UnLCAnXFx1MDExYic6ICdlJyxcbiAgJ1xcdTAxMWMnOiAnRycsICAnXFx1MDExZSc6ICdHJywgJ1xcdTAxMjAnOiAnRycsICdcXHUwMTIyJzogJ0cnLFxuICAnXFx1MDExZCc6ICdnJywgICdcXHUwMTFmJzogJ2cnLCAnXFx1MDEyMSc6ICdnJywgJ1xcdTAxMjMnOiAnZycsXG4gICdcXHUwMTI0JzogJ0gnLCAgJ1xcdTAxMjYnOiAnSCcsICdcXHUwMTI1JzogJ2gnLCAnXFx1MDEyNyc6ICdoJyxcbiAgJ1xcdTAxMjgnOiAnSScsICAnXFx1MDEyYSc6ICdJJywgJ1xcdTAxMmMnOiAnSScsICdcXHUwMTJlJzogJ0knLCAnXFx1MDEzMCc6ICdJJyxcbiAgJ1xcdTAxMjknOiAnaScsICAnXFx1MDEyYic6ICdpJywgJ1xcdTAxMmQnOiAnaScsICdcXHUwMTJmJzogJ2knLCAnXFx1MDEzMSc6ICdpJyxcbiAgJ1xcdTAxMzQnOiAnSicsICAnXFx1MDEzNSc6ICdqJyxcbiAgJ1xcdTAxMzYnOiAnSycsICAnXFx1MDEzNyc6ICdrJywgJ1xcdTAxMzgnOiAnaycsXG4gICdcXHUwMTM5JzogJ0wnLCAgJ1xcdTAxM2InOiAnTCcsICdcXHUwMTNkJzogJ0wnLCAnXFx1MDEzZic6ICdMJywgJ1xcdTAxNDEnOiAnTCcsXG4gICdcXHUwMTNhJzogJ2wnLCAgJ1xcdTAxM2MnOiAnbCcsICdcXHUwMTNlJzogJ2wnLCAnXFx1MDE0MCc6ICdsJywgJ1xcdTAxNDInOiAnbCcsXG4gICdcXHUwMTQzJzogJ04nLCAgJ1xcdTAxNDUnOiAnTicsICdcXHUwMTQ3JzogJ04nLCAnXFx1MDE0YSc6ICdOJyxcbiAgJ1xcdTAxNDQnOiAnbicsICAnXFx1MDE0Nic6ICduJywgJ1xcdTAxNDgnOiAnbicsICdcXHUwMTRiJzogJ24nLFxuICAnXFx1MDE0Yyc6ICdPJywgICdcXHUwMTRlJzogJ08nLCAnXFx1MDE1MCc6ICdPJyxcbiAgJ1xcdTAxNGQnOiAnbycsICAnXFx1MDE0Zic6ICdvJywgJ1xcdTAxNTEnOiAnbycsXG4gICdcXHUwMTU0JzogJ1InLCAgJ1xcdTAxNTYnOiAnUicsICdcXHUwMTU4JzogJ1InLFxuICAnXFx1MDE1NSc6ICdyJywgICdcXHUwMTU3JzogJ3InLCAnXFx1MDE1OSc6ICdyJyxcbiAgJ1xcdTAxNWEnOiAnUycsICAnXFx1MDE1Yyc6ICdTJywgJ1xcdTAxNWUnOiAnUycsICdcXHUwMTYwJzogJ1MnLFxuICAnXFx1MDE1Yic6ICdzJywgICdcXHUwMTVkJzogJ3MnLCAnXFx1MDE1Zic6ICdzJywgJ1xcdTAxNjEnOiAncycsXG4gICdcXHUwMTYyJzogJ1QnLCAgJ1xcdTAxNjQnOiAnVCcsICdcXHUwMTY2JzogJ1QnLFxuICAnXFx1MDE2Myc6ICd0JywgICdcXHUwMTY1JzogJ3QnLCAnXFx1MDE2Nyc6ICd0JyxcbiAgJ1xcdTAxNjgnOiAnVScsICAnXFx1MDE2YSc6ICdVJywgJ1xcdTAxNmMnOiAnVScsICdcXHUwMTZlJzogJ1UnLCAnXFx1MDE3MCc6ICdVJywgJ1xcdTAxNzInOiAnVScsXG4gICdcXHUwMTY5JzogJ3UnLCAgJ1xcdTAxNmInOiAndScsICdcXHUwMTZkJzogJ3UnLCAnXFx1MDE2Zic6ICd1JywgJ1xcdTAxNzEnOiAndScsICdcXHUwMTczJzogJ3UnLFxuICAnXFx1MDE3NCc6ICdXJywgICdcXHUwMTc1JzogJ3cnLFxuICAnXFx1MDE3Nic6ICdZJywgICdcXHUwMTc3JzogJ3knLCAnXFx1MDE3OCc6ICdZJyxcbiAgJ1xcdTAxNzknOiAnWicsICAnXFx1MDE3Yic6ICdaJywgJ1xcdTAxN2QnOiAnWicsXG4gICdcXHUwMTdhJzogJ3onLCAgJ1xcdTAxN2MnOiAneicsICdcXHUwMTdlJzogJ3onLFxuICAnXFx1MDEzMic6ICdJSicsICdcXHUwMTMzJzogJ2lqJyxcbiAgJ1xcdTAxNTInOiAnT2UnLCAnXFx1MDE1Myc6ICdvZScsXG4gICdcXHUwMTQ5JzogXCInblwiLCAnXFx1MDE3Zic6ICdzJ1xufTtcblxuLyoqXG4gKiBVc2VkIGJ5IGBfLmRlYnVycmAgdG8gY29udmVydCBMYXRpbi0xIFN1cHBsZW1lbnQgYW5kIExhdGluIEV4dGVuZGVkLUFcbiAqIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGxldHRlciBUaGUgbWF0Y2hlZCBsZXR0ZXIgdG8gZGVidXJyLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZGVidXJyZWQgbGV0dGVyLlxuICovXG52YXIgZGVidXJyTGV0dGVyID0gYmFzZVByb3BlcnR5T2YoZGVidXJyZWRMZXR0ZXJzKTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWJ1cnJMZXR0ZXI7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5T2ZgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VQcm9wZXJ0eU9mKG9iamVjdCkge1xuICByZXR1cm4gZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVByb3BlcnR5T2Y7XG4iLCJ2YXIgYXNjaWlXb3JkcyA9IHJlcXVpcmUoJy4vX2FzY2lpV29yZHMnKSxcbiAgICBoYXNVbmljb2RlV29yZCA9IHJlcXVpcmUoJy4vX2hhc1VuaWNvZGVXb3JkJyksXG4gICAgdG9TdHJpbmcgPSByZXF1aXJlKCcuL3RvU3RyaW5nJyksXG4gICAgdW5pY29kZVdvcmRzID0gcmVxdWlyZSgnLi9fdW5pY29kZVdvcmRzJyk7XG5cbi8qKlxuICogU3BsaXRzIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBTdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IFtwYXR0ZXJuXSBUaGUgcGF0dGVybiB0byBtYXRjaCB3b3Jkcy5cbiAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICogLy8gPT4gWydmcmVkJywgJ2Jhcm5leScsICdwZWJibGVzJ11cbiAqXG4gKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycsIC9bXiwgXSsvZyk7XG4gKiAvLyA9PiBbJ2ZyZWQnLCAnYmFybmV5JywgJyYnLCAncGViYmxlcyddXG4gKi9cbmZ1bmN0aW9uIHdvcmRzKHN0cmluZywgcGF0dGVybiwgZ3VhcmQpIHtcbiAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgcGF0dGVybiA9IGd1YXJkID8gdW5kZWZpbmVkIDogcGF0dGVybjtcblxuICBpZiAocGF0dGVybiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGhhc1VuaWNvZGVXb3JkKHN0cmluZykgPyB1bmljb2RlV29yZHMoc3RyaW5nKSA6IGFzY2lpV29yZHMoc3RyaW5nKTtcbiAgfVxuICByZXR1cm4gc3RyaW5nLm1hdGNoKHBhdHRlcm4pIHx8IFtdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdvcmRzO1xuIiwiLyoqIFVzZWQgdG8gbWF0Y2ggd29yZHMgY29tcG9zZWQgb2YgYWxwaGFudW1lcmljIGNoYXJhY3RlcnMuICovXG52YXIgcmVBc2NpaVdvcmQgPSAvW15cXHgwMC1cXHgyZlxceDNhLVxceDQwXFx4NWItXFx4NjBcXHg3Yi1cXHg3Zl0rL2c7XG5cbi8qKlxuICogU3BsaXRzIGFuIEFTQ0lJIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAqL1xuZnVuY3Rpb24gYXNjaWlXb3JkcyhzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5tYXRjaChyZUFzY2lpV29yZCkgfHwgW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNjaWlXb3JkcztcbiIsIi8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHRoYXQgbmVlZCBhIG1vcmUgcm9idXN0IHJlZ2V4cCB0byBtYXRjaCB3b3Jkcy4gKi9cbnZhciByZUhhc1VuaWNvZGVXb3JkID0gL1thLXpdW0EtWl18W0EtWl17Mn1bYS16XXxbMC05XVthLXpBLVpdfFthLXpBLVpdWzAtOV18W15hLXpBLVowLTkgXS87XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBzdHJpbmdgIGNvbnRhaW5zIGEgd29yZCBjb21wb3NlZCBvZiBVbmljb2RlIHN5bWJvbHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGEgd29yZCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNVbmljb2RlV29yZChzdHJpbmcpIHtcbiAgcmV0dXJuIHJlSGFzVW5pY29kZVdvcmQudGVzdChzdHJpbmcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc1VuaWNvZGVXb3JkO1xuIiwiLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNoYXJhY3RlciBjbGFzc2VzLiAqL1xudmFyIHJzQXN0cmFsUmFuZ2UgPSAnXFxcXHVkODAwLVxcXFx1ZGZmZicsXG4gICAgcnNDb21ib01hcmtzUmFuZ2UgPSAnXFxcXHUwMzAwLVxcXFx1MDM2ZicsXG4gICAgcmVDb21ib0hhbGZNYXJrc1JhbmdlID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLFxuICAgIHJzQ29tYm9TeW1ib2xzUmFuZ2UgPSAnXFxcXHUyMGQwLVxcXFx1MjBmZicsXG4gICAgcnNDb21ib1JhbmdlID0gcnNDb21ib01hcmtzUmFuZ2UgKyByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgKyByc0NvbWJvU3ltYm9sc1JhbmdlLFxuICAgIHJzRGluZ2JhdFJhbmdlID0gJ1xcXFx1MjcwMC1cXFxcdTI3YmYnLFxuICAgIHJzTG93ZXJSYW5nZSA9ICdhLXpcXFxceGRmLVxcXFx4ZjZcXFxceGY4LVxcXFx4ZmYnLFxuICAgIHJzTWF0aE9wUmFuZ2UgPSAnXFxcXHhhY1xcXFx4YjFcXFxceGQ3XFxcXHhmNycsXG4gICAgcnNOb25DaGFyUmFuZ2UgPSAnXFxcXHgwMC1cXFxceDJmXFxcXHgzYS1cXFxceDQwXFxcXHg1Yi1cXFxceDYwXFxcXHg3Yi1cXFxceGJmJyxcbiAgICByc1B1bmN0dWF0aW9uUmFuZ2UgPSAnXFxcXHUyMDAwLVxcXFx1MjA2ZicsXG4gICAgcnNTcGFjZVJhbmdlID0gJyBcXFxcdFxcXFx4MGJcXFxcZlxcXFx4YTBcXFxcdWZlZmZcXFxcblxcXFxyXFxcXHUyMDI4XFxcXHUyMDI5XFxcXHUxNjgwXFxcXHUxODBlXFxcXHUyMDAwXFxcXHUyMDAxXFxcXHUyMDAyXFxcXHUyMDAzXFxcXHUyMDA0XFxcXHUyMDA1XFxcXHUyMDA2XFxcXHUyMDA3XFxcXHUyMDA4XFxcXHUyMDA5XFxcXHUyMDBhXFxcXHUyMDJmXFxcXHUyMDVmXFxcXHUzMDAwJyxcbiAgICByc1VwcGVyUmFuZ2UgPSAnQS1aXFxcXHhjMC1cXFxceGQ2XFxcXHhkOC1cXFxceGRlJyxcbiAgICByc1ZhclJhbmdlID0gJ1xcXFx1ZmUwZVxcXFx1ZmUwZicsXG4gICAgcnNCcmVha1JhbmdlID0gcnNNYXRoT3BSYW5nZSArIHJzTm9uQ2hhclJhbmdlICsgcnNQdW5jdHVhdGlvblJhbmdlICsgcnNTcGFjZVJhbmdlO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG52YXIgcnNBcG9zID0gXCJbJ1xcdTIwMTldXCIsXG4gICAgcnNCcmVhayA9ICdbJyArIHJzQnJlYWtSYW5nZSArICddJyxcbiAgICByc0NvbWJvID0gJ1snICsgcnNDb21ib1JhbmdlICsgJ10nLFxuICAgIHJzRGlnaXRzID0gJ1xcXFxkKycsXG4gICAgcnNEaW5nYmF0ID0gJ1snICsgcnNEaW5nYmF0UmFuZ2UgKyAnXScsXG4gICAgcnNMb3dlciA9ICdbJyArIHJzTG93ZXJSYW5nZSArICddJyxcbiAgICByc01pc2MgPSAnW14nICsgcnNBc3RyYWxSYW5nZSArIHJzQnJlYWtSYW5nZSArIHJzRGlnaXRzICsgcnNEaW5nYmF0UmFuZ2UgKyByc0xvd2VyUmFuZ2UgKyByc1VwcGVyUmFuZ2UgKyAnXScsXG4gICAgcnNGaXR6ID0gJ1xcXFx1ZDgzY1tcXFxcdWRmZmItXFxcXHVkZmZmXScsXG4gICAgcnNNb2RpZmllciA9ICcoPzonICsgcnNDb21ibyArICd8JyArIHJzRml0eiArICcpJyxcbiAgICByc05vbkFzdHJhbCA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgJ10nLFxuICAgIHJzUmVnaW9uYWwgPSAnKD86XFxcXHVkODNjW1xcXFx1ZGRlNi1cXFxcdWRkZmZdKXsyfScsXG4gICAgcnNTdXJyUGFpciA9ICdbXFxcXHVkODAwLVxcXFx1ZGJmZl1bXFxcXHVkYzAwLVxcXFx1ZGZmZl0nLFxuICAgIHJzVXBwZXIgPSAnWycgKyByc1VwcGVyUmFuZ2UgKyAnXScsXG4gICAgcnNaV0ogPSAnXFxcXHUyMDBkJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIHJlZ2V4ZXMuICovXG52YXIgcnNNaXNjTG93ZXIgPSAnKD86JyArIHJzTG93ZXIgKyAnfCcgKyByc01pc2MgKyAnKScsXG4gICAgcnNNaXNjVXBwZXIgPSAnKD86JyArIHJzVXBwZXIgKyAnfCcgKyByc01pc2MgKyAnKScsXG4gICAgcnNPcHRDb250ckxvd2VyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86ZHxsbHxtfHJlfHN8dHx2ZSkpPycsXG4gICAgcnNPcHRDb250clVwcGVyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86RHxMTHxNfFJFfFN8VHxWRSkpPycsXG4gICAgcmVPcHRNb2QgPSByc01vZGlmaWVyICsgJz8nLFxuICAgIHJzT3B0VmFyID0gJ1snICsgcnNWYXJSYW5nZSArICddPycsXG4gICAgcnNPcHRKb2luID0gJyg/OicgKyByc1pXSiArICcoPzonICsgW3JzTm9uQXN0cmFsLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc09wdFZhciArIHJlT3B0TW9kICsgJykqJyxcbiAgICByc09yZExvd2VyID0gJ1xcXFxkKig/OjFzdHwybmR8M3JkfCg/IVsxMjNdKVxcXFxkdGgpKD89XFxcXGJ8W0EtWl9dKScsXG4gICAgcnNPcmRVcHBlciA9ICdcXFxcZCooPzoxU1R8Mk5EfDNSRHwoPyFbMTIzXSlcXFxcZFRIKSg/PVxcXFxifFthLXpfXSknLFxuICAgIHJzU2VxID0gcnNPcHRWYXIgKyByZU9wdE1vZCArIHJzT3B0Sm9pbixcbiAgICByc0Vtb2ppID0gJyg/OicgKyBbcnNEaW5nYmF0LCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc1NlcTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggY29tcGxleCBvciBjb21wb3VuZCB3b3Jkcy4gKi9cbnZhciByZVVuaWNvZGVXb3JkID0gUmVnRXhwKFtcbiAgcnNVcHBlciArICc/JyArIHJzTG93ZXIgKyAnKycgKyByc09wdENvbnRyTG93ZXIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyLCAnJCddLmpvaW4oJ3wnKSArICcpJyxcbiAgcnNNaXNjVXBwZXIgKyAnKycgKyByc09wdENvbnRyVXBwZXIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyICsgcnNNaXNjTG93ZXIsICckJ10uam9pbignfCcpICsgJyknLFxuICByc1VwcGVyICsgJz8nICsgcnNNaXNjTG93ZXIgKyAnKycgKyByc09wdENvbnRyTG93ZXIsXG4gIHJzVXBwZXIgKyAnKycgKyByc09wdENvbnRyVXBwZXIsXG4gIHJzT3JkVXBwZXIsXG4gIHJzT3JkTG93ZXIsXG4gIHJzRGlnaXRzLFxuICByc0Vtb2ppXG5dLmpvaW4oJ3wnKSwgJ2cnKTtcblxuLyoqXG4gKiBTcGxpdHMgYSBVbmljb2RlIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAqL1xuZnVuY3Rpb24gdW5pY29kZVdvcmRzKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlVW5pY29kZVdvcmQpIHx8IFtdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHVuaWNvZGVXb3JkcztcbiIsInZhciBjYXBpdGFsaXplID0gcmVxdWlyZSgnLi9jYXBpdGFsaXplJyksXG4gICAgY3JlYXRlQ29tcG91bmRlciA9IHJlcXVpcmUoJy4vX2NyZWF0ZUNvbXBvdW5kZXInKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBbY2FtZWwgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2FtZWxDYXNlKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgU3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY2FtZWwgY2FzZWQgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmNhbWVsQ2FzZSgnRm9vIEJhcicpO1xuICogLy8gPT4gJ2Zvb0JhcidcbiAqXG4gKiBfLmNhbWVsQ2FzZSgnLS1mb28tYmFyLS0nKTtcbiAqIC8vID0+ICdmb29CYXInXG4gKlxuICogXy5jYW1lbENhc2UoJ19fRk9PX0JBUl9fJyk7XG4gKiAvLyA9PiAnZm9vQmFyJ1xuICovXG52YXIgY2FtZWxDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gIHdvcmQgPSB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyBjYXBpdGFsaXplKHdvcmQpIDogd29yZCk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBjYW1lbENhc2U7XG4iLCJ2YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuL3RvU3RyaW5nJyksXG4gICAgdXBwZXJGaXJzdCA9IHJlcXVpcmUoJy4vdXBwZXJGaXJzdCcpO1xuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AgdG8gdXBwZXIgY2FzZSBhbmQgdGhlIHJlbWFpbmluZ1xuICogdG8gbG93ZXIgY2FzZS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgU3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjYXBpdGFsaXplLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY2FwaXRhbGl6ZWQgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmNhcGl0YWxpemUoJ0ZSRUQnKTtcbiAqIC8vID0+ICdGcmVkJ1xuICovXG5mdW5jdGlvbiBjYXBpdGFsaXplKHN0cmluZykge1xuICByZXR1cm4gdXBwZXJGaXJzdCh0b1N0cmluZyhzdHJpbmcpLnRvTG93ZXJDYXNlKCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhcGl0YWxpemU7XG4iLCJ2YXIgY3JlYXRlQ2FzZUZpcnN0ID0gcmVxdWlyZSgnLi9fY3JlYXRlQ2FzZUZpcnN0Jyk7XG5cbi8qKlxuICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byB1cHBlciBjYXNlLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBTdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnVwcGVyRmlyc3QoJ2ZyZWQnKTtcbiAqIC8vID0+ICdGcmVkJ1xuICpcbiAqIF8udXBwZXJGaXJzdCgnRlJFRCcpO1xuICogLy8gPT4gJ0ZSRUQnXG4gKi9cbnZhciB1cHBlckZpcnN0ID0gY3JlYXRlQ2FzZUZpcnN0KCd0b1VwcGVyQ2FzZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHVwcGVyRmlyc3Q7XG4iLCJ2YXIgY2FzdFNsaWNlID0gcmVxdWlyZSgnLi9fY2FzdFNsaWNlJyksXG4gICAgaGFzVW5pY29kZSA9IHJlcXVpcmUoJy4vX2hhc1VuaWNvZGUnKSxcbiAgICBzdHJpbmdUb0FycmF5ID0gcmVxdWlyZSgnLi9fc3RyaW5nVG9BcnJheScpLFxuICAgIHRvU3RyaW5nID0gcmVxdWlyZSgnLi90b1N0cmluZycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmxvd2VyRmlyc3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgYFN0cmluZ2AgY2FzZSBtZXRob2QgdG8gdXNlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FzZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FzZUZpcnN0KG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgICB2YXIgc3RyU3ltYm9scyA9IGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgPyBzdHJpbmdUb0FycmF5KHN0cmluZylcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgdmFyIGNociA9IHN0clN5bWJvbHNcbiAgICAgID8gc3RyU3ltYm9sc1swXVxuICAgICAgOiBzdHJpbmcuY2hhckF0KDApO1xuXG4gICAgdmFyIHRyYWlsaW5nID0gc3RyU3ltYm9sc1xuICAgICAgPyBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMSkuam9pbignJylcbiAgICAgIDogc3RyaW5nLnNsaWNlKDEpO1xuXG4gICAgcmV0dXJuIGNoclttZXRob2ROYW1lXSgpICsgdHJhaWxpbmc7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQ2FzZUZpcnN0O1xuIiwidmFyIGJhc2VTbGljZSA9IHJlcXVpcmUoJy4vX2Jhc2VTbGljZScpO1xuXG4vKipcbiAqIENhc3RzIGBhcnJheWAgdG8gYSBzbGljZSBpZiBpdCdzIG5lZWRlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHNsaWNlLlxuICovXG5mdW5jdGlvbiBjYXN0U2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQ7XG4gIHJldHVybiAoIXN0YXJ0ICYmIGVuZCA+PSBsZW5ndGgpID8gYXJyYXkgOiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhc3RTbGljZTtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2xpY2VgIHdpdGhvdXQgYW4gaXRlcmF0ZWUgY2FsbCBndWFyZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNsaWNlLlxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAtc3RhcnQgPiBsZW5ndGggPyAwIDogKGxlbmd0aCArIHN0YXJ0KTtcbiAgfVxuICBlbmQgPSBlbmQgPiBsZW5ndGggPyBsZW5ndGggOiBlbmQ7XG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlbmd0aDtcbiAgfVxuICBsZW5ndGggPSBzdGFydCA+IGVuZCA/IDAgOiAoKGVuZCAtIHN0YXJ0KSA+Pj4gMCk7XG4gIHN0YXJ0ID4+Pj0gMDtcblxuICB2YXIgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICByZXN1bHRbaW5kZXhdID0gYXJyYXlbaW5kZXggKyBzdGFydF07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlU2xpY2U7XG4iLCJ2YXIgYmFzZUFzc2lnblZhbHVlID0gcmVxdWlyZSgnLi9fYmFzZUFzc2lnblZhbHVlJyksXG4gICAgYmFzZUZvck93biA9IHJlcXVpcmUoJy4vX2Jhc2VGb3JPd24nKSxcbiAgICBiYXNlSXRlcmF0ZWUgPSByZXF1aXJlKCcuL19iYXNlSXRlcmF0ZWUnKTtcblxuLyoqXG4gKiBUaGUgb3Bwb3NpdGUgb2YgYF8ubWFwVmFsdWVzYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBvYmplY3Qgd2l0aCB0aGVcbiAqIHNhbWUgdmFsdWVzIGFzIGBvYmplY3RgIGFuZCBrZXlzIGdlbmVyYXRlZCBieSBydW5uaW5nIGVhY2ggb3duIGVudW1lcmFibGVcbiAqIHN0cmluZyBrZXllZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjguMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBvYmplY3QuXG4gKiBAc2VlIF8ubWFwVmFsdWVzXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8ubWFwS2V5cyh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAqICAgcmV0dXJuIGtleSArIHZhbHVlO1xuICogfSk7XG4gKiAvLyA9PiB7ICdhMSc6IDEsICdiMic6IDIgfVxuICovXG5mdW5jdGlvbiBtYXBLZXlzKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBpdGVyYXRlZSA9IGJhc2VJdGVyYXRlZShpdGVyYXRlZSwgMyk7XG5cbiAgYmFzZUZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGl0ZXJhdGVlKHZhbHVlLCBrZXksIG9iamVjdCksIHZhbHVlKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwS2V5cztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHNvcnRGaWVsZHM7XG5cbnZhciBfaGFzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibG9kYXNoL2hhc1wiKSk7XG5cbnZhciBfdG9wb3NvcnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ0b3Bvc29ydFwiKSk7XG5cbnZhciBfcHJvcGVydHlFeHByID0gcmVxdWlyZShcInByb3BlcnR5LWV4cHJcIik7XG5cbnZhciBfUmVmZXJlbmNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vUmVmZXJlbmNlXCIpKTtcblxudmFyIF9pc1NjaGVtYSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaXNTY2hlbWFcIikpO1xuXG5mdW5jdGlvbiBzb3J0RmllbGRzKGZpZWxkcywgZXhjbHVkZXMpIHtcbiAgaWYgKGV4Y2x1ZGVzID09PSB2b2lkIDApIHtcbiAgICBleGNsdWRlcyA9IFtdO1xuICB9XG5cbiAgdmFyIGVkZ2VzID0gW10sXG4gICAgICBub2RlcyA9IFtdO1xuXG4gIGZ1bmN0aW9uIGFkZE5vZGUoZGVwUGF0aCwga2V5KSB7XG4gICAgdmFyIG5vZGUgPSAoMCwgX3Byb3BlcnR5RXhwci5zcGxpdCkoZGVwUGF0aClbMF07XG4gICAgaWYgKCF+bm9kZXMuaW5kZXhPZihub2RlKSkgbm9kZXMucHVzaChub2RlKTtcbiAgICBpZiAoIX5leGNsdWRlcy5pbmRleE9mKGtleSArIFwiLVwiICsgbm9kZSkpIGVkZ2VzLnB1c2goW2tleSwgbm9kZV0pO1xuICB9XG5cbiAgZm9yICh2YXIga2V5IGluIGZpZWxkcykge1xuICAgIGlmICgoMCwgX2hhcy5kZWZhdWx0KShmaWVsZHMsIGtleSkpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGZpZWxkc1trZXldO1xuICAgICAgaWYgKCF+bm9kZXMuaW5kZXhPZihrZXkpKSBub2Rlcy5wdXNoKGtleSk7XG4gICAgICBpZiAoX1JlZmVyZW5jZS5kZWZhdWx0LmlzUmVmKHZhbHVlKSAmJiB2YWx1ZS5pc1NpYmxpbmcpIGFkZE5vZGUodmFsdWUucGF0aCwga2V5KTtlbHNlIGlmICgoMCwgX2lzU2NoZW1hLmRlZmF1bHQpKHZhbHVlKSAmJiB2YWx1ZS5fZGVwcykgdmFsdWUuX2RlcHMuZm9yRWFjaChmdW5jdGlvbiAocGF0aCkge1xuICAgICAgICByZXR1cm4gYWRkTm9kZShwYXRoLCBrZXkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF90b3Bvc29ydC5kZWZhdWx0LmFycmF5KG5vZGVzLCBlZGdlcykucmV2ZXJzZSgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlxuLyoqXG4gKiBUb3BvbG9naWNhbCBzb3J0aW5nIGZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtBcnJheX0gZWRnZXNcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGVkZ2VzKSB7XG4gIHJldHVybiB0b3Bvc29ydCh1bmlxdWVOb2RlcyhlZGdlcyksIGVkZ2VzKVxufVxuXG5tb2R1bGUuZXhwb3J0cy5hcnJheSA9IHRvcG9zb3J0XG5cbmZ1bmN0aW9uIHRvcG9zb3J0KG5vZGVzLCBlZGdlcykge1xuICB2YXIgY3Vyc29yID0gbm9kZXMubGVuZ3RoXG4gICAgLCBzb3J0ZWQgPSBuZXcgQXJyYXkoY3Vyc29yKVxuICAgICwgdmlzaXRlZCA9IHt9XG4gICAgLCBpID0gY3Vyc29yXG4gICAgLy8gQmV0dGVyIGRhdGEgc3RydWN0dXJlcyBtYWtlIGFsZ29yaXRobSBtdWNoIGZhc3Rlci5cbiAgICAsIG91dGdvaW5nRWRnZXMgPSBtYWtlT3V0Z29pbmdFZGdlcyhlZGdlcylcbiAgICAsIG5vZGVzSGFzaCA9IG1ha2VOb2Rlc0hhc2gobm9kZXMpXG5cbiAgLy8gY2hlY2sgZm9yIHVua25vd24gbm9kZXNcbiAgZWRnZXMuZm9yRWFjaChmdW5jdGlvbihlZGdlKSB7XG4gICAgaWYgKCFub2Rlc0hhc2guaGFzKGVkZ2VbMF0pIHx8ICFub2Rlc0hhc2guaGFzKGVkZ2VbMV0pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gbm9kZS4gVGhlcmUgaXMgYW4gdW5rbm93biBub2RlIGluIHRoZSBzdXBwbGllZCBlZGdlcy4nKVxuICAgIH1cbiAgfSlcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgaWYgKCF2aXNpdGVkW2ldKSB2aXNpdChub2Rlc1tpXSwgaSwgbmV3IFNldCgpKVxuICB9XG5cbiAgcmV0dXJuIHNvcnRlZFxuXG4gIGZ1bmN0aW9uIHZpc2l0KG5vZGUsIGksIHByZWRlY2Vzc29ycykge1xuICAgIGlmKHByZWRlY2Vzc29ycy5oYXMobm9kZSkpIHtcbiAgICAgIHZhciBub2RlUmVwXG4gICAgICB0cnkge1xuICAgICAgICBub2RlUmVwID0gXCIsIG5vZGUgd2FzOlwiICsgSlNPTi5zdHJpbmdpZnkobm9kZSlcbiAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICBub2RlUmVwID0gXCJcIlxuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDeWNsaWMgZGVwZW5kZW5jeScgKyBub2RlUmVwKVxuICAgIH1cblxuICAgIGlmICghbm9kZXNIYXNoLmhhcyhub2RlKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGb3VuZCB1bmtub3duIG5vZGUuIE1ha2Ugc3VyZSB0byBwcm92aWRlZCBhbGwgaW52b2x2ZWQgbm9kZXMuIFVua25vd24gbm9kZTogJytKU09OLnN0cmluZ2lmeShub2RlKSlcbiAgICB9XG5cbiAgICBpZiAodmlzaXRlZFtpXSkgcmV0dXJuO1xuICAgIHZpc2l0ZWRbaV0gPSB0cnVlXG5cbiAgICB2YXIgb3V0Z29pbmcgPSBvdXRnb2luZ0VkZ2VzLmdldChub2RlKSB8fCBuZXcgU2V0KClcbiAgICBvdXRnb2luZyA9IEFycmF5LmZyb20ob3V0Z29pbmcpXG5cbiAgICBpZiAoaSA9IG91dGdvaW5nLmxlbmd0aCkge1xuICAgICAgcHJlZGVjZXNzb3JzLmFkZChub2RlKVxuICAgICAgZG8ge1xuICAgICAgICB2YXIgY2hpbGQgPSBvdXRnb2luZ1stLWldXG4gICAgICAgIHZpc2l0KGNoaWxkLCBub2Rlc0hhc2guZ2V0KGNoaWxkKSwgcHJlZGVjZXNzb3JzKVxuICAgICAgfSB3aGlsZSAoaSlcbiAgICAgIHByZWRlY2Vzc29ycy5kZWxldGUobm9kZSlcbiAgICB9XG5cbiAgICBzb3J0ZWRbLS1jdXJzb3JdID0gbm9kZVxuICB9XG59XG5cbmZ1bmN0aW9uIHVuaXF1ZU5vZGVzKGFycil7XG4gIHZhciByZXMgPSBuZXcgU2V0KClcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFyci5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIHZhciBlZGdlID0gYXJyW2ldXG4gICAgcmVzLmFkZChlZGdlWzBdKVxuICAgIHJlcy5hZGQoZWRnZVsxXSlcbiAgfVxuICByZXR1cm4gQXJyYXkuZnJvbShyZXMpXG59XG5cbmZ1bmN0aW9uIG1ha2VPdXRnb2luZ0VkZ2VzKGFycil7XG4gIHZhciBlZGdlcyA9IG5ldyBNYXAoKVxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJyLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgdmFyIGVkZ2UgPSBhcnJbaV1cbiAgICBpZiAoIWVkZ2VzLmhhcyhlZGdlWzBdKSkgZWRnZXMuc2V0KGVkZ2VbMF0sIG5ldyBTZXQoKSlcbiAgICBpZiAoIWVkZ2VzLmhhcyhlZGdlWzFdKSkgZWRnZXMuc2V0KGVkZ2VbMV0sIG5ldyBTZXQoKSlcbiAgICBlZGdlcy5nZXQoZWRnZVswXSkuYWRkKGVkZ2VbMV0pXG4gIH1cbiAgcmV0dXJuIGVkZ2VzXG59XG5cbmZ1bmN0aW9uIG1ha2VOb2Rlc0hhc2goYXJyKXtcbiAgdmFyIHJlcyA9IG5ldyBNYXAoKVxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJyLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgcmVzLnNldChhcnJbaV0sIGkpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBzb3J0QnlLZXlPcmRlcjtcblxuZnVuY3Rpb24gZmluZEluZGV4KGFyciwgZXJyKSB7XG4gIHZhciBpZHggPSBJbmZpbml0eTtcbiAgYXJyLnNvbWUoZnVuY3Rpb24gKGtleSwgaWkpIHtcbiAgICBpZiAoZXJyLnBhdGguaW5kZXhPZihrZXkpICE9PSAtMSkge1xuICAgICAgaWR4ID0gaWk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gaWR4O1xufVxuXG5mdW5jdGlvbiBzb3J0QnlLZXlPcmRlcihmaWVsZHMpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhmaWVsZHMpO1xuICByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gZmluZEluZGV4KGtleXMsIGEpIC0gZmluZEluZGV4KGtleXMsIGIpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkXCIpO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90YWdnZWRUZW1wbGF0ZUxpdGVyYWxMb29zZVwiKSk7XG5cbnZhciBfaW5oZXJpdHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvaW5oZXJpdHNcIikpO1xuXG52YXIgX2lzQWJzZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2lzQWJzZW50XCIpKTtcblxudmFyIF9pc1NjaGVtYSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9pc1NjaGVtYVwiKSk7XG5cbnZhciBfbWFrZVBhdGggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvbWFrZVBhdGhcIikpO1xuXG52YXIgX3ByaW50VmFsdWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvcHJpbnRWYWx1ZVwiKSk7XG5cbnZhciBfbWl4ZWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL21peGVkXCIpKTtcblxudmFyIF9sb2NhbGUgPSByZXF1aXJlKFwiLi9sb2NhbGVcIik7XG5cbnZhciBfcnVuVmFsaWRhdGlvbnMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi91dGlsL3J1blZhbGlkYXRpb25zXCIpKTtcblxuZnVuY3Rpb24gX3RlbXBsYXRlT2JqZWN0KCkge1xuICB2YXIgZGF0YSA9ICgwLCBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsTG9vc2UyLmRlZmF1bHQpKFtcIlwiLCBcIltcIiwgXCJdXCJdKTtcblxuICBfdGVtcGxhdGVPYmplY3QgPSBmdW5jdGlvbiBfdGVtcGxhdGVPYmplY3QoKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbnZhciBfZGVmYXVsdCA9IEFycmF5U2NoZW1hO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5cbmZ1bmN0aW9uIEFycmF5U2NoZW1hKHR5cGUpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgQXJyYXlTY2hlbWEpKSByZXR1cm4gbmV3IEFycmF5U2NoZW1hKHR5cGUpO1xuXG4gIF9taXhlZC5kZWZhdWx0LmNhbGwodGhpcywge1xuICAgIHR5cGU6ICdhcnJheSdcbiAgfSk7IC8vIGB1bmRlZmluZWRgIHNwZWNpZmljYWxseSBtZWFucyB1bmluaXRpYWxpemVkLCBhcyBvcHBvc2VkIHRvXG4gIC8vIFwibm8gc3VidHlwZVwiXG5cblxuICB0aGlzLl9zdWJUeXBlID0gdW5kZWZpbmVkO1xuICB0aGlzLndpdGhNdXRhdGlvbihmdW5jdGlvbiAoKSB7XG4gICAgX3RoaXMudHJhbnNmb3JtKGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWVzID09PSAnc3RyaW5nJykgdHJ5IHtcbiAgICAgICAgdmFsdWVzID0gSlNPTi5wYXJzZSh2YWx1ZXMpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHZhbHVlcyA9IG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5pc1R5cGUodmFsdWVzKSA/IHZhbHVlcyA6IG51bGw7XG4gICAgfSk7XG5cbiAgICBpZiAodHlwZSkgX3RoaXMub2YodHlwZSk7XG4gIH0pO1xufVxuXG4oMCwgX2luaGVyaXRzLmRlZmF1bHQpKEFycmF5U2NoZW1hLCBfbWl4ZWQuZGVmYXVsdCwge1xuICBfdHlwZUNoZWNrOiBmdW5jdGlvbiBfdHlwZUNoZWNrKHYpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2KTtcbiAgfSxcbiAgX2Nhc3Q6IGZ1bmN0aW9uIF9jYXN0KF92YWx1ZSwgX29wdHMpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciB2YWx1ZSA9IF9taXhlZC5kZWZhdWx0LnByb3RvdHlwZS5fY2FzdC5jYWxsKHRoaXMsIF92YWx1ZSwgX29wdHMpOyAvL3Nob3VsZCBpZ25vcmUgbnVsbHMgaGVyZVxuXG5cbiAgICBpZiAoIXRoaXMuX3R5cGVDaGVjayh2YWx1ZSkgfHwgIXRoaXMuX3N1YlR5cGUpIHJldHVybiB2YWx1ZTtcbiAgICB2YXIgaXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgdmFyIGNhc3RBcnJheSA9IHZhbHVlLm1hcChmdW5jdGlvbiAodikge1xuICAgICAgdmFyIGNhc3RFbGVtZW50ID0gX3RoaXMyLl9zdWJUeXBlLmNhc3QodiwgX29wdHMpO1xuXG4gICAgICBpZiAoY2FzdEVsZW1lbnQgIT09IHYpIHtcbiAgICAgICAgaXNDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNhc3RFbGVtZW50O1xuICAgIH0pO1xuICAgIHJldHVybiBpc0NoYW5nZWQgPyBjYXN0QXJyYXkgOiB2YWx1ZTtcbiAgfSxcbiAgX3ZhbGlkYXRlOiBmdW5jdGlvbiBfdmFsaWRhdGUoX3ZhbHVlLCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgdmFyIGVycm9ycyA9IFtdO1xuICAgIHZhciBzeW5jID0gb3B0aW9ucy5zeW5jO1xuICAgIHZhciBwYXRoID0gb3B0aW9ucy5wYXRoO1xuICAgIHZhciBzdWJUeXBlID0gdGhpcy5fc3ViVHlwZTtcblxuICAgIHZhciBlbmRFYXJseSA9IHRoaXMuX29wdGlvbignYWJvcnRFYXJseScsIG9wdGlvbnMpO1xuXG4gICAgdmFyIHJlY3Vyc2l2ZSA9IHRoaXMuX29wdGlvbigncmVjdXJzaXZlJywgb3B0aW9ucyk7XG5cbiAgICB2YXIgb3JpZ2luYWxWYWx1ZSA9IG9wdGlvbnMub3JpZ2luYWxWYWx1ZSAhPSBudWxsID8gb3B0aW9ucy5vcmlnaW5hbFZhbHVlIDogX3ZhbHVlO1xuICAgIHJldHVybiBfbWl4ZWQuZGVmYXVsdC5wcm90b3R5cGUuX3ZhbGlkYXRlLmNhbGwodGhpcywgX3ZhbHVlLCBvcHRpb25zKS5jYXRjaCgoMCwgX3J1blZhbGlkYXRpb25zLnByb3BhZ2F0ZUVycm9ycykoZW5kRWFybHksIGVycm9ycykpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAoIXJlY3Vyc2l2ZSB8fCAhc3ViVHlwZSB8fCAhX3RoaXMzLl90eXBlQ2hlY2sodmFsdWUpKSB7XG4gICAgICAgIGlmIChlcnJvcnMubGVuZ3RoKSB0aHJvdyBlcnJvcnNbMF07XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgb3JpZ2luYWxWYWx1ZSA9IG9yaWdpbmFsVmFsdWUgfHwgdmFsdWU7XG4gICAgICB2YXIgdmFsaWRhdGlvbnMgPSB2YWx1ZS5tYXAoZnVuY3Rpb24gKGl0ZW0sIGlkeCkge1xuICAgICAgICB2YXIgcGF0aCA9ICgwLCBfbWFrZVBhdGguZGVmYXVsdCkoX3RlbXBsYXRlT2JqZWN0KCksIG9wdGlvbnMucGF0aCwgaWR4KTsgLy8gb2JqZWN0Ll92YWxpZGF0ZSBub3RlIGZvciBpc1N0cmljdCBleHBsYW5hdGlvblxuXG4gICAgICAgIHZhciBpbm5lck9wdGlvbnMgPSAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBvcHRpb25zLCB7XG4gICAgICAgICAgcGF0aDogcGF0aCxcbiAgICAgICAgICBzdHJpY3Q6IHRydWUsXG4gICAgICAgICAgcGFyZW50OiB2YWx1ZSxcbiAgICAgICAgICBvcmlnaW5hbFZhbHVlOiBvcmlnaW5hbFZhbHVlW2lkeF1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChzdWJUeXBlLnZhbGlkYXRlKSByZXR1cm4gc3ViVHlwZS52YWxpZGF0ZShpdGVtLCBpbm5lck9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuICgwLCBfcnVuVmFsaWRhdGlvbnMuZGVmYXVsdCkoe1xuICAgICAgICBzeW5jOiBzeW5jLFxuICAgICAgICBwYXRoOiBwYXRoLFxuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIGVycm9yczogZXJyb3JzLFxuICAgICAgICBlbmRFYXJseTogZW5kRWFybHksXG4gICAgICAgIHZhbGlkYXRpb25zOiB2YWxpZGF0aW9uc1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0sXG4gIF9pc1ByZXNlbnQ6IGZ1bmN0aW9uIF9pc1ByZXNlbnQodmFsdWUpIHtcbiAgICByZXR1cm4gX21peGVkLmRlZmF1bHQucHJvdG90eXBlLl9jYXN0LmNhbGwodGhpcywgdmFsdWUpICYmIHZhbHVlLmxlbmd0aCA+IDA7XG4gIH0sXG4gIG9mOiBmdW5jdGlvbiBvZihzY2hlbWEpIHtcbiAgICB2YXIgbmV4dCA9IHRoaXMuY2xvbmUoKTtcbiAgICBpZiAoc2NoZW1hICE9PSBmYWxzZSAmJiAhKDAsIF9pc1NjaGVtYS5kZWZhdWx0KShzY2hlbWEpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdgYXJyYXkub2YoKWAgc3ViLXNjaGVtYSBtdXN0IGJlIGEgdmFsaWQgeXVwIHNjaGVtYSwgb3IgYGZhbHNlYCB0byBuZWdhdGUgYSBjdXJyZW50IHN1Yi1zY2hlbWEuICcgKyAnbm90OiAnICsgKDAsIF9wcmludFZhbHVlLmRlZmF1bHQpKHNjaGVtYSkpO1xuICAgIG5leHQuX3N1YlR5cGUgPSBzY2hlbWE7XG4gICAgcmV0dXJuIG5leHQ7XG4gIH0sXG4gIG1pbjogZnVuY3Rpb24gbWluKF9taW4sIG1lc3NhZ2UpIHtcbiAgICBtZXNzYWdlID0gbWVzc2FnZSB8fCBfbG9jYWxlLmFycmF5Lm1pbjtcbiAgICByZXR1cm4gdGhpcy50ZXN0KHtcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBuYW1lOiAnbWluJyxcbiAgICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBtaW46IF9taW5cbiAgICAgIH0sXG4gICAgICB0ZXN0OiBmdW5jdGlvbiB0ZXN0KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2lzQWJzZW50LmRlZmF1bHQpKHZhbHVlKSB8fCB2YWx1ZS5sZW5ndGggPj0gdGhpcy5yZXNvbHZlKF9taW4pO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuICBtYXg6IGZ1bmN0aW9uIG1heChfbWF4LCBtZXNzYWdlKSB7XG4gICAgbWVzc2FnZSA9IG1lc3NhZ2UgfHwgX2xvY2FsZS5hcnJheS5tYXg7XG4gICAgcmV0dXJuIHRoaXMudGVzdCh7XG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgbmFtZTogJ21heCcsXG4gICAgICBleGNsdXNpdmU6IHRydWUsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgbWF4OiBfbWF4XG4gICAgICB9LFxuICAgICAgdGVzdDogZnVuY3Rpb24gdGVzdCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gKDAsIF9pc0Fic2VudC5kZWZhdWx0KSh2YWx1ZSkgfHwgdmFsdWUubGVuZ3RoIDw9IHRoaXMucmVzb2x2ZShfbWF4KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgZW5zdXJlOiBmdW5jdGlvbiBlbnN1cmUoKSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICByZXR1cm4gdGhpcy5kZWZhdWx0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9KS50cmFuc2Zvcm0oZnVuY3Rpb24gKHZhbCkge1xuICAgICAgaWYgKF90aGlzNC5pc1R5cGUodmFsKSkgcmV0dXJuIHZhbDtcbiAgICAgIHJldHVybiB2YWwgPT09IG51bGwgPyBbXSA6IFtdLmNvbmNhdCh2YWwpO1xuICAgIH0pO1xuICB9LFxuICBjb21wYWN0OiBmdW5jdGlvbiBjb21wYWN0KHJlamVjdG9yKSB7XG4gICAgdmFyIHJlamVjdCA9ICFyZWplY3RvciA/IGZ1bmN0aW9uICh2KSB7XG4gICAgICByZXR1cm4gISF2O1xuICAgIH0gOiBmdW5jdGlvbiAodiwgaSwgYSkge1xuICAgICAgcmV0dXJuICFyZWplY3Rvcih2LCBpLCBhKTtcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybShmdW5jdGlvbiAodmFsdWVzKSB7XG4gICAgICByZXR1cm4gdmFsdWVzICE9IG51bGwgPyB2YWx1ZXMuZmlsdGVyKHJlamVjdCkgOiB2YWx1ZXM7XG4gICAgfSk7XG4gIH0sXG4gIGRlc2NyaWJlOiBmdW5jdGlvbiBkZXNjcmliZSgpIHtcbiAgICB2YXIgYmFzZSA9IF9taXhlZC5kZWZhdWx0LnByb3RvdHlwZS5kZXNjcmliZS5jYWxsKHRoaXMpO1xuXG4gICAgaWYgKHRoaXMuX3N1YlR5cGUpIGJhc2UuaW5uZXJUeXBlID0gdGhpcy5fc3ViVHlwZS5kZXNjcmliZSgpO1xuICAgIHJldHVybiBiYXNlO1xuICB9XG59KTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2lzU2NoZW1hID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2lzU2NoZW1hXCIpKTtcblxudmFyIExhenkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBMYXp5KG1hcEZuKSB7XG4gICAgdGhpcy5fcmVzb2x2ZSA9IGZ1bmN0aW9uICh2YWx1ZSwgb3B0aW9ucykge1xuICAgICAgdmFyIHNjaGVtYSA9IG1hcEZuKHZhbHVlLCBvcHRpb25zKTtcbiAgICAgIGlmICghKDAsIF9pc1NjaGVtYS5kZWZhdWx0KShzY2hlbWEpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdsYXp5KCkgZnVuY3Rpb25zIG11c3QgcmV0dXJuIGEgdmFsaWQgc2NoZW1hJyk7XG4gICAgICByZXR1cm4gc2NoZW1hLnJlc29sdmUob3B0aW9ucyk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBMYXp5LnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVzb2x2ZSA9IGZ1bmN0aW9uIHJlc29sdmUob3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLl9yZXNvbHZlKG9wdGlvbnMudmFsdWUsIG9wdGlvbnMpO1xuICB9O1xuXG4gIF9wcm90by5jYXN0ID0gZnVuY3Rpb24gY2FzdCh2YWx1ZSwgb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLl9yZXNvbHZlKHZhbHVlLCBvcHRpb25zKS5jYXN0KHZhbHVlLCBvcHRpb25zKTtcbiAgfTtcblxuICBfcHJvdG8udmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZSh2YWx1ZSwgb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLl9yZXNvbHZlKHZhbHVlLCBvcHRpb25zKS52YWxpZGF0ZSh2YWx1ZSwgb3B0aW9ucyk7XG4gIH07XG5cbiAgX3Byb3RvLnZhbGlkYXRlU3luYyA9IGZ1bmN0aW9uIHZhbGlkYXRlU3luYyh2YWx1ZSwgb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLl9yZXNvbHZlKHZhbHVlLCBvcHRpb25zKS52YWxpZGF0ZVN5bmModmFsdWUsIG9wdGlvbnMpO1xuICB9O1xuXG4gIF9wcm90by52YWxpZGF0ZUF0ID0gZnVuY3Rpb24gdmFsaWRhdGVBdChwYXRoLCB2YWx1ZSwgb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLl9yZXNvbHZlKHZhbHVlLCBvcHRpb25zKS52YWxpZGF0ZUF0KHBhdGgsIHZhbHVlLCBvcHRpb25zKTtcbiAgfTtcblxuICBfcHJvdG8udmFsaWRhdGVTeW5jQXQgPSBmdW5jdGlvbiB2YWxpZGF0ZVN5bmNBdChwYXRoLCB2YWx1ZSwgb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLl9yZXNvbHZlKHZhbHVlLCBvcHRpb25zKS52YWxpZGF0ZVN5bmNBdChwYXRoLCB2YWx1ZSwgb3B0aW9ucyk7XG4gIH07XG5cbiAgcmV0dXJuIExhenk7XG59KCk7XG5cbkxhenkucHJvdG90eXBlLl9faXNZdXBTY2hlbWFfXyA9IHRydWU7XG52YXIgX2RlZmF1bHQgPSBMYXp5O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHNldExvY2FsZTtcblxudmFyIF9sb2NhbGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xvY2FsZVwiKSk7XG5cbmZ1bmN0aW9uIHNldExvY2FsZShjdXN0b20pIHtcbiAgT2JqZWN0LmtleXMoY3VzdG9tKS5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgT2JqZWN0LmtleXMoY3VzdG9tW3R5cGVdKS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgICAgIF9sb2NhbGUuZGVmYXVsdFt0eXBlXVttZXRob2RdID0gY3VzdG9tW3R5cGVdW21ldGhvZF07XG4gICAgfSk7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=